/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_System_Grpc_Gnmi represents the /nokia-conf/configure/system/grpc/gnmi YANG schema element.
type NokiaConf_Configure_System_Grpc_Gnmi struct {
	AdminState     E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	AutoConfigSave *bool                       `path:"auto-config-save" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Grpc_Gnmi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Grpc_Gnmi) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Grpc_Gnmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Grpc_Gnmi) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAutoConfigSave retrieves the value of the leaf AutoConfigSave from the NokiaConf_Configure_System_Grpc_Gnmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoConfigSave is set, it can
// safely use t.GetAutoConfigSave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoConfigSave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Grpc_Gnmi) GetAutoConfigSave() bool {
	if t == nil || t.AutoConfigSave == nil {
		return false
	}
	return *t.AutoConfigSave
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Grpc_Gnmi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Grpc_Gnmi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AutoConfigSave == nil {
		var v bool = false
		t.AutoConfigSave = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_Gnmi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Grpc_Gnmi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_Gnmi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Grpc_Gnmi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Grpc_Gnmi.
func (*NokiaConf_Configure_System_Grpc_Gnmi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Grpc_Gnoi represents the /nokia-conf/configure/system/grpc/gnoi YANG schema element.
type NokiaConf_Configure_System_Grpc_Gnoi struct {
	CertMgmt *NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt `path:"cert-mgmt" module:"nokia-conf"`
	File     *NokiaConf_Configure_System_Grpc_Gnoi_File     `path:"file" module:"nokia-conf"`
	System   *NokiaConf_Configure_System_Grpc_Gnoi_System   `path:"system" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Grpc_Gnoi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Grpc_Gnoi) IsYANGGoStruct() {}

// GetOrCreateCertMgmt retrieves the value of the CertMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Grpc_Gnoi) GetOrCreateCertMgmt() *NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt {
	if t.CertMgmt != nil {
		return t.CertMgmt
	}
	t.CertMgmt = &NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt{}
	return t.CertMgmt
}

// GetOrCreateFile retrieves the value of the File field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Grpc_Gnoi) GetOrCreateFile() *NokiaConf_Configure_System_Grpc_Gnoi_File {
	if t.File != nil {
		return t.File
	}
	t.File = &NokiaConf_Configure_System_Grpc_Gnoi_File{}
	return t.File
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Grpc_Gnoi) GetOrCreateSystem() *NokiaConf_Configure_System_Grpc_Gnoi_System {
	if t.System != nil {
		return t.System
	}
	t.System = &NokiaConf_Configure_System_Grpc_Gnoi_System{}
	return t.System
}

// GetCertMgmt returns the value of the CertMgmt struct pointer
// from NokiaConf_Configure_System_Grpc_Gnoi. If the receiver or the field CertMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Grpc_Gnoi) GetCertMgmt() *NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt {
	if t != nil && t.CertMgmt != nil {
		return t.CertMgmt
	}
	return nil
}

// GetFile returns the value of the File struct pointer
// from NokiaConf_Configure_System_Grpc_Gnoi. If the receiver or the field File is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Grpc_Gnoi) GetFile() *NokiaConf_Configure_System_Grpc_Gnoi_File {
	if t != nil && t.File != nil {
		return t.File
	}
	return nil
}

// GetSystem returns the value of the System struct pointer
// from NokiaConf_Configure_System_Grpc_Gnoi. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Grpc_Gnoi) GetSystem() *NokiaConf_Configure_System_Grpc_Gnoi_System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Grpc_Gnoi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Grpc_Gnoi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CertMgmt.PopulateDefaults()
	t.File.PopulateDefaults()
	t.System.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_Gnoi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Grpc_Gnoi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_Gnoi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Grpc_Gnoi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Grpc_Gnoi.
func (*NokiaConf_Configure_System_Grpc_Gnoi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt represents the /nokia-conf/configure/system/grpc/gnoi/cert-mgmt YANG schema element.
type NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt.
func (*NokiaConf_Configure_System_Grpc_Gnoi_CertMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Grpc_Gnoi_File represents the /nokia-conf/configure/system/grpc/gnoi/file YANG schema element.
type NokiaConf_Configure_System_Grpc_Gnoi_File struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Grpc_Gnoi_File implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Grpc_Gnoi_File) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Grpc_Gnoi_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_File) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Grpc_Gnoi_File
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_File) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_File) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Grpc_Gnoi_File"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_File) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_File) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Grpc_Gnoi_File.
func (*NokiaConf_Configure_System_Grpc_Gnoi_File) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Grpc_Gnoi_System represents the /nokia-conf/configure/system/grpc/gnoi/system YANG schema element.
type NokiaConf_Configure_System_Grpc_Gnoi_System struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Grpc_Gnoi_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Grpc_Gnoi_System) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Grpc_Gnoi_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_System) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Grpc_Gnoi_System
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_System) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_System) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Grpc_Gnoi_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_System) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Grpc_Gnoi_System) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Grpc_Gnoi_System.
func (*NokiaConf_Configure_System_Grpc_Gnoi_System) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Grpc_MdCli represents the /nokia-conf/configure/system/grpc/md-cli YANG schema element.
type NokiaConf_Configure_System_Grpc_MdCli struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Grpc_MdCli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Grpc_MdCli) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Grpc_MdCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Grpc_MdCli) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Grpc_MdCli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Grpc_MdCli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_MdCli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Grpc_MdCli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_MdCli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Grpc_MdCli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Grpc_MdCli.
func (*NokiaConf_Configure_System_Grpc_MdCli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Grpc_RibApi represents the /nokia-conf/configure/system/grpc/rib-api YANG schema element.
type NokiaConf_Configure_System_Grpc_RibApi struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	PurgeTimeout *uint32                     `path:"purge-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Grpc_RibApi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Grpc_RibApi) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Grpc_RibApi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Grpc_RibApi) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetPurgeTimeout retrieves the value of the leaf PurgeTimeout from the NokiaConf_Configure_System_Grpc_RibApi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PurgeTimeout is set, it can
// safely use t.GetPurgeTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PurgeTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Grpc_RibApi) GetPurgeTimeout() uint32 {
	if t == nil || t.PurgeTimeout == nil {
		return 0
	}
	return *t.PurgeTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Grpc_RibApi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Grpc_RibApi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_RibApi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Grpc_RibApi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_RibApi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Grpc_RibApi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Grpc_RibApi.
func (*NokiaConf_Configure_System_Grpc_RibApi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Grpc_TcpKeepalive represents the /nokia-conf/configure/system/grpc/tcp-keepalive YANG schema element.
type NokiaConf_Configure_System_Grpc_TcpKeepalive struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	IdleTime   *uint32                     `path:"idle-time" module:"nokia-conf"`
	Interval   *uint32                     `path:"interval" module:"nokia-conf"`
	Retries    *uint32                     `path:"retries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Grpc_TcpKeepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Grpc_TcpKeepalive) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Grpc_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Grpc_TcpKeepalive) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIdleTime retrieves the value of the leaf IdleTime from the NokiaConf_Configure_System_Grpc_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTime is set, it can
// safely use t.GetIdleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Grpc_TcpKeepalive) GetIdleTime() uint32 {
	if t == nil || t.IdleTime == nil {
		return 600
	}
	return *t.IdleTime
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_System_Grpc_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Grpc_TcpKeepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 15
	}
	return *t.Interval
}

// GetRetries retrieves the value of the leaf Retries from the NokiaConf_Configure_System_Grpc_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retries is set, it can
// safely use t.GetRetries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Grpc_TcpKeepalive) GetRetries() uint32 {
	if t == nil || t.Retries == nil {
		return 4
	}
	return *t.Retries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Grpc_TcpKeepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Grpc_TcpKeepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IdleTime == nil {
		var v uint32 = 600
		t.IdleTime = &v
	}
	if t.Interval == nil {
		var v uint32 = 15
		t.Interval = &v
	}
	if t.Retries == nil {
		var v uint32 = 4
		t.Retries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_TcpKeepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Grpc_TcpKeepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Grpc_TcpKeepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Grpc_TcpKeepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Grpc_TcpKeepalive.
func (*NokiaConf_Configure_System_Grpc_TcpKeepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Ip represents the /nokia-conf/configure/system/ip YANG schema element.
type NokiaConf_Configure_System_Ip struct {
	AllowCpuFragmentation     *bool                                  `path:"allow-cpu-fragmentation" module:"nokia-conf"`
	AllowIcmpRedirect         *bool                                  `path:"allow-icmp-redirect" module:"nokia-conf"`
	AllowQinqNetworkInterface *bool                                  `path:"allow-qinq-network-interface" module:"nokia-conf"`
	ApplyGroups               []string                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                               `path:"apply-groups-exclude" module:"nokia-conf"`
	EnforceUniqueIfIndex      *bool                                  `path:"enforce-unique-if-index" module:"nokia-conf"`
	Forward_6In4              *bool                                  `path:"forward-6in4" module:"nokia-conf"`
	ForwardIpOverGre          *bool                                  `path:"forward-ip-over-gre" module:"nokia-conf"`
	Ipv6Eh                    E_NokiaConf_Configure_System_Ip_Ipv6Eh `path:"ipv6-eh" module:"nokia-conf"`
	Mpls                      *NokiaConf_Configure_System_Ip_Mpls    `path:"mpls" module:"nokia-conf"`
	MplsTunnelMode            E_NokiaTypesSros_MplsTunnelMode        `path:"mpls-tunnel-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Ip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Ip) IsYANGGoStruct() {}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Ip) GetOrCreateMpls() *NokiaConf_Configure_System_Ip_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &NokiaConf_Configure_System_Ip_Mpls{}
	return t.Mpls
}

// GetMpls returns the value of the Mpls struct pointer
// from NokiaConf_Configure_System_Ip. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Ip) GetMpls() *NokiaConf_Configure_System_Ip_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetAllowCpuFragmentation retrieves the value of the leaf AllowCpuFragmentation from the NokiaConf_Configure_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowCpuFragmentation is set, it can
// safely use t.GetAllowCpuFragmentation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowCpuFragmentation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ip) GetAllowCpuFragmentation() bool {
	if t == nil || t.AllowCpuFragmentation == nil {
		return false
	}
	return *t.AllowCpuFragmentation
}

// GetAllowIcmpRedirect retrieves the value of the leaf AllowIcmpRedirect from the NokiaConf_Configure_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIcmpRedirect is set, it can
// safely use t.GetAllowIcmpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIcmpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ip) GetAllowIcmpRedirect() bool {
	if t == nil || t.AllowIcmpRedirect == nil {
		return false
	}
	return *t.AllowIcmpRedirect
}

// GetAllowQinqNetworkInterface retrieves the value of the leaf AllowQinqNetworkInterface from the NokiaConf_Configure_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowQinqNetworkInterface is set, it can
// safely use t.GetAllowQinqNetworkInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowQinqNetworkInterface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ip) GetAllowQinqNetworkInterface() bool {
	if t == nil || t.AllowQinqNetworkInterface == nil {
		return false
	}
	return *t.AllowQinqNetworkInterface
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ip) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ip) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnforceUniqueIfIndex retrieves the value of the leaf EnforceUniqueIfIndex from the NokiaConf_Configure_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceUniqueIfIndex is set, it can
// safely use t.GetEnforceUniqueIfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceUniqueIfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ip) GetEnforceUniqueIfIndex() bool {
	if t == nil || t.EnforceUniqueIfIndex == nil {
		return false
	}
	return *t.EnforceUniqueIfIndex
}

// GetForward_6In4 retrieves the value of the leaf Forward_6In4 from the NokiaConf_Configure_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forward_6In4 is set, it can
// safely use t.GetForward_6In4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forward_6In4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ip) GetForward_6In4() bool {
	if t == nil || t.Forward_6In4 == nil {
		return false
	}
	return *t.Forward_6In4
}

// GetForwardIpOverGre retrieves the value of the leaf ForwardIpOverGre from the NokiaConf_Configure_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardIpOverGre is set, it can
// safely use t.GetForwardIpOverGre() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardIpOverGre == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ip) GetForwardIpOverGre() bool {
	if t == nil || t.ForwardIpOverGre == nil {
		return false
	}
	return *t.ForwardIpOverGre
}

// GetIpv6Eh retrieves the value of the leaf Ipv6Eh from the NokiaConf_Configure_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Eh is set, it can
// safely use t.GetIpv6Eh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Eh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ip) GetIpv6Eh() E_NokiaConf_Configure_System_Ip_Ipv6Eh {
	if t == nil || t.Ipv6Eh == 0 {
		return NokiaConf_Configure_System_Ip_Ipv6Eh_max
	}
	return t.Ipv6Eh
}

// GetMplsTunnelMode retrieves the value of the leaf MplsTunnelMode from the NokiaConf_Configure_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTunnelMode is set, it can
// safely use t.GetMplsTunnelMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTunnelMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ip) GetMplsTunnelMode() E_NokiaTypesSros_MplsTunnelMode {
	if t == nil || t.MplsTunnelMode == 0 {
		return NokiaTypesSros_MplsTunnelMode_uniform
	}
	return t.MplsTunnelMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Ip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Ip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowCpuFragmentation == nil {
		var v bool = false
		t.AllowCpuFragmentation = &v
	}
	if t.AllowIcmpRedirect == nil {
		var v bool = false
		t.AllowIcmpRedirect = &v
	}
	if t.AllowQinqNetworkInterface == nil {
		var v bool = false
		t.AllowQinqNetworkInterface = &v
	}
	if t.EnforceUniqueIfIndex == nil {
		var v bool = false
		t.EnforceUniqueIfIndex = &v
	}
	if t.Forward_6In4 == nil {
		var v bool = false
		t.Forward_6In4 = &v
	}
	if t.ForwardIpOverGre == nil {
		var v bool = false
		t.ForwardIpOverGre = &v
	}
	if t.Ipv6Eh == 0 {
		t.Ipv6Eh = NokiaConf_Configure_System_Ip_Ipv6Eh_max
	}
	if t.MplsTunnelMode == 0 {
		t.MplsTunnelMode = NokiaTypesSros_MplsTunnelMode_uniform
	}
	t.Mpls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Ip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Ip) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Ip.
func (*NokiaConf_Configure_System_Ip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Ip_Mpls represents the /nokia-conf/configure/system/ip/mpls YANG schema element.
type NokiaConf_Configure_System_Ip_Mpls struct {
	LabelStackStatisticsCount *uint32 `path:"label-stack-statistics-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Ip_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Ip_Mpls) IsYANGGoStruct() {}

// GetLabelStackStatisticsCount retrieves the value of the leaf LabelStackStatisticsCount from the NokiaConf_Configure_System_Ip_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelStackStatisticsCount is set, it can
// safely use t.GetLabelStackStatisticsCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelStackStatisticsCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ip_Mpls) GetLabelStackStatisticsCount() uint32 {
	if t == nil || t.LabelStackStatisticsCount == nil {
		return 1
	}
	return *t.LabelStackStatisticsCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Ip_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Ip_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LabelStackStatisticsCount == nil {
		var v uint32 = 1
		t.LabelStackStatisticsCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ip_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Ip_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ip_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Ip_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Ip_Mpls.
func (*NokiaConf_Configure_System_Ip_Mpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_L2Tp represents the /nokia-conf/configure/system/l2tp YANG schema element.
type NokiaConf_Configure_System_L2Tp struct {
	ApplyGroups                  []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude           []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	NonMultiChassisTunnelIdRange *NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange `path:"non-multi-chassis-tunnel-id-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_L2Tp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_L2Tp) IsYANGGoStruct() {}

// GetOrCreateNonMultiChassisTunnelIdRange retrieves the value of the NonMultiChassisTunnelIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_L2Tp) GetOrCreateNonMultiChassisTunnelIdRange() *NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange {
	if t.NonMultiChassisTunnelIdRange != nil {
		return t.NonMultiChassisTunnelIdRange
	}
	t.NonMultiChassisTunnelIdRange = &NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange{}
	return t.NonMultiChassisTunnelIdRange
}

// GetNonMultiChassisTunnelIdRange returns the value of the NonMultiChassisTunnelIdRange struct pointer
// from NokiaConf_Configure_System_L2Tp. If the receiver or the field NonMultiChassisTunnelIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_L2Tp) GetNonMultiChassisTunnelIdRange() *NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange {
	if t != nil && t.NonMultiChassisTunnelIdRange != nil {
		return t.NonMultiChassisTunnelIdRange
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_L2Tp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_L2Tp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_L2Tp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_L2Tp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NonMultiChassisTunnelIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_L2Tp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_L2Tp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_L2Tp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_L2Tp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_L2Tp.
func (*NokiaConf_Configure_System_L2Tp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange represents the /nokia-conf/configure/system/l2tp/non-multi-chassis-tunnel-id-range YANG schema element.
type NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 16383
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 1
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v uint32 = 16383
		t.End = &v
	}
	if t.Start == nil {
		var v uint32 = 1
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange.
func (*NokiaConf_Configure_System_L2Tp_NonMultiChassisTunnelIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Lacp represents the /nokia-conf/configure/system/lacp YANG schema element.
type NokiaConf_Configure_System_Lacp struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SystemPriority     *uint32  `path:"system-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Lacp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Lacp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Lacp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lacp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Lacp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lacp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSystemPriority retrieves the value of the leaf SystemPriority from the NokiaConf_Configure_System_Lacp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemPriority is set, it can
// safely use t.GetSystemPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lacp) GetSystemPriority() uint32 {
	if t == nil || t.SystemPriority == nil {
		return 32768
	}
	return *t.SystemPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Lacp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Lacp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SystemPriority == nil {
		var v uint32 = 32768
		t.SystemPriority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Lacp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Lacp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Lacp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Lacp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Lacp.
func (*NokiaConf_Configure_System_Lacp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Lldp represents the /nokia-conf/configure/system/lldp YANG schema element.
type NokiaConf_Configure_System_Lldp struct {
	AdminState           E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	MessageFastTx        *int32                      `path:"message-fast-tx" module:"nokia-conf"`
	MessageFastTxInit    *int32                      `path:"message-fast-tx-init" module:"nokia-conf"`
	NotificationInterval *int32                      `path:"notification-interval" module:"nokia-conf"`
	ReinitDelay          *int32                      `path:"reinit-delay" module:"nokia-conf"`
	TxCreditMax          *int32                      `path:"tx-credit-max" module:"nokia-conf"`
	TxHoldMultiplier     *int32                      `path:"tx-hold-multiplier" module:"nokia-conf"`
	TxInterval           *int32                      `path:"tx-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Lldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Lldp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lldp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lldp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lldp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMessageFastTx retrieves the value of the leaf MessageFastTx from the NokiaConf_Configure_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageFastTx is set, it can
// safely use t.GetMessageFastTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageFastTx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lldp) GetMessageFastTx() int32 {
	if t == nil || t.MessageFastTx == nil {
		return 1
	}
	return *t.MessageFastTx
}

// GetMessageFastTxInit retrieves the value of the leaf MessageFastTxInit from the NokiaConf_Configure_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageFastTxInit is set, it can
// safely use t.GetMessageFastTxInit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageFastTxInit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lldp) GetMessageFastTxInit() int32 {
	if t == nil || t.MessageFastTxInit == nil {
		return 4
	}
	return *t.MessageFastTxInit
}

// GetNotificationInterval retrieves the value of the leaf NotificationInterval from the NokiaConf_Configure_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NotificationInterval is set, it can
// safely use t.GetNotificationInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NotificationInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lldp) GetNotificationInterval() int32 {
	if t == nil || t.NotificationInterval == nil {
		return 5
	}
	return *t.NotificationInterval
}

// GetReinitDelay retrieves the value of the leaf ReinitDelay from the NokiaConf_Configure_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReinitDelay is set, it can
// safely use t.GetReinitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReinitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lldp) GetReinitDelay() int32 {
	if t == nil || t.ReinitDelay == nil {
		return 2
	}
	return *t.ReinitDelay
}

// GetTxCreditMax retrieves the value of the leaf TxCreditMax from the NokiaConf_Configure_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxCreditMax is set, it can
// safely use t.GetTxCreditMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxCreditMax == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lldp) GetTxCreditMax() int32 {
	if t == nil || t.TxCreditMax == nil {
		return 5
	}
	return *t.TxCreditMax
}

// GetTxHoldMultiplier retrieves the value of the leaf TxHoldMultiplier from the NokiaConf_Configure_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxHoldMultiplier is set, it can
// safely use t.GetTxHoldMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxHoldMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lldp) GetTxHoldMultiplier() int32 {
	if t == nil || t.TxHoldMultiplier == nil {
		return 4
	}
	return *t.TxHoldMultiplier
}

// GetTxInterval retrieves the value of the leaf TxInterval from the NokiaConf_Configure_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxInterval is set, it can
// safely use t.GetTxInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Lldp) GetTxInterval() int32 {
	if t == nil || t.TxInterval == nil {
		return 30
	}
	return *t.TxInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Lldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Lldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MessageFastTx == nil {
		var v int32 = 1
		t.MessageFastTx = &v
	}
	if t.MessageFastTxInit == nil {
		var v int32 = 4
		t.MessageFastTxInit = &v
	}
	if t.NotificationInterval == nil {
		var v int32 = 5
		t.NotificationInterval = &v
	}
	if t.ReinitDelay == nil {
		var v int32 = 2
		t.ReinitDelay = &v
	}
	if t.TxCreditMax == nil {
		var v int32 = 5
		t.TxCreditMax = &v
	}
	if t.TxHoldMultiplier == nil {
		var v int32 = 4
		t.TxHoldMultiplier = &v
	}
	if t.TxInterval == nil {
		var v int32 = 30
		t.TxInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Lldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Lldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Lldp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Lldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Lldp.
func (*NokiaConf_Configure_System_Lldp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_LoadBalancing represents the /nokia-conf/configure/system/load-balancing YANG schema element.
type NokiaConf_Configure_System_LoadBalancing struct {
	ApplyGroups           []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	HashPolynomial        *NokiaConf_Configure_System_LoadBalancing_HashPolynomial    `path:"hash-polynomial" module:"nokia-conf"`
	L2TpLoadBalancing     *bool                                                       `path:"l2tp-load-balancing" module:"nokia-conf"`
	L4LoadBalancing       *bool                                                       `path:"l4-load-balancing" module:"nokia-conf"`
	LsrLoadBalancing      E_NokiaConf_Configure_System_LoadBalancing_LsrLoadBalancing `path:"lsr-load-balancing" module:"nokia-conf"`
	McEnhLoadBalancing    *bool                                                       `path:"mc-enh-load-balancing" module:"nokia-conf"`
	ServiceIdLagHashing   *bool                                                       `path:"service-id-lag-hashing" module:"nokia-conf"`
	SystemIpLoadBalancing *bool                                                       `path:"system-ip-load-balancing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_LoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_LoadBalancing) IsYANGGoStruct() {}

// GetOrCreateHashPolynomial retrieves the value of the HashPolynomial field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_LoadBalancing) GetOrCreateHashPolynomial() *NokiaConf_Configure_System_LoadBalancing_HashPolynomial {
	if t.HashPolynomial != nil {
		return t.HashPolynomial
	}
	t.HashPolynomial = &NokiaConf_Configure_System_LoadBalancing_HashPolynomial{}
	return t.HashPolynomial
}

// GetHashPolynomial returns the value of the HashPolynomial struct pointer
// from NokiaConf_Configure_System_LoadBalancing. If the receiver or the field HashPolynomial is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_LoadBalancing) GetHashPolynomial() *NokiaConf_Configure_System_LoadBalancing_HashPolynomial {
	if t != nil && t.HashPolynomial != nil {
		return t.HashPolynomial
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoadBalancing) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoadBalancing) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetL2TpLoadBalancing retrieves the value of the leaf L2TpLoadBalancing from the NokiaConf_Configure_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2TpLoadBalancing is set, it can
// safely use t.GetL2TpLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2TpLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoadBalancing) GetL2TpLoadBalancing() bool {
	if t == nil || t.L2TpLoadBalancing == nil {
		return false
	}
	return *t.L2TpLoadBalancing
}

// GetL4LoadBalancing retrieves the value of the leaf L4LoadBalancing from the NokiaConf_Configure_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L4LoadBalancing is set, it can
// safely use t.GetL4LoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L4LoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoadBalancing) GetL4LoadBalancing() bool {
	if t == nil || t.L4LoadBalancing == nil {
		return false
	}
	return *t.L4LoadBalancing
}

// GetLsrLoadBalancing retrieves the value of the leaf LsrLoadBalancing from the NokiaConf_Configure_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsrLoadBalancing is set, it can
// safely use t.GetLsrLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsrLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoadBalancing) GetLsrLoadBalancing() E_NokiaConf_Configure_System_LoadBalancing_LsrLoadBalancing {
	if t == nil || t.LsrLoadBalancing == 0 {
		return 0
	}
	return t.LsrLoadBalancing
}

// GetMcEnhLoadBalancing retrieves the value of the leaf McEnhLoadBalancing from the NokiaConf_Configure_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McEnhLoadBalancing is set, it can
// safely use t.GetMcEnhLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McEnhLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoadBalancing) GetMcEnhLoadBalancing() bool {
	if t == nil || t.McEnhLoadBalancing == nil {
		return false
	}
	return *t.McEnhLoadBalancing
}

// GetServiceIdLagHashing retrieves the value of the leaf ServiceIdLagHashing from the NokiaConf_Configure_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceIdLagHashing is set, it can
// safely use t.GetServiceIdLagHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceIdLagHashing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoadBalancing) GetServiceIdLagHashing() bool {
	if t == nil || t.ServiceIdLagHashing == nil {
		return false
	}
	return *t.ServiceIdLagHashing
}

// GetSystemIpLoadBalancing retrieves the value of the leaf SystemIpLoadBalancing from the NokiaConf_Configure_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpLoadBalancing is set, it can
// safely use t.GetSystemIpLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoadBalancing) GetSystemIpLoadBalancing() bool {
	if t == nil || t.SystemIpLoadBalancing == nil {
		return false
	}
	return *t.SystemIpLoadBalancing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_LoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_LoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.L2TpLoadBalancing == nil {
		var v bool = false
		t.L2TpLoadBalancing = &v
	}
	if t.McEnhLoadBalancing == nil {
		var v bool = false
		t.McEnhLoadBalancing = &v
	}
	if t.ServiceIdLagHashing == nil {
		var v bool = false
		t.ServiceIdLagHashing = &v
	}
	t.HashPolynomial.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_LoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoadBalancing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_LoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_LoadBalancing.
func (*NokiaConf_Configure_System_LoadBalancing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_LoadBalancing_HashPolynomial represents the /nokia-conf/configure/system/load-balancing/hash-polynomial YANG schema element.
type NokiaConf_Configure_System_LoadBalancing_HashPolynomial struct {
	Ecmp E_NokiaTypesSystem_HashPolynomialType `path:"ecmp" module:"nokia-conf"`
	Lag  E_NokiaTypesSystem_HashPolynomialType `path:"lag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_LoadBalancing_HashPolynomial implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_LoadBalancing_HashPolynomial) IsYANGGoStruct() {}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_System_LoadBalancing_HashPolynomial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoadBalancing_HashPolynomial) GetEcmp() E_NokiaTypesSystem_HashPolynomialType {
	if t == nil || t.Ecmp == 0 {
		return NokiaTypesSystem_HashPolynomialType_poly1
	}
	return t.Ecmp
}

// GetLag retrieves the value of the leaf Lag from the NokiaConf_Configure_System_LoadBalancing_HashPolynomial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lag is set, it can
// safely use t.GetLag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoadBalancing_HashPolynomial) GetLag() E_NokiaTypesSystem_HashPolynomialType {
	if t == nil || t.Lag == 0 {
		return NokiaTypesSystem_HashPolynomialType_poly2
	}
	return t.Lag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_LoadBalancing_HashPolynomial
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_LoadBalancing_HashPolynomial) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ecmp == 0 {
		t.Ecmp = NokiaTypesSystem_HashPolynomialType_poly1
	}
	if t.Lag == 0 {
		t.Lag = NokiaTypesSystem_HashPolynomialType_poly2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoadBalancing_HashPolynomial) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_LoadBalancing_HashPolynomial"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoadBalancing_HashPolynomial) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_LoadBalancing_HashPolynomial) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_LoadBalancing_HashPolynomial.
func (*NokiaConf_Configure_System_LoadBalancing_HashPolynomial) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_LoginControl represents the /nokia-conf/configure/system/login-control YANG schema element.
type NokiaConf_Configure_System_LoginControl struct {
	ApplyGroups        []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	ExponentialBackoff *bool                                                     `path:"exponential-backoff" module:"nokia-conf"`
	Ftp                *NokiaConf_Configure_System_LoginControl_Ftp              `path:"ftp" module:"nokia-conf"`
	IdleTimeout        NokiaConf_Configure_System_LoginControl_IdleTimeout_Union `path:"idle-timeout" module:"nokia-conf"`
	LoginBanner        *bool                                                     `path:"login-banner" module:"nokia-conf"`
	LoginScripts       *NokiaConf_Configure_System_LoginControl_LoginScripts     `path:"login-scripts" module:"nokia-conf"`
	Motd               *NokiaConf_Configure_System_LoginControl_Motd             `path:"motd" module:"nokia-conf"`
	PreLoginMessage    *NokiaConf_Configure_System_LoginControl_PreLoginMessage  `path:"pre-login-message" module:"nokia-conf"`
	Ssh                *NokiaConf_Configure_System_LoginControl_Ssh              `path:"ssh" module:"nokia-conf"`
	Telnet             *NokiaConf_Configure_System_LoginControl_Telnet           `path:"telnet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_LoginControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_LoginControl) IsYANGGoStruct() {}

// GetOrCreateFtp retrieves the value of the Ftp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_LoginControl) GetOrCreateFtp() *NokiaConf_Configure_System_LoginControl_Ftp {
	if t.Ftp != nil {
		return t.Ftp
	}
	t.Ftp = &NokiaConf_Configure_System_LoginControl_Ftp{}
	return t.Ftp
}

// GetOrCreateLoginScripts retrieves the value of the LoginScripts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_LoginControl) GetOrCreateLoginScripts() *NokiaConf_Configure_System_LoginControl_LoginScripts {
	if t.LoginScripts != nil {
		return t.LoginScripts
	}
	t.LoginScripts = &NokiaConf_Configure_System_LoginControl_LoginScripts{}
	return t.LoginScripts
}

// GetOrCreateMotd retrieves the value of the Motd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_LoginControl) GetOrCreateMotd() *NokiaConf_Configure_System_LoginControl_Motd {
	if t.Motd != nil {
		return t.Motd
	}
	t.Motd = &NokiaConf_Configure_System_LoginControl_Motd{}
	return t.Motd
}

// GetOrCreatePreLoginMessage retrieves the value of the PreLoginMessage field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_LoginControl) GetOrCreatePreLoginMessage() *NokiaConf_Configure_System_LoginControl_PreLoginMessage {
	if t.PreLoginMessage != nil {
		return t.PreLoginMessage
	}
	t.PreLoginMessage = &NokiaConf_Configure_System_LoginControl_PreLoginMessage{}
	return t.PreLoginMessage
}

// GetOrCreateSsh retrieves the value of the Ssh field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_LoginControl) GetOrCreateSsh() *NokiaConf_Configure_System_LoginControl_Ssh {
	if t.Ssh != nil {
		return t.Ssh
	}
	t.Ssh = &NokiaConf_Configure_System_LoginControl_Ssh{}
	return t.Ssh
}

// GetOrCreateTelnet retrieves the value of the Telnet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_LoginControl) GetOrCreateTelnet() *NokiaConf_Configure_System_LoginControl_Telnet {
	if t.Telnet != nil {
		return t.Telnet
	}
	t.Telnet = &NokiaConf_Configure_System_LoginControl_Telnet{}
	return t.Telnet
}

// GetFtp returns the value of the Ftp struct pointer
// from NokiaConf_Configure_System_LoginControl. If the receiver or the field Ftp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_LoginControl) GetFtp() *NokiaConf_Configure_System_LoginControl_Ftp {
	if t != nil && t.Ftp != nil {
		return t.Ftp
	}
	return nil
}

// GetLoginScripts returns the value of the LoginScripts struct pointer
// from NokiaConf_Configure_System_LoginControl. If the receiver or the field LoginScripts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_LoginControl) GetLoginScripts() *NokiaConf_Configure_System_LoginControl_LoginScripts {
	if t != nil && t.LoginScripts != nil {
		return t.LoginScripts
	}
	return nil
}

// GetMotd returns the value of the Motd struct pointer
// from NokiaConf_Configure_System_LoginControl. If the receiver or the field Motd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_LoginControl) GetMotd() *NokiaConf_Configure_System_LoginControl_Motd {
	if t != nil && t.Motd != nil {
		return t.Motd
	}
	return nil
}

// GetPreLoginMessage returns the value of the PreLoginMessage struct pointer
// from NokiaConf_Configure_System_LoginControl. If the receiver or the field PreLoginMessage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_LoginControl) GetPreLoginMessage() *NokiaConf_Configure_System_LoginControl_PreLoginMessage {
	if t != nil && t.PreLoginMessage != nil {
		return t.PreLoginMessage
	}
	return nil
}

// GetSsh returns the value of the Ssh struct pointer
// from NokiaConf_Configure_System_LoginControl. If the receiver or the field Ssh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_LoginControl) GetSsh() *NokiaConf_Configure_System_LoginControl_Ssh {
	if t != nil && t.Ssh != nil {
		return t.Ssh
	}
	return nil
}

// GetTelnet returns the value of the Telnet struct pointer
// from NokiaConf_Configure_System_LoginControl. If the receiver or the field Telnet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_LoginControl) GetTelnet() *NokiaConf_Configure_System_LoginControl_Telnet {
	if t != nil && t.Telnet != nil {
		return t.Telnet
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_LoginControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_LoginControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExponentialBackoff retrieves the value of the leaf ExponentialBackoff from the NokiaConf_Configure_System_LoginControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExponentialBackoff is set, it can
// safely use t.GetExponentialBackoff() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExponentialBackoff == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl) GetExponentialBackoff() bool {
	if t == nil || t.ExponentialBackoff == nil {
		return false
	}
	return *t.ExponentialBackoff
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_System_LoginControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl) GetIdleTimeout() NokiaConf_Configure_System_LoginControl_IdleTimeout_Union {
	if t == nil || t.IdleTimeout == nil {
		return UnionInt64(30)
	}
	return t.IdleTimeout
}

// GetLoginBanner retrieves the value of the leaf LoginBanner from the NokiaConf_Configure_System_LoginControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoginBanner is set, it can
// safely use t.GetLoginBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoginBanner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl) GetLoginBanner() bool {
	if t == nil || t.LoginBanner == nil {
		return false
	}
	return *t.LoginBanner
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_LoginControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_LoginControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExponentialBackoff == nil {
		var v bool = false
		t.ExponentialBackoff = &v
	}
	if t.IdleTimeout == nil {
		t.IdleTimeout = UnionInt64(30)
	}
	if t.LoginBanner == nil {
		var v bool = false
		t.LoginBanner = &v
	}
	t.Ftp.PopulateDefaults()
	t.LoginScripts.PopulateDefaults()
	t.Motd.PopulateDefaults()
	t.PreLoginMessage.PopulateDefaults()
	t.Ssh.PopulateDefaults()
	t.Telnet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_LoginControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_LoginControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_LoginControl.
func (*NokiaConf_Configure_System_LoginControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_LoginControl_Ftp represents the /nokia-conf/configure/system/login-control/ftp YANG schema element.
type NokiaConf_Configure_System_LoginControl_Ftp struct {
	InboundMaxSessions *uint32 `path:"inbound-max-sessions" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_LoginControl_Ftp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_LoginControl_Ftp) IsYANGGoStruct() {}

// GetInboundMaxSessions retrieves the value of the leaf InboundMaxSessions from the NokiaConf_Configure_System_LoginControl_Ftp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InboundMaxSessions is set, it can
// safely use t.GetInboundMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InboundMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_Ftp) GetInboundMaxSessions() uint32 {
	if t == nil || t.InboundMaxSessions == nil {
		return 3
	}
	return *t.InboundMaxSessions
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_LoginControl_Ftp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_LoginControl_Ftp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InboundMaxSessions == nil {
		var v uint32 = 3
		t.InboundMaxSessions = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_Ftp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_LoginControl_Ftp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_Ftp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_LoginControl_Ftp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_LoginControl_Ftp.
func (*NokiaConf_Configure_System_LoginControl_Ftp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_LoginControl_LoginScripts represents the /nokia-conf/configure/system/login-control/login-scripts YANG schema element.
type NokiaConf_Configure_System_LoginControl_LoginScripts struct {
	GlobalScript  *string                                                             `path:"global-script" module:"nokia-conf"`
	PerUserScript *NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript `path:"per-user-script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_LoginControl_LoginScripts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_LoginControl_LoginScripts) IsYANGGoStruct() {}

// GetOrCreatePerUserScript retrieves the value of the PerUserScript field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts) GetOrCreatePerUserScript() *NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript {
	if t.PerUserScript != nil {
		return t.PerUserScript
	}
	t.PerUserScript = &NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript{}
	return t.PerUserScript
}

// GetPerUserScript returns the value of the PerUserScript struct pointer
// from NokiaConf_Configure_System_LoginControl_LoginScripts. If the receiver or the field PerUserScript is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts) GetPerUserScript() *NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript {
	if t != nil && t.PerUserScript != nil {
		return t.PerUserScript
	}
	return nil
}

// GetGlobalScript retrieves the value of the leaf GlobalScript from the NokiaConf_Configure_System_LoginControl_LoginScripts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GlobalScript is set, it can
// safely use t.GetGlobalScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GlobalScript == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts) GetGlobalScript() string {
	if t == nil || t.GlobalScript == nil {
		return ""
	}
	return *t.GlobalScript
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_LoginControl_LoginScripts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerUserScript.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_LoginControl_LoginScripts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_LoginControl_LoginScripts.
func (*NokiaConf_Configure_System_LoginControl_LoginScripts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript represents the /nokia-conf/configure/system/login-control/login-scripts/per-user-script YANG schema element.
type NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript struct {
	FileName      *string `path:"file-name" module:"nokia-conf"`
	UserDirectory *string `path:"user-directory" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript) IsYANGGoStruct() {}

// GetFileName retrieves the value of the leaf FileName from the NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FileName is set, it can
// safely use t.GetFileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript) GetFileName() string {
	if t == nil || t.FileName == nil {
		return ""
	}
	return *t.FileName
}

// GetUserDirectory retrieves the value of the leaf UserDirectory from the NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDirectory is set, it can
// safely use t.GetUserDirectory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDirectory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript) GetUserDirectory() string {
	if t == nil || t.UserDirectory == nil {
		return ""
	}
	return *t.UserDirectory
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript.
func (*NokiaConf_Configure_System_LoginControl_LoginScripts_PerUserScript) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_LoginControl_Motd represents the /nokia-conf/configure/system/login-control/motd YANG schema element.
type NokiaConf_Configure_System_LoginControl_Motd struct {
	Text *string `path:"text" module:"nokia-conf"`
	Url  *string `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_LoginControl_Motd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_LoginControl_Motd) IsYANGGoStruct() {}

// GetText retrieves the value of the leaf Text from the NokiaConf_Configure_System_LoginControl_Motd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Text is set, it can
// safely use t.GetText() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Text == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_Motd) GetText() string {
	if t == nil || t.Text == nil {
		return ""
	}
	return *t.Text
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_System_LoginControl_Motd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_Motd) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_LoginControl_Motd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_LoginControl_Motd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_Motd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_LoginControl_Motd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_Motd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_LoginControl_Motd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_LoginControl_Motd.
func (*NokiaConf_Configure_System_LoginControl_Motd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_LoginControl_PreLoginMessage represents the /nokia-conf/configure/system/login-control/pre-login-message YANG schema element.
type NokiaConf_Configure_System_LoginControl_PreLoginMessage struct {
	Message *string `path:"message" module:"nokia-conf"`
	Name    *bool   `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_LoginControl_PreLoginMessage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_LoginControl_PreLoginMessage) IsYANGGoStruct() {}

// GetMessage retrieves the value of the leaf Message from the NokiaConf_Configure_System_LoginControl_PreLoginMessage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Message is set, it can
// safely use t.GetMessage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Message == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_PreLoginMessage) GetMessage() string {
	if t == nil || t.Message == nil {
		return ""
	}
	return *t.Message
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_LoginControl_PreLoginMessage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_PreLoginMessage) GetName() bool {
	if t == nil || t.Name == nil {
		return false
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_LoginControl_PreLoginMessage
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_LoginControl_PreLoginMessage) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Name == nil {
		var v bool = false
		t.Name = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_PreLoginMessage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_LoginControl_PreLoginMessage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_PreLoginMessage) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_LoginControl_PreLoginMessage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_LoginControl_PreLoginMessage.
func (*NokiaConf_Configure_System_LoginControl_PreLoginMessage) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_LoginControl_Ssh represents the /nokia-conf/configure/system/login-control/ssh YANG schema element.
type NokiaConf_Configure_System_LoginControl_Ssh struct {
	GracefulShutdown    *bool   `path:"graceful-shutdown" module:"nokia-conf"`
	InboundMaxSessions  *uint32 `path:"inbound-max-sessions" module:"nokia-conf"`
	OutboundMaxSessions *uint32 `path:"outbound-max-sessions" module:"nokia-conf"`
	TtlSecurity         *uint32 `path:"ttl-security" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_LoginControl_Ssh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_LoginControl_Ssh) IsYANGGoStruct() {}

// GetGracefulShutdown retrieves the value of the leaf GracefulShutdown from the NokiaConf_Configure_System_LoginControl_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GracefulShutdown is set, it can
// safely use t.GetGracefulShutdown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GracefulShutdown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_Ssh) GetGracefulShutdown() bool {
	if t == nil || t.GracefulShutdown == nil {
		return true
	}
	return *t.GracefulShutdown
}

// GetInboundMaxSessions retrieves the value of the leaf InboundMaxSessions from the NokiaConf_Configure_System_LoginControl_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InboundMaxSessions is set, it can
// safely use t.GetInboundMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InboundMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_Ssh) GetInboundMaxSessions() uint32 {
	if t == nil || t.InboundMaxSessions == nil {
		return 5
	}
	return *t.InboundMaxSessions
}

// GetOutboundMaxSessions retrieves the value of the leaf OutboundMaxSessions from the NokiaConf_Configure_System_LoginControl_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutboundMaxSessions is set, it can
// safely use t.GetOutboundMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutboundMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_Ssh) GetOutboundMaxSessions() uint32 {
	if t == nil || t.OutboundMaxSessions == nil {
		return 5
	}
	return *t.OutboundMaxSessions
}

// GetTtlSecurity retrieves the value of the leaf TtlSecurity from the NokiaConf_Configure_System_LoginControl_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlSecurity is set, it can
// safely use t.GetTtlSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_Ssh) GetTtlSecurity() uint32 {
	if t == nil || t.TtlSecurity == nil {
		return 0
	}
	return *t.TtlSecurity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_LoginControl_Ssh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_LoginControl_Ssh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GracefulShutdown == nil {
		var v bool = true
		t.GracefulShutdown = &v
	}
	if t.InboundMaxSessions == nil {
		var v uint32 = 5
		t.InboundMaxSessions = &v
	}
	if t.OutboundMaxSessions == nil {
		var v uint32 = 5
		t.OutboundMaxSessions = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_Ssh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_LoginControl_Ssh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_Ssh) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_LoginControl_Ssh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_LoginControl_Ssh.
func (*NokiaConf_Configure_System_LoginControl_Ssh) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_LoginControl_Telnet represents the /nokia-conf/configure/system/login-control/telnet YANG schema element.
type NokiaConf_Configure_System_LoginControl_Telnet struct {
	GracefulShutdown    *bool   `path:"graceful-shutdown" module:"nokia-conf"`
	InboundMaxSessions  *uint32 `path:"inbound-max-sessions" module:"nokia-conf"`
	OutboundMaxSessions *uint32 `path:"outbound-max-sessions" module:"nokia-conf"`
	TtlSecurity         *uint32 `path:"ttl-security" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_LoginControl_Telnet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_LoginControl_Telnet) IsYANGGoStruct() {}

// GetGracefulShutdown retrieves the value of the leaf GracefulShutdown from the NokiaConf_Configure_System_LoginControl_Telnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GracefulShutdown is set, it can
// safely use t.GetGracefulShutdown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GracefulShutdown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_Telnet) GetGracefulShutdown() bool {
	if t == nil || t.GracefulShutdown == nil {
		return false
	}
	return *t.GracefulShutdown
}

// GetInboundMaxSessions retrieves the value of the leaf InboundMaxSessions from the NokiaConf_Configure_System_LoginControl_Telnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InboundMaxSessions is set, it can
// safely use t.GetInboundMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InboundMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_Telnet) GetInboundMaxSessions() uint32 {
	if t == nil || t.InboundMaxSessions == nil {
		return 5
	}
	return *t.InboundMaxSessions
}

// GetOutboundMaxSessions retrieves the value of the leaf OutboundMaxSessions from the NokiaConf_Configure_System_LoginControl_Telnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutboundMaxSessions is set, it can
// safely use t.GetOutboundMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutboundMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_Telnet) GetOutboundMaxSessions() uint32 {
	if t == nil || t.OutboundMaxSessions == nil {
		return 5
	}
	return *t.OutboundMaxSessions
}

// GetTtlSecurity retrieves the value of the leaf TtlSecurity from the NokiaConf_Configure_System_LoginControl_Telnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlSecurity is set, it can
// safely use t.GetTtlSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_LoginControl_Telnet) GetTtlSecurity() uint32 {
	if t == nil || t.TtlSecurity == nil {
		return 0
	}
	return *t.TtlSecurity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_LoginControl_Telnet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_LoginControl_Telnet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GracefulShutdown == nil {
		var v bool = false
		t.GracefulShutdown = &v
	}
	if t.InboundMaxSessions == nil {
		var v uint32 = 5
		t.InboundMaxSessions = &v
	}
	if t.OutboundMaxSessions == nil {
		var v uint32 = 5
		t.OutboundMaxSessions = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_Telnet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_LoginControl_Telnet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_LoginControl_Telnet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_LoginControl_Telnet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_LoginControl_Telnet.
func (*NokiaConf_Configure_System_LoginControl_Telnet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface represents the /nokia-conf/configure/system/management-interface YANG schema element.
type NokiaConf_Configure_System_ManagementInterface struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Cli                *NokiaConf_Configure_System_ManagementInterface_Cli                `path:"cli" module:"nokia-conf"`
	CommitHistory      *uint32                                                            `path:"commit-history" module:"nokia-conf"`
	ConfigurationMode  E_NokiaConf_Configure_System_ManagementInterface_ConfigurationMode `path:"configuration-mode" module:"nokia-conf"`
	ConfigurationSave  *NokiaConf_Configure_System_ManagementInterface_ConfigurationSave  `path:"configuration-save" module:"nokia-conf"`
	Netconf            *NokiaConf_Configure_System_ManagementInterface_Netconf            `path:"netconf" module:"nokia-conf"`
	Operations         *NokiaConf_Configure_System_ManagementInterface_Operations         `path:"operations" module:"nokia-conf"`
	RemoteManagement   *NokiaConf_Configure_System_ManagementInterface_RemoteManagement   `path:"remote-management" module:"nokia-conf"`
	SchemaPath         *string                                                            `path:"schema-path" module:"nokia-conf"`
	Snmp               *NokiaConf_Configure_System_ManagementInterface_Snmp               `path:"snmp" module:"nokia-conf"`
	YangModules        *NokiaConf_Configure_System_ManagementInterface_YangModules        `path:"yang-modules" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface) IsYANGGoStruct() {}

// GetOrCreateCli retrieves the value of the Cli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface) GetOrCreateCli() *NokiaConf_Configure_System_ManagementInterface_Cli {
	if t.Cli != nil {
		return t.Cli
	}
	t.Cli = &NokiaConf_Configure_System_ManagementInterface_Cli{}
	return t.Cli
}

// GetOrCreateConfigurationSave retrieves the value of the ConfigurationSave field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface) GetOrCreateConfigurationSave() *NokiaConf_Configure_System_ManagementInterface_ConfigurationSave {
	if t.ConfigurationSave != nil {
		return t.ConfigurationSave
	}
	t.ConfigurationSave = &NokiaConf_Configure_System_ManagementInterface_ConfigurationSave{}
	return t.ConfigurationSave
}

// GetOrCreateNetconf retrieves the value of the Netconf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface) GetOrCreateNetconf() *NokiaConf_Configure_System_ManagementInterface_Netconf {
	if t.Netconf != nil {
		return t.Netconf
	}
	t.Netconf = &NokiaConf_Configure_System_ManagementInterface_Netconf{}
	return t.Netconf
}

// GetOrCreateOperations retrieves the value of the Operations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface) GetOrCreateOperations() *NokiaConf_Configure_System_ManagementInterface_Operations {
	if t.Operations != nil {
		return t.Operations
	}
	t.Operations = &NokiaConf_Configure_System_ManagementInterface_Operations{}
	return t.Operations
}

// GetOrCreateRemoteManagement retrieves the value of the RemoteManagement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface) GetOrCreateRemoteManagement() *NokiaConf_Configure_System_ManagementInterface_RemoteManagement {
	if t.RemoteManagement != nil {
		return t.RemoteManagement
	}
	t.RemoteManagement = &NokiaConf_Configure_System_ManagementInterface_RemoteManagement{}
	return t.RemoteManagement
}

// GetOrCreateSnmp retrieves the value of the Snmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface) GetOrCreateSnmp() *NokiaConf_Configure_System_ManagementInterface_Snmp {
	if t.Snmp != nil {
		return t.Snmp
	}
	t.Snmp = &NokiaConf_Configure_System_ManagementInterface_Snmp{}
	return t.Snmp
}

// GetOrCreateYangModules retrieves the value of the YangModules field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface) GetOrCreateYangModules() *NokiaConf_Configure_System_ManagementInterface_YangModules {
	if t.YangModules != nil {
		return t.YangModules
	}
	t.YangModules = &NokiaConf_Configure_System_ManagementInterface_YangModules{}
	return t.YangModules
}

// GetCli returns the value of the Cli struct pointer
// from NokiaConf_Configure_System_ManagementInterface. If the receiver or the field Cli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface) GetCli() *NokiaConf_Configure_System_ManagementInterface_Cli {
	if t != nil && t.Cli != nil {
		return t.Cli
	}
	return nil
}

// GetConfigurationSave returns the value of the ConfigurationSave struct pointer
// from NokiaConf_Configure_System_ManagementInterface. If the receiver or the field ConfigurationSave is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface) GetConfigurationSave() *NokiaConf_Configure_System_ManagementInterface_ConfigurationSave {
	if t != nil && t.ConfigurationSave != nil {
		return t.ConfigurationSave
	}
	return nil
}

// GetNetconf returns the value of the Netconf struct pointer
// from NokiaConf_Configure_System_ManagementInterface. If the receiver or the field Netconf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface) GetNetconf() *NokiaConf_Configure_System_ManagementInterface_Netconf {
	if t != nil && t.Netconf != nil {
		return t.Netconf
	}
	return nil
}

// GetOperations returns the value of the Operations struct pointer
// from NokiaConf_Configure_System_ManagementInterface. If the receiver or the field Operations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface) GetOperations() *NokiaConf_Configure_System_ManagementInterface_Operations {
	if t != nil && t.Operations != nil {
		return t.Operations
	}
	return nil
}

// GetRemoteManagement returns the value of the RemoteManagement struct pointer
// from NokiaConf_Configure_System_ManagementInterface. If the receiver or the field RemoteManagement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface) GetRemoteManagement() *NokiaConf_Configure_System_ManagementInterface_RemoteManagement {
	if t != nil && t.RemoteManagement != nil {
		return t.RemoteManagement
	}
	return nil
}

// GetSnmp returns the value of the Snmp struct pointer
// from NokiaConf_Configure_System_ManagementInterface. If the receiver or the field Snmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface) GetSnmp() *NokiaConf_Configure_System_ManagementInterface_Snmp {
	if t != nil && t.Snmp != nil {
		return t.Snmp
	}
	return nil
}

// GetYangModules returns the value of the YangModules struct pointer
// from NokiaConf_Configure_System_ManagementInterface. If the receiver or the field YangModules is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface) GetYangModules() *NokiaConf_Configure_System_ManagementInterface_YangModules {
	if t != nil && t.YangModules != nil {
		return t.YangModules
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCommitHistory retrieves the value of the leaf CommitHistory from the NokiaConf_Configure_System_ManagementInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommitHistory is set, it can
// safely use t.GetCommitHistory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommitHistory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface) GetCommitHistory() uint32 {
	if t == nil || t.CommitHistory == nil {
		return 50
	}
	return *t.CommitHistory
}

// GetConfigurationMode retrieves the value of the leaf ConfigurationMode from the NokiaConf_Configure_System_ManagementInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConfigurationMode is set, it can
// safely use t.GetConfigurationMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConfigurationMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface) GetConfigurationMode() E_NokiaConf_Configure_System_ManagementInterface_ConfigurationMode {
	if t == nil || t.ConfigurationMode == 0 {
		return NokiaConf_Configure_System_ManagementInterface_ConfigurationMode_classic
	}
	return t.ConfigurationMode
}

// GetSchemaPath retrieves the value of the leaf SchemaPath from the NokiaConf_Configure_System_ManagementInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchemaPath is set, it can
// safely use t.GetSchemaPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchemaPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface) GetSchemaPath() string {
	if t == nil || t.SchemaPath == nil {
		return ""
	}
	return *t.SchemaPath
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CommitHistory == nil {
		var v uint32 = 50
		t.CommitHistory = &v
	}
	if t.ConfigurationMode == 0 {
		t.ConfigurationMode = NokiaConf_Configure_System_ManagementInterface_ConfigurationMode_classic
	}
	t.Cli.PopulateDefaults()
	t.ConfigurationSave.PopulateDefaults()
	t.Netconf.PopulateDefaults()
	t.Operations.PopulateDefaults()
	t.RemoteManagement.PopulateDefaults()
	t.Snmp.PopulateDefaults()
	t.YangModules.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface.
func (*NokiaConf_Configure_System_ManagementInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli represents the /nokia-conf/configure/system/management-interface/cli YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	ClassicCli         *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli `path:"classic-cli" module:"nokia-conf"`
	CliEngine          []E_NokiaTypesSystem_CliEngineType                             `path:"cli-engine" module:"nokia-conf"`
	MdCli              *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli      `path:"md-cli" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli) IsYANGGoStruct() {}

// GetOrCreateClassicCli retrieves the value of the ClassicCli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli) GetOrCreateClassicCli() *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli {
	if t.ClassicCli != nil {
		return t.ClassicCli
	}
	t.ClassicCli = &NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli{}
	return t.ClassicCli
}

// GetOrCreateMdCli retrieves the value of the MdCli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli) GetOrCreateMdCli() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli {
	if t.MdCli != nil {
		return t.MdCli
	}
	t.MdCli = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli{}
	return t.MdCli
}

// GetClassicCli returns the value of the ClassicCli struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli. If the receiver or the field ClassicCli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli) GetClassicCli() *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli {
	if t != nil && t.ClassicCli != nil {
		return t.ClassicCli
	}
	return nil
}

// GetMdCli returns the value of the MdCli struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli. If the receiver or the field MdCli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli) GetMdCli() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli {
	if t != nil && t.MdCli != nil {
		return t.MdCli
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface_Cli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface_Cli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCliEngine retrieves the value of the leaf CliEngine from the NokiaConf_Configure_System_ManagementInterface_Cli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliEngine is set, it can
// safely use t.GetCliEngine() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliEngine == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli) GetCliEngine() []E_NokiaTypesSystem_CliEngineType {
	if t == nil || t.CliEngine == nil {
		return []E_NokiaTypesSystem_CliEngineType{NokiaTypesSystem_CliEngineType_md_cli}
	}
	return t.CliEngine
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CliEngine == nil {
		t.CliEngine = []E_NokiaTypesSystem_CliEngineType{NokiaTypesSystem_CliEngineType_md_cli}
	}
	t.ClassicCli.PopulateDefaults()
	t.MdCli.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli.
func (*NokiaConf_Configure_System_ManagementInterface_Cli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli represents the /nokia-conf/configure/system/management-interface/cli/classic-cli YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli struct {
	AllowImmediate *bool                                                                   `path:"allow-immediate" module:"nokia-conf"`
	Rollback       *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback `path:"rollback" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli) IsYANGGoStruct() {}

// GetOrCreateRollback retrieves the value of the Rollback field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli) GetOrCreateRollback() *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback {
	if t.Rollback != nil {
		return t.Rollback
	}
	t.Rollback = &NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback{}
	return t.Rollback
}

// GetRollback returns the value of the Rollback struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli. If the receiver or the field Rollback is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli) GetRollback() *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback {
	if t != nil && t.Rollback != nil {
		return t.Rollback
	}
	return nil
}

// GetAllowImmediate retrieves the value of the leaf AllowImmediate from the NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowImmediate is set, it can
// safely use t.GetAllowImmediate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowImmediate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli) GetAllowImmediate() bool {
	if t == nil || t.AllowImmediate == nil {
		return true
	}
	return *t.AllowImmediate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowImmediate == nil {
		var v bool = true
		t.AllowImmediate = &v
	}
	t.Rollback.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback represents the /nokia-conf/configure/system/management-interface/cli/classic-cli/rollback YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	LocalCheckpoints   *uint32                                                                        `path:"local-checkpoints" module:"nokia-conf"`
	Location           *string                                                                        `path:"location" module:"nokia-conf"`
	RemoteCheckpoints  *uint32                                                                        `path:"remote-checkpoints" module:"nokia-conf"`
	Rescue             *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue `path:"rescue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) IsYANGGoStruct() {}

// GetOrCreateRescue retrieves the value of the Rescue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) GetOrCreateRescue() *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue {
	if t.Rescue != nil {
		return t.Rescue
	}
	t.Rescue = &NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue{}
	return t.Rescue
}

// GetRescue returns the value of the Rescue struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback. If the receiver or the field Rescue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) GetRescue() *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue {
	if t != nil && t.Rescue != nil {
		return t.Rescue
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLocalCheckpoints retrieves the value of the leaf LocalCheckpoints from the NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalCheckpoints is set, it can
// safely use t.GetLocalCheckpoints() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalCheckpoints == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) GetLocalCheckpoints() uint32 {
	if t == nil || t.LocalCheckpoints == nil {
		return 10
	}
	return *t.LocalCheckpoints
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// GetRemoteCheckpoints retrieves the value of the leaf RemoteCheckpoints from the NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteCheckpoints is set, it can
// safely use t.GetRemoteCheckpoints() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteCheckpoints == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) GetRemoteCheckpoints() uint32 {
	if t == nil || t.RemoteCheckpoints == nil {
		return 10
	}
	return *t.RemoteCheckpoints
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LocalCheckpoints == nil {
		var v uint32 = 10
		t.LocalCheckpoints = &v
	}
	if t.RemoteCheckpoints == nil {
		var v uint32 = 10
		t.RemoteCheckpoints = &v
	}
	t.Rescue.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue represents the /nokia-conf/configure/system/management-interface/cli/classic-cli/rollback/rescue YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue struct {
	Location *string `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) IsYANGGoStruct() {
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli represents the /nokia-conf/configure/system/management-interface/cli/md-cli YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli struct {
	ApplyGroups                 []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude          []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoConfigSave              *bool                                                                 `path:"auto-config-save" module:"nokia-conf"`
	CommandAccountingDuringLoad *bool                                                                 `path:"command-accounting-during-load" module:"nokia-conf"`
	Environment                 *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment `path:"environment" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli) IsYANGGoStruct() {}

// GetOrCreateEnvironment retrieves the value of the Environment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli) GetOrCreateEnvironment() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment {
	if t.Environment != nil {
		return t.Environment
	}
	t.Environment = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment{}
	return t.Environment
}

// GetEnvironment returns the value of the Environment struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli_MdCli. If the receiver or the field Environment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli) GetEnvironment() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment {
	if t != nil && t.Environment != nil {
		return t.Environment
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutoConfigSave retrieves the value of the leaf AutoConfigSave from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoConfigSave is set, it can
// safely use t.GetAutoConfigSave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoConfigSave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli) GetAutoConfigSave() bool {
	if t == nil || t.AutoConfigSave == nil {
		return false
	}
	return *t.AutoConfigSave
}

// GetCommandAccountingDuringLoad retrieves the value of the leaf CommandAccountingDuringLoad from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommandAccountingDuringLoad is set, it can
// safely use t.GetCommandAccountingDuringLoad() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommandAccountingDuringLoad == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli) GetCommandAccountingDuringLoad() bool {
	if t == nil || t.CommandAccountingDuringLoad == nil {
		return true
	}
	return *t.CommandAccountingDuringLoad
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoConfigSave == nil {
		var v bool = false
		t.AutoConfigSave = &v
	}
	if t.CommandAccountingDuringLoad == nil {
		var v bool = true
		t.CommandAccountingDuringLoad = &v
	}
	t.Environment.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment represents the /nokia-conf/configure/system/management-interface/cli/md-cli/environment YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment struct {
	CommandAlias         *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias         `path:"command-alias" module:"nokia-conf"`
	CommandCompletion    *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion    `path:"command-completion" module:"nokia-conf"`
	Console              *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console              `path:"console" module:"nokia-conf"`
	InfoOutput           *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput           `path:"info-output" module:"nokia-conf"`
	MessageSeverityLevel *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel `path:"message-severity-level" module:"nokia-conf"`
	More                 *bool                                                                                      `path:"more" module:"nokia-conf"`
	ProgressIndicator    *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator    `path:"progress-indicator" module:"nokia-conf"`
	Prompt               *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt               `path:"prompt" module:"nokia-conf"`
	Python               *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python               `path:"python" module:"nokia-conf"`
	TimeDisplay          E_NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_TimeDisplay         `path:"time-display" module:"nokia-conf"`
	TimeFormat           E_NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_TimeFormat          `path:"time-format" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) IsYANGGoStruct() {}

// GetOrCreateCommandAlias retrieves the value of the CommandAlias field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreateCommandAlias() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias {
	if t.CommandAlias != nil {
		return t.CommandAlias
	}
	t.CommandAlias = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias{}
	return t.CommandAlias
}

// GetOrCreateCommandCompletion retrieves the value of the CommandCompletion field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreateCommandCompletion() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion {
	if t.CommandCompletion != nil {
		return t.CommandCompletion
	}
	t.CommandCompletion = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion{}
	return t.CommandCompletion
}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreateConsole() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console{}
	return t.Console
}

// GetOrCreateInfoOutput retrieves the value of the InfoOutput field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreateInfoOutput() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput {
	if t.InfoOutput != nil {
		return t.InfoOutput
	}
	t.InfoOutput = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput{}
	return t.InfoOutput
}

// GetOrCreateMessageSeverityLevel retrieves the value of the MessageSeverityLevel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreateMessageSeverityLevel() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel {
	if t.MessageSeverityLevel != nil {
		return t.MessageSeverityLevel
	}
	t.MessageSeverityLevel = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel{}
	return t.MessageSeverityLevel
}

// GetOrCreateProgressIndicator retrieves the value of the ProgressIndicator field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreateProgressIndicator() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator {
	if t.ProgressIndicator != nil {
		return t.ProgressIndicator
	}
	t.ProgressIndicator = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator{}
	return t.ProgressIndicator
}

// GetOrCreatePrompt retrieves the value of the Prompt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreatePrompt() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt {
	if t.Prompt != nil {
		return t.Prompt
	}
	t.Prompt = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt{}
	return t.Prompt
}

// GetOrCreatePython retrieves the value of the Python field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreatePython() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python {
	if t.Python != nil {
		return t.Python
	}
	t.Python = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python{}
	return t.Python
}

// GetCommandAlias returns the value of the CommandAlias struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field CommandAlias is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetCommandAlias() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias {
	if t != nil && t.CommandAlias != nil {
		return t.CommandAlias
	}
	return nil
}

// GetCommandCompletion returns the value of the CommandCompletion struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field CommandCompletion is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetCommandCompletion() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion {
	if t != nil && t.CommandCompletion != nil {
		return t.CommandCompletion
	}
	return nil
}

// GetConsole returns the value of the Console struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetConsole() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetInfoOutput returns the value of the InfoOutput struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field InfoOutput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetInfoOutput() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput {
	if t != nil && t.InfoOutput != nil {
		return t.InfoOutput
	}
	return nil
}

// GetMessageSeverityLevel returns the value of the MessageSeverityLevel struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field MessageSeverityLevel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetMessageSeverityLevel() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel {
	if t != nil && t.MessageSeverityLevel != nil {
		return t.MessageSeverityLevel
	}
	return nil
}

// GetProgressIndicator returns the value of the ProgressIndicator struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field ProgressIndicator is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetProgressIndicator() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator {
	if t != nil && t.ProgressIndicator != nil {
		return t.ProgressIndicator
	}
	return nil
}

// GetPrompt returns the value of the Prompt struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field Prompt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetPrompt() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt {
	if t != nil && t.Prompt != nil {
		return t.Prompt
	}
	return nil
}

// GetPython returns the value of the Python struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field Python is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetPython() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python {
	if t != nil && t.Python != nil {
		return t.Python
	}
	return nil
}

// GetMore retrieves the value of the leaf More from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if More is set, it can
// safely use t.GetMore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.More == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetMore() bool {
	if t == nil || t.More == nil {
		return true
	}
	return *t.More
}

// GetTimeDisplay retrieves the value of the leaf TimeDisplay from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeDisplay is set, it can
// safely use t.GetTimeDisplay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeDisplay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetTimeDisplay() E_NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_TimeDisplay {
	if t == nil || t.TimeDisplay == 0 {
		return NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_TimeDisplay_local
	}
	return t.TimeDisplay
}

// GetTimeFormat retrieves the value of the leaf TimeFormat from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeFormat is set, it can
// safely use t.GetTimeFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) GetTimeFormat() E_NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_TimeFormat {
	if t == nil || t.TimeFormat == 0 {
		return NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_TimeFormat_rfc_3339
	}
	return t.TimeFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.More == nil {
		var v bool = true
		t.More = &v
	}
	if t.TimeDisplay == 0 {
		t.TimeDisplay = NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_TimeDisplay_local
	}
	if t.TimeFormat == 0 {
		t.TimeFormat = NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_TimeFormat_rfc_3339
	}
	t.CommandAlias.PopulateDefaults()
	t.CommandCompletion.PopulateDefaults()
	t.Console.PopulateDefaults()
	t.InfoOutput.PopulateDefaults()
	t.MessageSeverityLevel.PopulateDefaults()
	t.ProgressIndicator.PopulateDefaults()
	t.Prompt.PopulateDefaults()
	t.Python.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias represents the /nokia-conf/configure/system/management-interface/cli/md-cli/environment/command-alias YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias struct {
	Alias map[string]*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias `path:"alias" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) IsYANGGoStruct() {
}

// NewAlias creates a new entry in the Alias list of the
// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) NewAlias(AliasName string) (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alias == nil {
		t.Alias = make(map[string]*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias)
	}

	key := AliasName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alias[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alias", key)
	}

	t.Alias[key] = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias{
		AliasName: &AliasName,
	}

	return t.Alias[key], nil
}

// RenameAlias renames an entry in the list Alias within
// the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) RenameAlias(oldK, newK string) error {
	if _, ok := t.Alias[newK]; ok {
		return fmt.Errorf("key %v already exists in Alias", newK)
	}

	e, ok := t.Alias[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Alias", oldK)
	}
	e.AliasName = &newK

	t.Alias[newK] = e
	delete(t.Alias, oldK)
	return nil
}

// GetOrCreateAlias retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) GetOrCreateAlias(AliasName string) *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias {

	key := AliasName

	if v, ok := t.Alias[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlias(AliasName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlias got unexpected error: %v", err))
	}
	return v
}

// GetAlias retrieves the value with the specified key from
// the Alias map field of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) GetAlias(AliasName string) *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias {

	if t == nil {
		return nil
	}

	key := AliasName

	if lm, ok := t.Alias[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlias deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) DeleteAlias(AliasName string) {
	key := AliasName

	delete(t.Alias, key)
}

// AppendAlias appends the supplied NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias struct to the
// list Alias of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) AppendAlias(v *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) error {
	if v.AliasName == nil {
		return fmt.Errorf("invalid nil key received for AliasName")
	}

	key := *v.AliasName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alias == nil {
		t.Alias = make(map[string]*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias)
	}

	if _, ok := t.Alias[key]; ok {
		return fmt.Errorf("duplicate key for list Alias %v", key)
	}

	t.Alias[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Alias {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias represents the /nokia-conf/configure/system/management-interface/cli/md-cli/environment/command-alias/alias YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                                                                                                                           `path:"admin-state" module:"nokia-conf"`
	AliasName          *string                                                                                                                                                                                                               `path:"alias-name" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                                                                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	CliCommand         *string                                                                                                                                                                                                               `path:"cli-command" module:"nokia-conf"`
	Description        *string                                                                                                                                                                                                               `path:"description" module:"nokia-conf"`
	MountPoint         map[NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union]*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint `path:"mount-point" module:"nokia-conf"`
	PythonScript       *string                                                                                                                                                                                                               `path:"python-script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) IsYANGGoStruct() {
}

// NewMountPoint creates a new entry in the MountPoint list of the
// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) NewMountPoint(Path NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union) (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union]*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint)
	}

	key := Path

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MountPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MountPoint", key)
	}

	t.MountPoint[key] = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint{
		Path: Path,
	}

	return t.MountPoint[key], nil
}

// RenameMountPoint renames an entry in the list MountPoint within
// the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) RenameMountPoint(oldK, newK NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union) error {
	if _, ok := t.MountPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in MountPoint", newK)
	}

	e, ok := t.MountPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MountPoint", oldK)
	}
	e.Path = newK

	t.MountPoint[newK] = e
	delete(t.MountPoint, oldK)
	return nil
}

// GetOrCreateMountPoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetOrCreateMountPoint(Path NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union) *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint {

	key := Path

	if v, ok := t.MountPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMountPoint(Path)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMountPoint got unexpected error: %v", err))
	}
	return v
}

// GetMountPoint retrieves the value with the specified key from
// the MountPoint map field of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetMountPoint(Path NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union) *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint {

	if t == nil {
		return nil
	}

	key := Path

	if lm, ok := t.MountPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteMountPoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) DeleteMountPoint(Path NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union) {
	key := Path

	delete(t.MountPoint, key)
}

// AppendMountPoint appends the supplied NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint struct to the
// list MountPoint of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) AppendMountPoint(v *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) error {
	key := v.Path

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union]*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint)
	}

	if _, ok := t.MountPoint[key]; ok {
		return fmt.Errorf("duplicate key for list MountPoint %v", key)
	}

	t.MountPoint[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAliasName retrieves the value of the leaf AliasName from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AliasName is set, it can
// safely use t.GetAliasName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AliasName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetAliasName() string {
	if t == nil || t.AliasName == nil {
		return ""
	}
	return *t.AliasName
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCliCommand retrieves the value of the leaf CliCommand from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliCommand is set, it can
// safely use t.GetCliCommand() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliCommand == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetCliCommand() string {
	if t == nil || t.CliCommand == nil {
		return ""
	}
	return *t.CliCommand
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPythonScript retrieves the value of the leaf PythonScript from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonScript is set, it can
// safely use t.GetPythonScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonScript == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetPythonScript() string {
	if t == nil || t.PythonScript == nil {
		return ""
	}
	return *t.PythonScript
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.MountPoint {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AliasName == nil {
		return nil, fmt.Errorf("nil value for key AliasName")
	}

	return map[string]interface{}{
		"alias-name": *t.AliasName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint represents the /nokia-conf/configure/system/management-interface/cli/md-cli/environment/command-alias/alias/mount-point YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint struct {
	Path NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union `path:"path" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) IsYANGGoStruct() {
}

// GetPath retrieves the value of the leaf Path from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) GetPath() NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union {
	if t == nil || t.Path == nil {
		return nil
	}
	return t.Path
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"path": t.Path,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion represents the /nokia-conf/configure/system/management-interface/cli/md-cli/environment/command-completion YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion struct {
	Enter *bool `path:"enter" module:"nokia-conf"`
	Space *bool `path:"space" module:"nokia-conf"`
	Tab   *bool `path:"tab" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) IsYANGGoStruct() {
}

// GetEnter retrieves the value of the leaf Enter from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enter is set, it can
// safely use t.GetEnter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) GetEnter() bool {
	if t == nil || t.Enter == nil {
		return true
	}
	return *t.Enter
}

// GetSpace retrieves the value of the leaf Space from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Space is set, it can
// safely use t.GetSpace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Space == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) GetSpace() bool {
	if t == nil || t.Space == nil {
		return true
	}
	return *t.Space
}

// GetTab retrieves the value of the leaf Tab from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tab is set, it can
// safely use t.GetTab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) GetTab() bool {
	if t == nil || t.Tab == nil {
		return true
	}
	return *t.Tab
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enter == nil {
		var v bool = true
		t.Enter = &v
	}
	if t.Space == nil {
		var v bool = true
		t.Space = &v
	}
	if t.Tab == nil {
		var v bool = true
		t.Tab = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console represents the /nokia-conf/configure/system/management-interface/cli/md-cli/environment/console YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console struct {
	Length *uint32 `path:"length" module:"nokia-conf"`
	Width  *uint32 `path:"width" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console) IsYANGGoStruct() {
}

// GetLength retrieves the value of the leaf Length from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console) GetLength() uint32 {
	if t == nil || t.Length == nil {
		return 24
	}
	return *t.Length
}

// GetWidth retrieves the value of the leaf Width from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Width is set, it can
// safely use t.GetWidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Width == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console) GetWidth() uint32 {
	if t == nil || t.Width == nil {
		return 80
	}
	return *t.Width
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Length == nil {
		var v uint32 = 24
		t.Length = &v
	}
	if t.Width == nil {
		var v uint32 = 80
		t.Width = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Console) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput represents the /nokia-conf/configure/system/management-interface/cli/md-cli/environment/info-output YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput struct {
	AlwaysDisplay *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay `path:"always-display" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) IsYANGGoStruct() {
}

// GetOrCreateAlwaysDisplay retrieves the value of the AlwaysDisplay field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) GetOrCreateAlwaysDisplay() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay {
	if t.AlwaysDisplay != nil {
		return t.AlwaysDisplay
	}
	t.AlwaysDisplay = &NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay{}
	return t.AlwaysDisplay
}

// GetAlwaysDisplay returns the value of the AlwaysDisplay struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput. If the receiver or the field AlwaysDisplay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) GetAlwaysDisplay() *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay {
	if t != nil && t.AlwaysDisplay != nil {
		return t.AlwaysDisplay
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AlwaysDisplay.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay represents the /nokia-conf/configure/system/management-interface/cli/md-cli/environment/info-output/always-display YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay struct {
	AdminState *bool `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) GetAdminState() bool {
	if t == nil || t.AdminState == nil {
		return false
	}
	return *t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == nil {
		var v bool = false
		t.AdminState = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel represents the /nokia-conf/configure/system/management-interface/cli/md-cli/environment/message-severity-level YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel struct {
	Cli E_NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel_Cli `path:"cli" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) IsYANGGoStruct() {
}

// GetCli retrieves the value of the leaf Cli from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cli is set, it can
// safely use t.GetCli() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cli == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) GetCli() E_NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel_Cli {
	if t == nil || t.Cli == 0 {
		return NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel_Cli_info
	}
	return t.Cli
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cli == 0 {
		t.Cli = NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel_Cli_info
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator represents the /nokia-conf/configure/system/management-interface/cli/md-cli/environment/progress-indicator YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator struct {
	AdminState E_NokiaTypesSros_AdminState                                                                   `path:"admin-state" module:"nokia-conf"`
	Delay      *uint32                                                                                       `path:"delay" module:"nokia-conf"`
	Type       E_NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDelay retrieves the value of the leaf Delay from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delay is set, it can
// safely use t.GetDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) GetDelay() uint32 {
	if t == nil || t.Delay == nil {
		return 1000
	}
	return *t.Delay
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) GetType() E_NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator_Type_dots
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Delay == nil {
		var v uint32 = 1000
		t.Delay = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator_Type_dots
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt represents the /nokia-conf/configure/system/management-interface/cli/md-cli/environment/prompt YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt struct {
	Context                     *bool `path:"context" module:"nokia-conf"`
	Newline                     *bool `path:"newline" module:"nokia-conf"`
	Timestamp                   *bool `path:"timestamp" module:"nokia-conf"`
	UncommittedChangesIndicator *bool `path:"uncommitted-changes-indicator" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt) IsYANGGoStruct() {
}

// GetContext retrieves the value of the leaf Context from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Context is set, it can
// safely use t.GetContext() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Context == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt) GetContext() bool {
	if t == nil || t.Context == nil {
		return true
	}
	return *t.Context
}

// GetNewline retrieves the value of the leaf Newline from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Newline is set, it can
// safely use t.GetNewline() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Newline == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt) GetNewline() bool {
	if t == nil || t.Newline == nil {
		return true
	}
	return *t.Newline
}

// GetTimestamp retrieves the value of the leaf Timestamp from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timestamp is set, it can
// safely use t.GetTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timestamp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt) GetTimestamp() bool {
	if t == nil || t.Timestamp == nil {
		return false
	}
	return *t.Timestamp
}

// GetUncommittedChangesIndicator retrieves the value of the leaf UncommittedChangesIndicator from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UncommittedChangesIndicator is set, it can
// safely use t.GetUncommittedChangesIndicator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UncommittedChangesIndicator == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt) GetUncommittedChangesIndicator() bool {
	if t == nil || t.UncommittedChangesIndicator == nil {
		return true
	}
	return *t.UncommittedChangesIndicator
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Context == nil {
		var v bool = true
		t.Context = &v
	}
	if t.Newline == nil {
		var v bool = true
		t.Newline = &v
	}
	if t.Timestamp == nil {
		var v bool = false
		t.Timestamp = &v
	}
	if t.UncommittedChangesIndicator == nil {
		var v bool = true
		t.UncommittedChangesIndicator = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Prompt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python represents the /nokia-conf/configure/system/management-interface/cli/md-cli/environment/python YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python struct {
	MemoryReservation      *uint32 `path:"memory-reservation" module:"nokia-conf"`
	MinimumAvailableMemory *uint32 `path:"minimum-available-memory" module:"nokia-conf"`
	Timeout                *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python) IsYANGGoStruct() {
}

// GetMemoryReservation retrieves the value of the leaf MemoryReservation from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemoryReservation is set, it can
// safely use t.GetMemoryReservation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemoryReservation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python) GetMemoryReservation() uint32 {
	if t == nil || t.MemoryReservation == nil {
		return 0
	}
	return *t.MemoryReservation
}

// GetMinimumAvailableMemory retrieves the value of the leaf MinimumAvailableMemory from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumAvailableMemory is set, it can
// safely use t.GetMinimumAvailableMemory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumAvailableMemory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python) GetMinimumAvailableMemory() uint32 {
	if t == nil || t.MinimumAvailableMemory == nil {
		return 0
	}
	return *t.MinimumAvailableMemory
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 3600
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timeout == nil {
		var v uint32 = 3600
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python.
func (*NokiaConf_Configure_System_ManagementInterface_Cli_MdCli_Environment_Python) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_ConfigurationSave represents the /nokia-conf/configure/system/management-interface/configuration-save YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_ConfigurationSave struct {
	ApplyGroups          []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ConfigurationBackups *uint32  `path:"configuration-backups" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_ConfigurationSave implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_ConfigurationSave) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface_ConfigurationSave
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_ConfigurationSave) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface_ConfigurationSave
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_ConfigurationSave) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetConfigurationBackups retrieves the value of the leaf ConfigurationBackups from the NokiaConf_Configure_System_ManagementInterface_ConfigurationSave
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConfigurationBackups is set, it can
// safely use t.GetConfigurationBackups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConfigurationBackups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_ConfigurationSave) GetConfigurationBackups() uint32 {
	if t == nil || t.ConfigurationBackups == nil {
		return 5
	}
	return *t.ConfigurationBackups
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_ConfigurationSave
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_ConfigurationSave) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ConfigurationBackups == nil {
		var v uint32 = 5
		t.ConfigurationBackups = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_ConfigurationSave) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_ConfigurationSave"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_ConfigurationSave) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_ConfigurationSave) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_ConfigurationSave.
func (*NokiaConf_Configure_System_ManagementInterface_ConfigurationSave) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Netconf represents the /nokia-conf/configure/system/management-interface/netconf YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Netconf struct {
	AdminState         E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoConfigSave     *bool                                                                `path:"auto-config-save" module:"nokia-conf"`
	Capabilities       *NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities `path:"capabilities" module:"nokia-conf"`
	Port               *uint32                                                              `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Netconf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Netconf) IsYANGGoStruct() {}

// GetOrCreateCapabilities retrieves the value of the Capabilities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf) GetOrCreateCapabilities() *NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities {
	if t.Capabilities != nil {
		return t.Capabilities
	}
	t.Capabilities = &NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities{}
	return t.Capabilities
}

// GetCapabilities returns the value of the Capabilities struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Netconf. If the receiver or the field Capabilities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf) GetCapabilities() *NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities {
	if t != nil && t.Capabilities != nil {
		return t.Capabilities
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_ManagementInterface_Netconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface_Netconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface_Netconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutoConfigSave retrieves the value of the leaf AutoConfigSave from the NokiaConf_Configure_System_ManagementInterface_Netconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoConfigSave is set, it can
// safely use t.GetAutoConfigSave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoConfigSave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf) GetAutoConfigSave() bool {
	if t == nil || t.AutoConfigSave == nil {
		return false
	}
	return *t.AutoConfigSave
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_System_ManagementInterface_Netconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 830
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Netconf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AutoConfigSave == nil {
		var v bool = false
		t.AutoConfigSave = &v
	}
	if t.Port == nil {
		var v uint32 = 830
		t.Port = &v
	}
	t.Capabilities.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Netconf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Netconf.
func (*NokiaConf_Configure_System_ManagementInterface_Netconf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities represents the /nokia-conf/configure/system/management-interface/netconf/capabilities YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities struct {
	Candidate       *bool `path:"candidate" module:"nokia-conf"`
	WritableRunning *bool `path:"writable-running" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities) IsYANGGoStruct() {}

// GetCandidate retrieves the value of the leaf Candidate from the NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Candidate is set, it can
// safely use t.GetCandidate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Candidate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities) GetCandidate() bool {
	if t == nil || t.Candidate == nil {
		return true
	}
	return *t.Candidate
}

// GetWritableRunning retrieves the value of the leaf WritableRunning from the NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WritableRunning is set, it can
// safely use t.GetWritableRunning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WritableRunning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities) GetWritableRunning() bool {
	if t == nil || t.WritableRunning == nil {
		return false
	}
	return *t.WritableRunning
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Candidate == nil {
		var v bool = true
		t.Candidate = &v
	}
	if t.WritableRunning == nil {
		var v bool = false
		t.WritableRunning = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities.
func (*NokiaConf_Configure_System_ManagementInterface_Netconf_Capabilities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Operations represents the /nokia-conf/configure/system/management-interface/operations YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Operations struct {
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	GlobalTimeouts     *NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts `path:"global-timeouts" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Operations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Operations) IsYANGGoStruct() {}

// GetOrCreateGlobalTimeouts retrieves the value of the GlobalTimeouts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations) GetOrCreateGlobalTimeouts() *NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts {
	if t.GlobalTimeouts != nil {
		return t.GlobalTimeouts
	}
	t.GlobalTimeouts = &NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts{}
	return t.GlobalTimeouts
}

// GetGlobalTimeouts returns the value of the GlobalTimeouts struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Operations. If the receiver or the field GlobalTimeouts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations) GetGlobalTimeouts() *NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts {
	if t != nil && t.GlobalTimeouts != nil {
		return t.GlobalTimeouts
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface_Operations
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface_Operations
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Operations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.GlobalTimeouts.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Operations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Operations.
func (*NokiaConf_Configure_System_ManagementInterface_Operations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts represents the /nokia-conf/configure/system/management-interface/operations/global-timeouts YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts struct {
	AsynchronousExecution NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts_AsynchronousExecution_Union `path:"asynchronous-execution" module:"nokia-conf"`
	AsynchronousRetention NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts_AsynchronousRetention_Union `path:"asynchronous-retention" module:"nokia-conf"`
	SynchronousExecution  NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts_SynchronousExecution_Union  `path:"synchronous-execution" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts) IsYANGGoStruct() {}

// GetAsynchronousExecution retrieves the value of the leaf AsynchronousExecution from the NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsynchronousExecution is set, it can
// safely use t.GetAsynchronousExecution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsynchronousExecution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts) GetAsynchronousExecution() NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts_AsynchronousExecution_Union {
	if t == nil || t.AsynchronousExecution == nil {
		return UnionUint32(3600)
	}
	return t.AsynchronousExecution
}

// GetAsynchronousRetention retrieves the value of the leaf AsynchronousRetention from the NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsynchronousRetention is set, it can
// safely use t.GetAsynchronousRetention() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsynchronousRetention == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts) GetAsynchronousRetention() NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts_AsynchronousRetention_Union {
	if t == nil || t.AsynchronousRetention == nil {
		return UnionUint32(86400)
	}
	return t.AsynchronousRetention
}

// GetSynchronousExecution retrieves the value of the leaf SynchronousExecution from the NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SynchronousExecution is set, it can
// safely use t.GetSynchronousExecution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SynchronousExecution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts) GetSynchronousExecution() NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts_SynchronousExecution_Union {
	if t == nil || t.SynchronousExecution == nil {
		return NokiaTypesOperation_OperationTimeout_Enum_never
	}
	return t.SynchronousExecution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AsynchronousExecution == nil {
		t.AsynchronousExecution = UnionUint32(3600)
	}
	if t.AsynchronousRetention == nil {
		t.AsynchronousRetention = UnionUint32(86400)
	}
	if t.SynchronousExecution == nil {
		t.SynchronousExecution = NokiaTypesOperation_OperationTimeout_Enum_never
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts.
func (*NokiaConf_Configure_System_ManagementInterface_Operations_GlobalTimeouts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_RemoteManagement represents the /nokia-conf/configure/system/management-interface/remote-management YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_RemoteManagement struct {
	AdminState              E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	AllowUnsecureConnection YANGEmpty                                                                           `path:"allow-unsecure-connection" module:"nokia-conf"`
	ApplyGroups             []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	ClientTlsProfile        *string                                                                             `path:"client-tls-profile" module:"nokia-conf"`
	ConnectionTimeout       *uint32                                                                             `path:"connection-timeout" module:"nokia-conf"`
	DeviceLabel             *string                                                                             `path:"device-label" module:"nokia-conf"`
	DeviceName              *string                                                                             `path:"device-name" module:"nokia-conf"`
	HelloInterval           *uint32                                                                             `path:"hello-interval" module:"nokia-conf"`
	Manager                 map[string]*NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager `path:"manager" module:"nokia-conf"`
	RouterInstance          *string                                                                             `path:"router-instance" module:"nokia-conf"`
	SourceAddress           *string                                                                             `path:"source-address" module:"nokia-conf"`
	SourcePort              NokiaConf_Configure_System_ManagementInterface_RemoteManagement_SourcePort_Union    `path:"source-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_RemoteManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_RemoteManagement) IsYANGGoStruct() {}

// NewManager creates a new entry in the Manager list of the
// NokiaConf_Configure_System_ManagementInterface_RemoteManagement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) NewManager(ManagerName string) (*NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Manager == nil {
		t.Manager = make(map[string]*NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager)
	}

	key := ManagerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Manager[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Manager", key)
	}

	t.Manager[key] = &NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager{
		ManagerName: &ManagerName,
	}

	return t.Manager[key], nil
}

// RenameManager renames an entry in the list Manager within
// the NokiaConf_Configure_System_ManagementInterface_RemoteManagement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) RenameManager(oldK, newK string) error {
	if _, ok := t.Manager[newK]; ok {
		return fmt.Errorf("key %v already exists in Manager", newK)
	}

	e, ok := t.Manager[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Manager", oldK)
	}
	e.ManagerName = &newK

	t.Manager[newK] = e
	delete(t.Manager, oldK)
	return nil
}

// GetOrCreateManager retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_ManagementInterface_RemoteManagement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetOrCreateManager(ManagerName string) *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager {

	key := ManagerName

	if v, ok := t.Manager[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewManager(ManagerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateManager got unexpected error: %v", err))
	}
	return v
}

// GetManager retrieves the value with the specified key from
// the Manager map field of NokiaConf_Configure_System_ManagementInterface_RemoteManagement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetManager(ManagerName string) *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager {

	if t == nil {
		return nil
	}

	key := ManagerName

	if lm, ok := t.Manager[key]; ok {
		return lm
	}
	return nil
}

// DeleteManager deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_ManagementInterface_RemoteManagement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) DeleteManager(ManagerName string) {
	key := ManagerName

	delete(t.Manager, key)
}

// AppendManager appends the supplied NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager struct to the
// list Manager of NokiaConf_Configure_System_ManagementInterface_RemoteManagement. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) AppendManager(v *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) error {
	if v.ManagerName == nil {
		return fmt.Errorf("invalid nil key received for ManagerName")
	}

	key := *v.ManagerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Manager == nil {
		t.Manager = make(map[string]*NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager)
	}

	if _, ok := t.Manager[key]; ok {
		return fmt.Errorf("duplicate key for list Manager %v", key)
	}

	t.Manager[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowUnsecureConnection retrieves the value of the leaf AllowUnsecureConnection from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnsecureConnection is set, it can
// safely use t.GetAllowUnsecureConnection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnsecureConnection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetAllowUnsecureConnection() YANGEmpty {
	if t == nil || t.AllowUnsecureConnection == false {
		return false
	}
	return t.AllowUnsecureConnection
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClientTlsProfile retrieves the value of the leaf ClientTlsProfile from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientTlsProfile is set, it can
// safely use t.GetClientTlsProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientTlsProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetClientTlsProfile() string {
	if t == nil || t.ClientTlsProfile == nil {
		return ""
	}
	return *t.ClientTlsProfile
}

// GetConnectionTimeout retrieves the value of the leaf ConnectionTimeout from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimeout is set, it can
// safely use t.GetConnectionTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetConnectionTimeout() uint32 {
	if t == nil || t.ConnectionTimeout == nil {
		return 60
	}
	return *t.ConnectionTimeout
}

// GetDeviceLabel retrieves the value of the leaf DeviceLabel from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeviceLabel is set, it can
// safely use t.GetDeviceLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeviceLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetDeviceLabel() string {
	if t == nil || t.DeviceLabel == nil {
		return ""
	}
	return *t.DeviceLabel
}

// GetDeviceName retrieves the value of the leaf DeviceName from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeviceName is set, it can
// safely use t.GetDeviceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeviceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetDeviceName() string {
	if t == nil || t.DeviceName == nil {
		return ""
	}
	return *t.DeviceName
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 600
	}
	return *t.HelloInterval
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "management"
	}
	return *t.RouterInstance
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourcePort retrieves the value of the leaf SourcePort from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) GetSourcePort() NokiaConf_Configure_System_ManagementInterface_RemoteManagement_SourcePort_Union {
	if t == nil || t.SourcePort == nil {
		return NokiaTypesSystem_RemoteMgmtRegistrationPort_Enum_grpc_default
	}
	return t.SourcePort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_RemoteManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ConnectionTimeout == nil {
		var v uint32 = 60
		t.ConnectionTimeout = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 600
		t.HelloInterval = &v
	}
	if t.RouterInstance == nil {
		var v string = "management"
		t.RouterInstance = &v
	}
	if t.SourcePort == nil {
		t.SourcePort = NokiaTypesSystem_RemoteMgmtRegistrationPort_Enum_grpc_default
	}
	for _, e := range t.Manager {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_RemoteManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_RemoteManagement.
func (*NokiaConf_Configure_System_ManagementInterface_RemoteManagement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager represents the /nokia-conf/configure/system/management-interface/remote-management/manager YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager struct {
	AdminState              E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	AllowUnsecureConnection YANGEmpty                                                                                `path:"allow-unsecure-connection" module:"nokia-conf"`
	ApplyGroups             []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	ClientTlsProfile        *string                                                                                  `path:"client-tls-profile" module:"nokia-conf"`
	ConnectionTimeout       *uint32                                                                                  `path:"connection-timeout" module:"nokia-conf"`
	Description             *string                                                                                  `path:"description" module:"nokia-conf"`
	DeviceLabel             *string                                                                                  `path:"device-label" module:"nokia-conf"`
	DeviceName              *string                                                                                  `path:"device-name" module:"nokia-conf"`
	ManagerAddress          *string                                                                                  `path:"manager-address" module:"nokia-conf"`
	ManagerName             *string                                                                                  `path:"manager-name" module:"nokia-conf"`
	ManagerPort             *int32                                                                                   `path:"manager-port" module:"nokia-conf"`
	RouterInstance          *string                                                                                  `path:"router-instance" module:"nokia-conf"`
	SourceAddress           *string                                                                                  `path:"source-address" module:"nokia-conf"`
	SourcePort              NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager_SourcePort_Union `path:"source-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowUnsecureConnection retrieves the value of the leaf AllowUnsecureConnection from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnsecureConnection is set, it can
// safely use t.GetAllowUnsecureConnection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnsecureConnection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetAllowUnsecureConnection() YANGEmpty {
	if t == nil || t.AllowUnsecureConnection == false {
		return false
	}
	return t.AllowUnsecureConnection
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClientTlsProfile retrieves the value of the leaf ClientTlsProfile from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientTlsProfile is set, it can
// safely use t.GetClientTlsProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientTlsProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetClientTlsProfile() string {
	if t == nil || t.ClientTlsProfile == nil {
		return ""
	}
	return *t.ClientTlsProfile
}

// GetConnectionTimeout retrieves the value of the leaf ConnectionTimeout from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimeout is set, it can
// safely use t.GetConnectionTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetConnectionTimeout() uint32 {
	if t == nil || t.ConnectionTimeout == nil {
		return 0
	}
	return *t.ConnectionTimeout
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDeviceLabel retrieves the value of the leaf DeviceLabel from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeviceLabel is set, it can
// safely use t.GetDeviceLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeviceLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetDeviceLabel() string {
	if t == nil || t.DeviceLabel == nil {
		return ""
	}
	return *t.DeviceLabel
}

// GetDeviceName retrieves the value of the leaf DeviceName from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeviceName is set, it can
// safely use t.GetDeviceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeviceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetDeviceName() string {
	if t == nil || t.DeviceName == nil {
		return ""
	}
	return *t.DeviceName
}

// GetManagerAddress retrieves the value of the leaf ManagerAddress from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagerAddress is set, it can
// safely use t.GetManagerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagerAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetManagerAddress() string {
	if t == nil || t.ManagerAddress == nil {
		return ""
	}
	return *t.ManagerAddress
}

// GetManagerName retrieves the value of the leaf ManagerName from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagerName is set, it can
// safely use t.GetManagerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetManagerName() string {
	if t == nil || t.ManagerName == nil {
		return ""
	}
	return *t.ManagerName
}

// GetManagerPort retrieves the value of the leaf ManagerPort from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagerPort is set, it can
// safely use t.GetManagerPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagerPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetManagerPort() int32 {
	if t == nil || t.ManagerPort == nil {
		return 57400
	}
	return *t.ManagerPort
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourcePort retrieves the value of the leaf SourcePort from the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) GetSourcePort() NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager_SourcePort_Union {
	if t == nil || t.SourcePort == nil {
		return nil
	}
	return t.SourcePort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ManagerPort == nil {
		var v int32 = 57400
		t.ManagerPort = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ManagerName == nil {
		return nil, fmt.Errorf("nil value for key ManagerName")
	}

	return map[string]interface{}{
		"manager-name": *t.ManagerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager.
func (*NokiaConf_Configure_System_ManagementInterface_RemoteManagement_Manager) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Snmp represents the /nokia-conf/configure/system/management-interface/snmp YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Snmp struct {
	AdminState         E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	EngineId           *string                                                        `path:"engine-id" module:"nokia-conf"`
	GeneralPort        *int32                                                         `path:"general-port" module:"nokia-conf"`
	PacketSize         *int32                                                         `path:"packet-size" module:"nokia-conf"`
	Streaming          *NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming `path:"streaming" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Snmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Snmp) IsYANGGoStruct() {}

// GetOrCreateStreaming retrieves the value of the Streaming field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp) GetOrCreateStreaming() *NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming {
	if t.Streaming != nil {
		return t.Streaming
	}
	t.Streaming = &NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming{}
	return t.Streaming
}

// GetStreaming returns the value of the Streaming struct pointer
// from NokiaConf_Configure_System_ManagementInterface_Snmp. If the receiver or the field Streaming is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp) GetStreaming() *NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming {
	if t != nil && t.Streaming != nil {
		return t.Streaming
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_ManagementInterface_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEngineId retrieves the value of the leaf EngineId from the NokiaConf_Configure_System_ManagementInterface_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EngineId is set, it can
// safely use t.GetEngineId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EngineId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp) GetEngineId() string {
	if t == nil || t.EngineId == nil {
		return ""
	}
	return *t.EngineId
}

// GetGeneralPort retrieves the value of the leaf GeneralPort from the NokiaConf_Configure_System_ManagementInterface_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GeneralPort is set, it can
// safely use t.GetGeneralPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GeneralPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp) GetGeneralPort() int32 {
	if t == nil || t.GeneralPort == nil {
		return 161
	}
	return *t.GeneralPort
}

// GetPacketSize retrieves the value of the leaf PacketSize from the NokiaConf_Configure_System_ManagementInterface_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketSize is set, it can
// safely use t.GetPacketSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp) GetPacketSize() int32 {
	if t == nil || t.PacketSize == nil {
		return 1500
	}
	return *t.PacketSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Snmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.GeneralPort == nil {
		var v int32 = 161
		t.GeneralPort = &v
	}
	if t.PacketSize == nil {
		var v int32 = 1500
		t.PacketSize = &v
	}
	t.Streaming.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Snmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Snmp.
func (*NokiaConf_Configure_System_ManagementInterface_Snmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming represents the /nokia-conf/configure/system/management-interface/snmp/streaming YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming.
func (*NokiaConf_Configure_System_ManagementInterface_Snmp_Streaming) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_YangModules represents the /nokia-conf/configure/system/management-interface/yang-modules YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_YangModules struct {
	ApplyGroups          []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	BaseR13Modules       *bool                                                            `path:"base-r13-modules" module:"nokia-conf"`
	Nmda                 *NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda `path:"nmda" module:"nokia-conf"`
	NokiaCombinedModules *bool                                                            `path:"nokia-combined-modules" module:"nokia-conf"`
	NokiaModules         *bool                                                            `path:"nokia-modules" module:"nokia-conf"`
	NokiaSubmodules      *bool                                                            `path:"nokia-submodules" module:"nokia-conf"`
	OpenconfigModules    *bool                                                            `path:"openconfig-modules" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_YangModules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_YangModules) IsYANGGoStruct() {}

// GetOrCreateNmda retrieves the value of the Nmda field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) GetOrCreateNmda() *NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda {
	if t.Nmda != nil {
		return t.Nmda
	}
	t.Nmda = &NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda{}
	return t.Nmda
}

// GetNmda returns the value of the Nmda struct pointer
// from NokiaConf_Configure_System_ManagementInterface_YangModules. If the receiver or the field Nmda is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) GetNmda() *NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda {
	if t != nil && t.Nmda != nil {
		return t.Nmda
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ManagementInterface_YangModules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ManagementInterface_YangModules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBaseR13Modules retrieves the value of the leaf BaseR13Modules from the NokiaConf_Configure_System_ManagementInterface_YangModules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BaseR13Modules is set, it can
// safely use t.GetBaseR13Modules() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BaseR13Modules == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) GetBaseR13Modules() bool {
	if t == nil || t.BaseR13Modules == nil {
		return false
	}
	return *t.BaseR13Modules
}

// GetNokiaCombinedModules retrieves the value of the leaf NokiaCombinedModules from the NokiaConf_Configure_System_ManagementInterface_YangModules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NokiaCombinedModules is set, it can
// safely use t.GetNokiaCombinedModules() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NokiaCombinedModules == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) GetNokiaCombinedModules() bool {
	if t == nil || t.NokiaCombinedModules == nil {
		return false
	}
	return *t.NokiaCombinedModules
}

// GetNokiaModules retrieves the value of the leaf NokiaModules from the NokiaConf_Configure_System_ManagementInterface_YangModules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NokiaModules is set, it can
// safely use t.GetNokiaModules() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NokiaModules == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) GetNokiaModules() bool {
	if t == nil || t.NokiaModules == nil {
		return false
	}
	return *t.NokiaModules
}

// GetNokiaSubmodules retrieves the value of the leaf NokiaSubmodules from the NokiaConf_Configure_System_ManagementInterface_YangModules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NokiaSubmodules is set, it can
// safely use t.GetNokiaSubmodules() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NokiaSubmodules == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) GetNokiaSubmodules() bool {
	if t == nil || t.NokiaSubmodules == nil {
		return false
	}
	return *t.NokiaSubmodules
}

// GetOpenconfigModules retrieves the value of the leaf OpenconfigModules from the NokiaConf_Configure_System_ManagementInterface_YangModules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OpenconfigModules is set, it can
// safely use t.GetOpenconfigModules() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OpenconfigModules == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) GetOpenconfigModules() bool {
	if t == nil || t.OpenconfigModules == nil {
		return false
	}
	return *t.OpenconfigModules
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_YangModules
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BaseR13Modules == nil {
		var v bool = false
		t.BaseR13Modules = &v
	}
	if t.OpenconfigModules == nil {
		var v bool = false
		t.OpenconfigModules = &v
	}
	t.Nmda.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_YangModules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_YangModules.
func (*NokiaConf_Configure_System_ManagementInterface_YangModules) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda represents the /nokia-conf/configure/system/management-interface/yang-modules/nmda YANG schema element.
type NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda struct {
	NmdaSupport *bool `path:"nmda-support" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda) IsYANGGoStruct() {}

// GetNmdaSupport retrieves the value of the leaf NmdaSupport from the NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NmdaSupport is set, it can
// safely use t.GetNmdaSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NmdaSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda) GetNmdaSupport() bool {
	if t == nil || t.NmdaSupport == nil {
		return false
	}
	return *t.NmdaSupport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NmdaSupport == nil {
		var v bool = false
		t.NmdaSupport = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda.
func (*NokiaConf_Configure_System_ManagementInterface_YangModules_Nmda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_NetworkElementDiscovery represents the /nokia-conf/configure/system/network-element-discovery YANG schema element.
type NokiaConf_Configure_System_NetworkElementDiscovery struct {
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	GenerateTraps      *bool                                                                  `path:"generate-traps" module:"nokia-conf"`
	Profile            map[string]*NokiaConf_Configure_System_NetworkElementDiscovery_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_NetworkElementDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_NetworkElementDiscovery) IsYANGGoStruct() {}

// NewProfile creates a new entry in the Profile list of the
// NokiaConf_Configure_System_NetworkElementDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) NewProfile(Name string) (*NokiaConf_Configure_System_NetworkElementDiscovery_Profile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*NokiaConf_Configure_System_NetworkElementDiscovery_Profile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Profile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Profile", key)
	}

	t.Profile[key] = &NokiaConf_Configure_System_NetworkElementDiscovery_Profile{
		Name: &Name,
	}

	return t.Profile[key], nil
}

// RenameProfile renames an entry in the list Profile within
// the NokiaConf_Configure_System_NetworkElementDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) RenameProfile(oldK, newK string) error {
	if _, ok := t.Profile[newK]; ok {
		return fmt.Errorf("key %v already exists in Profile", newK)
	}

	e, ok := t.Profile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Profile", oldK)
	}
	e.Name = &newK

	t.Profile[newK] = e
	delete(t.Profile, oldK)
	return nil
}

// GetOrCreateProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_NetworkElementDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) GetOrCreateProfile(Name string) *NokiaConf_Configure_System_NetworkElementDiscovery_Profile {

	key := Name

	if v, ok := t.Profile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProfile got unexpected error: %v", err))
	}
	return v
}

// GetProfile retrieves the value with the specified key from
// the Profile map field of NokiaConf_Configure_System_NetworkElementDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) GetProfile(Name string) *NokiaConf_Configure_System_NetworkElementDiscovery_Profile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Profile[key]; ok {
		return lm
	}
	return nil
}

// DeleteProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_NetworkElementDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) DeleteProfile(Name string) {
	key := Name

	delete(t.Profile, key)
}

// AppendProfile appends the supplied NokiaConf_Configure_System_NetworkElementDiscovery_Profile struct to the
// list Profile of NokiaConf_Configure_System_NetworkElementDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_NetworkElementDiscovery_Profile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) AppendProfile(v *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*NokiaConf_Configure_System_NetworkElementDiscovery_Profile)
	}

	if _, ok := t.Profile[key]; ok {
		return fmt.Errorf("duplicate key for list Profile %v", key)
	}

	t.Profile[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_NetworkElementDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_NetworkElementDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGenerateTraps retrieves the value of the leaf GenerateTraps from the NokiaConf_Configure_System_NetworkElementDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GenerateTraps is set, it can
// safely use t.GetGenerateTraps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GenerateTraps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) GetGenerateTraps() bool {
	if t == nil || t.GenerateTraps == nil {
		return false
	}
	return *t.GenerateTraps
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_NetworkElementDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GenerateTraps == nil {
		var v bool = false
		t.GenerateTraps = &v
	}
	for _, e := range t.Profile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_NetworkElementDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_NetworkElementDiscovery.
func (*NokiaConf_Configure_System_NetworkElementDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_NetworkElementDiscovery_Profile represents the /nokia-conf/configure/system/network-element-discovery/profile YANG schema element.
type NokiaConf_Configure_System_NetworkElementDiscovery_Profile struct {
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Name               *string                                                          `path:"name" module:"nokia-conf"`
	Neid               *string                                                          `path:"neid" module:"nokia-conf"`
	Neip               *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip `path:"neip" module:"nokia-conf"`
	PlatformType       *string                                                          `path:"platform-type" module:"nokia-conf"`
	SystemMac          *string                                                          `path:"system-mac" module:"nokia-conf"`
	VendorId           *string                                                          `path:"vendor-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_NetworkElementDiscovery_Profile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_NetworkElementDiscovery_Profile) IsYANGGoStruct() {}

// GetOrCreateNeip retrieves the value of the Neip field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) GetOrCreateNeip() *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip {
	if t.Neip != nil {
		return t.Neip
	}
	t.Neip = &NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip{}
	return t.Neip
}

// GetNeip returns the value of the Neip struct pointer
// from NokiaConf_Configure_System_NetworkElementDiscovery_Profile. If the receiver or the field Neip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) GetNeip() *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip {
	if t != nil && t.Neip != nil {
		return t.Neip
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNeid retrieves the value of the leaf Neid from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neid is set, it can
// safely use t.GetNeid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) GetNeid() string {
	if t == nil || t.Neid == nil {
		return ""
	}
	return *t.Neid
}

// GetPlatformType retrieves the value of the leaf PlatformType from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PlatformType is set, it can
// safely use t.GetPlatformType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PlatformType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) GetPlatformType() string {
	if t == nil || t.PlatformType == nil {
		return ""
	}
	return *t.PlatformType
}

// GetSystemMac retrieves the value of the leaf SystemMac from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemMac is set, it can
// safely use t.GetSystemMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) GetSystemMac() string {
	if t == nil || t.SystemMac == nil {
		return ""
	}
	return *t.SystemMac
}

// GetVendorId retrieves the value of the leaf VendorId from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorId is set, it can
// safely use t.GetVendorId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) GetVendorId() string {
	if t == nil || t.VendorId == nil {
		return "Nokia"
	}
	return *t.VendorId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_NetworkElementDiscovery_Profile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.VendorId == nil {
		var v string = "Nokia"
		t.VendorId = &v
	}
	t.Neip.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_NetworkElementDiscovery_Profile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_NetworkElementDiscovery_Profile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_NetworkElementDiscovery_Profile.
func (*NokiaConf_Configure_System_NetworkElementDiscovery_Profile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip represents the /nokia-conf/configure/system/network-element-discovery/profile/neip YANG schema element.
type NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip struct {
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoGenerate       *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate `path:"auto-generate" module:"nokia-conf"`
	Ipv4               *string                                                                       `path:"ipv4" module:"nokia-conf"`
	Ipv6               *string                                                                       `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip) IsYANGGoStruct() {}

// GetOrCreateAutoGenerate retrieves the value of the AutoGenerate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip) GetOrCreateAutoGenerate() *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate {
	if t.AutoGenerate != nil {
		return t.AutoGenerate
	}
	t.AutoGenerate = &NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate{}
	return t.AutoGenerate
}

// GetAutoGenerate returns the value of the AutoGenerate struct pointer
// from NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip. If the receiver or the field AutoGenerate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip) GetAutoGenerate() *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate {
	if t != nil && t.AutoGenerate != nil {
		return t.AutoGenerate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AutoGenerate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip.
func (*NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate represents the /nokia-conf/configure/system/network-element-discovery/profile/neip/auto-generate YANG schema element.
type NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate struct {
	Ipv4 *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4 `path:"ipv4" module:"nokia-conf" yangPresence:"true"`
	Ipv6 *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6 `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) IsYANGGoStruct() {
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) GetOrCreateIpv4() *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) GetOrCreateIpv6() *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) GetIpv4() *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) GetIpv6() *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate.
func (*NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4 represents the /nokia-conf/configure/system/network-element-discovery/profile/neip/auto-generate/ipv4 YANG schema element.
type NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4 struct {
	VendorIdValue *uint32 `path:"vendor-id-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) IsYANGGoStruct() {
}

// GetVendorIdValue retrieves the value of the leaf VendorIdValue from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorIdValue is set, it can
// safely use t.GetVendorIdValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorIdValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) GetVendorIdValue() uint32 {
	if t == nil || t.VendorIdValue == nil {
		return 140
	}
	return *t.VendorIdValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.VendorIdValue == nil {
		var v uint32 = 140
		t.VendorIdValue = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4.
func (*NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6 represents the /nokia-conf/configure/system/network-element-discovery/profile/neip/auto-generate/ipv6 YANG schema element.
type NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6 struct {
	VendorIdValue *uint32 `path:"vendor-id-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) IsYANGGoStruct() {
}

// GetVendorIdValue retrieves the value of the leaf VendorIdValue from the NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorIdValue is set, it can
// safely use t.GetVendorIdValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorIdValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) GetVendorIdValue() uint32 {
	if t == nil || t.VendorIdValue == nil {
		return 140
	}
	return *t.VendorIdValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.VendorIdValue == nil {
		var v uint32 = 140
		t.VendorIdValue = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6.
func (*NokiaConf_Configure_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Persistence represents the /nokia-conf/configure/system/persistence YANG schema element.
type NokiaConf_Configure_System_Persistence struct {
	Ancp                 *NokiaConf_Configure_System_Persistence_Ancp                 `path:"ancp" module:"nokia-conf"`
	ApplicationAssurance *NokiaConf_Configure_System_Persistence_ApplicationAssurance `path:"application-assurance" module:"nokia-conf"`
	ApplyGroups          []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	DhcpServer           *NokiaConf_Configure_System_Persistence_DhcpServer           `path:"dhcp-server" module:"nokia-conf"`
	NatPortForwarding    *NokiaConf_Configure_System_Persistence_NatPortForwarding    `path:"nat-port-forwarding" module:"nokia-conf"`
	Options              *NokiaConf_Configure_System_Persistence_Options              `path:"options" module:"nokia-conf"`
	PythonPolicyCache    *NokiaConf_Configure_System_Persistence_PythonPolicyCache    `path:"python-policy-cache" module:"nokia-conf"`
	SubscriberMgmt       *NokiaConf_Configure_System_Persistence_SubscriberMgmt       `path:"subscriber-mgmt" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Persistence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Persistence) IsYANGGoStruct() {}

// GetOrCreateAncp retrieves the value of the Ancp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Persistence) GetOrCreateAncp() *NokiaConf_Configure_System_Persistence_Ancp {
	if t.Ancp != nil {
		return t.Ancp
	}
	t.Ancp = &NokiaConf_Configure_System_Persistence_Ancp{}
	return t.Ancp
}

// GetOrCreateApplicationAssurance retrieves the value of the ApplicationAssurance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Persistence) GetOrCreateApplicationAssurance() *NokiaConf_Configure_System_Persistence_ApplicationAssurance {
	if t.ApplicationAssurance != nil {
		return t.ApplicationAssurance
	}
	t.ApplicationAssurance = &NokiaConf_Configure_System_Persistence_ApplicationAssurance{}
	return t.ApplicationAssurance
}

// GetOrCreateDhcpServer retrieves the value of the DhcpServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Persistence) GetOrCreateDhcpServer() *NokiaConf_Configure_System_Persistence_DhcpServer {
	if t.DhcpServer != nil {
		return t.DhcpServer
	}
	t.DhcpServer = &NokiaConf_Configure_System_Persistence_DhcpServer{}
	return t.DhcpServer
}

// GetOrCreateNatPortForwarding retrieves the value of the NatPortForwarding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Persistence) GetOrCreateNatPortForwarding() *NokiaConf_Configure_System_Persistence_NatPortForwarding {
	if t.NatPortForwarding != nil {
		return t.NatPortForwarding
	}
	t.NatPortForwarding = &NokiaConf_Configure_System_Persistence_NatPortForwarding{}
	return t.NatPortForwarding
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Persistence) GetOrCreateOptions() *NokiaConf_Configure_System_Persistence_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_System_Persistence_Options{}
	return t.Options
}

// GetOrCreatePythonPolicyCache retrieves the value of the PythonPolicyCache field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Persistence) GetOrCreatePythonPolicyCache() *NokiaConf_Configure_System_Persistence_PythonPolicyCache {
	if t.PythonPolicyCache != nil {
		return t.PythonPolicyCache
	}
	t.PythonPolicyCache = &NokiaConf_Configure_System_Persistence_PythonPolicyCache{}
	return t.PythonPolicyCache
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Persistence) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_System_Persistence_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_System_Persistence_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetAncp returns the value of the Ancp struct pointer
// from NokiaConf_Configure_System_Persistence. If the receiver or the field Ancp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Persistence) GetAncp() *NokiaConf_Configure_System_Persistence_Ancp {
	if t != nil && t.Ancp != nil {
		return t.Ancp
	}
	return nil
}

// GetApplicationAssurance returns the value of the ApplicationAssurance struct pointer
// from NokiaConf_Configure_System_Persistence. If the receiver or the field ApplicationAssurance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Persistence) GetApplicationAssurance() *NokiaConf_Configure_System_Persistence_ApplicationAssurance {
	if t != nil && t.ApplicationAssurance != nil {
		return t.ApplicationAssurance
	}
	return nil
}

// GetDhcpServer returns the value of the DhcpServer struct pointer
// from NokiaConf_Configure_System_Persistence. If the receiver or the field DhcpServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Persistence) GetDhcpServer() *NokiaConf_Configure_System_Persistence_DhcpServer {
	if t != nil && t.DhcpServer != nil {
		return t.DhcpServer
	}
	return nil
}

// GetNatPortForwarding returns the value of the NatPortForwarding struct pointer
// from NokiaConf_Configure_System_Persistence. If the receiver or the field NatPortForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Persistence) GetNatPortForwarding() *NokiaConf_Configure_System_Persistence_NatPortForwarding {
	if t != nil && t.NatPortForwarding != nil {
		return t.NatPortForwarding
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_System_Persistence. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Persistence) GetOptions() *NokiaConf_Configure_System_Persistence_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetPythonPolicyCache returns the value of the PythonPolicyCache struct pointer
// from NokiaConf_Configure_System_Persistence. If the receiver or the field PythonPolicyCache is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Persistence) GetPythonPolicyCache() *NokiaConf_Configure_System_Persistence_PythonPolicyCache {
	if t != nil && t.PythonPolicyCache != nil {
		return t.PythonPolicyCache
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_System_Persistence. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Persistence) GetSubscriberMgmt() *NokiaConf_Configure_System_Persistence_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Persistence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Persistence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Persistence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Persistence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ancp.PopulateDefaults()
	t.ApplicationAssurance.PopulateDefaults()
	t.DhcpServer.PopulateDefaults()
	t.NatPortForwarding.PopulateDefaults()
	t.Options.PopulateDefaults()
	t.PythonPolicyCache.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Persistence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Persistence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Persistence.
func (*NokiaConf_Configure_System_Persistence) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Persistence_Ancp represents the /nokia-conf/configure/system/persistence/ancp YANG schema element.
type NokiaConf_Configure_System_Persistence_Ancp struct {
	ApplyGroups        []string                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                       `path:"description" module:"nokia-conf"`
	Location           E_NokiaTypesSystem_CpmFlashId `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Persistence_Ancp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Persistence_Ancp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Persistence_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_Ancp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Persistence_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_Ancp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Persistence_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_Ancp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_System_Persistence_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_Ancp) GetLocation() E_NokiaTypesSystem_CpmFlashId {
	if t == nil || t.Location == 0 {
		return 0
	}
	return t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Persistence_Ancp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Persistence_Ancp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_Ancp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Persistence_Ancp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_Ancp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Persistence_Ancp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Persistence_Ancp.
func (*NokiaConf_Configure_System_Persistence_Ancp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Persistence_ApplicationAssurance represents the /nokia-conf/configure/system/persistence/application-assurance YANG schema element.
type NokiaConf_Configure_System_Persistence_ApplicationAssurance struct {
	ApplyGroups        []string                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                       `path:"description" module:"nokia-conf"`
	Location           E_NokiaTypesSystem_CpmFlashId `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Persistence_ApplicationAssurance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Persistence_ApplicationAssurance) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Persistence_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_ApplicationAssurance) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Persistence_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_ApplicationAssurance) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Persistence_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_ApplicationAssurance) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_System_Persistence_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_ApplicationAssurance) GetLocation() E_NokiaTypesSystem_CpmFlashId {
	if t == nil || t.Location == 0 {
		return 0
	}
	return t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Persistence_ApplicationAssurance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Persistence_ApplicationAssurance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_ApplicationAssurance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Persistence_ApplicationAssurance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_ApplicationAssurance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Persistence_ApplicationAssurance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Persistence_ApplicationAssurance.
func (*NokiaConf_Configure_System_Persistence_ApplicationAssurance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Persistence_DhcpServer represents the /nokia-conf/configure/system/persistence/dhcp-server YANG schema element.
type NokiaConf_Configure_System_Persistence_DhcpServer struct {
	ApplyGroups        []string                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                       `path:"description" module:"nokia-conf"`
	Location           E_NokiaTypesSystem_CpmFlashId `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Persistence_DhcpServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Persistence_DhcpServer) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Persistence_DhcpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_DhcpServer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Persistence_DhcpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_DhcpServer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Persistence_DhcpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_DhcpServer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_System_Persistence_DhcpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_DhcpServer) GetLocation() E_NokiaTypesSystem_CpmFlashId {
	if t == nil || t.Location == 0 {
		return 0
	}
	return t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Persistence_DhcpServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Persistence_DhcpServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_DhcpServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Persistence_DhcpServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_DhcpServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Persistence_DhcpServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Persistence_DhcpServer.
func (*NokiaConf_Configure_System_Persistence_DhcpServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Persistence_NatPortForwarding represents the /nokia-conf/configure/system/persistence/nat-port-forwarding YANG schema element.
type NokiaConf_Configure_System_Persistence_NatPortForwarding struct {
	ApplyGroups        []string                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                       `path:"description" module:"nokia-conf"`
	Location           E_NokiaTypesSystem_CpmFlashId `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Persistence_NatPortForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Persistence_NatPortForwarding) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Persistence_NatPortForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_NatPortForwarding) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Persistence_NatPortForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_NatPortForwarding) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Persistence_NatPortForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_NatPortForwarding) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_System_Persistence_NatPortForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_NatPortForwarding) GetLocation() E_NokiaTypesSystem_CpmFlashId {
	if t == nil || t.Location == 0 {
		return 0
	}
	return t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Persistence_NatPortForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Persistence_NatPortForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_NatPortForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Persistence_NatPortForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_NatPortForwarding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Persistence_NatPortForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Persistence_NatPortForwarding.
func (*NokiaConf_Configure_System_Persistence_NatPortForwarding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Persistence_Options represents the /nokia-conf/configure/system/persistence/options YANG schema element.
type NokiaConf_Configure_System_Persistence_Options struct {
	ApplyGroups            []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DhcpLeasetimeThreshold *uint32  `path:"dhcp-leasetime-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Persistence_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Persistence_Options) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Persistence_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_Options) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Persistence_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_Options) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDhcpLeasetimeThreshold retrieves the value of the leaf DhcpLeasetimeThreshold from the NokiaConf_Configure_System_Persistence_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpLeasetimeThreshold is set, it can
// safely use t.GetDhcpLeasetimeThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpLeasetimeThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_Options) GetDhcpLeasetimeThreshold() uint32 {
	if t == nil || t.DhcpLeasetimeThreshold == nil {
		return 0
	}
	return *t.DhcpLeasetimeThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Persistence_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Persistence_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Persistence_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Persistence_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Persistence_Options.
func (*NokiaConf_Configure_System_Persistence_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Persistence_PythonPolicyCache represents the /nokia-conf/configure/system/persistence/python-policy-cache YANG schema element.
type NokiaConf_Configure_System_Persistence_PythonPolicyCache struct {
	ApplyGroups        []string                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                       `path:"description" module:"nokia-conf"`
	Location           E_NokiaTypesSystem_CpmFlashId `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Persistence_PythonPolicyCache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Persistence_PythonPolicyCache) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Persistence_PythonPolicyCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_PythonPolicyCache) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Persistence_PythonPolicyCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_PythonPolicyCache) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Persistence_PythonPolicyCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_PythonPolicyCache) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_System_Persistence_PythonPolicyCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_PythonPolicyCache) GetLocation() E_NokiaTypesSystem_CpmFlashId {
	if t == nil || t.Location == 0 {
		return 0
	}
	return t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Persistence_PythonPolicyCache
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Persistence_PythonPolicyCache) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_PythonPolicyCache) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Persistence_PythonPolicyCache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_PythonPolicyCache) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Persistence_PythonPolicyCache) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Persistence_PythonPolicyCache.
func (*NokiaConf_Configure_System_Persistence_PythonPolicyCache) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Persistence_SubscriberMgmt represents the /nokia-conf/configure/system/persistence/subscriber-mgmt YANG schema element.
type NokiaConf_Configure_System_Persistence_SubscriberMgmt struct {
	ApplyGroups        []string                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                       `path:"description" module:"nokia-conf"`
	Location           E_NokiaTypesSystem_CpmFlashId `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Persistence_SubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Persistence_SubscriberMgmt) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Persistence_SubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_SubscriberMgmt) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Persistence_SubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_SubscriberMgmt) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Persistence_SubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_SubscriberMgmt) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_System_Persistence_SubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Persistence_SubscriberMgmt) GetLocation() E_NokiaTypesSystem_CpmFlashId {
	if t == nil || t.Location == 0 {
		return 0
	}
	return t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Persistence_SubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Persistence_SubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_SubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Persistence_SubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Persistence_SubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Persistence_SubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Persistence_SubscriberMgmt.
func (*NokiaConf_Configure_System_Persistence_SubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_PowerManagement represents the /nokia-conf/configure/system/power-management YANG schema element.
type NokiaConf_Configure_System_PowerManagement struct {
	ApplyGroups        []string                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Mode               E_NokiaConf_Configure_System_PowerManagement_Mode `path:"mode" module:"nokia-conf"`
	PowerSafetyAlert   *uint32                                           `path:"power-safety-alert" module:"nokia-conf"`
	PowerSafetyLevel   *uint32                                           `path:"power-safety-level" module:"nokia-conf"`
	PowerZone          *uint32                                           `path:"power-zone" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_PowerManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_PowerManagement) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_PowerManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_PowerManagement) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_PowerManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_PowerManagement) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_System_PowerManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_PowerManagement) GetMode() E_NokiaConf_Configure_System_PowerManagement_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_System_PowerManagement_Mode_basic
	}
	return t.Mode
}

// GetPowerSafetyAlert retrieves the value of the leaf PowerSafetyAlert from the NokiaConf_Configure_System_PowerManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerSafetyAlert is set, it can
// safely use t.GetPowerSafetyAlert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerSafetyAlert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_PowerManagement) GetPowerSafetyAlert() uint32 {
	if t == nil || t.PowerSafetyAlert == nil {
		return 0
	}
	return *t.PowerSafetyAlert
}

// GetPowerSafetyLevel retrieves the value of the leaf PowerSafetyLevel from the NokiaConf_Configure_System_PowerManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerSafetyLevel is set, it can
// safely use t.GetPowerSafetyLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerSafetyLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_PowerManagement) GetPowerSafetyLevel() uint32 {
	if t == nil || t.PowerSafetyLevel == nil {
		return 100
	}
	return *t.PowerSafetyLevel
}

// GetPowerZone retrieves the value of the leaf PowerZone from the NokiaConf_Configure_System_PowerManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerZone is set, it can
// safely use t.GetPowerZone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerZone == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_PowerManagement) GetPowerZone() uint32 {
	if t == nil || t.PowerZone == nil {
		return 0
	}
	return *t.PowerZone
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_PowerManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_PowerManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_System_PowerManagement_Mode_basic
	}
	if t.PowerSafetyAlert == nil {
		var v uint32 = 0
		t.PowerSafetyAlert = &v
	}
	if t.PowerSafetyLevel == nil {
		var v uint32 = 100
		t.PowerSafetyLevel = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_PowerManagement struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_PowerManagement) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PowerZone == nil {
		return nil, fmt.Errorf("nil value for key PowerZone")
	}

	return map[string]interface{}{
		"power-zone": *t.PowerZone,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_PowerManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_PowerManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_PowerManagement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_PowerManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_PowerManagement.
func (*NokiaConf_Configure_System_PowerManagement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Ptp represents the /nokia-conf/configure/system/ptp YANG schema element.
type NokiaConf_Configure_System_Ptp struct {
	AdminState             E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	AlternateProfile       map[string]*NokiaConf_Configure_System_Ptp_AlternateProfile `path:"alternate-profile" module:"nokia-conf"`
	AnnounceReceiptTimeout *uint32                                                     `path:"announce-receipt-timeout" module:"nokia-conf"`
	ApplyGroups            []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	ClockType              E_NokiaTypesPtp_ClockType                                   `path:"clock-type" module:"nokia-conf"`
	Domain                 *uint32                                                     `path:"domain" module:"nokia-conf"`
	LocalPriority          *uint32                                                     `path:"local-priority" module:"nokia-conf"`
	LogAnnounceInterval    *int32                                                      `path:"log-announce-interval" module:"nokia-conf"`
	NetworkType            E_NokiaConf_Configure_System_Ptp_NetworkType                `path:"network-type" module:"nokia-conf"`
	Port                   map[string]*NokiaConf_Configure_System_Ptp_Port             `path:"port" module:"nokia-conf"`
	Priority1              *uint32                                                     `path:"priority1" module:"nokia-conf"`
	Priority2              *uint32                                                     `path:"priority2" module:"nokia-conf"`
	Profile                E_NokiaTypesPtp_Profile                                     `path:"profile" module:"nokia-conf"`
	Ptsf                   *NokiaConf_Configure_System_Ptp_Ptsf                        `path:"ptsf" module:"nokia-conf"`
	Router                 map[string]*NokiaConf_Configure_System_Ptp_Router           `path:"router" module:"nokia-conf"`
	TxWhileSyncUncertain   *bool                                                       `path:"tx-while-sync-uncertain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Ptp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Ptp) IsYANGGoStruct() {}

// NewAlternateProfile creates a new entry in the AlternateProfile list of the
// NokiaConf_Configure_System_Ptp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Ptp) NewAlternateProfile(Name string) (*NokiaConf_Configure_System_Ptp_AlternateProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AlternateProfile == nil {
		t.AlternateProfile = make(map[string]*NokiaConf_Configure_System_Ptp_AlternateProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AlternateProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AlternateProfile", key)
	}

	t.AlternateProfile[key] = &NokiaConf_Configure_System_Ptp_AlternateProfile{
		Name: &Name,
	}

	return t.AlternateProfile[key], nil
}

// RenameAlternateProfile renames an entry in the list AlternateProfile within
// the NokiaConf_Configure_System_Ptp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Ptp) RenameAlternateProfile(oldK, newK string) error {
	if _, ok := t.AlternateProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in AlternateProfile", newK)
	}

	e, ok := t.AlternateProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AlternateProfile", oldK)
	}
	e.Name = &newK

	t.AlternateProfile[newK] = e
	delete(t.AlternateProfile, oldK)
	return nil
}

// GetOrCreateAlternateProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Ptp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Ptp) GetOrCreateAlternateProfile(Name string) *NokiaConf_Configure_System_Ptp_AlternateProfile {

	key := Name

	if v, ok := t.AlternateProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlternateProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlternateProfile got unexpected error: %v", err))
	}
	return v
}

// GetAlternateProfile retrieves the value with the specified key from
// the AlternateProfile map field of NokiaConf_Configure_System_Ptp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Ptp) GetAlternateProfile(Name string) *NokiaConf_Configure_System_Ptp_AlternateProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AlternateProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlternateProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Ptp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Ptp) DeleteAlternateProfile(Name string) {
	key := Name

	delete(t.AlternateProfile, key)
}

// AppendAlternateProfile appends the supplied NokiaConf_Configure_System_Ptp_AlternateProfile struct to the
// list AlternateProfile of NokiaConf_Configure_System_Ptp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Ptp_AlternateProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Ptp) AppendAlternateProfile(v *NokiaConf_Configure_System_Ptp_AlternateProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AlternateProfile == nil {
		t.AlternateProfile = make(map[string]*NokiaConf_Configure_System_Ptp_AlternateProfile)
	}

	if _, ok := t.AlternateProfile[key]; ok {
		return fmt.Errorf("duplicate key for list AlternateProfile %v", key)
	}

	t.AlternateProfile[key] = v
	return nil
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_System_Ptp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Ptp) NewPort(PortId string) (*NokiaConf_Configure_System_Ptp_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_System_Ptp_Port)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_System_Ptp_Port{
		PortId: &PortId,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_System_Ptp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Ptp) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortId = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Ptp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Ptp) GetOrCreatePort(PortId string) *NokiaConf_Configure_System_Ptp_Port {

	key := PortId

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_System_Ptp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Ptp) GetPort(PortId string) *NokiaConf_Configure_System_Ptp_Port {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Ptp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Ptp) DeletePort(PortId string) {
	key := PortId

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_System_Ptp_Port struct to the
// list Port of NokiaConf_Configure_System_Ptp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Ptp_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Ptp) AppendPort(v *NokiaConf_Configure_System_Ptp_Port) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_System_Ptp_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewRouter creates a new entry in the Router list of the
// NokiaConf_Configure_System_Ptp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Ptp) NewRouter(RouterInstance string) (*NokiaConf_Configure_System_Ptp_Router, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[string]*NokiaConf_Configure_System_Ptp_Router)
	}

	key := RouterInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Router[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Router", key)
	}

	t.Router[key] = &NokiaConf_Configure_System_Ptp_Router{
		RouterInstance: &RouterInstance,
	}

	return t.Router[key], nil
}

// RenameRouter renames an entry in the list Router within
// the NokiaConf_Configure_System_Ptp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Ptp) RenameRouter(oldK, newK string) error {
	if _, ok := t.Router[newK]; ok {
		return fmt.Errorf("key %v already exists in Router", newK)
	}

	e, ok := t.Router[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Router", oldK)
	}
	e.RouterInstance = &newK

	t.Router[newK] = e
	delete(t.Router, oldK)
	return nil
}

// GetOrCreateRouter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Ptp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Ptp) GetOrCreateRouter(RouterInstance string) *NokiaConf_Configure_System_Ptp_Router {

	key := RouterInstance

	if v, ok := t.Router[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouter(RouterInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouter got unexpected error: %v", err))
	}
	return v
}

// GetRouter retrieves the value with the specified key from
// the Router map field of NokiaConf_Configure_System_Ptp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Ptp) GetRouter(RouterInstance string) *NokiaConf_Configure_System_Ptp_Router {

	if t == nil {
		return nil
	}

	key := RouterInstance

	if lm, ok := t.Router[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Ptp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Ptp) DeleteRouter(RouterInstance string) {
	key := RouterInstance

	delete(t.Router, key)
}

// AppendRouter appends the supplied NokiaConf_Configure_System_Ptp_Router struct to the
// list Router of NokiaConf_Configure_System_Ptp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Ptp_Router already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Ptp) AppendRouter(v *NokiaConf_Configure_System_Ptp_Router) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key received for RouterInstance")
	}

	key := *v.RouterInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[string]*NokiaConf_Configure_System_Ptp_Router)
	}

	if _, ok := t.Router[key]; ok {
		return fmt.Errorf("duplicate key for list Router %v", key)
	}

	t.Router[key] = v
	return nil
}

// GetOrCreatePtsf retrieves the value of the Ptsf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Ptp) GetOrCreatePtsf() *NokiaConf_Configure_System_Ptp_Ptsf {
	if t.Ptsf != nil {
		return t.Ptsf
	}
	t.Ptsf = &NokiaConf_Configure_System_Ptp_Ptsf{}
	return t.Ptsf
}

// GetPtsf returns the value of the Ptsf struct pointer
// from NokiaConf_Configure_System_Ptp. If the receiver or the field Ptsf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Ptp) GetPtsf() *NokiaConf_Configure_System_Ptp_Ptsf {
	if t != nil && t.Ptsf != nil {
		return t.Ptsf
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAnnounceReceiptTimeout retrieves the value of the leaf AnnounceReceiptTimeout from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AnnounceReceiptTimeout is set, it can
// safely use t.GetAnnounceReceiptTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AnnounceReceiptTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetAnnounceReceiptTimeout() uint32 {
	if t == nil || t.AnnounceReceiptTimeout == nil {
		return 3
	}
	return *t.AnnounceReceiptTimeout
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClockType retrieves the value of the leaf ClockType from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockType is set, it can
// safely use t.GetClockType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetClockType() E_NokiaTypesPtp_ClockType {
	if t == nil || t.ClockType == 0 {
		return 0
	}
	return t.ClockType
}

// GetDomain retrieves the value of the leaf Domain from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Domain is set, it can
// safely use t.GetDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Domain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetDomain() uint32 {
	if t == nil || t.Domain == nil {
		return 0
	}
	return *t.Domain
}

// GetLocalPriority retrieves the value of the leaf LocalPriority from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPriority is set, it can
// safely use t.GetLocalPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetLocalPriority() uint32 {
	if t == nil || t.LocalPriority == nil {
		return 128
	}
	return *t.LocalPriority
}

// GetLogAnnounceInterval retrieves the value of the leaf LogAnnounceInterval from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogAnnounceInterval is set, it can
// safely use t.GetLogAnnounceInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogAnnounceInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetLogAnnounceInterval() int32 {
	if t == nil || t.LogAnnounceInterval == nil {
		return 0
	}
	return *t.LogAnnounceInterval
}

// GetNetworkType retrieves the value of the leaf NetworkType from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkType is set, it can
// safely use t.GetNetworkType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetNetworkType() E_NokiaConf_Configure_System_Ptp_NetworkType {
	if t == nil || t.NetworkType == 0 {
		return NokiaConf_Configure_System_Ptp_NetworkType_sdh
	}
	return t.NetworkType
}

// GetPriority1 retrieves the value of the leaf Priority1 from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority1 is set, it can
// safely use t.GetPriority1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetPriority1() uint32 {
	if t == nil || t.Priority1 == nil {
		return 128
	}
	return *t.Priority1
}

// GetPriority2 retrieves the value of the leaf Priority2 from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority2 is set, it can
// safely use t.GetPriority2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetPriority2() uint32 {
	if t == nil || t.Priority2 == nil {
		return 128
	}
	return *t.Priority2
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetProfile() E_NokiaTypesPtp_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetTxWhileSyncUncertain retrieves the value of the leaf TxWhileSyncUncertain from the NokiaConf_Configure_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxWhileSyncUncertain is set, it can
// safely use t.GetTxWhileSyncUncertain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxWhileSyncUncertain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp) GetTxWhileSyncUncertain() bool {
	if t == nil || t.TxWhileSyncUncertain == nil {
		return true
	}
	return *t.TxWhileSyncUncertain
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Ptp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Ptp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AnnounceReceiptTimeout == nil {
		var v uint32 = 3
		t.AnnounceReceiptTimeout = &v
	}
	if t.LocalPriority == nil {
		var v uint32 = 128
		t.LocalPriority = &v
	}
	if t.NetworkType == 0 {
		t.NetworkType = NokiaConf_Configure_System_Ptp_NetworkType_sdh
	}
	if t.Priority1 == nil {
		var v uint32 = 128
		t.Priority1 = &v
	}
	if t.Priority2 == nil {
		var v uint32 = 128
		t.Priority2 = &v
	}
	if t.TxWhileSyncUncertain == nil {
		var v bool = true
		t.TxWhileSyncUncertain = &v
	}
	t.Ptsf.PopulateDefaults()
	for _, e := range t.AlternateProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.Router {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Ptp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Ptp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Ptp.
func (*NokiaConf_Configure_System_Ptp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Ptp_AlternateProfile represents the /nokia-conf/configure/system/ptp/alternate-profile YANG schema element.
type NokiaConf_Configure_System_Ptp_AlternateProfile struct {
	AdminState          E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Domain              *uint32                                                   `path:"domain" module:"nokia-conf"`
	LogAnnounceInterval *int32                                                    `path:"log-announce-interval" module:"nokia-conf"`
	Name                *string                                                   `path:"name" module:"nokia-conf"`
	Profile             E_NokiaConf_Configure_System_Ptp_AlternateProfile_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Ptp_AlternateProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Ptp_AlternateProfile) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Ptp_AlternateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_AlternateProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Ptp_AlternateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_AlternateProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Ptp_AlternateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_AlternateProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDomain retrieves the value of the leaf Domain from the NokiaConf_Configure_System_Ptp_AlternateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Domain is set, it can
// safely use t.GetDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Domain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_AlternateProfile) GetDomain() uint32 {
	if t == nil || t.Domain == nil {
		return 24
	}
	return *t.Domain
}

// GetLogAnnounceInterval retrieves the value of the leaf LogAnnounceInterval from the NokiaConf_Configure_System_Ptp_AlternateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogAnnounceInterval is set, it can
// safely use t.GetLogAnnounceInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogAnnounceInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_AlternateProfile) GetLogAnnounceInterval() int32 {
	if t == nil || t.LogAnnounceInterval == nil {
		return -3
	}
	return *t.LogAnnounceInterval
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Ptp_AlternateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_AlternateProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_System_Ptp_AlternateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_AlternateProfile) GetProfile() E_NokiaConf_Configure_System_Ptp_AlternateProfile_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaConf_Configure_System_Ptp_AlternateProfile_Profile_g8275dot1_2014
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Ptp_AlternateProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Ptp_AlternateProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Domain == nil {
		var v uint32 = 24
		t.Domain = &v
	}
	if t.LogAnnounceInterval == nil {
		var v int32 = -3
		t.LogAnnounceInterval = &v
	}
	if t.Profile == 0 {
		t.Profile = NokiaConf_Configure_System_Ptp_AlternateProfile_Profile_g8275dot1_2014
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Ptp_AlternateProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Ptp_AlternateProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp_AlternateProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Ptp_AlternateProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp_AlternateProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Ptp_AlternateProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Ptp_AlternateProfile.
func (*NokiaConf_Configure_System_Ptp_AlternateProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Ptp_Port represents the /nokia-conf/configure/system/ptp/port YANG schema element.
type NokiaConf_Configure_System_Ptp_Port struct {
	Address            *string                     `path:"address" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	AlternateProfile   *string                     `path:"alternate-profile" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	LocalPriority      *uint32                     `path:"local-priority" module:"nokia-conf"`
	LogDelayInterval   *int32                      `path:"log-delay-interval" module:"nokia-conf"`
	LogSyncInterval    *int32                      `path:"log-sync-interval" module:"nokia-conf"`
	MasterOnly         *bool                       `path:"master-only" module:"nokia-conf"`
	PortId             *string                     `path:"port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Ptp_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Ptp_Port) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Port) GetAddress() string {
	if t == nil || t.Address == nil {
		return "01:1B:19:00:00:00"
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Port) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAlternateProfile retrieves the value of the leaf AlternateProfile from the NokiaConf_Configure_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlternateProfile is set, it can
// safely use t.GetAlternateProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlternateProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Port) GetAlternateProfile() string {
	if t == nil || t.AlternateProfile == nil {
		return ""
	}
	return *t.AlternateProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Port) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Port) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLocalPriority retrieves the value of the leaf LocalPriority from the NokiaConf_Configure_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPriority is set, it can
// safely use t.GetLocalPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Port) GetLocalPriority() uint32 {
	if t == nil || t.LocalPriority == nil {
		return 128
	}
	return *t.LocalPriority
}

// GetLogDelayInterval retrieves the value of the leaf LogDelayInterval from the NokiaConf_Configure_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogDelayInterval is set, it can
// safely use t.GetLogDelayInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogDelayInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Port) GetLogDelayInterval() int32 {
	if t == nil || t.LogDelayInterval == nil {
		return 0
	}
	return *t.LogDelayInterval
}

// GetLogSyncInterval retrieves the value of the leaf LogSyncInterval from the NokiaConf_Configure_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogSyncInterval is set, it can
// safely use t.GetLogSyncInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogSyncInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Port) GetLogSyncInterval() int32 {
	if t == nil || t.LogSyncInterval == nil {
		return 0
	}
	return *t.LogSyncInterval
}

// GetMasterOnly retrieves the value of the leaf MasterOnly from the NokiaConf_Configure_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasterOnly is set, it can
// safely use t.GetMasterOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasterOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Port) GetMasterOnly() bool {
	if t == nil || t.MasterOnly == nil {
		return false
	}
	return *t.MasterOnly
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Port) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Ptp_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Ptp_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Address == nil {
		var v string = "01:1B:19:00:00:00"
		t.Address = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.LocalPriority == nil {
		var v uint32 = 128
		t.LocalPriority = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Ptp_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Ptp_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Ptp_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Ptp_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Ptp_Port.
func (*NokiaConf_Configure_System_Ptp_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Ptp_Ptsf represents the /nokia-conf/configure/system/ptp/ptsf YANG schema element.
type NokiaConf_Configure_System_Ptp_Ptsf struct {
	MonitorPtsfUnusable *NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable `path:"monitor-ptsf-unusable" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Ptp_Ptsf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Ptp_Ptsf) IsYANGGoStruct() {}

// GetOrCreateMonitorPtsfUnusable retrieves the value of the MonitorPtsfUnusable field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Ptp_Ptsf) GetOrCreateMonitorPtsfUnusable() *NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable {
	if t.MonitorPtsfUnusable != nil {
		return t.MonitorPtsfUnusable
	}
	t.MonitorPtsfUnusable = &NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable{}
	return t.MonitorPtsfUnusable
}

// GetMonitorPtsfUnusable returns the value of the MonitorPtsfUnusable struct pointer
// from NokiaConf_Configure_System_Ptp_Ptsf. If the receiver or the field MonitorPtsfUnusable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Ptp_Ptsf) GetMonitorPtsfUnusable() *NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable {
	if t != nil && t.MonitorPtsfUnusable != nil {
		return t.MonitorPtsfUnusable
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Ptp_Ptsf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Ptp_Ptsf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MonitorPtsfUnusable.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp_Ptsf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Ptp_Ptsf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp_Ptsf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Ptp_Ptsf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Ptp_Ptsf.
func (*NokiaConf_Configure_System_Ptp_Ptsf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable represents the /nokia-conf/configure/system/ptp/ptsf/monitor-ptsf-unusable YANG schema element.
type NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable.
func (*NokiaConf_Configure_System_Ptp_Ptsf_MonitorPtsfUnusable) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Ptp_Router represents the /nokia-conf/configure/system/ptp/router YANG schema element.
type NokiaConf_Configure_System_Ptp_Router struct {
	AdminState         E_NokiaTypesSros_AdminState                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Peer               map[string]*NokiaConf_Configure_System_Ptp_Router_Peer `path:"peer" module:"nokia-conf"`
	PeerLimit          *int32                                                 `path:"peer-limit" module:"nokia-conf"`
	RouterInstance     *string                                                `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Ptp_Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Ptp_Router) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_System_Ptp_Router struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Ptp_Router) NewPeer(IpAddress string) (*NokiaConf_Configure_System_Ptp_Router_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_System_Ptp_Router_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_System_Ptp_Router_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_System_Ptp_Router struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Ptp_Router) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Ptp_Router. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Ptp_Router) GetOrCreatePeer(IpAddress string) *NokiaConf_Configure_System_Ptp_Router_Peer {

	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_System_Ptp_Router. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Ptp_Router) GetPeer(IpAddress string) *NokiaConf_Configure_System_Ptp_Router_Peer {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Ptp_Router. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Ptp_Router) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_System_Ptp_Router_Peer struct to the
// list Peer of NokiaConf_Configure_System_Ptp_Router. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Ptp_Router_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Ptp_Router) AppendPeer(v *NokiaConf_Configure_System_Ptp_Router_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_System_Ptp_Router_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Ptp_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Router) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Ptp_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Router) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Ptp_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Router) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPeerLimit retrieves the value of the leaf PeerLimit from the NokiaConf_Configure_System_Ptp_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerLimit is set, it can
// safely use t.GetPeerLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Router) GetPeerLimit() int32 {
	if t == nil || t.PeerLimit == nil {
		return 0
	}
	return *t.PeerLimit
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_Ptp_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Router) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Ptp_Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Ptp_Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Ptp_Router struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Ptp_Router) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp_Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Ptp_Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp_Router) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Ptp_Router) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Ptp_Router.
func (*NokiaConf_Configure_System_Ptp_Router) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Ptp_Router_Peer represents the /nokia-conf/configure/system/ptp/router/peer YANG schema element.
type NokiaConf_Configure_System_Ptp_Router_Peer struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	IpAddress          *string                     `path:"ip-address" module:"nokia-conf"`
	LocalPriority      *uint32                     `path:"local-priority" module:"nokia-conf"`
	LogSyncInterval    *int32                      `path:"log-sync-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Ptp_Router_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Ptp_Router_Peer) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Ptp_Router_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Router_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Ptp_Router_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Router_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Ptp_Router_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Router_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_System_Ptp_Router_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Router_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetLocalPriority retrieves the value of the leaf LocalPriority from the NokiaConf_Configure_System_Ptp_Router_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPriority is set, it can
// safely use t.GetLocalPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Router_Peer) GetLocalPriority() uint32 {
	if t == nil || t.LocalPriority == nil {
		return 128
	}
	return *t.LocalPriority
}

// GetLogSyncInterval retrieves the value of the leaf LogSyncInterval from the NokiaConf_Configure_System_Ptp_Router_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogSyncInterval is set, it can
// safely use t.GetLogSyncInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogSyncInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Ptp_Router_Peer) GetLogSyncInterval() int32 {
	if t == nil || t.LogSyncInterval == nil {
		return 0
	}
	return *t.LogSyncInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Ptp_Router_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Ptp_Router_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.LocalPriority == nil {
		var v uint32 = 128
		t.LocalPriority = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Ptp_Router_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Ptp_Router_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp_Router_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Ptp_Router_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Ptp_Router_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Ptp_Router_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Ptp_Router_Peer.
func (*NokiaConf_Configure_System_Ptp_Router_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Resource represents the /nokia-conf/configure/system/resource YANG schema element.
type NokiaConf_Configure_System_Resource struct {
	EcmpProfile map[uint32]*NokiaConf_Configure_System_Resource_EcmpProfile `path:"ecmp-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Resource) IsYANGGoStruct() {}

// NewEcmpProfile creates a new entry in the EcmpProfile list of the
// NokiaConf_Configure_System_Resource struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Resource) NewEcmpProfile(ProfileId uint32) (*NokiaConf_Configure_System_Resource_EcmpProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EcmpProfile == nil {
		t.EcmpProfile = make(map[uint32]*NokiaConf_Configure_System_Resource_EcmpProfile)
	}

	key := ProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EcmpProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EcmpProfile", key)
	}

	t.EcmpProfile[key] = &NokiaConf_Configure_System_Resource_EcmpProfile{
		ProfileId: &ProfileId,
	}

	return t.EcmpProfile[key], nil
}

// RenameEcmpProfile renames an entry in the list EcmpProfile within
// the NokiaConf_Configure_System_Resource struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Resource) RenameEcmpProfile(oldK, newK uint32) error {
	if _, ok := t.EcmpProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in EcmpProfile", newK)
	}

	e, ok := t.EcmpProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EcmpProfile", oldK)
	}
	e.ProfileId = &newK

	t.EcmpProfile[newK] = e
	delete(t.EcmpProfile, oldK)
	return nil
}

// GetOrCreateEcmpProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Resource. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Resource) GetOrCreateEcmpProfile(ProfileId uint32) *NokiaConf_Configure_System_Resource_EcmpProfile {

	key := ProfileId

	if v, ok := t.EcmpProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEcmpProfile(ProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEcmpProfile got unexpected error: %v", err))
	}
	return v
}

// GetEcmpProfile retrieves the value with the specified key from
// the EcmpProfile map field of NokiaConf_Configure_System_Resource. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Resource) GetEcmpProfile(ProfileId uint32) *NokiaConf_Configure_System_Resource_EcmpProfile {

	if t == nil {
		return nil
	}

	key := ProfileId

	if lm, ok := t.EcmpProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteEcmpProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Resource. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Resource) DeleteEcmpProfile(ProfileId uint32) {
	key := ProfileId

	delete(t.EcmpProfile, key)
}

// AppendEcmpProfile appends the supplied NokiaConf_Configure_System_Resource_EcmpProfile struct to the
// list EcmpProfile of NokiaConf_Configure_System_Resource. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Resource_EcmpProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Resource) AppendEcmpProfile(v *NokiaConf_Configure_System_Resource_EcmpProfile) error {
	if v.ProfileId == nil {
		return fmt.Errorf("invalid nil key received for ProfileId")
	}

	key := *v.ProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EcmpProfile == nil {
		t.EcmpProfile = make(map[uint32]*NokiaConf_Configure_System_Resource_EcmpProfile)
	}

	if _, ok := t.EcmpProfile[key]; ok {
		return fmt.Errorf("duplicate key for list EcmpProfile %v", key)
	}

	t.EcmpProfile[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.EcmpProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Resource) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Resource.
func (*NokiaConf_Configure_System_Resource) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Resource_EcmpProfile represents the /nokia-conf/configure/system/resource/ecmp-profile YANG schema element.
type NokiaConf_Configure_System_Resource_EcmpProfile struct {
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Groups             *uint32                                                `path:"groups" module:"nokia-conf"`
	Links              *uint32                                                `path:"links" module:"nokia-conf"`
	ProfileId          *uint32                                                `path:"profile-id" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_System_Resource_EcmpProfile_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Resource_EcmpProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Resource_EcmpProfile) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Resource_EcmpProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Resource_EcmpProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Resource_EcmpProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Resource_EcmpProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroups retrieves the value of the leaf Groups from the NokiaConf_Configure_System_Resource_EcmpProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Groups is set, it can
// safely use t.GetGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Groups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Resource_EcmpProfile) GetGroups() uint32 {
	if t == nil || t.Groups == nil {
		return 0
	}
	return *t.Groups
}

// GetLinks retrieves the value of the leaf Links from the NokiaConf_Configure_System_Resource_EcmpProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Links is set, it can
// safely use t.GetLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Links == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Resource_EcmpProfile) GetLinks() uint32 {
	if t == nil || t.Links == nil {
		return 0
	}
	return *t.Links
}

// GetProfileId retrieves the value of the leaf ProfileId from the NokiaConf_Configure_System_Resource_EcmpProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileId is set, it can
// safely use t.GetProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Resource_EcmpProfile) GetProfileId() uint32 {
	if t == nil || t.ProfileId == nil {
		return 0
	}
	return *t.ProfileId
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_System_Resource_EcmpProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Resource_EcmpProfile) GetType() E_NokiaConf_Configure_System_Resource_EcmpProfile_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Resource_EcmpProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Resource_EcmpProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Resource_EcmpProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Resource_EcmpProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ProfileId == nil {
		return nil, fmt.Errorf("nil value for key ProfileId")
	}

	return map[string]interface{}{
		"profile-id": *t.ProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Resource_EcmpProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Resource_EcmpProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Resource_EcmpProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Resource_EcmpProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Resource_EcmpProfile.
func (*NokiaConf_Configure_System_Resource_EcmpProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ScriptControl represents the /nokia-conf/configure/system/script-control YANG schema element.
type NokiaConf_Configure_System_ScriptControl struct {
	ApplyGroups        []string                                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Script             map[NokiaConf_Configure_System_ScriptControl_Script_Key]*NokiaConf_Configure_System_ScriptControl_Script             `path:"script" module:"nokia-conf"`
	ScriptPolicy       map[NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Key]*NokiaConf_Configure_System_ScriptControl_ScriptPolicy `path:"script-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ScriptControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ScriptControl) IsYANGGoStruct() {}

// NokiaConf_Configure_System_ScriptControl_Script_Key represents the key for list Script of element /nokia-conf/configure/system/script-control.
type NokiaConf_Configure_System_ScriptControl_Script_Key struct {
	ScriptName string `path:"script-name"`
	Owner      string `path:"owner"`
}

// NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Key represents the key for list ScriptPolicy of element /nokia-conf/configure/system/script-control.
type NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Key struct {
	PolicyName string `path:"policy-name"`
	Owner      string `path:"owner"`
}

// NewScript creates a new entry in the Script list of the
// NokiaConf_Configure_System_ScriptControl struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_ScriptControl) NewScript(ScriptName string, Owner string) (*NokiaConf_Configure_System_ScriptControl_Script, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Script == nil {
		t.Script = make(map[NokiaConf_Configure_System_ScriptControl_Script_Key]*NokiaConf_Configure_System_ScriptControl_Script)
	}

	key := NokiaConf_Configure_System_ScriptControl_Script_Key{
		ScriptName: ScriptName,
		Owner:      Owner,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Script[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Script", key)
	}

	t.Script[key] = &NokiaConf_Configure_System_ScriptControl_Script{
		ScriptName: &ScriptName,
		Owner:      &Owner,
	}

	return t.Script[key], nil
}

// RenameScript renames an entry in the list Script within
// the NokiaConf_Configure_System_ScriptControl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_ScriptControl) RenameScript(oldK, newK NokiaConf_Configure_System_ScriptControl_Script_Key) error {
	if _, ok := t.Script[newK]; ok {
		return fmt.Errorf("key %v already exists in Script", newK)
	}

	e, ok := t.Script[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Script", oldK)
	}
	e.ScriptName = &newK.ScriptName
	e.Owner = &newK.Owner

	t.Script[newK] = e
	delete(t.Script, oldK)
	return nil
}

// GetOrCreateScript retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_ScriptControl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_ScriptControl) GetOrCreateScript(ScriptName string, Owner string) *NokiaConf_Configure_System_ScriptControl_Script {

	key := NokiaConf_Configure_System_ScriptControl_Script_Key{
		ScriptName: ScriptName,
		Owner:      Owner,
	}

	if v, ok := t.Script[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScript(ScriptName, Owner)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScript got unexpected error: %v", err))
	}
	return v
}

// GetScript retrieves the value with the specified key from
// the Script map field of NokiaConf_Configure_System_ScriptControl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_ScriptControl) GetScript(ScriptName string, Owner string) *NokiaConf_Configure_System_ScriptControl_Script {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_System_ScriptControl_Script_Key{
		ScriptName: ScriptName,
		Owner:      Owner,
	}

	if lm, ok := t.Script[key]; ok {
		return lm
	}
	return nil
}

// DeleteScript deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_ScriptControl. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_ScriptControl) DeleteScript(ScriptName string, Owner string) {
	key := NokiaConf_Configure_System_ScriptControl_Script_Key{
		ScriptName: ScriptName,
		Owner:      Owner,
	}

	delete(t.Script, key)
}

// AppendScript appends the supplied NokiaConf_Configure_System_ScriptControl_Script struct to the
// list Script of NokiaConf_Configure_System_ScriptControl. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_ScriptControl_Script already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_ScriptControl) AppendScript(v *NokiaConf_Configure_System_ScriptControl_Script) error {
	if v.ScriptName == nil {
		return fmt.Errorf("invalid nil key for ScriptName")
	}

	if v.Owner == nil {
		return fmt.Errorf("invalid nil key for Owner")
	}

	key := NokiaConf_Configure_System_ScriptControl_Script_Key{
		ScriptName: *v.ScriptName,
		Owner:      *v.Owner,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Script == nil {
		t.Script = make(map[NokiaConf_Configure_System_ScriptControl_Script_Key]*NokiaConf_Configure_System_ScriptControl_Script)
	}

	if _, ok := t.Script[key]; ok {
		return fmt.Errorf("duplicate key for list Script %v", key)
	}

	t.Script[key] = v
	return nil
}

// NewScriptPolicy creates a new entry in the ScriptPolicy list of the
// NokiaConf_Configure_System_ScriptControl struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_ScriptControl) NewScriptPolicy(PolicyName string, Owner string) (*NokiaConf_Configure_System_ScriptControl_ScriptPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ScriptPolicy == nil {
		t.ScriptPolicy = make(map[NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Key]*NokiaConf_Configure_System_ScriptControl_ScriptPolicy)
	}

	key := NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Key{
		PolicyName: PolicyName,
		Owner:      Owner,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ScriptPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ScriptPolicy", key)
	}

	t.ScriptPolicy[key] = &NokiaConf_Configure_System_ScriptControl_ScriptPolicy{
		PolicyName: &PolicyName,
		Owner:      &Owner,
	}

	return t.ScriptPolicy[key], nil
}

// RenameScriptPolicy renames an entry in the list ScriptPolicy within
// the NokiaConf_Configure_System_ScriptControl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_ScriptControl) RenameScriptPolicy(oldK, newK NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Key) error {
	if _, ok := t.ScriptPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ScriptPolicy", newK)
	}

	e, ok := t.ScriptPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ScriptPolicy", oldK)
	}
	e.PolicyName = &newK.PolicyName
	e.Owner = &newK.Owner

	t.ScriptPolicy[newK] = e
	delete(t.ScriptPolicy, oldK)
	return nil
}

// GetOrCreateScriptPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_ScriptControl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_ScriptControl) GetOrCreateScriptPolicy(PolicyName string, Owner string) *NokiaConf_Configure_System_ScriptControl_ScriptPolicy {

	key := NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Key{
		PolicyName: PolicyName,
		Owner:      Owner,
	}

	if v, ok := t.ScriptPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScriptPolicy(PolicyName, Owner)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScriptPolicy got unexpected error: %v", err))
	}
	return v
}

// GetScriptPolicy retrieves the value with the specified key from
// the ScriptPolicy map field of NokiaConf_Configure_System_ScriptControl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_ScriptControl) GetScriptPolicy(PolicyName string, Owner string) *NokiaConf_Configure_System_ScriptControl_ScriptPolicy {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Key{
		PolicyName: PolicyName,
		Owner:      Owner,
	}

	if lm, ok := t.ScriptPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteScriptPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_ScriptControl. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_ScriptControl) DeleteScriptPolicy(PolicyName string, Owner string) {
	key := NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Key{
		PolicyName: PolicyName,
		Owner:      Owner,
	}

	delete(t.ScriptPolicy, key)
}

// AppendScriptPolicy appends the supplied NokiaConf_Configure_System_ScriptControl_ScriptPolicy struct to the
// list ScriptPolicy of NokiaConf_Configure_System_ScriptControl. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_ScriptControl_ScriptPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_ScriptControl) AppendScriptPolicy(v *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key for PolicyName")
	}

	if v.Owner == nil {
		return fmt.Errorf("invalid nil key for Owner")
	}

	key := NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Key{
		PolicyName: *v.PolicyName,
		Owner:      *v.Owner,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ScriptPolicy == nil {
		t.ScriptPolicy = make(map[NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Key]*NokiaConf_Configure_System_ScriptControl_ScriptPolicy)
	}

	if _, ok := t.ScriptPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ScriptPolicy %v", key)
	}

	t.ScriptPolicy[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ScriptControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ScriptControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ScriptControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ScriptControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Script {
		e.PopulateDefaults()
	}
	for _, e := range t.ScriptPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ScriptControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ScriptControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ScriptControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ScriptControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ScriptControl.
func (*NokiaConf_Configure_System_ScriptControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ScriptControl_Script represents the /nokia-conf/configure/system/script-control/script YANG schema element.
type NokiaConf_Configure_System_ScriptControl_Script struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                     `path:"description" module:"nokia-conf"`
	Location           *string                     `path:"location" module:"nokia-conf"`
	Owner              *string                     `path:"owner" module:"nokia-conf"`
	ScriptName         *string                     `path:"script-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ScriptControl_Script implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ScriptControl_Script) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_ScriptControl_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_Script) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ScriptControl_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_Script) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ScriptControl_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_Script) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_ScriptControl_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_Script) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_System_ScriptControl_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_Script) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_System_ScriptControl_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_Script) GetOwner() string {
	if t == nil || t.Owner == nil {
		return ""
	}
	return *t.Owner
}

// GetScriptName retrieves the value of the leaf ScriptName from the NokiaConf_Configure_System_ScriptControl_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScriptName is set, it can
// safely use t.GetScriptName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScriptName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_Script) GetScriptName() string {
	if t == nil || t.ScriptName == nil {
		return ""
	}
	return *t.ScriptName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ScriptControl_Script
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ScriptControl_Script) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_ScriptControl_Script struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_ScriptControl_Script) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Owner == nil {
		return nil, fmt.Errorf("nil value for key Owner")
	}

	if t.ScriptName == nil {
		return nil, fmt.Errorf("nil value for key ScriptName")
	}

	return map[string]interface{}{
		"owner":       *t.Owner,
		"script-name": *t.ScriptName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ScriptControl_Script) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ScriptControl_Script"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ScriptControl_Script) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ScriptControl_Script) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ScriptControl_Script.
func (*NokiaConf_Configure_System_ScriptControl_Script) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ScriptControl_ScriptPolicy represents the /nokia-conf/configure/system/script-control/script-policy YANG schema element.
type NokiaConf_Configure_System_ScriptControl_ScriptPolicy struct {
	AdminState         E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	ExpireTime         NokiaConf_Configure_System_ScriptControl_ScriptPolicy_ExpireTime_Union `path:"expire-time" module:"nokia-conf"`
	Lifetime           NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Lifetime_Union   `path:"lifetime" module:"nokia-conf"`
	LockOverride       *bool                                                                  `path:"lock-override" module:"nokia-conf"`
	MaxCompleted       *uint32                                                                `path:"max-completed" module:"nokia-conf"`
	Owner              *string                                                                `path:"owner" module:"nokia-conf"`
	PolicyName         *string                                                                `path:"policy-name" module:"nokia-conf"`
	PythonLifetime     *uint32                                                                `path:"python-lifetime" module:"nokia-conf"`
	PythonScript       *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript    `path:"python-script" module:"nokia-conf"`
	Results            *string                                                                `path:"results" module:"nokia-conf"`
	Script             *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script          `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ScriptControl_ScriptPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ScriptControl_ScriptPolicy) IsYANGGoStruct() {}

// GetOrCreatePythonScript retrieves the value of the PythonScript field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetOrCreatePythonScript() *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript {
	if t.PythonScript != nil {
		return t.PythonScript
	}
	t.PythonScript = &NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript{}
	return t.PythonScript
}

// GetOrCreateScript retrieves the value of the Script field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetOrCreateScript() *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script {
	if t.Script != nil {
		return t.Script
	}
	t.Script = &NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script{}
	return t.Script
}

// GetPythonScript returns the value of the PythonScript struct pointer
// from NokiaConf_Configure_System_ScriptControl_ScriptPolicy. If the receiver or the field PythonScript is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetPythonScript() *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript {
	if t != nil && t.PythonScript != nil {
		return t.PythonScript
	}
	return nil
}

// GetScript returns the value of the Script struct pointer
// from NokiaConf_Configure_System_ScriptControl_ScriptPolicy. If the receiver or the field Script is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetScript() *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script {
	if t != nil && t.Script != nil {
		return t.Script
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExpireTime retrieves the value of the leaf ExpireTime from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpireTime is set, it can
// safely use t.GetExpireTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpireTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetExpireTime() NokiaConf_Configure_System_ScriptControl_ScriptPolicy_ExpireTime_Union {
	if t == nil || t.ExpireTime == nil {
		return UnionUint32(3600)
	}
	return t.ExpireTime
}

// GetLifetime retrieves the value of the leaf Lifetime from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lifetime is set, it can
// safely use t.GetLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetLifetime() NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Lifetime_Union {
	if t == nil || t.Lifetime == nil {
		return UnionUint32(3600)
	}
	return t.Lifetime
}

// GetLockOverride retrieves the value of the leaf LockOverride from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LockOverride is set, it can
// safely use t.GetLockOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LockOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetLockOverride() bool {
	if t == nil || t.LockOverride == nil {
		return false
	}
	return *t.LockOverride
}

// GetMaxCompleted retrieves the value of the leaf MaxCompleted from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxCompleted is set, it can
// safely use t.GetMaxCompleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxCompleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetMaxCompleted() uint32 {
	if t == nil || t.MaxCompleted == nil {
		return 1
	}
	return *t.MaxCompleted
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetOwner() string {
	if t == nil || t.Owner == nil {
		return ""
	}
	return *t.Owner
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPythonLifetime retrieves the value of the leaf PythonLifetime from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonLifetime is set, it can
// safely use t.GetPythonLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetPythonLifetime() uint32 {
	if t == nil || t.PythonLifetime == nil {
		return 0
	}
	return *t.PythonLifetime
}

// GetResults retrieves the value of the leaf Results from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Results is set, it can
// safely use t.GetResults() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Results == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) GetResults() string {
	if t == nil || t.Results == nil {
		return ""
	}
	return *t.Results
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ScriptControl_ScriptPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ExpireTime == nil {
		t.ExpireTime = UnionUint32(3600)
	}
	if t.Lifetime == nil {
		t.Lifetime = UnionUint32(3600)
	}
	if t.LockOverride == nil {
		var v bool = false
		t.LockOverride = &v
	}
	if t.MaxCompleted == nil {
		var v uint32 = 1
		t.MaxCompleted = &v
	}
	t.PythonScript.PopulateDefaults()
	t.Script.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_ScriptControl_ScriptPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Owner == nil {
		return nil, fmt.Errorf("nil value for key Owner")
	}

	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"owner":       *t.Owner,
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ScriptControl_ScriptPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ScriptControl_ScriptPolicy.
func (*NokiaConf_Configure_System_ScriptControl_ScriptPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript represents the /nokia-conf/configure/system/script-control/script-policy/python-script YANG schema element.
type NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript.
func (*NokiaConf_Configure_System_ScriptControl_ScriptPolicy_PythonScript) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script represents the /nokia-conf/configure/system/script-control/script-policy/script YANG schema element.
type NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script struct {
	Name  *string `path:"name" module:"nokia-conf"`
	Owner *string `path:"owner" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script) GetOwner() string {
	if t == nil || t.Owner == nil {
		return ""
	}
	return *t.Owner
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script.
func (*NokiaConf_Configure_System_ScriptControl_ScriptPolicy_Script) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security represents the /nokia-conf/configure/system/security YANG schema element.
type NokiaConf_Configure_System_Security struct {
	Aaa                    *NokiaConf_Configure_System_Security_Aaa                    `path:"aaa" module:"nokia-conf"`
	ApplyGroups            []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	CliScript              *NokiaConf_Configure_System_Security_CliScript              `path:"cli-script" module:"nokia-conf"`
	CpmFilter              *NokiaConf_Configure_System_Security_CpmFilter              `path:"cpm-filter" module:"nokia-conf"`
	CpmQueue               *NokiaConf_Configure_System_Security_CpmQueue               `path:"cpm-queue" module:"nokia-conf"`
	CpuProtection          *NokiaConf_Configure_System_Security_CpuProtection          `path:"cpu-protection" module:"nokia-conf"`
	DistCpuProtection      *NokiaConf_Configure_System_Security_DistCpuProtection      `path:"dist-cpu-protection" module:"nokia-conf"`
	Dot1X                  *NokiaConf_Configure_System_Security_Dot1X                  `path:"dot1x" module:"nokia-conf"`
	FtpServer              *bool                                                       `path:"ftp-server" module:"nokia-conf"`
	HashControl            *NokiaConf_Configure_System_Security_HashControl            `path:"hash-control" module:"nokia-conf"`
	Keychains              *NokiaConf_Configure_System_Security_Keychains              `path:"keychains" module:"nokia-conf"`
	Management             *NokiaConf_Configure_System_Security_Management             `path:"management" module:"nokia-conf"`
	ManagementAccessFilter *NokiaConf_Configure_System_Security_ManagementAccessFilter `path:"management-access-filter" module:"nokia-conf"`
	PerPeerQueuing         *bool                                                       `path:"per-peer-queuing" module:"nokia-conf"`
	Pki                    *NokiaConf_Configure_System_Security_Pki                    `path:"pki" module:"nokia-conf"`
	PythonScript           *NokiaConf_Configure_System_Security_PythonScript           `path:"python-script" module:"nokia-conf"`
	Snmp                   *NokiaConf_Configure_System_Security_Snmp                   `path:"snmp" module:"nokia-conf"`
	SourceAddress          *NokiaConf_Configure_System_Security_SourceAddress          `path:"source-address" module:"nokia-conf"`
	Ssh                    *NokiaConf_Configure_System_Security_Ssh                    `path:"ssh" module:"nokia-conf"`
	SystemPasswords        *NokiaConf_Configure_System_Security_SystemPasswords        `path:"system-passwords" module:"nokia-conf"`
	TechSupport            *NokiaConf_Configure_System_Security_TechSupport            `path:"tech-support" module:"nokia-conf"`
	TelnetServer           *bool                                                       `path:"telnet-server" module:"nokia-conf"`
	Telnet6Server          *bool                                                       `path:"telnet6-server" module:"nokia-conf"`
	Tls                    *NokiaConf_Configure_System_Security_Tls                    `path:"tls" module:"nokia-conf"`
	UserParams             *NokiaConf_Configure_System_Security_UserParams             `path:"user-params" module:"nokia-conf"`
	VprnNetworkExceptions  *NokiaConf_Configure_System_Security_VprnNetworkExceptions  `path:"vprn-network-exceptions" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security) IsYANGGoStruct() {}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateAaa() *NokiaConf_Configure_System_Security_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &NokiaConf_Configure_System_Security_Aaa{}
	return t.Aaa
}

// GetOrCreateCliScript retrieves the value of the CliScript field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateCliScript() *NokiaConf_Configure_System_Security_CliScript {
	if t.CliScript != nil {
		return t.CliScript
	}
	t.CliScript = &NokiaConf_Configure_System_Security_CliScript{}
	return t.CliScript
}

// GetOrCreateCpmFilter retrieves the value of the CpmFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateCpmFilter() *NokiaConf_Configure_System_Security_CpmFilter {
	if t.CpmFilter != nil {
		return t.CpmFilter
	}
	t.CpmFilter = &NokiaConf_Configure_System_Security_CpmFilter{}
	return t.CpmFilter
}

// GetOrCreateCpmQueue retrieves the value of the CpmQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateCpmQueue() *NokiaConf_Configure_System_Security_CpmQueue {
	if t.CpmQueue != nil {
		return t.CpmQueue
	}
	t.CpmQueue = &NokiaConf_Configure_System_Security_CpmQueue{}
	return t.CpmQueue
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateCpuProtection() *NokiaConf_Configure_System_Security_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_System_Security_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateDistCpuProtection retrieves the value of the DistCpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateDistCpuProtection() *NokiaConf_Configure_System_Security_DistCpuProtection {
	if t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	t.DistCpuProtection = &NokiaConf_Configure_System_Security_DistCpuProtection{}
	return t.DistCpuProtection
}

// GetOrCreateDot1X retrieves the value of the Dot1X field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateDot1X() *NokiaConf_Configure_System_Security_Dot1X {
	if t.Dot1X != nil {
		return t.Dot1X
	}
	t.Dot1X = &NokiaConf_Configure_System_Security_Dot1X{}
	return t.Dot1X
}

// GetOrCreateHashControl retrieves the value of the HashControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateHashControl() *NokiaConf_Configure_System_Security_HashControl {
	if t.HashControl != nil {
		return t.HashControl
	}
	t.HashControl = &NokiaConf_Configure_System_Security_HashControl{}
	return t.HashControl
}

// GetOrCreateKeychains retrieves the value of the Keychains field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateKeychains() *NokiaConf_Configure_System_Security_Keychains {
	if t.Keychains != nil {
		return t.Keychains
	}
	t.Keychains = &NokiaConf_Configure_System_Security_Keychains{}
	return t.Keychains
}

// GetOrCreateManagement retrieves the value of the Management field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateManagement() *NokiaConf_Configure_System_Security_Management {
	if t.Management != nil {
		return t.Management
	}
	t.Management = &NokiaConf_Configure_System_Security_Management{}
	return t.Management
}

// GetOrCreateManagementAccessFilter retrieves the value of the ManagementAccessFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateManagementAccessFilter() *NokiaConf_Configure_System_Security_ManagementAccessFilter {
	if t.ManagementAccessFilter != nil {
		return t.ManagementAccessFilter
	}
	t.ManagementAccessFilter = &NokiaConf_Configure_System_Security_ManagementAccessFilter{}
	return t.ManagementAccessFilter
}

// GetOrCreatePki retrieves the value of the Pki field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreatePki() *NokiaConf_Configure_System_Security_Pki {
	if t.Pki != nil {
		return t.Pki
	}
	t.Pki = &NokiaConf_Configure_System_Security_Pki{}
	return t.Pki
}

// GetOrCreatePythonScript retrieves the value of the PythonScript field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreatePythonScript() *NokiaConf_Configure_System_Security_PythonScript {
	if t.PythonScript != nil {
		return t.PythonScript
	}
	t.PythonScript = &NokiaConf_Configure_System_Security_PythonScript{}
	return t.PythonScript
}

// GetOrCreateSnmp retrieves the value of the Snmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateSnmp() *NokiaConf_Configure_System_Security_Snmp {
	if t.Snmp != nil {
		return t.Snmp
	}
	t.Snmp = &NokiaConf_Configure_System_Security_Snmp{}
	return t.Snmp
}

// GetOrCreateSourceAddress retrieves the value of the SourceAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateSourceAddress() *NokiaConf_Configure_System_Security_SourceAddress {
	if t.SourceAddress != nil {
		return t.SourceAddress
	}
	t.SourceAddress = &NokiaConf_Configure_System_Security_SourceAddress{}
	return t.SourceAddress
}

// GetOrCreateSsh retrieves the value of the Ssh field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateSsh() *NokiaConf_Configure_System_Security_Ssh {
	if t.Ssh != nil {
		return t.Ssh
	}
	t.Ssh = &NokiaConf_Configure_System_Security_Ssh{}
	return t.Ssh
}

// GetOrCreateSystemPasswords retrieves the value of the SystemPasswords field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateSystemPasswords() *NokiaConf_Configure_System_Security_SystemPasswords {
	if t.SystemPasswords != nil {
		return t.SystemPasswords
	}
	t.SystemPasswords = &NokiaConf_Configure_System_Security_SystemPasswords{}
	return t.SystemPasswords
}

// GetOrCreateTechSupport retrieves the value of the TechSupport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateTechSupport() *NokiaConf_Configure_System_Security_TechSupport {
	if t.TechSupport != nil {
		return t.TechSupport
	}
	t.TechSupport = &NokiaConf_Configure_System_Security_TechSupport{}
	return t.TechSupport
}

// GetOrCreateTls retrieves the value of the Tls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateTls() *NokiaConf_Configure_System_Security_Tls {
	if t.Tls != nil {
		return t.Tls
	}
	t.Tls = &NokiaConf_Configure_System_Security_Tls{}
	return t.Tls
}

// GetOrCreateUserParams retrieves the value of the UserParams field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateUserParams() *NokiaConf_Configure_System_Security_UserParams {
	if t.UserParams != nil {
		return t.UserParams
	}
	t.UserParams = &NokiaConf_Configure_System_Security_UserParams{}
	return t.UserParams
}

// GetOrCreateVprnNetworkExceptions retrieves the value of the VprnNetworkExceptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security) GetOrCreateVprnNetworkExceptions() *NokiaConf_Configure_System_Security_VprnNetworkExceptions {
	if t.VprnNetworkExceptions != nil {
		return t.VprnNetworkExceptions
	}
	t.VprnNetworkExceptions = &NokiaConf_Configure_System_Security_VprnNetworkExceptions{}
	return t.VprnNetworkExceptions
}

// GetAaa returns the value of the Aaa struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetAaa() *NokiaConf_Configure_System_Security_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetCliScript returns the value of the CliScript struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field CliScript is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetCliScript() *NokiaConf_Configure_System_Security_CliScript {
	if t != nil && t.CliScript != nil {
		return t.CliScript
	}
	return nil
}

// GetCpmFilter returns the value of the CpmFilter struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field CpmFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetCpmFilter() *NokiaConf_Configure_System_Security_CpmFilter {
	if t != nil && t.CpmFilter != nil {
		return t.CpmFilter
	}
	return nil
}

// GetCpmQueue returns the value of the CpmQueue struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field CpmQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetCpmQueue() *NokiaConf_Configure_System_Security_CpmQueue {
	if t != nil && t.CpmQueue != nil {
		return t.CpmQueue
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetCpuProtection() *NokiaConf_Configure_System_Security_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetDistCpuProtection returns the value of the DistCpuProtection struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field DistCpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetDistCpuProtection() *NokiaConf_Configure_System_Security_DistCpuProtection {
	if t != nil && t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	return nil
}

// GetDot1X returns the value of the Dot1X struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field Dot1X is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetDot1X() *NokiaConf_Configure_System_Security_Dot1X {
	if t != nil && t.Dot1X != nil {
		return t.Dot1X
	}
	return nil
}

// GetHashControl returns the value of the HashControl struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field HashControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetHashControl() *NokiaConf_Configure_System_Security_HashControl {
	if t != nil && t.HashControl != nil {
		return t.HashControl
	}
	return nil
}

// GetKeychains returns the value of the Keychains struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field Keychains is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetKeychains() *NokiaConf_Configure_System_Security_Keychains {
	if t != nil && t.Keychains != nil {
		return t.Keychains
	}
	return nil
}

// GetManagement returns the value of the Management struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field Management is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetManagement() *NokiaConf_Configure_System_Security_Management {
	if t != nil && t.Management != nil {
		return t.Management
	}
	return nil
}

// GetManagementAccessFilter returns the value of the ManagementAccessFilter struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field ManagementAccessFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetManagementAccessFilter() *NokiaConf_Configure_System_Security_ManagementAccessFilter {
	if t != nil && t.ManagementAccessFilter != nil {
		return t.ManagementAccessFilter
	}
	return nil
}

// GetPki returns the value of the Pki struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field Pki is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetPki() *NokiaConf_Configure_System_Security_Pki {
	if t != nil && t.Pki != nil {
		return t.Pki
	}
	return nil
}

// GetPythonScript returns the value of the PythonScript struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field PythonScript is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetPythonScript() *NokiaConf_Configure_System_Security_PythonScript {
	if t != nil && t.PythonScript != nil {
		return t.PythonScript
	}
	return nil
}

// GetSnmp returns the value of the Snmp struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field Snmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetSnmp() *NokiaConf_Configure_System_Security_Snmp {
	if t != nil && t.Snmp != nil {
		return t.Snmp
	}
	return nil
}

// GetSourceAddress returns the value of the SourceAddress struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field SourceAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetSourceAddress() *NokiaConf_Configure_System_Security_SourceAddress {
	if t != nil && t.SourceAddress != nil {
		return t.SourceAddress
	}
	return nil
}

// GetSsh returns the value of the Ssh struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field Ssh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetSsh() *NokiaConf_Configure_System_Security_Ssh {
	if t != nil && t.Ssh != nil {
		return t.Ssh
	}
	return nil
}

// GetSystemPasswords returns the value of the SystemPasswords struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field SystemPasswords is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetSystemPasswords() *NokiaConf_Configure_System_Security_SystemPasswords {
	if t != nil && t.SystemPasswords != nil {
		return t.SystemPasswords
	}
	return nil
}

// GetTechSupport returns the value of the TechSupport struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field TechSupport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetTechSupport() *NokiaConf_Configure_System_Security_TechSupport {
	if t != nil && t.TechSupport != nil {
		return t.TechSupport
	}
	return nil
}

// GetTls returns the value of the Tls struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field Tls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetTls() *NokiaConf_Configure_System_Security_Tls {
	if t != nil && t.Tls != nil {
		return t.Tls
	}
	return nil
}

// GetUserParams returns the value of the UserParams struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field UserParams is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetUserParams() *NokiaConf_Configure_System_Security_UserParams {
	if t != nil && t.UserParams != nil {
		return t.UserParams
	}
	return nil
}

// GetVprnNetworkExceptions returns the value of the VprnNetworkExceptions struct pointer
// from NokiaConf_Configure_System_Security. If the receiver or the field VprnNetworkExceptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security) GetVprnNetworkExceptions() *NokiaConf_Configure_System_Security_VprnNetworkExceptions {
	if t != nil && t.VprnNetworkExceptions != nil {
		return t.VprnNetworkExceptions
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFtpServer retrieves the value of the leaf FtpServer from the NokiaConf_Configure_System_Security
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FtpServer is set, it can
// safely use t.GetFtpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FtpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security) GetFtpServer() bool {
	if t == nil || t.FtpServer == nil {
		return false
	}
	return *t.FtpServer
}

// GetPerPeerQueuing retrieves the value of the leaf PerPeerQueuing from the NokiaConf_Configure_System_Security
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PerPeerQueuing is set, it can
// safely use t.GetPerPeerQueuing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PerPeerQueuing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security) GetPerPeerQueuing() bool {
	if t == nil || t.PerPeerQueuing == nil {
		return false
	}
	return *t.PerPeerQueuing
}

// GetTelnetServer retrieves the value of the leaf TelnetServer from the NokiaConf_Configure_System_Security
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetServer is set, it can
// safely use t.GetTelnetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security) GetTelnetServer() bool {
	if t == nil || t.TelnetServer == nil {
		return false
	}
	return *t.TelnetServer
}

// GetTelnet6Server retrieves the value of the leaf Telnet6Server from the NokiaConf_Configure_System_Security
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Telnet6Server is set, it can
// safely use t.GetTelnet6Server() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Telnet6Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security) GetTelnet6Server() bool {
	if t == nil || t.Telnet6Server == nil {
		return false
	}
	return *t.Telnet6Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FtpServer == nil {
		var v bool = false
		t.FtpServer = &v
	}
	if t.TelnetServer == nil {
		var v bool = false
		t.TelnetServer = &v
	}
	if t.Telnet6Server == nil {
		var v bool = false
		t.Telnet6Server = &v
	}
	t.Aaa.PopulateDefaults()
	t.CliScript.PopulateDefaults()
	t.CpmFilter.PopulateDefaults()
	t.CpmQueue.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.DistCpuProtection.PopulateDefaults()
	t.Dot1X.PopulateDefaults()
	t.HashControl.PopulateDefaults()
	t.Keychains.PopulateDefaults()
	t.Management.PopulateDefaults()
	t.ManagementAccessFilter.PopulateDefaults()
	t.Pki.PopulateDefaults()
	t.PythonScript.PopulateDefaults()
	t.Snmp.PopulateDefaults()
	t.SourceAddress.PopulateDefaults()
	t.Ssh.PopulateDefaults()
	t.SystemPasswords.PopulateDefaults()
	t.TechSupport.PopulateDefaults()
	t.Tls.PopulateDefaults()
	t.UserParams.PopulateDefaults()
	t.VprnNetworkExceptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security.
func (*NokiaConf_Configure_System_Security) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa represents the /nokia-conf/configure/system/security/aaa YANG schema element.
type NokiaConf_Configure_System_Security_Aaa struct {
	ApplyGroups         []string                                                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	CliSessionGroup     map[string]*NokiaConf_Configure_System_Security_Aaa_CliSessionGroup                                                               `path:"cli-session-group" module:"nokia-conf"`
	HealthCheck         NokiaConf_Configure_System_Security_Aaa_HealthCheck_Union                                                                         `path:"health-check" module:"nokia-conf"`
	LocalProfiles       *NokiaConf_Configure_System_Security_Aaa_LocalProfiles                                                                            `path:"local-profiles" module:"nokia-conf"`
	ManagementInterface *NokiaConf_Configure_System_Security_Aaa_ManagementInterface                                                                      `path:"management-interface" module:"nokia-conf"`
	RemoteServers       *NokiaConf_Configure_System_Security_Aaa_RemoteServers                                                                            `path:"remote-servers" module:"nokia-conf"`
	UserTemplate        map[E_NokiaConf_Configure_System_Security_Aaa_UserTemplate_UserTemplateName]*NokiaConf_Configure_System_Security_Aaa_UserTemplate `path:"user-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa) IsYANGGoStruct() {}

// NewCliSessionGroup creates a new entry in the CliSessionGroup list of the
// NokiaConf_Configure_System_Security_Aaa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Aaa) NewCliSessionGroup(CliSessionGroupName string) (*NokiaConf_Configure_System_Security_Aaa_CliSessionGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CliSessionGroup == nil {
		t.CliSessionGroup = make(map[string]*NokiaConf_Configure_System_Security_Aaa_CliSessionGroup)
	}

	key := CliSessionGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CliSessionGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CliSessionGroup", key)
	}

	t.CliSessionGroup[key] = &NokiaConf_Configure_System_Security_Aaa_CliSessionGroup{
		CliSessionGroupName: &CliSessionGroupName,
	}

	return t.CliSessionGroup[key], nil
}

// RenameCliSessionGroup renames an entry in the list CliSessionGroup within
// the NokiaConf_Configure_System_Security_Aaa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Aaa) RenameCliSessionGroup(oldK, newK string) error {
	if _, ok := t.CliSessionGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in CliSessionGroup", newK)
	}

	e, ok := t.CliSessionGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CliSessionGroup", oldK)
	}
	e.CliSessionGroupName = &newK

	t.CliSessionGroup[newK] = e
	delete(t.CliSessionGroup, oldK)
	return nil
}

// GetOrCreateCliSessionGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Aaa) GetOrCreateCliSessionGroup(CliSessionGroupName string) *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup {

	key := CliSessionGroupName

	if v, ok := t.CliSessionGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCliSessionGroup(CliSessionGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCliSessionGroup got unexpected error: %v", err))
	}
	return v
}

// GetCliSessionGroup retrieves the value with the specified key from
// the CliSessionGroup map field of NokiaConf_Configure_System_Security_Aaa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa) GetCliSessionGroup(CliSessionGroupName string) *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup {

	if t == nil {
		return nil
	}

	key := CliSessionGroupName

	if lm, ok := t.CliSessionGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteCliSessionGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Aaa) DeleteCliSessionGroup(CliSessionGroupName string) {
	key := CliSessionGroupName

	delete(t.CliSessionGroup, key)
}

// AppendCliSessionGroup appends the supplied NokiaConf_Configure_System_Security_Aaa_CliSessionGroup struct to the
// list CliSessionGroup of NokiaConf_Configure_System_Security_Aaa. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Aaa_CliSessionGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Aaa) AppendCliSessionGroup(v *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) error {
	if v.CliSessionGroupName == nil {
		return fmt.Errorf("invalid nil key received for CliSessionGroupName")
	}

	key := *v.CliSessionGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CliSessionGroup == nil {
		t.CliSessionGroup = make(map[string]*NokiaConf_Configure_System_Security_Aaa_CliSessionGroup)
	}

	if _, ok := t.CliSessionGroup[key]; ok {
		return fmt.Errorf("duplicate key for list CliSessionGroup %v", key)
	}

	t.CliSessionGroup[key] = v
	return nil
}

// NewUserTemplate creates a new entry in the UserTemplate list of the
// NokiaConf_Configure_System_Security_Aaa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Aaa) NewUserTemplate(UserTemplateName E_NokiaConf_Configure_System_Security_Aaa_UserTemplate_UserTemplateName) (*NokiaConf_Configure_System_Security_Aaa_UserTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UserTemplate == nil {
		t.UserTemplate = make(map[E_NokiaConf_Configure_System_Security_Aaa_UserTemplate_UserTemplateName]*NokiaConf_Configure_System_Security_Aaa_UserTemplate)
	}

	key := UserTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UserTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UserTemplate", key)
	}

	t.UserTemplate[key] = &NokiaConf_Configure_System_Security_Aaa_UserTemplate{
		UserTemplateName: UserTemplateName,
	}

	return t.UserTemplate[key], nil
}

// RenameUserTemplate renames an entry in the list UserTemplate within
// the NokiaConf_Configure_System_Security_Aaa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Aaa) RenameUserTemplate(oldK, newK E_NokiaConf_Configure_System_Security_Aaa_UserTemplate_UserTemplateName) error {
	if _, ok := t.UserTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in UserTemplate", newK)
	}

	e, ok := t.UserTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UserTemplate", oldK)
	}
	e.UserTemplateName = newK

	t.UserTemplate[newK] = e
	delete(t.UserTemplate, oldK)
	return nil
}

// GetOrCreateUserTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Aaa) GetOrCreateUserTemplate(UserTemplateName E_NokiaConf_Configure_System_Security_Aaa_UserTemplate_UserTemplateName) *NokiaConf_Configure_System_Security_Aaa_UserTemplate {

	key := UserTemplateName

	if v, ok := t.UserTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUserTemplate(UserTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUserTemplate got unexpected error: %v", err))
	}
	return v
}

// GetUserTemplate retrieves the value with the specified key from
// the UserTemplate map field of NokiaConf_Configure_System_Security_Aaa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa) GetUserTemplate(UserTemplateName E_NokiaConf_Configure_System_Security_Aaa_UserTemplate_UserTemplateName) *NokiaConf_Configure_System_Security_Aaa_UserTemplate {

	if t == nil {
		return nil
	}

	key := UserTemplateName

	if lm, ok := t.UserTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteUserTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Aaa) DeleteUserTemplate(UserTemplateName E_NokiaConf_Configure_System_Security_Aaa_UserTemplate_UserTemplateName) {
	key := UserTemplateName

	delete(t.UserTemplate, key)
}

// AppendUserTemplate appends the supplied NokiaConf_Configure_System_Security_Aaa_UserTemplate struct to the
// list UserTemplate of NokiaConf_Configure_System_Security_Aaa. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Aaa_UserTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Aaa) AppendUserTemplate(v *NokiaConf_Configure_System_Security_Aaa_UserTemplate) error {
	key := v.UserTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UserTemplate == nil {
		t.UserTemplate = make(map[E_NokiaConf_Configure_System_Security_Aaa_UserTemplate_UserTemplateName]*NokiaConf_Configure_System_Security_Aaa_UserTemplate)
	}

	if _, ok := t.UserTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list UserTemplate %v", key)
	}

	t.UserTemplate[key] = v
	return nil
}

// GetOrCreateLocalProfiles retrieves the value of the LocalProfiles field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa) GetOrCreateLocalProfiles() *NokiaConf_Configure_System_Security_Aaa_LocalProfiles {
	if t.LocalProfiles != nil {
		return t.LocalProfiles
	}
	t.LocalProfiles = &NokiaConf_Configure_System_Security_Aaa_LocalProfiles{}
	return t.LocalProfiles
}

// GetOrCreateManagementInterface retrieves the value of the ManagementInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa) GetOrCreateManagementInterface() *NokiaConf_Configure_System_Security_Aaa_ManagementInterface {
	if t.ManagementInterface != nil {
		return t.ManagementInterface
	}
	t.ManagementInterface = &NokiaConf_Configure_System_Security_Aaa_ManagementInterface{}
	return t.ManagementInterface
}

// GetOrCreateRemoteServers retrieves the value of the RemoteServers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa) GetOrCreateRemoteServers() *NokiaConf_Configure_System_Security_Aaa_RemoteServers {
	if t.RemoteServers != nil {
		return t.RemoteServers
	}
	t.RemoteServers = &NokiaConf_Configure_System_Security_Aaa_RemoteServers{}
	return t.RemoteServers
}

// GetLocalProfiles returns the value of the LocalProfiles struct pointer
// from NokiaConf_Configure_System_Security_Aaa. If the receiver or the field LocalProfiles is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa) GetLocalProfiles() *NokiaConf_Configure_System_Security_Aaa_LocalProfiles {
	if t != nil && t.LocalProfiles != nil {
		return t.LocalProfiles
	}
	return nil
}

// GetManagementInterface returns the value of the ManagementInterface struct pointer
// from NokiaConf_Configure_System_Security_Aaa. If the receiver or the field ManagementInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa) GetManagementInterface() *NokiaConf_Configure_System_Security_Aaa_ManagementInterface {
	if t != nil && t.ManagementInterface != nil {
		return t.ManagementInterface
	}
	return nil
}

// GetRemoteServers returns the value of the RemoteServers struct pointer
// from NokiaConf_Configure_System_Security_Aaa. If the receiver or the field RemoteServers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa) GetRemoteServers() *NokiaConf_Configure_System_Security_Aaa_RemoteServers {
	if t != nil && t.RemoteServers != nil {
		return t.RemoteServers
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHealthCheck retrieves the value of the leaf HealthCheck from the NokiaConf_Configure_System_Security_Aaa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HealthCheck is set, it can
// safely use t.GetHealthCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HealthCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa) GetHealthCheck() NokiaConf_Configure_System_Security_Aaa_HealthCheck_Union {
	if t == nil || t.HealthCheck == nil {
		return UnionInt32(30)
	}
	return t.HealthCheck
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HealthCheck == nil {
		t.HealthCheck = UnionInt32(30)
	}
	t.LocalProfiles.PopulateDefaults()
	t.ManagementInterface.PopulateDefaults()
	t.RemoteServers.PopulateDefaults()
	for _, e := range t.CliSessionGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.UserTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa.
func (*NokiaConf_Configure_System_Security_Aaa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_CliSessionGroup represents the /nokia-conf/configure/system/security/aaa/cli-session-group YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_CliSessionGroup struct {
	ApplyGroups         []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CliSessionGroupName *string  `path:"cli-session-group-name" module:"nokia-conf"`
	CombinedMaxSessions *int32   `path:"combined-max-sessions" module:"nokia-conf"`
	Description         *string  `path:"description" module:"nokia-conf"`
	SshMaxSessions      *int32   `path:"ssh-max-sessions" module:"nokia-conf"`
	TelnetMaxSessions   *int32   `path:"telnet-max-sessions" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_CliSessionGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_CliSessionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_CliSessionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCliSessionGroupName retrieves the value of the leaf CliSessionGroupName from the NokiaConf_Configure_System_Security_Aaa_CliSessionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliSessionGroupName is set, it can
// safely use t.GetCliSessionGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliSessionGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) GetCliSessionGroupName() string {
	if t == nil || t.CliSessionGroupName == nil {
		return ""
	}
	return *t.CliSessionGroupName
}

// GetCombinedMaxSessions retrieves the value of the leaf CombinedMaxSessions from the NokiaConf_Configure_System_Security_Aaa_CliSessionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CombinedMaxSessions is set, it can
// safely use t.GetCombinedMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CombinedMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) GetCombinedMaxSessions() int32 {
	if t == nil || t.CombinedMaxSessions == nil {
		return 0
	}
	return *t.CombinedMaxSessions
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_Aaa_CliSessionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSshMaxSessions retrieves the value of the leaf SshMaxSessions from the NokiaConf_Configure_System_Security_Aaa_CliSessionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshMaxSessions is set, it can
// safely use t.GetSshMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) GetSshMaxSessions() int32 {
	if t == nil || t.SshMaxSessions == nil {
		return 0
	}
	return *t.SshMaxSessions
}

// GetTelnetMaxSessions retrieves the value of the leaf TelnetMaxSessions from the NokiaConf_Configure_System_Security_Aaa_CliSessionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetMaxSessions is set, it can
// safely use t.GetTelnetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) GetTelnetMaxSessions() int32 {
	if t == nil || t.TelnetMaxSessions == nil {
		return 0
	}
	return *t.TelnetMaxSessions
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_CliSessionGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Aaa_CliSessionGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CliSessionGroupName == nil {
		return nil, fmt.Errorf("nil value for key CliSessionGroupName")
	}

	return map[string]interface{}{
		"cli-session-group-name": *t.CliSessionGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_CliSessionGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_CliSessionGroup.
func (*NokiaConf_Configure_System_Security_Aaa_CliSessionGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_LocalProfiles represents the /nokia-conf/configure/system/security/aaa/local-profiles YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_LocalProfiles struct {
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Profile            map[string]*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_LocalProfiles implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles) IsYANGGoStruct() {}

// NewProfile creates a new entry in the Profile list of the
// NokiaConf_Configure_System_Security_Aaa_LocalProfiles struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles) NewProfile(UserProfileName string) (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile)
	}

	key := UserProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Profile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Profile", key)
	}

	t.Profile[key] = &NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile{
		UserProfileName: &UserProfileName,
	}

	return t.Profile[key], nil
}

// RenameProfile renames an entry in the list Profile within
// the NokiaConf_Configure_System_Security_Aaa_LocalProfiles struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles) RenameProfile(oldK, newK string) error {
	if _, ok := t.Profile[newK]; ok {
		return fmt.Errorf("key %v already exists in Profile", newK)
	}

	e, ok := t.Profile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Profile", oldK)
	}
	e.UserProfileName = &newK

	t.Profile[newK] = e
	delete(t.Profile, oldK)
	return nil
}

// GetOrCreateProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_LocalProfiles. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles) GetOrCreateProfile(UserProfileName string) *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile {

	key := UserProfileName

	if v, ok := t.Profile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProfile(UserProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProfile got unexpected error: %v", err))
	}
	return v
}

// GetProfile retrieves the value with the specified key from
// the Profile map field of NokiaConf_Configure_System_Security_Aaa_LocalProfiles. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles) GetProfile(UserProfileName string) *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile {

	if t == nil {
		return nil
	}

	key := UserProfileName

	if lm, ok := t.Profile[key]; ok {
		return lm
	}
	return nil
}

// DeleteProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_LocalProfiles. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles) DeleteProfile(UserProfileName string) {
	key := UserProfileName

	delete(t.Profile, key)
}

// AppendProfile appends the supplied NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile struct to the
// list Profile of NokiaConf_Configure_System_Security_Aaa_LocalProfiles. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles) AppendProfile(v *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) error {
	if v.UserProfileName == nil {
		return fmt.Errorf("invalid nil key received for UserProfileName")
	}

	key := *v.UserProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile)
	}

	if _, ok := t.Profile[key]; ok {
		return fmt.Errorf("duplicate key for list Profile %v", key)
	}

	t.Profile[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_LocalProfiles
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Profile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_LocalProfiles"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_LocalProfiles.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile represents the /nokia-conf/configure/system/security/aaa/local-profiles/profile YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile struct {
	ApplyGroups         []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	CliSessionGroup     *string                                                                         `path:"cli-session-group" module:"nokia-conf"`
	CombinedMaxSessions *int32                                                                          `path:"combined-max-sessions" module:"nokia-conf"`
	DefaultAction       E_NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_DefaultAction   `path:"default-action" module:"nokia-conf"`
	Entry               map[uint32]*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry `path:"entry" module:"nokia-conf"`
	Grpc                *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc             `path:"grpc" module:"nokia-conf"`
	Li                  *bool                                                                           `path:"li" module:"nokia-conf"`
	Netconf             *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf          `path:"netconf" module:"nokia-conf"`
	SshMaxSessions      *int32                                                                          `path:"ssh-max-sessions" module:"nokia-conf"`
	TelnetMaxSessions   *int32                                                                          `path:"telnet-max-sessions" module:"nokia-conf"`
	UserProfileName     *string                                                                         `path:"user-profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) NewEntry(EntryId uint32) (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetEntry(EntryId uint32) *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry struct to the
// list Entry of NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) AppendEntry(v *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateGrpc retrieves the value of the Grpc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetOrCreateGrpc() *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc {
	if t.Grpc != nil {
		return t.Grpc
	}
	t.Grpc = &NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc{}
	return t.Grpc
}

// GetOrCreateNetconf retrieves the value of the Netconf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetOrCreateNetconf() *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf {
	if t.Netconf != nil {
		return t.Netconf
	}
	t.Netconf = &NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf{}
	return t.Netconf
}

// GetGrpc returns the value of the Grpc struct pointer
// from NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile. If the receiver or the field Grpc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetGrpc() *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc {
	if t != nil && t.Grpc != nil {
		return t.Grpc
	}
	return nil
}

// GetNetconf returns the value of the Netconf struct pointer
// from NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile. If the receiver or the field Netconf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetNetconf() *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf {
	if t != nil && t.Netconf != nil {
		return t.Netconf
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCliSessionGroup retrieves the value of the leaf CliSessionGroup from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliSessionGroup is set, it can
// safely use t.GetCliSessionGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliSessionGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetCliSessionGroup() string {
	if t == nil || t.CliSessionGroup == nil {
		return ""
	}
	return *t.CliSessionGroup
}

// GetCombinedMaxSessions retrieves the value of the leaf CombinedMaxSessions from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CombinedMaxSessions is set, it can
// safely use t.GetCombinedMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CombinedMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetCombinedMaxSessions() int32 {
	if t == nil || t.CombinedMaxSessions == nil {
		return 0
	}
	return *t.CombinedMaxSessions
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetDefaultAction() E_NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_DefaultAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_DefaultAction_none
	}
	return t.DefaultAction
}

// GetLi retrieves the value of the leaf Li from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Li is set, it can
// safely use t.GetLi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Li == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetLi() bool {
	if t == nil || t.Li == nil {
		return false
	}
	return *t.Li
}

// GetSshMaxSessions retrieves the value of the leaf SshMaxSessions from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshMaxSessions is set, it can
// safely use t.GetSshMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetSshMaxSessions() int32 {
	if t == nil || t.SshMaxSessions == nil {
		return 0
	}
	return *t.SshMaxSessions
}

// GetTelnetMaxSessions retrieves the value of the leaf TelnetMaxSessions from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetMaxSessions is set, it can
// safely use t.GetTelnetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetTelnetMaxSessions() int32 {
	if t == nil || t.TelnetMaxSessions == nil {
		return 0
	}
	return *t.TelnetMaxSessions
}

// GetUserProfileName retrieves the value of the leaf UserProfileName from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserProfileName is set, it can
// safely use t.GetUserProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) GetUserProfileName() string {
	if t == nil || t.UserProfileName == nil {
		return ""
	}
	return *t.UserProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_DefaultAction_none
	}
	if t.Li == nil {
		var v bool = false
		t.Li = &v
	}
	t.Grpc.PopulateDefaults()
	t.Netconf.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UserProfileName == nil {
		return nil, fmt.Errorf("nil value for key UserProfileName")
	}

	return map[string]interface{}{
		"user-profile-name": *t.UserProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry represents the /nokia-conf/configure/system/security/aaa/local-profiles/profile/entry YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry struct {
	Action             E_NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                      `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                                      `path:"entry-id" module:"nokia-conf"`
	Match              *string                                                                      `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) GetAction() E_NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry_Action_none
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetMatch retrieves the value of the leaf Match from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Match is set, it can
// safely use t.GetMatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Match == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) GetMatch() string {
	if t == nil || t.Match == nil {
		return ""
	}
	return *t.Match
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry_Action_none
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc represents the /nokia-conf/configure/system/security/aaa/local-profiles/profile/grpc YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc struct {
	RpcAuthorization *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization `path:"rpc-authorization" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc) IsYANGGoStruct() {}

// GetOrCreateRpcAuthorization retrieves the value of the RpcAuthorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc) GetOrCreateRpcAuthorization() *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization {
	if t.RpcAuthorization != nil {
		return t.RpcAuthorization
	}
	t.RpcAuthorization = &NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization{}
	return t.RpcAuthorization
}

// GetRpcAuthorization returns the value of the RpcAuthorization struct pointer
// from NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc. If the receiver or the field RpcAuthorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc) GetRpcAuthorization() *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization {
	if t != nil && t.RpcAuthorization != nil {
		return t.RpcAuthorization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RpcAuthorization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization represents the /nokia-conf/configure/system/security/aaa/local-profiles/profile/grpc/rpc-authorization YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization struct {
	GnmiCapabilities                 E_NokiaTypesSystem_PermitDeny `path:"gnmi-capabilities" module:"nokia-conf"`
	GnmiGet                          E_NokiaTypesSystem_PermitDeny `path:"gnmi-get" module:"nokia-conf"`
	GnmiSet                          E_NokiaTypesSystem_PermitDeny `path:"gnmi-set" module:"nokia-conf"`
	GnmiSubscribe                    E_NokiaTypesSystem_PermitDeny `path:"gnmi-subscribe" module:"nokia-conf"`
	GnoiCertMgmtCangenerate          E_NokiaTypesSystem_PermitDeny `path:"gnoi-cert-mgmt-cangenerate" module:"nokia-conf"`
	GnoiCertMgmtGetcert              E_NokiaTypesSystem_PermitDeny `path:"gnoi-cert-mgmt-getcert" module:"nokia-conf"`
	GnoiCertMgmtInstall              E_NokiaTypesSystem_PermitDeny `path:"gnoi-cert-mgmt-install" module:"nokia-conf"`
	GnoiCertMgmtRevoke               E_NokiaTypesSystem_PermitDeny `path:"gnoi-cert-mgmt-revoke" module:"nokia-conf"`
	GnoiCertMgmtRotate               E_NokiaTypesSystem_PermitDeny `path:"gnoi-cert-mgmt-rotate" module:"nokia-conf"`
	GnoiFileGet                      E_NokiaTypesSystem_PermitDeny `path:"gnoi-file-get" module:"nokia-conf"`
	GnoiFilePut                      E_NokiaTypesSystem_PermitDeny `path:"gnoi-file-put" module:"nokia-conf"`
	GnoiFileRemove                   E_NokiaTypesSystem_PermitDeny `path:"gnoi-file-remove" module:"nokia-conf"`
	GnoiFileStat                     E_NokiaTypesSystem_PermitDeny `path:"gnoi-file-stat" module:"nokia-conf"`
	GnoiFileTransfertoremote         E_NokiaTypesSystem_PermitDeny `path:"gnoi-file-transfertoremote" module:"nokia-conf"`
	GnoiSystemCancelreboot           E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-cancelreboot" module:"nokia-conf"`
	GnoiSystemPing                   E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-ping" module:"nokia-conf"`
	GnoiSystemReboot                 E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-reboot" module:"nokia-conf"`
	GnoiSystemRebootstatus           E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-rebootstatus" module:"nokia-conf"`
	GnoiSystemSetpackage             E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-setpackage" module:"nokia-conf"`
	GnoiSystemSwitchcontrolprocessor E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-switchcontrolprocessor" module:"nokia-conf"`
	GnoiSystemTime                   E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-time" module:"nokia-conf"`
	GnoiSystemTraceroute             E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-traceroute" module:"nokia-conf"`
	MdCliSession                     E_NokiaTypesSystem_PermitDeny `path:"md-cli-session" module:"nokia-conf"`
	RibApiGetversion                 E_NokiaTypesSystem_PermitDeny `path:"rib-api-getversion" module:"nokia-conf"`
	RibApiModify                     E_NokiaTypesSystem_PermitDeny `path:"rib-api-modify" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) IsYANGGoStruct() {
}

// GetGnmiCapabilities retrieves the value of the leaf GnmiCapabilities from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiCapabilities is set, it can
// safely use t.GetGnmiCapabilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiCapabilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnmiCapabilities() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnmiCapabilities == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnmiCapabilities
}

// GetGnmiGet retrieves the value of the leaf GnmiGet from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiGet is set, it can
// safely use t.GetGnmiGet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiGet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnmiGet() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnmiGet == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnmiGet
}

// GetGnmiSet retrieves the value of the leaf GnmiSet from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiSet is set, it can
// safely use t.GetGnmiSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnmiSet() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnmiSet == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnmiSet
}

// GetGnmiSubscribe retrieves the value of the leaf GnmiSubscribe from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiSubscribe is set, it can
// safely use t.GetGnmiSubscribe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiSubscribe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnmiSubscribe() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnmiSubscribe == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnmiSubscribe
}

// GetGnoiCertMgmtCangenerate retrieves the value of the leaf GnoiCertMgmtCangenerate from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiCertMgmtCangenerate is set, it can
// safely use t.GetGnoiCertMgmtCangenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiCertMgmtCangenerate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiCertMgmtCangenerate() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiCertMgmtCangenerate == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiCertMgmtCangenerate
}

// GetGnoiCertMgmtGetcert retrieves the value of the leaf GnoiCertMgmtGetcert from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiCertMgmtGetcert is set, it can
// safely use t.GetGnoiCertMgmtGetcert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiCertMgmtGetcert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiCertMgmtGetcert() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiCertMgmtGetcert == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiCertMgmtGetcert
}

// GetGnoiCertMgmtInstall retrieves the value of the leaf GnoiCertMgmtInstall from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiCertMgmtInstall is set, it can
// safely use t.GetGnoiCertMgmtInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiCertMgmtInstall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiCertMgmtInstall() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiCertMgmtInstall == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiCertMgmtInstall
}

// GetGnoiCertMgmtRevoke retrieves the value of the leaf GnoiCertMgmtRevoke from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiCertMgmtRevoke is set, it can
// safely use t.GetGnoiCertMgmtRevoke() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiCertMgmtRevoke == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiCertMgmtRevoke() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiCertMgmtRevoke == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiCertMgmtRevoke
}

// GetGnoiCertMgmtRotate retrieves the value of the leaf GnoiCertMgmtRotate from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiCertMgmtRotate is set, it can
// safely use t.GetGnoiCertMgmtRotate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiCertMgmtRotate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiCertMgmtRotate() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiCertMgmtRotate == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiCertMgmtRotate
}

// GetGnoiFileGet retrieves the value of the leaf GnoiFileGet from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiFileGet is set, it can
// safely use t.GetGnoiFileGet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiFileGet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiFileGet() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiFileGet == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiFileGet
}

// GetGnoiFilePut retrieves the value of the leaf GnoiFilePut from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiFilePut is set, it can
// safely use t.GetGnoiFilePut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiFilePut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiFilePut() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiFilePut == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiFilePut
}

// GetGnoiFileRemove retrieves the value of the leaf GnoiFileRemove from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiFileRemove is set, it can
// safely use t.GetGnoiFileRemove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiFileRemove == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiFileRemove() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiFileRemove == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiFileRemove
}

// GetGnoiFileStat retrieves the value of the leaf GnoiFileStat from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiFileStat is set, it can
// safely use t.GetGnoiFileStat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiFileStat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiFileStat() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiFileStat == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiFileStat
}

// GetGnoiFileTransfertoremote retrieves the value of the leaf GnoiFileTransfertoremote from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiFileTransfertoremote is set, it can
// safely use t.GetGnoiFileTransfertoremote() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiFileTransfertoremote == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiFileTransfertoremote() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiFileTransfertoremote == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiFileTransfertoremote
}

// GetGnoiSystemCancelreboot retrieves the value of the leaf GnoiSystemCancelreboot from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemCancelreboot is set, it can
// safely use t.GetGnoiSystemCancelreboot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemCancelreboot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemCancelreboot() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemCancelreboot == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiSystemCancelreboot
}

// GetGnoiSystemPing retrieves the value of the leaf GnoiSystemPing from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemPing is set, it can
// safely use t.GetGnoiSystemPing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemPing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemPing() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemPing == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiSystemPing
}

// GetGnoiSystemReboot retrieves the value of the leaf GnoiSystemReboot from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemReboot is set, it can
// safely use t.GetGnoiSystemReboot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemReboot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemReboot() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemReboot == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiSystemReboot
}

// GetGnoiSystemRebootstatus retrieves the value of the leaf GnoiSystemRebootstatus from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemRebootstatus is set, it can
// safely use t.GetGnoiSystemRebootstatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemRebootstatus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemRebootstatus() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemRebootstatus == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiSystemRebootstatus
}

// GetGnoiSystemSetpackage retrieves the value of the leaf GnoiSystemSetpackage from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemSetpackage is set, it can
// safely use t.GetGnoiSystemSetpackage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemSetpackage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemSetpackage() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemSetpackage == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiSystemSetpackage
}

// GetGnoiSystemSwitchcontrolprocessor retrieves the value of the leaf GnoiSystemSwitchcontrolprocessor from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemSwitchcontrolprocessor is set, it can
// safely use t.GetGnoiSystemSwitchcontrolprocessor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemSwitchcontrolprocessor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemSwitchcontrolprocessor() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemSwitchcontrolprocessor == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiSystemSwitchcontrolprocessor
}

// GetGnoiSystemTime retrieves the value of the leaf GnoiSystemTime from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemTime is set, it can
// safely use t.GetGnoiSystemTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemTime() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemTime == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiSystemTime
}

// GetGnoiSystemTraceroute retrieves the value of the leaf GnoiSystemTraceroute from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemTraceroute is set, it can
// safely use t.GetGnoiSystemTraceroute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemTraceroute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemTraceroute() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemTraceroute == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiSystemTraceroute
}

// GetMdCliSession retrieves the value of the leaf MdCliSession from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdCliSession is set, it can
// safely use t.GetMdCliSession() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdCliSession == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetMdCliSession() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.MdCliSession == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.MdCliSession
}

// GetRibApiGetversion retrieves the value of the leaf RibApiGetversion from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApiGetversion is set, it can
// safely use t.GetRibApiGetversion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApiGetversion == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetRibApiGetversion() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.RibApiGetversion == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.RibApiGetversion
}

// GetRibApiModify retrieves the value of the leaf RibApiModify from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApiModify is set, it can
// safely use t.GetRibApiModify() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApiModify == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetRibApiModify() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.RibApiModify == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.RibApiModify
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GnmiCapabilities == 0 {
		t.GnmiCapabilities = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnmiGet == 0 {
		t.GnmiGet = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnmiSet == 0 {
		t.GnmiSet = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnmiSubscribe == 0 {
		t.GnmiSubscribe = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiCertMgmtCangenerate == 0 {
		t.GnoiCertMgmtCangenerate = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiCertMgmtGetcert == 0 {
		t.GnoiCertMgmtGetcert = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiCertMgmtInstall == 0 {
		t.GnoiCertMgmtInstall = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiCertMgmtRevoke == 0 {
		t.GnoiCertMgmtRevoke = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiCertMgmtRotate == 0 {
		t.GnoiCertMgmtRotate = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiFileGet == 0 {
		t.GnoiFileGet = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiFilePut == 0 {
		t.GnoiFilePut = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiFileRemove == 0 {
		t.GnoiFileRemove = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiFileStat == 0 {
		t.GnoiFileStat = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiFileTransfertoremote == 0 {
		t.GnoiFileTransfertoremote = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiSystemCancelreboot == 0 {
		t.GnoiSystemCancelreboot = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiSystemPing == 0 {
		t.GnoiSystemPing = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiSystemReboot == 0 {
		t.GnoiSystemReboot = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiSystemRebootstatus == 0 {
		t.GnoiSystemRebootstatus = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiSystemSetpackage == 0 {
		t.GnoiSystemSetpackage = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiSystemSwitchcontrolprocessor == 0 {
		t.GnoiSystemSwitchcontrolprocessor = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiSystemTime == 0 {
		t.GnoiSystemTime = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiSystemTraceroute == 0 {
		t.GnoiSystemTraceroute = NokiaTypesSystem_PermitDeny_permit
	}
	if t.MdCliSession == 0 {
		t.MdCliSession = NokiaTypesSystem_PermitDeny_permit
	}
	if t.RibApiGetversion == 0 {
		t.RibApiGetversion = NokiaTypesSystem_PermitDeny_permit
	}
	if t.RibApiModify == 0 {
		t.RibApiModify = NokiaTypesSystem_PermitDeny_permit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf represents the /nokia-conf/configure/system/security/aaa/local-profiles/profile/netconf YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf struct {
	BaseOpAuthorization *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization `path:"base-op-authorization" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf) IsYANGGoStruct() {}

// GetOrCreateBaseOpAuthorization retrieves the value of the BaseOpAuthorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf) GetOrCreateBaseOpAuthorization() *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization {
	if t.BaseOpAuthorization != nil {
		return t.BaseOpAuthorization
	}
	t.BaseOpAuthorization = &NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization{}
	return t.BaseOpAuthorization
}

// GetBaseOpAuthorization returns the value of the BaseOpAuthorization struct pointer
// from NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf. If the receiver or the field BaseOpAuthorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf) GetBaseOpAuthorization() *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization {
	if t != nil && t.BaseOpAuthorization != nil {
		return t.BaseOpAuthorization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BaseOpAuthorization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization represents the /nokia-conf/configure/system/security/aaa/local-profiles/profile/netconf/base-op-authorization YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization struct {
	Action             *bool `path:"action" module:"nokia-conf"`
	CancelCommit       *bool `path:"cancel-commit" module:"nokia-conf"`
	CloseSession       *bool `path:"close-session" module:"nokia-conf"`
	Commit             *bool `path:"commit" module:"nokia-conf"`
	CopyConfig         *bool `path:"copy-config" module:"nokia-conf"`
	CreateSubscription *bool `path:"create-subscription" module:"nokia-conf"`
	DeleteConfig       *bool `path:"delete-config" module:"nokia-conf"`
	DiscardChanges     *bool `path:"discard-changes" module:"nokia-conf"`
	EditConfig         *bool `path:"edit-config" module:"nokia-conf"`
	Get                *bool `path:"get" module:"nokia-conf"`
	GetConfig          *bool `path:"get-config" module:"nokia-conf"`
	GetData            *bool `path:"get-data" module:"nokia-conf"`
	GetSchema          *bool `path:"get-schema" module:"nokia-conf"`
	KillSession        *bool `path:"kill-session" module:"nokia-conf"`
	Lock               *bool `path:"lock" module:"nokia-conf"`
	Validate           *bool `path:"validate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetAction() bool {
	if t == nil || t.Action == nil {
		return false
	}
	return *t.Action
}

// GetCancelCommit retrieves the value of the leaf CancelCommit from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CancelCommit is set, it can
// safely use t.GetCancelCommit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CancelCommit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetCancelCommit() bool {
	if t == nil || t.CancelCommit == nil {
		return false
	}
	return *t.CancelCommit
}

// GetCloseSession retrieves the value of the leaf CloseSession from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CloseSession is set, it can
// safely use t.GetCloseSession() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CloseSession == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetCloseSession() bool {
	if t == nil || t.CloseSession == nil {
		return false
	}
	return *t.CloseSession
}

// GetCommit retrieves the value of the leaf Commit from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Commit is set, it can
// safely use t.GetCommit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Commit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetCommit() bool {
	if t == nil || t.Commit == nil {
		return false
	}
	return *t.Commit
}

// GetCopyConfig retrieves the value of the leaf CopyConfig from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CopyConfig is set, it can
// safely use t.GetCopyConfig() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CopyConfig == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetCopyConfig() bool {
	if t == nil || t.CopyConfig == nil {
		return false
	}
	return *t.CopyConfig
}

// GetCreateSubscription retrieves the value of the leaf CreateSubscription from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateSubscription is set, it can
// safely use t.GetCreateSubscription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateSubscription == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetCreateSubscription() bool {
	if t == nil || t.CreateSubscription == nil {
		return false
	}
	return *t.CreateSubscription
}

// GetDeleteConfig retrieves the value of the leaf DeleteConfig from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeleteConfig is set, it can
// safely use t.GetDeleteConfig() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeleteConfig == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetDeleteConfig() bool {
	if t == nil || t.DeleteConfig == nil {
		return false
	}
	return *t.DeleteConfig
}

// GetDiscardChanges retrieves the value of the leaf DiscardChanges from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardChanges is set, it can
// safely use t.GetDiscardChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardChanges == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetDiscardChanges() bool {
	if t == nil || t.DiscardChanges == nil {
		return false
	}
	return *t.DiscardChanges
}

// GetEditConfig retrieves the value of the leaf EditConfig from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EditConfig is set, it can
// safely use t.GetEditConfig() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EditConfig == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetEditConfig() bool {
	if t == nil || t.EditConfig == nil {
		return false
	}
	return *t.EditConfig
}

// GetGet retrieves the value of the leaf Get from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Get is set, it can
// safely use t.GetGet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Get == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetGet() bool {
	if t == nil || t.Get == nil {
		return false
	}
	return *t.Get
}

// GetGetConfig retrieves the value of the leaf GetConfig from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GetConfig is set, it can
// safely use t.GetGetConfig() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GetConfig == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetGetConfig() bool {
	if t == nil || t.GetConfig == nil {
		return false
	}
	return *t.GetConfig
}

// GetGetData retrieves the value of the leaf GetData from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GetData is set, it can
// safely use t.GetGetData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GetData == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetGetData() bool {
	if t == nil || t.GetData == nil {
		return false
	}
	return *t.GetData
}

// GetGetSchema retrieves the value of the leaf GetSchema from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GetSchema is set, it can
// safely use t.GetGetSchema() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GetSchema == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetGetSchema() bool {
	if t == nil || t.GetSchema == nil {
		return false
	}
	return *t.GetSchema
}

// GetKillSession retrieves the value of the leaf KillSession from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KillSession is set, it can
// safely use t.GetKillSession() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KillSession == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetKillSession() bool {
	if t == nil || t.KillSession == nil {
		return false
	}
	return *t.KillSession
}

// GetLock retrieves the value of the leaf Lock from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lock is set, it can
// safely use t.GetLock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetLock() bool {
	if t == nil || t.Lock == nil {
		return false
	}
	return *t.Lock
}

// GetValidate retrieves the value of the leaf Validate from the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Validate is set, it can
// safely use t.GetValidate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Validate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetValidate() bool {
	if t == nil || t.Validate == nil {
		return false
	}
	return *t.Validate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == nil {
		var v bool = false
		t.Action = &v
	}
	if t.CancelCommit == nil {
		var v bool = false
		t.CancelCommit = &v
	}
	if t.CloseSession == nil {
		var v bool = false
		t.CloseSession = &v
	}
	if t.Commit == nil {
		var v bool = false
		t.Commit = &v
	}
	if t.CopyConfig == nil {
		var v bool = false
		t.CopyConfig = &v
	}
	if t.CreateSubscription == nil {
		var v bool = false
		t.CreateSubscription = &v
	}
	if t.DeleteConfig == nil {
		var v bool = false
		t.DeleteConfig = &v
	}
	if t.DiscardChanges == nil {
		var v bool = false
		t.DiscardChanges = &v
	}
	if t.EditConfig == nil {
		var v bool = false
		t.EditConfig = &v
	}
	if t.Get == nil {
		var v bool = false
		t.Get = &v
	}
	if t.GetConfig == nil {
		var v bool = false
		t.GetConfig = &v
	}
	if t.GetData == nil {
		var v bool = false
		t.GetData = &v
	}
	if t.GetSchema == nil {
		var v bool = false
		t.GetSchema = &v
	}
	if t.KillSession == nil {
		var v bool = false
		t.KillSession = &v
	}
	if t.Lock == nil {
		var v bool = false
		t.Lock = &v
	}
	if t.Validate == nil {
		var v bool = false
		t.Validate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization.
func (*NokiaConf_Configure_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_ManagementInterface represents the /nokia-conf/configure/system/security/aaa/management-interface YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_ManagementInterface struct {
	ApplyGroups         []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	MdCli               *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli               `path:"md-cli" module:"nokia-conf"`
	OutputAuthorization *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization `path:"output-authorization" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_ManagementInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_ManagementInterface) IsYANGGoStruct() {}

// GetOrCreateMdCli retrieves the value of the MdCli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface) GetOrCreateMdCli() *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli {
	if t.MdCli != nil {
		return t.MdCli
	}
	t.MdCli = &NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli{}
	return t.MdCli
}

// GetOrCreateOutputAuthorization retrieves the value of the OutputAuthorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface) GetOrCreateOutputAuthorization() *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization {
	if t.OutputAuthorization != nil {
		return t.OutputAuthorization
	}
	t.OutputAuthorization = &NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization{}
	return t.OutputAuthorization
}

// GetMdCli returns the value of the MdCli struct pointer
// from NokiaConf_Configure_System_Security_Aaa_ManagementInterface. If the receiver or the field MdCli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface) GetMdCli() *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli {
	if t != nil && t.MdCli != nil {
		return t.MdCli
	}
	return nil
}

// GetOutputAuthorization returns the value of the OutputAuthorization struct pointer
// from NokiaConf_Configure_System_Security_Aaa_ManagementInterface. If the receiver or the field OutputAuthorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface) GetOutputAuthorization() *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization {
	if t != nil && t.OutputAuthorization != nil {
		return t.OutputAuthorization
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_ManagementInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_ManagementInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_ManagementInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MdCli.PopulateDefaults()
	t.OutputAuthorization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_ManagementInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_ManagementInterface.
func (*NokiaConf_Configure_System_Security_Aaa_ManagementInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli represents the /nokia-conf/configure/system/security/aaa/management-interface/md-cli YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli struct {
	CommandAccountingDuringLoad *bool `path:"command-accounting-during-load" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli) IsYANGGoStruct() {}

// GetCommandAccountingDuringLoad retrieves the value of the leaf CommandAccountingDuringLoad from the NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommandAccountingDuringLoad is set, it can
// safely use t.GetCommandAccountingDuringLoad() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommandAccountingDuringLoad == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli) GetCommandAccountingDuringLoad() bool {
	if t == nil || t.CommandAccountingDuringLoad == nil {
		return true
	}
	return *t.CommandAccountingDuringLoad
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CommandAccountingDuringLoad == nil {
		var v bool = true
		t.CommandAccountingDuringLoad = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli.
func (*NokiaConf_Configure_System_Security_Aaa_ManagementInterface_MdCli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization represents the /nokia-conf/configure/system/security/aaa/management-interface/output-authorization YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization struct {
	MdInterfaces  *bool `path:"md-interfaces" module:"nokia-conf"`
	TelemetryData *bool `path:"telemetry-data" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization) IsYANGGoStruct() {
}

// GetMdInterfaces retrieves the value of the leaf MdInterfaces from the NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdInterfaces is set, it can
// safely use t.GetMdInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdInterfaces == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization) GetMdInterfaces() bool {
	if t == nil || t.MdInterfaces == nil {
		return true
	}
	return *t.MdInterfaces
}

// GetTelemetryData retrieves the value of the leaf TelemetryData from the NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelemetryData is set, it can
// safely use t.GetTelemetryData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelemetryData == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization) GetTelemetryData() bool {
	if t == nil || t.TelemetryData == nil {
		return false
	}
	return *t.TelemetryData
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MdInterfaces == nil {
		var v bool = true
		t.MdInterfaces = &v
	}
	if t.TelemetryData == nil {
		var v bool = false
		t.TelemetryData = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization.
func (*NokiaConf_Configure_System_Security_Aaa_ManagementInterface_OutputAuthorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers represents the /nokia-conf/configure/system/security/aaa/remote-servers YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers struct {
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Ldap               *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap       `path:"ldap" module:"nokia-conf"`
	Radius             *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius     `path:"radius" module:"nokia-conf"`
	Tacplus            *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus    `path:"tacplus" module:"nokia-conf"`
	VprnServer         *NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer `path:"vprn-server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers) IsYANGGoStruct() {}

// GetOrCreateLdap retrieves the value of the Ldap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) GetOrCreateLdap() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap {
	if t.Ldap != nil {
		return t.Ldap
	}
	t.Ldap = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap{}
	return t.Ldap
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) GetOrCreateRadius() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius{}
	return t.Radius
}

// GetOrCreateTacplus retrieves the value of the Tacplus field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) GetOrCreateTacplus() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus {
	if t.Tacplus != nil {
		return t.Tacplus
	}
	t.Tacplus = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus{}
	return t.Tacplus
}

// GetOrCreateVprnServer retrieves the value of the VprnServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) GetOrCreateVprnServer() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer {
	if t.VprnServer != nil {
		return t.VprnServer
	}
	t.VprnServer = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer{}
	return t.VprnServer
}

// GetLdap returns the value of the Ldap struct pointer
// from NokiaConf_Configure_System_Security_Aaa_RemoteServers. If the receiver or the field Ldap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) GetLdap() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap {
	if t != nil && t.Ldap != nil {
		return t.Ldap
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_System_Security_Aaa_RemoteServers. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) GetRadius() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetTacplus returns the value of the Tacplus struct pointer
// from NokiaConf_Configure_System_Security_Aaa_RemoteServers. If the receiver or the field Tacplus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) GetTacplus() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus {
	if t != nil && t.Tacplus != nil {
		return t.Tacplus
	}
	return nil
}

// GetVprnServer returns the value of the VprnServer struct pointer
// from NokiaConf_Configure_System_Security_Aaa_RemoteServers. If the receiver or the field VprnServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) GetVprnServer() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer {
	if t != nil && t.VprnServer != nil {
		return t.VprnServer
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_RemoteServers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_RemoteServers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ldap.PopulateDefaults()
	t.Radius.PopulateDefaults()
	t.Tacplus.PopulateDefaults()
	t.VprnServer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap represents the /nokia-conf/configure/system/security/aaa/remote-servers/ldap YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap struct {
	AdminState              E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	PublicKeyAuthentication *bool                                                                         `path:"public-key-authentication" module:"nokia-conf"`
	RoutePreference         E_NokiaTypesSecurity_AaaRoutePreference                                       `path:"route-preference" module:"nokia-conf"`
	Server                  map[uint32]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server `path:"server" module:"nokia-conf"`
	ServerRetry             *uint32                                                                       `path:"server-retry" module:"nokia-conf"`
	ServerTimeout           *uint32                                                                       `path:"server-timeout" module:"nokia-conf"`
	UseDefaultTemplate      *bool                                                                         `path:"use-default-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) NewServer(Index uint32) (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server{
		Index: &Index,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) RenameServer(oldK, newK uint32) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Index = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) GetOrCreateServer(Index uint32) *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server {

	key := Index

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) GetServer(Index uint32) *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) DeleteServer(Index uint32) {
	key := Index

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server struct to the
// list Server of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) AppendServer(v *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPublicKeyAuthentication retrieves the value of the leaf PublicKeyAuthentication from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicKeyAuthentication is set, it can
// safely use t.GetPublicKeyAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicKeyAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) GetPublicKeyAuthentication() bool {
	if t == nil || t.PublicKeyAuthentication == nil {
		return false
	}
	return *t.PublicKeyAuthentication
}

// GetRoutePreference retrieves the value of the leaf RoutePreference from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutePreference is set, it can
// safely use t.GetRoutePreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutePreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) GetRoutePreference() E_NokiaTypesSecurity_AaaRoutePreference {
	if t == nil || t.RoutePreference == 0 {
		return NokiaTypesSecurity_AaaRoutePreference_both
	}
	return t.RoutePreference
}

// GetServerRetry retrieves the value of the leaf ServerRetry from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerRetry is set, it can
// safely use t.GetServerRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) GetServerRetry() uint32 {
	if t == nil || t.ServerRetry == nil {
		return 3
	}
	return *t.ServerRetry
}

// GetServerTimeout retrieves the value of the leaf ServerTimeout from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerTimeout is set, it can
// safely use t.GetServerTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) GetServerTimeout() uint32 {
	if t == nil || t.ServerTimeout == nil {
		return 3
	}
	return *t.ServerTimeout
}

// GetUseDefaultTemplate retrieves the value of the leaf UseDefaultTemplate from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDefaultTemplate is set, it can
// safely use t.GetUseDefaultTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDefaultTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) GetUseDefaultTemplate() bool {
	if t == nil || t.UseDefaultTemplate == nil {
		return true
	}
	return *t.UseDefaultTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.PublicKeyAuthentication == nil {
		var v bool = false
		t.PublicKeyAuthentication = &v
	}
	if t.RoutePreference == 0 {
		t.RoutePreference = NokiaTypesSecurity_AaaRoutePreference_both
	}
	if t.ServerRetry == nil {
		var v uint32 = 3
		t.ServerRetry = &v
	}
	if t.ServerTimeout == nil {
		var v uint32 = 3
		t.ServerTimeout = &v
	}
	if t.UseDefaultTemplate == nil {
		var v bool = true
		t.UseDefaultTemplate = &v
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server represents the /nokia-conf/configure/system/security/aaa/remote-servers/ldap/server YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server struct {
	Address            map[string]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address `path:"address" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	BindAuthentication *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication `path:"bind-authentication" module:"nokia-conf"`
	Index              *uint32                                                                               `path:"index" module:"nokia-conf"`
	Search             *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search             `path:"search" module:"nokia-conf"`
	ServerName         *string                                                                               `path:"server-name" module:"nokia-conf"`
	TlsProfile         *string                                                                               `path:"tls-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) NewAddress(IpAddress string) (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address{
		IpAddress: &IpAddress,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.IpAddress = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) GetOrCreateAddress(IpAddress string) *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address {

	key := IpAddress

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) GetAddress(IpAddress string) *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) DeleteAddress(IpAddress string) {
	key := IpAddress

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address struct to the
// list Address of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) AppendAddress(v *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// GetOrCreateBindAuthentication retrieves the value of the BindAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) GetOrCreateBindAuthentication() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication {
	if t.BindAuthentication != nil {
		return t.BindAuthentication
	}
	t.BindAuthentication = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication{}
	return t.BindAuthentication
}

// GetOrCreateSearch retrieves the value of the Search field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) GetOrCreateSearch() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search {
	if t.Search != nil {
		return t.Search
	}
	t.Search = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search{}
	return t.Search
}

// GetBindAuthentication returns the value of the BindAuthentication struct pointer
// from NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server. If the receiver or the field BindAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) GetBindAuthentication() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication {
	if t != nil && t.BindAuthentication != nil {
		return t.BindAuthentication
	}
	return nil
}

// GetSearch returns the value of the Search struct pointer
// from NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server. If the receiver or the field Search is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) GetSearch() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search {
	if t != nil && t.Search != nil {
		return t.Search
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetServerName retrieves the value of the leaf ServerName from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerName is set, it can
// safely use t.GetServerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) GetServerName() string {
	if t == nil || t.ServerName == nil {
		return ""
	}
	return *t.ServerName
}

// GetTlsProfile retrieves the value of the leaf TlsProfile from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsProfile is set, it can
// safely use t.GetTlsProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) GetTlsProfile() string {
	if t == nil || t.TlsProfile == nil {
		return ""
	}
	return *t.TlsProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.BindAuthentication.PopulateDefaults()
	t.Search.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address represents the /nokia-conf/configure/system/security/aaa/remote-servers/ldap/server/address YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpAddress          *string  `path:"ip-address" module:"nokia-conf"`
	Port               *int32   `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 389
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 389
		t.Port = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication represents the /nokia-conf/configure/system/security/aaa/remote-servers/ldap/server/bind-authentication YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication struct {
	Password *string `path:"password" module:"nokia-conf"`
	RootDn   *string `path:"root-dn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) IsYANGGoStruct() {
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetRootDn retrieves the value of the leaf RootDn from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootDn is set, it can
// safely use t.GetRootDn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootDn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) GetRootDn() string {
	if t == nil || t.RootDn == nil {
		return ""
	}
	return *t.RootDn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search represents the /nokia-conf/configure/system/security/aaa/remote-servers/ldap/server/search YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search struct {
	BaseDn *string `path:"base-dn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search) IsYANGGoStruct() {}

// GetBaseDn retrieves the value of the leaf BaseDn from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BaseDn is set, it can
// safely use t.GetBaseDn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BaseDn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search) GetBaseDn() string {
	if t == nil || t.BaseDn == nil {
		return ""
	}
	return *t.BaseDn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Ldap_Server_Search) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius represents the /nokia-conf/configure/system/security/aaa/remote-servers/radius YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius struct {
	AccessAlgorithm           E_NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_AccessAlgorithm  `path:"access-algorithm" module:"nokia-conf"`
	Accounting                *bool                                                                           `path:"accounting" module:"nokia-conf"`
	AccountingPort            *uint32                                                                         `path:"accounting-port" module:"nokia-conf"`
	AdminState                E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Authorization             *bool                                                                           `path:"authorization" module:"nokia-conf"`
	InteractiveAuthentication *bool                                                                           `path:"interactive-authentication" module:"nokia-conf"`
	Port                      *uint32                                                                         `path:"port" module:"nokia-conf"`
	RoutePreference           E_NokiaTypesSecurity_AaaRoutePreference                                         `path:"route-preference" module:"nokia-conf"`
	Server                    map[uint32]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server `path:"server" module:"nokia-conf"`
	ServerRetry               *uint32                                                                         `path:"server-retry" module:"nokia-conf"`
	ServerTimeout             *uint32                                                                         `path:"server-timeout" module:"nokia-conf"`
	UseDefaultTemplate        *bool                                                                           `path:"use-default-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) NewServer(Index uint32) (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server{
		Index: &Index,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) RenameServer(oldK, newK uint32) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Index = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetOrCreateServer(Index uint32) *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server {

	key := Index

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetServer(Index uint32) *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) DeleteServer(Index uint32) {
	key := Index

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server struct to the
// list Server of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) AppendServer(v *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAccessAlgorithm retrieves the value of the leaf AccessAlgorithm from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAlgorithm is set, it can
// safely use t.GetAccessAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetAccessAlgorithm() E_NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_AccessAlgorithm {
	if t == nil || t.AccessAlgorithm == 0 {
		return NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_AccessAlgorithm_direct
	}
	return t.AccessAlgorithm
}

// GetAccounting retrieves the value of the leaf Accounting from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accounting is set, it can
// safely use t.GetAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetAccounting() bool {
	if t == nil || t.Accounting == nil {
		return false
	}
	return *t.Accounting
}

// GetAccountingPort retrieves the value of the leaf AccountingPort from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPort is set, it can
// safely use t.GetAccountingPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetAccountingPort() uint32 {
	if t == nil || t.AccountingPort == nil {
		return 1813
	}
	return *t.AccountingPort
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthorization retrieves the value of the leaf Authorization from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authorization is set, it can
// safely use t.GetAuthorization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authorization == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetAuthorization() bool {
	if t == nil || t.Authorization == nil {
		return false
	}
	return *t.Authorization
}

// GetInteractiveAuthentication retrieves the value of the leaf InteractiveAuthentication from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InteractiveAuthentication is set, it can
// safely use t.GetInteractiveAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InteractiveAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetInteractiveAuthentication() bool {
	if t == nil || t.InteractiveAuthentication == nil {
		return false
	}
	return *t.InteractiveAuthentication
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 1812
	}
	return *t.Port
}

// GetRoutePreference retrieves the value of the leaf RoutePreference from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutePreference is set, it can
// safely use t.GetRoutePreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutePreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetRoutePreference() E_NokiaTypesSecurity_AaaRoutePreference {
	if t == nil || t.RoutePreference == 0 {
		return NokiaTypesSecurity_AaaRoutePreference_both
	}
	return t.RoutePreference
}

// GetServerRetry retrieves the value of the leaf ServerRetry from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerRetry is set, it can
// safely use t.GetServerRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetServerRetry() uint32 {
	if t == nil || t.ServerRetry == nil {
		return 3
	}
	return *t.ServerRetry
}

// GetServerTimeout retrieves the value of the leaf ServerTimeout from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerTimeout is set, it can
// safely use t.GetServerTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetServerTimeout() uint32 {
	if t == nil || t.ServerTimeout == nil {
		return 3
	}
	return *t.ServerTimeout
}

// GetUseDefaultTemplate retrieves the value of the leaf UseDefaultTemplate from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDefaultTemplate is set, it can
// safely use t.GetUseDefaultTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDefaultTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) GetUseDefaultTemplate() bool {
	if t == nil || t.UseDefaultTemplate == nil {
		return false
	}
	return *t.UseDefaultTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccessAlgorithm == 0 {
		t.AccessAlgorithm = NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_AccessAlgorithm_direct
	}
	if t.Accounting == nil {
		var v bool = false
		t.Accounting = &v
	}
	if t.AccountingPort == nil {
		var v uint32 = 1813
		t.AccountingPort = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Authorization == nil {
		var v bool = false
		t.Authorization = &v
	}
	if t.InteractiveAuthentication == nil {
		var v bool = false
		t.InteractiveAuthentication = &v
	}
	if t.Port == nil {
		var v uint32 = 1812
		t.Port = &v
	}
	if t.RoutePreference == 0 {
		t.RoutePreference = NokiaTypesSecurity_AaaRoutePreference_both
	}
	if t.ServerRetry == nil {
		var v uint32 = 3
		t.ServerRetry = &v
	}
	if t.ServerTimeout == nil {
		var v uint32 = 3
		t.ServerTimeout = &v
	}
	if t.UseDefaultTemplate == nil {
		var v bool = false
		t.UseDefaultTemplate = &v
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server represents the /nokia-conf/configure/system/security/aaa/remote-servers/radius/server YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32  `path:"index" module:"nokia-conf"`
	Secret             *string  `path:"secret" module:"nokia-conf"`
	TlsClientProfile   *string  `path:"tls-client-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Radius_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus represents the /nokia-conf/configure/system/security/aaa/remote-servers/tacplus YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus struct {
	Accounting                *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting        `path:"accounting" module:"nokia-conf" yangPresence:"true"`
	AdminControl              *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl      `path:"admin-control" module:"nokia-conf"`
	AdminState                E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Authorization             *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization     `path:"authorization" module:"nokia-conf" yangPresence:"true"`
	InteractiveAuthentication *bool                                                                            `path:"interactive-authentication" module:"nokia-conf"`
	PrivLvlMap                *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap        `path:"priv-lvl-map" module:"nokia-conf"`
	RoutePreference           E_NokiaTypesSecurity_AaaRoutePreference                                          `path:"route-preference" module:"nokia-conf"`
	Server                    map[uint32]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server `path:"server" module:"nokia-conf"`
	ServerTimeout             *uint32                                                                          `path:"server-timeout" module:"nokia-conf"`
	UseDefaultTemplate        *bool                                                                            `path:"use-default-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) NewServer(Index uint32) (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server{
		Index: &Index,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) RenameServer(oldK, newK uint32) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Index = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetOrCreateServer(Index uint32) *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server {

	key := Index

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetServer(Index uint32) *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) DeleteServer(Index uint32) {
	key := Index

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server struct to the
// list Server of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) AppendServer(v *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetOrCreateAccounting() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting{}
	return t.Accounting
}

// GetOrCreateAdminControl retrieves the value of the AdminControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetOrCreateAdminControl() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl {
	if t.AdminControl != nil {
		return t.AdminControl
	}
	t.AdminControl = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl{}
	return t.AdminControl
}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetOrCreateAuthorization() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization{}
	return t.Authorization
}

// GetOrCreatePrivLvlMap retrieves the value of the PrivLvlMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetOrCreatePrivLvlMap() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap {
	if t.PrivLvlMap != nil {
		return t.PrivLvlMap
	}
	t.PrivLvlMap = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap{}
	return t.PrivLvlMap
}

// GetAccounting returns the value of the Accounting struct pointer
// from NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetAccounting() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAdminControl returns the value of the AdminControl struct pointer
// from NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus. If the receiver or the field AdminControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetAdminControl() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl {
	if t != nil && t.AdminControl != nil {
		return t.AdminControl
	}
	return nil
}

// GetAuthorization returns the value of the Authorization struct pointer
// from NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetAuthorization() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// GetPrivLvlMap returns the value of the PrivLvlMap struct pointer
// from NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus. If the receiver or the field PrivLvlMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetPrivLvlMap() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap {
	if t != nil && t.PrivLvlMap != nil {
		return t.PrivLvlMap
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInteractiveAuthentication retrieves the value of the leaf InteractiveAuthentication from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InteractiveAuthentication is set, it can
// safely use t.GetInteractiveAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InteractiveAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetInteractiveAuthentication() bool {
	if t == nil || t.InteractiveAuthentication == nil {
		return false
	}
	return *t.InteractiveAuthentication
}

// GetRoutePreference retrieves the value of the leaf RoutePreference from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutePreference is set, it can
// safely use t.GetRoutePreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutePreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetRoutePreference() E_NokiaTypesSecurity_AaaRoutePreference {
	if t == nil || t.RoutePreference == 0 {
		return NokiaTypesSecurity_AaaRoutePreference_both
	}
	return t.RoutePreference
}

// GetServerTimeout retrieves the value of the leaf ServerTimeout from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerTimeout is set, it can
// safely use t.GetServerTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetServerTimeout() uint32 {
	if t == nil || t.ServerTimeout == nil {
		return 3
	}
	return *t.ServerTimeout
}

// GetUseDefaultTemplate retrieves the value of the leaf UseDefaultTemplate from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDefaultTemplate is set, it can
// safely use t.GetUseDefaultTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDefaultTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) GetUseDefaultTemplate() bool {
	if t == nil || t.UseDefaultTemplate == nil {
		return true
	}
	return *t.UseDefaultTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.InteractiveAuthentication == nil {
		var v bool = false
		t.InteractiveAuthentication = &v
	}
	if t.RoutePreference == 0 {
		t.RoutePreference = NokiaTypesSecurity_AaaRoutePreference_both
	}
	if t.ServerTimeout == nil {
		var v uint32 = 3
		t.ServerTimeout = &v
	}
	if t.UseDefaultTemplate == nil {
		var v bool = true
		t.UseDefaultTemplate = &v
	}
	t.Accounting.PopulateDefaults()
	t.AdminControl.PopulateDefaults()
	t.Authorization.PopulateDefaults()
	t.PrivLvlMap.PopulateDefaults()
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting represents the /nokia-conf/configure/system/security/aaa/remote-servers/tacplus/accounting YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting struct {
	RecordType E_NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting_RecordType `path:"record-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting) IsYANGGoStruct() {}

// GetRecordType retrieves the value of the leaf RecordType from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecordType is set, it can
// safely use t.GetRecordType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecordType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting) GetRecordType() E_NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting_RecordType {
	if t == nil || t.RecordType == 0 {
		return NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting_RecordType_stop_only
	}
	return t.RecordType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RecordType == 0 {
		t.RecordType = NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting_RecordType_stop_only
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Accounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl represents the /nokia-conf/configure/system/security/aaa/remote-servers/tacplus/admin-control YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl struct {
	TacplusMapToPrivLvl *int32 `path:"tacplus-map-to-priv-lvl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) IsYANGGoStruct() {}

// GetTacplusMapToPrivLvl retrieves the value of the leaf TacplusMapToPrivLvl from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TacplusMapToPrivLvl is set, it can
// safely use t.GetTacplusMapToPrivLvl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TacplusMapToPrivLvl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) GetTacplusMapToPrivLvl() int32 {
	if t == nil || t.TacplusMapToPrivLvl == nil {
		return 0
	}
	return *t.TacplusMapToPrivLvl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization represents the /nokia-conf/configure/system/security/aaa/remote-servers/tacplus/authorization YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization struct {
	RequestFormat *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat `path:"request-format" module:"nokia-conf"`
	UsePrivLvl    *bool                                                                                      `path:"use-priv-lvl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization) IsYANGGoStruct() {
}

// GetOrCreateRequestFormat retrieves the value of the RequestFormat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization) GetOrCreateRequestFormat() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat {
	if t.RequestFormat != nil {
		return t.RequestFormat
	}
	t.RequestFormat = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat{}
	return t.RequestFormat
}

// GetRequestFormat returns the value of the RequestFormat struct pointer
// from NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization. If the receiver or the field RequestFormat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization) GetRequestFormat() *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat {
	if t != nil && t.RequestFormat != nil {
		return t.RequestFormat
	}
	return nil
}

// GetUsePrivLvl retrieves the value of the leaf UsePrivLvl from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsePrivLvl is set, it can
// safely use t.GetUsePrivLvl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsePrivLvl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization) GetUsePrivLvl() bool {
	if t == nil || t.UsePrivLvl == nil {
		return false
	}
	return *t.UsePrivLvl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UsePrivLvl == nil {
		var v bool = false
		t.UsePrivLvl = &v
	}
	t.RequestFormat.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat represents the /nokia-conf/configure/system/security/aaa/remote-servers/tacplus/authorization/request-format YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat struct {
	AccessOperationCmd []E_NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat_AccessOperationCmd `path:"access-operation-cmd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) IsYANGGoStruct() {
}

// GetAccessOperationCmd retrieves the value of the leaf AccessOperationCmd from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessOperationCmd is set, it can
// safely use t.GetAccessOperationCmd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessOperationCmd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) GetAccessOperationCmd() []E_NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat_AccessOperationCmd {
	if t == nil || t.AccessOperationCmd == nil {
		return nil
	}
	return t.AccessOperationCmd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap represents the /nokia-conf/configure/system/security/aaa/remote-servers/tacplus/priv-lvl-map YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap struct {
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	PrivLvl            map[uint32]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl `path:"priv-lvl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) IsYANGGoStruct() {}

// NewPrivLvl creates a new entry in the PrivLvl list of the
// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) NewPrivLvl(Level uint32) (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrivLvl == nil {
		t.PrivLvl = make(map[uint32]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl)
	}

	key := Level

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrivLvl[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrivLvl", key)
	}

	t.PrivLvl[key] = &NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl{
		Level: &Level,
	}

	return t.PrivLvl[key], nil
}

// RenamePrivLvl renames an entry in the list PrivLvl within
// the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) RenamePrivLvl(oldK, newK uint32) error {
	if _, ok := t.PrivLvl[newK]; ok {
		return fmt.Errorf("key %v already exists in PrivLvl", newK)
	}

	e, ok := t.PrivLvl[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrivLvl", oldK)
	}
	e.Level = &newK

	t.PrivLvl[newK] = e
	delete(t.PrivLvl, oldK)
	return nil
}

// GetOrCreatePrivLvl retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) GetOrCreatePrivLvl(Level uint32) *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl {

	key := Level

	if v, ok := t.PrivLvl[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrivLvl(Level)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrivLvl got unexpected error: %v", err))
	}
	return v
}

// GetPrivLvl retrieves the value with the specified key from
// the PrivLvl map field of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) GetPrivLvl(Level uint32) *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl {

	if t == nil {
		return nil
	}

	key := Level

	if lm, ok := t.PrivLvl[key]; ok {
		return lm
	}
	return nil
}

// DeletePrivLvl deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) DeletePrivLvl(Level uint32) {
	key := Level

	delete(t.PrivLvl, key)
}

// AppendPrivLvl appends the supplied NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl struct to the
// list PrivLvl of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) AppendPrivLvl(v *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) error {
	if v.Level == nil {
		return fmt.Errorf("invalid nil key received for Level")
	}

	key := *v.Level

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrivLvl == nil {
		t.PrivLvl = make(map[uint32]*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl)
	}

	if _, ok := t.PrivLvl[key]; ok {
		return fmt.Errorf("duplicate key for list PrivLvl %v", key)
	}

	t.PrivLvl[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PrivLvl {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl represents the /nokia-conf/configure/system/security/aaa/remote-servers/tacplus/priv-lvl-map/priv-lvl YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              *uint32  `path:"level" module:"nokia-conf"`
	UserProfileName    *string  `path:"user-profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetUserProfileName retrieves the value of the leaf UserProfileName from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserProfileName is set, it can
// safely use t.GetUserProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) GetUserProfileName() string {
	if t == nil || t.UserProfileName == nil {
		return ""
	}
	return *t.UserProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Level == nil {
		return nil, fmt.Errorf("nil value for key Level")
	}

	return map[string]interface{}{
		"level": *t.Level,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server represents the /nokia-conf/configure/system/security/aaa/remote-servers/tacplus/server YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32  `path:"index" module:"nokia-conf"`
	Port               *int32   `path:"port" module:"nokia-conf"`
	Secret             *string  `path:"secret" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 49
		t.Port = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_Tacplus_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer represents the /nokia-conf/configure/system/security/aaa/remote-servers/vprn-server YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Inband             *string  `path:"inband" module:"nokia-conf"`
	Outband            *string  `path:"outband" module:"nokia-conf"`
	Vprn               *string  `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInband retrieves the value of the leaf Inband from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inband is set, it can
// safely use t.GetInband() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inband == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer) GetInband() string {
	if t == nil || t.Inband == nil {
		return ""
	}
	return *t.Inband
}

// GetOutband retrieves the value of the leaf Outband from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Outband is set, it can
// safely use t.GetOutband() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Outband == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer) GetOutband() string {
	if t == nil || t.Outband == nil {
		return ""
	}
	return *t.Outband
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer.
func (*NokiaConf_Configure_System_Security_Aaa_RemoteServers_VprnServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_UserTemplate represents the /nokia-conf/configure/system/security/aaa/user-template YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_UserTemplate struct {
	Access             *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access            `path:"access" module:"nokia-conf"`
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Console            *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console           `path:"console" module:"nokia-conf"`
	HomeDirectory      *string                                                                 `path:"home-directory" module:"nokia-conf"`
	Profile            *string                                                                 `path:"profile" module:"nokia-conf"`
	RestrictedToHome   *bool                                                                   `path:"restricted-to-home" module:"nokia-conf"`
	UserTemplateName   E_NokiaConf_Configure_System_Security_Aaa_UserTemplate_UserTemplateName `path:"user-template-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_UserTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_UserTemplate) IsYANGGoStruct() {}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) GetOrCreateAccess() *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access{}
	return t.Access
}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) GetOrCreateConsole() *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console{}
	return t.Console
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_System_Security_Aaa_UserTemplate. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) GetAccess() *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetConsole returns the value of the Console struct pointer
// from NokiaConf_Configure_System_Security_Aaa_UserTemplate. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) GetConsole() *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Aaa_UserTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Aaa_UserTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHomeDirectory retrieves the value of the leaf HomeDirectory from the NokiaConf_Configure_System_Security_Aaa_UserTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HomeDirectory is set, it can
// safely use t.GetHomeDirectory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HomeDirectory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) GetHomeDirectory() string {
	if t == nil || t.HomeDirectory == nil {
		return ""
	}
	return *t.HomeDirectory
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_System_Security_Aaa_UserTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) GetProfile() string {
	if t == nil || t.Profile == nil {
		return ""
	}
	return *t.Profile
}

// GetRestrictedToHome retrieves the value of the leaf RestrictedToHome from the NokiaConf_Configure_System_Security_Aaa_UserTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestrictedToHome is set, it can
// safely use t.GetRestrictedToHome() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestrictedToHome == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) GetRestrictedToHome() bool {
	if t == nil || t.RestrictedToHome == nil {
		return false
	}
	return *t.RestrictedToHome
}

// GetUserTemplateName retrieves the value of the leaf UserTemplateName from the NokiaConf_Configure_System_Security_Aaa_UserTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserTemplateName is set, it can
// safely use t.GetUserTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) GetUserTemplateName() E_NokiaConf_Configure_System_Security_Aaa_UserTemplate_UserTemplateName {
	if t == nil || t.UserTemplateName == 0 {
		return 0
	}
	return t.UserTemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_UserTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RestrictedToHome == nil {
		var v bool = false
		t.RestrictedToHome = &v
	}
	t.Access.PopulateDefaults()
	t.Console.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Aaa_UserTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"user-template-name": t.UserTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_UserTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_UserTemplate.
func (*NokiaConf_Configure_System_Security_Aaa_UserTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access represents the /nokia-conf/configure/system/security/aaa/user-template/access YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access struct {
	Console *bool `path:"console" module:"nokia-conf"`
	Ftp     *bool `path:"ftp" module:"nokia-conf"`
	Grpc    *bool `path:"grpc" module:"nokia-conf"`
	Li      *bool `path:"li" module:"nokia-conf"`
	Netconf *bool `path:"netconf" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access) IsYANGGoStruct() {}

// GetConsole retrieves the value of the leaf Console from the NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Console is set, it can
// safely use t.GetConsole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Console == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access) GetConsole() bool {
	if t == nil || t.Console == nil {
		return true
	}
	return *t.Console
}

// GetFtp retrieves the value of the leaf Ftp from the NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ftp is set, it can
// safely use t.GetFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ftp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access) GetFtp() bool {
	if t == nil || t.Ftp == nil {
		return false
	}
	return *t.Ftp
}

// GetGrpc retrieves the value of the leaf Grpc from the NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Grpc is set, it can
// safely use t.GetGrpc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Grpc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access) GetGrpc() bool {
	if t == nil || t.Grpc == nil {
		return false
	}
	return *t.Grpc
}

// GetLi retrieves the value of the leaf Li from the NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Li is set, it can
// safely use t.GetLi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Li == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access) GetLi() bool {
	if t == nil || t.Li == nil {
		return false
	}
	return *t.Li
}

// GetNetconf retrieves the value of the leaf Netconf from the NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Netconf is set, it can
// safely use t.GetNetconf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Netconf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access) GetNetconf() bool {
	if t == nil || t.Netconf == nil {
		return false
	}
	return *t.Netconf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Console == nil {
		var v bool = true
		t.Console = &v
	}
	if t.Ftp == nil {
		var v bool = false
		t.Ftp = &v
	}
	if t.Grpc == nil {
		var v bool = false
		t.Grpc = &v
	}
	if t.Li == nil {
		var v bool = false
		t.Li = &v
	}
	if t.Netconf == nil {
		var v bool = false
		t.Netconf = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access.
func (*NokiaConf_Configure_System_Security_Aaa_UserTemplate_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console represents the /nokia-conf/configure/system/security/aaa/user-template/console YANG schema element.
type NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console struct {
	LoginExec *string `path:"login-exec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console) IsYANGGoStruct() {}

// GetLoginExec retrieves the value of the leaf LoginExec from the NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoginExec is set, it can
// safely use t.GetLoginExec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoginExec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console) GetLoginExec() string {
	if t == nil || t.LoginExec == nil {
		return ""
	}
	return *t.LoginExec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console.
func (*NokiaConf_Configure_System_Security_Aaa_UserTemplate_Console) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CliScript represents the /nokia-conf/configure/system/security/cli-script YANG schema element.
type NokiaConf_Configure_System_Security_CliScript struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Authorization      *NokiaConf_Configure_System_Security_CliScript_Authorization `path:"authorization" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CliScript implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CliScript) IsYANGGoStruct() {}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CliScript) GetOrCreateAuthorization() *NokiaConf_Configure_System_Security_CliScript_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &NokiaConf_Configure_System_Security_CliScript_Authorization{}
	return t.Authorization
}

// GetAuthorization returns the value of the Authorization struct pointer
// from NokiaConf_Configure_System_Security_CliScript. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CliScript) GetAuthorization() *NokiaConf_Configure_System_Security_CliScript_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_CliScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CliScript) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_CliScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CliScript) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CliScript
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CliScript) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Authorization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CliScript) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CliScript"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CliScript) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CliScript) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CliScript.
func (*NokiaConf_Configure_System_Security_CliScript) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CliScript_Authorization represents the /nokia-conf/configure/system/security/cli-script/authorization YANG schema element.
type NokiaConf_Configure_System_Security_CliScript_Authorization struct {
	Cron         *NokiaConf_Configure_System_Security_CliScript_Authorization_Cron         `path:"cron" module:"nokia-conf"`
	EventHandler *NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler `path:"event-handler" module:"nokia-conf"`
	Vsd          *NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd          `path:"vsd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CliScript_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CliScript_Authorization) IsYANGGoStruct() {}

// GetOrCreateCron retrieves the value of the Cron field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization) GetOrCreateCron() *NokiaConf_Configure_System_Security_CliScript_Authorization_Cron {
	if t.Cron != nil {
		return t.Cron
	}
	t.Cron = &NokiaConf_Configure_System_Security_CliScript_Authorization_Cron{}
	return t.Cron
}

// GetOrCreateEventHandler retrieves the value of the EventHandler field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization) GetOrCreateEventHandler() *NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler {
	if t.EventHandler != nil {
		return t.EventHandler
	}
	t.EventHandler = &NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler{}
	return t.EventHandler
}

// GetOrCreateVsd retrieves the value of the Vsd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization) GetOrCreateVsd() *NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd {
	if t.Vsd != nil {
		return t.Vsd
	}
	t.Vsd = &NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd{}
	return t.Vsd
}

// GetCron returns the value of the Cron struct pointer
// from NokiaConf_Configure_System_Security_CliScript_Authorization. If the receiver or the field Cron is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization) GetCron() *NokiaConf_Configure_System_Security_CliScript_Authorization_Cron {
	if t != nil && t.Cron != nil {
		return t.Cron
	}
	return nil
}

// GetEventHandler returns the value of the EventHandler struct pointer
// from NokiaConf_Configure_System_Security_CliScript_Authorization. If the receiver or the field EventHandler is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization) GetEventHandler() *NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler {
	if t != nil && t.EventHandler != nil {
		return t.EventHandler
	}
	return nil
}

// GetVsd returns the value of the Vsd struct pointer
// from NokiaConf_Configure_System_Security_CliScript_Authorization. If the receiver or the field Vsd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization) GetVsd() *NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd {
	if t != nil && t.Vsd != nil {
		return t.Vsd
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CliScript_Authorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cron.PopulateDefaults()
	t.EventHandler.PopulateDefaults()
	t.Vsd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CliScript_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CliScript_Authorization.
func (*NokiaConf_Configure_System_Security_CliScript_Authorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CliScript_Authorization_Cron represents the /nokia-conf/configure/system/security/cli-script/authorization/cron YANG schema element.
type NokiaConf_Configure_System_Security_CliScript_Authorization_Cron struct {
	CliUser *string `path:"cli-user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CliScript_Authorization_Cron implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CliScript_Authorization_Cron) IsYANGGoStruct() {}

// GetCliUser retrieves the value of the leaf CliUser from the NokiaConf_Configure_System_Security_CliScript_Authorization_Cron
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliUser is set, it can
// safely use t.GetCliUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliUser == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_Cron) GetCliUser() string {
	if t == nil || t.CliUser == nil {
		return ""
	}
	return *t.CliUser
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CliScript_Authorization_Cron
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_Cron) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_Cron) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CliScript_Authorization_Cron"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_Cron) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_Cron) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CliScript_Authorization_Cron.
func (*NokiaConf_Configure_System_Security_CliScript_Authorization_Cron) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler represents the /nokia-conf/configure/system/security/cli-script/authorization/event-handler YANG schema element.
type NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler struct {
	CliUser *string `path:"cli-user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler) IsYANGGoStruct() {}

// GetCliUser retrieves the value of the leaf CliUser from the NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliUser is set, it can
// safely use t.GetCliUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliUser == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler) GetCliUser() string {
	if t == nil || t.CliUser == nil {
		return ""
	}
	return *t.CliUser
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler.
func (*NokiaConf_Configure_System_Security_CliScript_Authorization_EventHandler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd represents the /nokia-conf/configure/system/security/cli-script/authorization/vsd YANG schema element.
type NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd struct {
	CliUser *string `path:"cli-user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd) IsYANGGoStruct() {}

// GetCliUser retrieves the value of the leaf CliUser from the NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliUser is set, it can
// safely use t.GetCliUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliUser == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd) GetCliUser() string {
	if t == nil || t.CliUser == nil {
		return ""
	}
	return *t.CliUser
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd.
func (*NokiaConf_Configure_System_Security_CliScript_Authorization_Vsd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter represents the /nokia-conf/configure/system/security/cpm-filter YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter struct {
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      E_NokiaConf_Configure_System_Security_CpmFilter_DefaultAction `path:"default-action" module:"nokia-conf"`
	IpFilter           *NokiaConf_Configure_System_Security_CpmFilter_IpFilter       `path:"ip-filter" module:"nokia-conf"`
	Ipv6Filter         *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter     `path:"ipv6-filter" module:"nokia-conf"`
	MacFilter          *NokiaConf_Configure_System_Security_CpmFilter_MacFilter      `path:"mac-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter) IsYANGGoStruct() {}

// GetOrCreateIpFilter retrieves the value of the IpFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter) GetOrCreateIpFilter() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter {
	if t.IpFilter != nil {
		return t.IpFilter
	}
	t.IpFilter = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter{}
	return t.IpFilter
}

// GetOrCreateIpv6Filter retrieves the value of the Ipv6Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter) GetOrCreateIpv6Filter() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter {
	if t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	t.Ipv6Filter = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter{}
	return t.Ipv6Filter
}

// GetOrCreateMacFilter retrieves the value of the MacFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter) GetOrCreateMacFilter() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter {
	if t.MacFilter != nil {
		return t.MacFilter
	}
	t.MacFilter = &NokiaConf_Configure_System_Security_CpmFilter_MacFilter{}
	return t.MacFilter
}

// GetIpFilter returns the value of the IpFilter struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter. If the receiver or the field IpFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter) GetIpFilter() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter {
	if t != nil && t.IpFilter != nil {
		return t.IpFilter
	}
	return nil
}

// GetIpv6Filter returns the value of the Ipv6Filter struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter. If the receiver or the field Ipv6Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter) GetIpv6Filter() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter {
	if t != nil && t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	return nil
}

// GetMacFilter returns the value of the MacFilter struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter. If the receiver or the field MacFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter) GetMacFilter() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter {
	if t != nil && t.MacFilter != nil {
		return t.MacFilter
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_CpmFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_CpmFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_System_Security_CpmFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter) GetDefaultAction() E_NokiaConf_Configure_System_Security_CpmFilter_DefaultAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaConf_Configure_System_Security_CpmFilter_DefaultAction_accept
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaConf_Configure_System_Security_CpmFilter_DefaultAction_accept
	}
	t.IpFilter.PopulateDefaults()
	t.Ipv6Filter.PopulateDefaults()
	t.MacFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter.
func (*NokiaConf_Configure_System_Security_CpmFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter struct {
	AdminState E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	Entry      map[uint32]*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_System_Security_CpmFilter_IpFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter) NewEntry(EntryId uint32) (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_System_Security_CpmFilter_IpFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpmFilter_IpFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_System_Security_CpmFilter_IpFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter) GetEntry(EntryId uint32) *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpmFilter_IpFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry struct to the
// list Entry of NokiaConf_Configure_System_Security_CpmFilter_IpFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter) AppendEntry(v *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry struct {
	Action             *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                              `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                              `path:"entry-id" module:"nokia-conf"`
	Log                *uint32                                                              `path:"log" module:"nokia-conf"`
	Match              *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) GetAction() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) GetMatch() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) GetLog() uint32 {
	if t == nil || t.Log == nil {
		return 0
	}
	return *t.Log
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/action YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action struct {
	Accept  YANGEmpty `path:"accept" module:"nokia-conf"`
	Default YANGEmpty `path:"default" module:"nokia-conf"`
	Drop    YANGEmpty `path:"drop" module:"nokia-conf"`
	Queue   *uint32   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action) IsYANGGoStruct() {}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action) GetAccept() YANGEmpty {
	if t == nil || t.Accept == false {
		return false
	}
	return t.Accept
}

// GetDefault retrieves the value of the leaf Default from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Default is set, it can
// safely use t.GetDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Default == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action) GetDefault() YANGEmpty {
	if t == nil || t.Default == false {
		return false
	}
	return t.Default
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action) GetQueue() uint32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/match YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match struct {
	Dscp           E_NokiaTypesQos_DscpName                                                          `path:"dscp" module:"nokia-conf"`
	DstIp          *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort        *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment       E_NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	Icmp           *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp          `path:"icmp" module:"nokia-conf"`
	IpOption       *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption      `path:"ip-option" module:"nokia-conf" yangPresence:"true"`
	MultipleOption *bool                                                                             `path:"multiple-option" module:"nokia-conf"`
	OptionPresent  *bool                                                                             `path:"option-present" module:"nokia-conf"`
	Port           *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port          `path:"port" module:"nokia-conf"`
	Protocol       NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	RouterInstance *string                                                                           `path:"router-instance" module:"nokia-conf"`
	SrcIp          *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort        *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
	TcpFlags       *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags      `path:"tcp-flags" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateIpOption retrieves the value of the IpOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateIpOption() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption {
	if t.IpOption != nil {
		return t.IpOption
	}
	t.IpOption = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption{}
	return t.IpOption
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreatePort() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port{}
	return t.Port
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateTcpFlags retrieves the value of the TcpFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateTcpFlags() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags {
	if t.TcpFlags != nil {
		return t.TcpFlags
	}
	t.TcpFlags = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags{}
	return t.TcpFlags
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetDstIp() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetDstPort() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetIcmp() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetIpOption returns the value of the IpOption struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field IpOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetIpOption() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption {
	if t != nil && t.IpOption != nil {
		return t.IpOption
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetPort() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetSrcIp() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetSrcPort() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetTcpFlags returns the value of the TcpFlags struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field TcpFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetTcpFlags() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags {
	if t != nil && t.TcpFlags != nil {
		return t.TcpFlags
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetFragment() E_NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetMultipleOption retrieves the value of the leaf MultipleOption from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultipleOption is set, it can
// safely use t.GetMultipleOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultipleOption == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetMultipleOption() bool {
	if t == nil || t.MultipleOption == nil {
		return false
	}
	return *t.MultipleOption
}

// GetOptionPresent retrieves the value of the leaf OptionPresent from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionPresent is set, it can
// safely use t.GetOptionPresent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionPresent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetOptionPresent() bool {
	if t == nil || t.OptionPresent == nil {
		return false
	}
	return *t.OptionPresent
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetProtocol() NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.IpOption.PopulateDefaults()
	t.Port.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.TcpFlags.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort struct {
	Eq       *uint16                                                                           `path:"eq" module:"nokia-conf"`
	Mask     *uint16                                                                           `path:"mask" module:"nokia-conf"`
	PortList *string                                                                           `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/match/icmp YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/match/ip-option YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/match/port YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port struct {
	Eq       *uint16                                                                        `path:"eq" module:"nokia-conf"`
	Mask     *uint16                                                                        `path:"mask" module:"nokia-conf"`
	PortList *string                                                                        `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port) GetOrCreateRange() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port) GetRange() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/match/port/range YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort struct {
	Eq       *uint16                                                                           `path:"eq" module:"nokia-conf"`
	Mask     *uint16                                                                           `path:"mask" module:"nokia-conf"`
	PortList *string                                                                           `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags represents the /nokia-conf/configure/system/security/cpm-filter/ip-filter/entry/match/tcp-flags YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags struct {
	Ack *bool `path:"ack" module:"nokia-conf"`
	Syn *bool `path:"syn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) IsYANGGoStruct() {
}

// GetAck retrieves the value of the leaf Ack from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ack is set, it can
// safely use t.GetAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) GetAck() bool {
	if t == nil || t.Ack == nil {
		return false
	}
	return *t.Ack
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) GetSyn() bool {
	if t == nil || t.Syn == nil {
		return false
	}
	return *t.Syn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags.
func (*NokiaConf_Configure_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter struct {
	AdminState E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	Entry      map[uint32]*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) NewEntry(EntryId uint32) (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) GetEntry(EntryId uint32) *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry struct to the
// list Entry of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) AppendEntry(v *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry struct {
	Action             *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                                `path:"entry-id" module:"nokia-conf"`
	Log                *uint32                                                                `path:"log" module:"nokia-conf"`
	Match              *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) GetOrCreateAction() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) GetOrCreateMatch() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) GetAction() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) GetMatch() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) GetLog() uint32 {
	if t == nil || t.Log == nil {
		return 0
	}
	return *t.Log
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/action YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action struct {
	Accept  YANGEmpty `path:"accept" module:"nokia-conf"`
	Default YANGEmpty `path:"default" module:"nokia-conf"`
	Drop    YANGEmpty `path:"drop" module:"nokia-conf"`
	Queue   *uint32   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action) IsYANGGoStruct() {}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action) GetAccept() YANGEmpty {
	if t == nil || t.Accept == false {
		return false
	}
	return t.Accept
}

// GetDefault retrieves the value of the leaf Default from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Default is set, it can
// safely use t.GetDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Default == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action) GetDefault() YANGEmpty {
	if t == nil || t.Default == false {
		return false
	}
	return t.Default
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action) GetQueue() uint32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/match YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match struct {
	Dscp            E_NokiaTypesQos_DscpName                                                              `path:"dscp" module:"nokia-conf"`
	DstIp           *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort         *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	ExtensionHeader *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader `path:"extension-header" module:"nokia-conf"`
	FlowLabel       *int32                                                                                `path:"flow-label" module:"nokia-conf"`
	Fragment        E_NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Fragment       `path:"fragment" module:"nokia-conf"`
	Icmp            *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp            `path:"icmp" module:"nokia-conf"`
	NextHeader      NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	Port            *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port            `path:"port" module:"nokia-conf"`
	RouterInstance  *string                                                                               `path:"router-instance" module:"nokia-conf"`
	SrcIp           *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort         *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
	TcpFlags        *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags        `path:"tcp-flags" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateExtensionHeader retrieves the value of the ExtensionHeader field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateExtensionHeader() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader {
	if t.ExtensionHeader != nil {
		return t.ExtensionHeader
	}
	t.ExtensionHeader = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader{}
	return t.ExtensionHeader
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreatePort() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port{}
	return t.Port
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateTcpFlags retrieves the value of the TcpFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateTcpFlags() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags {
	if t.TcpFlags != nil {
		return t.TcpFlags
	}
	t.TcpFlags = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags{}
	return t.TcpFlags
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetDstIp() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetDstPort() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetExtensionHeader returns the value of the ExtensionHeader struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field ExtensionHeader is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetExtensionHeader() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader {
	if t != nil && t.ExtensionHeader != nil {
		return t.ExtensionHeader
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetIcmp() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetPort() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetSrcIp() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetSrcPort() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetTcpFlags returns the value of the TcpFlags struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field TcpFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetTcpFlags() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags {
	if t != nil && t.TcpFlags != nil {
		return t.TcpFlags
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFlowLabel retrieves the value of the leaf FlowLabel from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowLabel is set, it can
// safely use t.GetFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetFlowLabel() int32 {
	if t == nil || t.FlowLabel == nil {
		return 0
	}
	return *t.FlowLabel
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetFragment() E_NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetNextHeader() NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.ExtensionHeader.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.Port.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.TcpFlags.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort struct {
	Eq       *uint16                                                                             `path:"eq" module:"nokia-conf"`
	Mask     *uint16                                                                             `path:"mask" module:"nokia-conf"`
	PortList *string                                                                             `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/match/extension-header YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader struct {
	HopByHop *bool `path:"hop-by-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) IsYANGGoStruct() {
}

// GetHopByHop retrieves the value of the leaf HopByHop from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopByHop is set, it can
// safely use t.GetHopByHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopByHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) GetHopByHop() bool {
	if t == nil || t.HopByHop == nil {
		return false
	}
	return *t.HopByHop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/match/icmp YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) IsYANGGoStruct() {}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/match/port YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port struct {
	Eq       *uint16                                                                          `path:"eq" module:"nokia-conf"`
	Mask     *uint16                                                                          `path:"mask" module:"nokia-conf"`
	PortList *string                                                                          `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) GetOrCreateRange() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) GetRange() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/match/port/range YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort struct {
	Eq       *uint16                                                                             `path:"eq" module:"nokia-conf"`
	Mask     *uint16                                                                             `path:"mask" module:"nokia-conf"`
	PortList *string                                                                             `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags represents the /nokia-conf/configure/system/security/cpm-filter/ipv6-filter/entry/match/tcp-flags YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags struct {
	Ack *bool `path:"ack" module:"nokia-conf"`
	Syn *bool `path:"syn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) IsYANGGoStruct() {
}

// GetAck retrieves the value of the leaf Ack from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ack is set, it can
// safely use t.GetAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) GetAck() bool {
	if t == nil || t.Ack == nil {
		return false
	}
	return *t.Ack
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) GetSyn() bool {
	if t == nil || t.Syn == nil {
		return false
	}
	return *t.Syn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags.
func (*NokiaConf_Configure_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_MacFilter represents the /nokia-conf/configure/system/security/cpm-filter/mac-filter YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_MacFilter struct {
	AdminState E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	Entry      map[uint32]*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_MacFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_System_Security_CpmFilter_MacFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter) NewEntry(EntryId uint32) (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_System_Security_CpmFilter_MacFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpmFilter_MacFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_System_Security_CpmFilter_MacFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter) GetEntry(EntryId uint32) *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpmFilter_MacFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry struct to the
// list Entry of NokiaConf_Configure_System_Security_CpmFilter_MacFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter) AppendEntry(v *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_MacFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_MacFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_MacFilter.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry represents the /nokia-conf/configure/system/security/cpm-filter/mac-filter/entry YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry struct {
	Action             *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                               `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                               `path:"entry-id" module:"nokia-conf"`
	Log                *uint32                                                               `path:"log" module:"nokia-conf"`
	Match              *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match  `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) GetAction() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) GetMatch() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) GetLog() uint32 {
	if t == nil || t.Log == nil {
		return 0
	}
	return *t.Log
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action represents the /nokia-conf/configure/system/security/cpm-filter/mac-filter/entry/action YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action struct {
	Accept  YANGEmpty `path:"accept" module:"nokia-conf"`
	Default YANGEmpty `path:"default" module:"nokia-conf"`
	Drop    YANGEmpty `path:"drop" module:"nokia-conf"`
	Queue   *uint32   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action) IsYANGGoStruct() {}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action) GetAccept() YANGEmpty {
	if t == nil || t.Accept == false {
		return false
	}
	return t.Accept
}

// GetDefault retrieves the value of the leaf Default from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Default is set, it can
// safely use t.GetDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Default == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action) GetDefault() YANGEmpty {
	if t == nil || t.Default == false {
		return false
	}
	return t.Default
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action) GetQueue() uint32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match represents the /nokia-conf/configure/system/security/cpm-filter/mac-filter/entry/match YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match struct {
	CfmOpcode *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode  `path:"cfm-opcode" module:"nokia-conf"`
	DstMac    *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac     `path:"dst-mac" module:"nokia-conf" yangPresence:"true"`
	Etype     *string                                                                         `path:"etype" module:"nokia-conf"`
	FrameType E_NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_FrameType `path:"frame-type" module:"nokia-conf"`
	LlcDsap   *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap    `path:"llc-dsap" module:"nokia-conf" yangPresence:"true"`
	LlcSsap   *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap    `path:"llc-ssap" module:"nokia-conf" yangPresence:"true"`
	Service   *string                                                                         `path:"service" module:"nokia-conf"`
	SrcMac    *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac     `path:"src-mac" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateCfmOpcode retrieves the value of the CfmOpcode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetOrCreateCfmOpcode() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode {
	if t.CfmOpcode != nil {
		return t.CfmOpcode
	}
	t.CfmOpcode = &NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode{}
	return t.CfmOpcode
}

// GetOrCreateDstMac retrieves the value of the DstMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetOrCreateDstMac() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac {
	if t.DstMac != nil {
		return t.DstMac
	}
	t.DstMac = &NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac{}
	return t.DstMac
}

// GetOrCreateLlcDsap retrieves the value of the LlcDsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetOrCreateLlcDsap() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap {
	if t.LlcDsap != nil {
		return t.LlcDsap
	}
	t.LlcDsap = &NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap{}
	return t.LlcDsap
}

// GetOrCreateLlcSsap retrieves the value of the LlcSsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetOrCreateLlcSsap() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap {
	if t.LlcSsap != nil {
		return t.LlcSsap
	}
	t.LlcSsap = &NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap{}
	return t.LlcSsap
}

// GetOrCreateSrcMac retrieves the value of the SrcMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetOrCreateSrcMac() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac {
	if t.SrcMac != nil {
		return t.SrcMac
	}
	t.SrcMac = &NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac{}
	return t.SrcMac
}

// GetCfmOpcode returns the value of the CfmOpcode struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match. If the receiver or the field CfmOpcode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetCfmOpcode() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode {
	if t != nil && t.CfmOpcode != nil {
		return t.CfmOpcode
	}
	return nil
}

// GetDstMac returns the value of the DstMac struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match. If the receiver or the field DstMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetDstMac() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac {
	if t != nil && t.DstMac != nil {
		return t.DstMac
	}
	return nil
}

// GetLlcDsap returns the value of the LlcDsap struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match. If the receiver or the field LlcDsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetLlcDsap() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap {
	if t != nil && t.LlcDsap != nil {
		return t.LlcDsap
	}
	return nil
}

// GetLlcSsap returns the value of the LlcSsap struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match. If the receiver or the field LlcSsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetLlcSsap() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap {
	if t != nil && t.LlcSsap != nil {
		return t.LlcSsap
	}
	return nil
}

// GetSrcMac returns the value of the SrcMac struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match. If the receiver or the field SrcMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetSrcMac() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac {
	if t != nil && t.SrcMac != nil {
		return t.SrcMac
	}
	return nil
}

// GetEtype retrieves the value of the leaf Etype from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Etype is set, it can
// safely use t.GetEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Etype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetEtype() string {
	if t == nil || t.Etype == nil {
		return ""
	}
	return *t.Etype
}

// GetFrameType retrieves the value of the leaf FrameType from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameType is set, it can
// safely use t.GetFrameType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetFrameType() E_NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_FrameType {
	if t == nil || t.FrameType == 0 {
		return 0
	}
	return t.FrameType
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) GetService() string {
	if t == nil || t.Service == nil {
		return ""
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CfmOpcode.PopulateDefaults()
	t.DstMac.PopulateDefaults()
	t.LlcDsap.PopulateDefaults()
	t.LlcSsap.PopulateDefaults()
	t.SrcMac.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode represents the /nokia-conf/configure/system/security/cpm-filter/mac-filter/entry/match/cfm-opcode YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode struct {
	Eq    *uint32                                                                              `path:"eq" module:"nokia-conf"`
	Gt    *uint32                                                                              `path:"gt" module:"nokia-conf"`
	Lt    *uint32                                                                              `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) GetOrCreateRange() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) GetRange() *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) GetGt() uint32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) GetLt() uint32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range represents the /nokia-conf/configure/system/security/cpm-filter/mac-filter/entry/match/cfm-opcode/range YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac represents the /nokia-conf/configure/system/security/cpm-filter/mac-filter/entry/match/dst-mac YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap represents the /nokia-conf/configure/system/security/cpm-filter/mac-filter/entry/match/llc-dsap YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap struct {
	Dsap *int32 `path:"dsap" module:"nokia-conf"`
	Mask *int32 `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) IsYANGGoStruct() {
}

// GetDsap retrieves the value of the leaf Dsap from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dsap is set, it can
// safely use t.GetDsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dsap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) GetDsap() int32 {
	if t == nil || t.Dsap == nil {
		return 0
	}
	return *t.Dsap
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap represents the /nokia-conf/configure/system/security/cpm-filter/mac-filter/entry/match/llc-ssap YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Ssap *int32 `path:"ssap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// GetSsap retrieves the value of the leaf Ssap from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ssap is set, it can
// safely use t.GetSsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ssap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) GetSsap() int32 {
	if t == nil || t.Ssap == nil {
		return 0
	}
	return *t.Ssap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac represents the /nokia-conf/configure/system/security/cpm-filter/mac-filter/entry/match/src-mac YANG schema element.
type NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac.
func (*NokiaConf_Configure_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmQueue represents the /nokia-conf/configure/system/security/cpm-queue YANG schema element.
type NokiaConf_Configure_System_Security_CpmQueue struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Queue              map[uint32]*NokiaConf_Configure_System_Security_CpmQueue_Queue `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmQueue) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_System_Security_CpmQueue struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_CpmQueue) NewQueue(QueueId uint32) (*NokiaConf_Configure_System_Security_CpmQueue_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[uint32]*NokiaConf_Configure_System_Security_CpmQueue_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_System_Security_CpmQueue_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_System_Security_CpmQueue struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_CpmQueue) RenameQueue(oldK, newK uint32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpmQueue. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_CpmQueue) GetOrCreateQueue(QueueId uint32) *NokiaConf_Configure_System_Security_CpmQueue_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_System_Security_CpmQueue. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmQueue) GetQueue(QueueId uint32) *NokiaConf_Configure_System_Security_CpmQueue_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpmQueue. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_CpmQueue) DeleteQueue(QueueId uint32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_System_Security_CpmQueue_Queue struct to the
// list Queue of NokiaConf_Configure_System_Security_CpmQueue. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_CpmQueue_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_CpmQueue) AppendQueue(v *NokiaConf_Configure_System_Security_CpmQueue_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[uint32]*NokiaConf_Configure_System_Security_CpmQueue_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_CpmQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmQueue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_CpmQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmQueue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmQueue.
func (*NokiaConf_Configure_System_Security_CpmQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmQueue_Queue represents the /nokia-conf/configure/system/security/cpm-queue/queue YANG schema element.
type NokiaConf_Configure_System_Security_CpmQueue_Queue struct {
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                *int32                                                   `path:"cbs" module:"nokia-conf"`
	Mbs                *int32                                                   `path:"mbs" module:"nokia-conf"`
	QueueId            *uint32                                                  `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmQueue_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmQueue_Queue) IsYANGGoStruct() {}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue) GetOrCreateRate() *NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_System_Security_CpmQueue_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue) GetRate() *NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_CpmQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_CpmQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_System_Security_CpmQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_System_Security_CpmQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_System_Security_CpmQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue) GetQueueId() uint32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmQueue_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_CpmQueue_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmQueue_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmQueue_Queue.
func (*NokiaConf_Configure_System_Security_CpmQueue_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate represents the /nokia-conf/configure/system/security/cpm-queue/queue/rate YANG schema element.
type NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate struct {
	Cir NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate) GetCir() NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesSystem_CirRate_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate) GetPir() NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesSystem_PirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesSystem_CirRate_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesSystem_PirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate.
func (*NokiaConf_Configure_System_Security_CpmQueue_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection represents the /nokia-conf/configure/system/security/cpu-protection YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection struct {
	ApplyGroups        []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	IpSrcMonitoring    *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring       `path:"ip-src-monitoring" module:"nokia-conf"`
	LinkSpecificRate   NokiaConf_Configure_System_Security_CpuProtection_LinkSpecificRate_Union `path:"link-specific-rate" module:"nokia-conf"`
	Policy             map[uint32]*NokiaConf_Configure_System_Security_CpuProtection_Policy     `path:"policy" module:"nokia-conf"`
	PortOverallRate    *NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate       `path:"port-overall-rate" module:"nokia-conf"`
	ProtocolProtection *NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection    `path:"protocol-protection" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// NokiaConf_Configure_System_Security_CpuProtection struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_CpuProtection) NewPolicy(PolicyId uint32) (*NokiaConf_Configure_System_Security_CpuProtection_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[uint32]*NokiaConf_Configure_System_Security_CpuProtection_Policy)
	}

	key := PolicyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &NokiaConf_Configure_System_Security_CpuProtection_Policy{
		PolicyId: &PolicyId,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the NokiaConf_Configure_System_Security_CpuProtection struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_CpuProtection) RenamePolicy(oldK, newK uint32) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.PolicyId = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpuProtection. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_CpuProtection) GetOrCreatePolicy(PolicyId uint32) *NokiaConf_Configure_System_Security_CpuProtection_Policy {

	key := PolicyId

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(PolicyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of NokiaConf_Configure_System_Security_CpuProtection. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_CpuProtection) GetPolicy(PolicyId uint32) *NokiaConf_Configure_System_Security_CpuProtection_Policy {

	if t == nil {
		return nil
	}

	key := PolicyId

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpuProtection. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_CpuProtection) DeletePolicy(PolicyId uint32) {
	key := PolicyId

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied NokiaConf_Configure_System_Security_CpuProtection_Policy struct to the
// list Policy of NokiaConf_Configure_System_Security_CpuProtection. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_CpuProtection_Policy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_CpuProtection) AppendPolicy(v *NokiaConf_Configure_System_Security_CpuProtection_Policy) error {
	if v.PolicyId == nil {
		return fmt.Errorf("invalid nil key received for PolicyId")
	}

	key := *v.PolicyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[uint32]*NokiaConf_Configure_System_Security_CpuProtection_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// GetOrCreateIpSrcMonitoring retrieves the value of the IpSrcMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpuProtection) GetOrCreateIpSrcMonitoring() *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring {
	if t.IpSrcMonitoring != nil {
		return t.IpSrcMonitoring
	}
	t.IpSrcMonitoring = &NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring{}
	return t.IpSrcMonitoring
}

// GetOrCreatePortOverallRate retrieves the value of the PortOverallRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpuProtection) GetOrCreatePortOverallRate() *NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate {
	if t.PortOverallRate != nil {
		return t.PortOverallRate
	}
	t.PortOverallRate = &NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate{}
	return t.PortOverallRate
}

// GetOrCreateProtocolProtection retrieves the value of the ProtocolProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpuProtection) GetOrCreateProtocolProtection() *NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection {
	if t.ProtocolProtection != nil {
		return t.ProtocolProtection
	}
	t.ProtocolProtection = &NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection{}
	return t.ProtocolProtection
}

// GetIpSrcMonitoring returns the value of the IpSrcMonitoring struct pointer
// from NokiaConf_Configure_System_Security_CpuProtection. If the receiver or the field IpSrcMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpuProtection) GetIpSrcMonitoring() *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring {
	if t != nil && t.IpSrcMonitoring != nil {
		return t.IpSrcMonitoring
	}
	return nil
}

// GetPortOverallRate returns the value of the PortOverallRate struct pointer
// from NokiaConf_Configure_System_Security_CpuProtection. If the receiver or the field PortOverallRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpuProtection) GetPortOverallRate() *NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate {
	if t != nil && t.PortOverallRate != nil {
		return t.PortOverallRate
	}
	return nil
}

// GetProtocolProtection returns the value of the ProtocolProtection struct pointer
// from NokiaConf_Configure_System_Security_CpuProtection. If the receiver or the field ProtocolProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpuProtection) GetProtocolProtection() *NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection {
	if t != nil && t.ProtocolProtection != nil {
		return t.ProtocolProtection
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLinkSpecificRate retrieves the value of the leaf LinkSpecificRate from the NokiaConf_Configure_System_Security_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkSpecificRate is set, it can
// safely use t.GetLinkSpecificRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkSpecificRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection) GetLinkSpecificRate() NokiaConf_Configure_System_Security_CpuProtection_LinkSpecificRate_Union {
	if t == nil || t.LinkSpecificRate == nil {
		return nil
	}
	return t.LinkSpecificRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpSrcMonitoring.PopulateDefaults()
	t.PortOverallRate.PopulateDefaults()
	t.ProtocolProtection.PopulateDefaults()
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection.
func (*NokiaConf_Configure_System_Security_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring represents the /nokia-conf/configure/system/security/cpu-protection/ip-src-monitoring YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring struct {
	IncludedProtocols *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols `path:"included-protocols" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring) IsYANGGoStruct() {}

// GetOrCreateIncludedProtocols retrieves the value of the IncludedProtocols field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring) GetOrCreateIncludedProtocols() *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols {
	if t.IncludedProtocols != nil {
		return t.IncludedProtocols
	}
	t.IncludedProtocols = &NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols{}
	return t.IncludedProtocols
}

// GetIncludedProtocols returns the value of the IncludedProtocols struct pointer
// from NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring. If the receiver or the field IncludedProtocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring) GetIncludedProtocols() *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols {
	if t != nil && t.IncludedProtocols != nil {
		return t.IncludedProtocols
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IncludedProtocols.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring.
func (*NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols represents the /nokia-conf/configure/system/security/cpu-protection/ip-src-monitoring/included-protocols YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols struct {
	Dhcp *bool `path:"dhcp" module:"nokia-conf"`
	Gtp  *bool `path:"gtp" module:"nokia-conf"`
	Icmp *bool `path:"icmp" module:"nokia-conf"`
	Igmp *bool `path:"igmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) IsYANGGoStruct() {
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return true
	}
	return *t.Dhcp
}

// GetGtp retrieves the value of the leaf Gtp from the NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gtp is set, it can
// safely use t.GetGtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) GetGtp() bool {
	if t == nil || t.Gtp == nil {
		return false
	}
	return *t.Gtp
}

// GetIcmp retrieves the value of the leaf Icmp from the NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Icmp is set, it can
// safely use t.GetIcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Icmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) GetIcmp() bool {
	if t == nil || t.Icmp == nil {
		return false
	}
	return *t.Icmp
}

// GetIgmp retrieves the value of the leaf Igmp from the NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Igmp is set, it can
// safely use t.GetIgmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Igmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) GetIgmp() bool {
	if t == nil || t.Igmp == nil {
		return false
	}
	return *t.Igmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dhcp == nil {
		var v bool = true
		t.Dhcp = &v
	}
	if t.Gtp == nil {
		var v bool = false
		t.Gtp = &v
	}
	if t.Icmp == nil {
		var v bool = false
		t.Icmp = &v
	}
	if t.Igmp == nil {
		var v bool = false
		t.Igmp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols.
func (*NokiaConf_Configure_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection_Policy represents the /nokia-conf/configure/system/security/cpu-protection/policy YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection_Policy struct {
	Alarm               *bool                                                                         `path:"alarm" module:"nokia-conf"`
	ApplyGroups         []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description         *string                                                                       `path:"description" module:"nokia-conf"`
	EthCfm              *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm              `path:"eth-cfm" module:"nokia-conf"`
	OutProfileRate      *NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate      `path:"out-profile-rate" module:"nokia-conf"`
	OverallRate         NokiaConf_Configure_System_Security_CpuProtection_Policy_OverallRate_Union    `path:"overall-rate" module:"nokia-conf"`
	PerSourceParameters *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters `path:"per-source-parameters" module:"nokia-conf"`
	PerSourceRate       NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceRate_Union  `path:"per-source-rate" module:"nokia-conf"`
	PolicyId            *uint32                                                                       `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy) IsYANGGoStruct() {}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetOrCreateEthCfm() *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm{}
	return t.EthCfm
}

// GetOrCreateOutProfileRate retrieves the value of the OutProfileRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetOrCreateOutProfileRate() *NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate {
	if t.OutProfileRate != nil {
		return t.OutProfileRate
	}
	t.OutProfileRate = &NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate{}
	return t.OutProfileRate
}

// GetOrCreatePerSourceParameters retrieves the value of the PerSourceParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetOrCreatePerSourceParameters() *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters {
	if t.PerSourceParameters != nil {
		return t.PerSourceParameters
	}
	t.PerSourceParameters = &NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters{}
	return t.PerSourceParameters
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_System_Security_CpuProtection_Policy. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetEthCfm() *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetOutProfileRate returns the value of the OutProfileRate struct pointer
// from NokiaConf_Configure_System_Security_CpuProtection_Policy. If the receiver or the field OutProfileRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetOutProfileRate() *NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate {
	if t != nil && t.OutProfileRate != nil {
		return t.OutProfileRate
	}
	return nil
}

// GetPerSourceParameters returns the value of the PerSourceParameters struct pointer
// from NokiaConf_Configure_System_Security_CpuProtection_Policy. If the receiver or the field PerSourceParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetPerSourceParameters() *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters {
	if t != nil && t.PerSourceParameters != nil {
		return t.PerSourceParameters
	}
	return nil
}

// GetAlarm retrieves the value of the leaf Alarm from the NokiaConf_Configure_System_Security_CpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alarm is set, it can
// safely use t.GetAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetAlarm() bool {
	if t == nil || t.Alarm == nil {
		return true
	}
	return *t.Alarm
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_CpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_CpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_CpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetOverallRate retrieves the value of the leaf OverallRate from the NokiaConf_Configure_System_Security_CpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverallRate is set, it can
// safely use t.GetOverallRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverallRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetOverallRate() NokiaConf_Configure_System_Security_CpuProtection_Policy_OverallRate_Union {
	if t == nil || t.OverallRate == nil {
		return nil
	}
	return t.OverallRate
}

// GetPerSourceRate retrieves the value of the leaf PerSourceRate from the NokiaConf_Configure_System_Security_CpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PerSourceRate is set, it can
// safely use t.GetPerSourceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PerSourceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetPerSourceRate() NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceRate_Union {
	if t == nil || t.PerSourceRate == nil {
		return NokiaTypesSecurity_CpmPolicyPacketRateLimit_Enum_max
	}
	return t.PerSourceRate
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_System_Security_CpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Alarm == nil {
		var v bool = true
		t.Alarm = &v
	}
	if t.PerSourceRate == nil {
		t.PerSourceRate = NokiaTypesSecurity_CpmPolicyPacketRateLimit_Enum_max
	}
	t.EthCfm.PopulateDefaults()
	t.OutProfileRate.PopulateDefaults()
	t.PerSourceParameters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_CpuProtection_Policy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyId == nil {
		return nil, fmt.Errorf("nil value for key PolicyId")
	}

	return map[string]interface{}{
		"policy-id": *t.PolicyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection_Policy.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm represents the /nokia-conf/configure/system/security/cpu-protection/policy/eth-cfm YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm struct {
	Entry map[uint32]*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm) NewEntry(Id uint32) (*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry{
		Id: &Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm) GetOrCreateEntry(Id uint32) *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm) GetEntry(Id uint32) *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm) DeleteEntry(Id uint32) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry struct to the
// list Entry of NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm) AppendEntry(v *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry represents the /nokia-conf/configure/system/security/cpu-protection/policy/eth-cfm/entry YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry struct {
	ApplyGroups        []string                                                                                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Id                 *uint32                                                                                                                                                            `path:"id" module:"nokia-conf"`
	Level              map[NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key]*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level   `path:"level" module:"nokia-conf"`
	Opcode             map[NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key]*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode `path:"opcode" module:"nokia-conf"`
	Pir                NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Pir_Union                                                                                    `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) IsYANGGoStruct() {}

// NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key represents the key for list Level of element /nokia-conf/configure/system/security/cpu-protection/policy/eth-cfm/entry.
type NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key struct {
	Start uint32 `path:"start"`
	End   uint32 `path:"end"`
}

// NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key represents the key for list Opcode of element /nokia-conf/configure/system/security/cpu-protection/policy/eth-cfm/entry.
type NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key struct {
	Start uint32 `path:"start"`
	End   uint32 `path:"end"`
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) NewLevel(Start uint32, End uint32) (*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key]*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level)
	}

	key := NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level{
		Start: &Start,
		End:   &End,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) RenameLevel(oldK, newK NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) GetOrCreateLevel(Start uint32, End uint32) *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level {

	key := NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) GetLevel(Start uint32, End uint32) *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) DeleteLevel(Start uint32, End uint32) {
	key := NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level struct to the
// list Level of NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) AppendLevel(v *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key]*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewOpcode creates a new entry in the Opcode list of the
// NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) NewOpcode(Start uint32, End uint32) (*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Opcode == nil {
		t.Opcode = make(map[NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key]*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode)
	}

	key := NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Opcode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Opcode", key)
	}

	t.Opcode[key] = &NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode{
		Start: &Start,
		End:   &End,
	}

	return t.Opcode[key], nil
}

// RenameOpcode renames an entry in the list Opcode within
// the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) RenameOpcode(oldK, newK NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key) error {
	if _, ok := t.Opcode[newK]; ok {
		return fmt.Errorf("key %v already exists in Opcode", newK)
	}

	e, ok := t.Opcode[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Opcode", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.Opcode[newK] = e
	delete(t.Opcode, oldK)
	return nil
}

// GetOrCreateOpcode retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) GetOrCreateOpcode(Start uint32, End uint32) *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode {

	key := NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Opcode[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOpcode(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOpcode got unexpected error: %v", err))
	}
	return v
}

// GetOpcode retrieves the value with the specified key from
// the Opcode map field of NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) GetOpcode(Start uint32, End uint32) *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Opcode[key]; ok {
		return lm
	}
	return nil
}

// DeleteOpcode deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) DeleteOpcode(Start uint32, End uint32) {
	key := NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Opcode, key)
}

// AppendOpcode appends the supplied NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode struct to the
// list Opcode of NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) AppendOpcode(v *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Opcode == nil {
		t.Opcode = make(map[NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key]*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode)
	}

	if _, ok := t.Opcode[key]; ok {
		return fmt.Errorf("duplicate key for list Opcode %v", key)
	}

	t.Opcode[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) GetPir() NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Pir_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == nil {
		t.Pir = NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Pir_Enum_max
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.Opcode {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level represents the /nokia-conf/configure/system/security/cpu-protection/policy/eth-cfm/entry/level YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode represents the /nokia-conf/configure/system/security/cpu-protection/policy/eth-cfm/entry/opcode YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate represents the /nokia-conf/configure/system/security/cpu-protection/policy/out-profile-rate YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate struct {
	LogEvents *bool                                                                             `path:"log-events" module:"nokia-conf"`
	Pir       NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate) IsYANGGoStruct() {}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate) GetLogEvents() bool {
	if t == nil || t.LogEvents == nil {
		return false
	}
	return *t.LogEvents
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate) GetPir() NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogEvents == nil {
		var v bool = false
		t.LogEvents = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_OutProfileRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters represents the /nokia-conf/configure/system/security/cpu-protection/policy/per-source-parameters YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters struct {
	IpSrcMonitoring *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring `path:"ip-src-monitoring" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters) IsYANGGoStruct() {
}

// GetOrCreateIpSrcMonitoring retrieves the value of the IpSrcMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters) GetOrCreateIpSrcMonitoring() *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring {
	if t.IpSrcMonitoring != nil {
		return t.IpSrcMonitoring
	}
	t.IpSrcMonitoring = &NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring{}
	return t.IpSrcMonitoring
}

// GetIpSrcMonitoring returns the value of the IpSrcMonitoring struct pointer
// from NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters. If the receiver or the field IpSrcMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters) GetIpSrcMonitoring() *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring {
	if t != nil && t.IpSrcMonitoring != nil {
		return t.IpSrcMonitoring
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpSrcMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring represents the /nokia-conf/configure/system/security/cpu-protection/policy/per-source-parameters/ip-src-monitoring YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring struct {
	LimitDhcpCiAddrZero *bool `path:"limit-dhcp-ci-addr-zero" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) IsYANGGoStruct() {
}

// GetLimitDhcpCiAddrZero retrieves the value of the leaf LimitDhcpCiAddrZero from the NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitDhcpCiAddrZero is set, it can
// safely use t.GetLimitDhcpCiAddrZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitDhcpCiAddrZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) GetLimitDhcpCiAddrZero() bool {
	if t == nil || t.LimitDhcpCiAddrZero == nil {
		return false
	}
	return *t.LimitDhcpCiAddrZero
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitDhcpCiAddrZero == nil {
		var v bool = false
		t.LimitDhcpCiAddrZero = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring.
func (*NokiaConf_Configure_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate represents the /nokia-conf/configure/system/security/cpu-protection/port-overall-rate YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate struct {
	ActionLowPriority *bool                                                                       `path:"action-low-priority" module:"nokia-conf"`
	Pir               NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate) IsYANGGoStruct() {}

// GetActionLowPriority retrieves the value of the leaf ActionLowPriority from the NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActionLowPriority is set, it can
// safely use t.GetActionLowPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActionLowPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate) GetActionLowPriority() bool {
	if t == nil || t.ActionLowPriority == nil {
		return false
	}
	return *t.ActionLowPriority
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate) GetPir() NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActionLowPriority == nil {
		var v bool = false
		t.ActionLowPriority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate.
func (*NokiaConf_Configure_System_Security_CpuProtection_PortOverallRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection represents the /nokia-conf/configure/system/security/cpu-protection/protocol-protection YANG schema element.
type NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection struct {
	AllowShamLinks   *bool `path:"allow-sham-links" module:"nokia-conf"`
	BlockPimTunneled *bool `path:"block-pim-tunneled" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection) IsYANGGoStruct() {}

// GetAllowShamLinks retrieves the value of the leaf AllowShamLinks from the NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowShamLinks is set, it can
// safely use t.GetAllowShamLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowShamLinks == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection) GetAllowShamLinks() bool {
	if t == nil || t.AllowShamLinks == nil {
		return false
	}
	return *t.AllowShamLinks
}

// GetBlockPimTunneled retrieves the value of the leaf BlockPimTunneled from the NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockPimTunneled is set, it can
// safely use t.GetBlockPimTunneled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockPimTunneled == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection) GetBlockPimTunneled() bool {
	if t == nil || t.BlockPimTunneled == nil {
		return false
	}
	return *t.BlockPimTunneled
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowShamLinks == nil {
		var v bool = false
		t.AllowShamLinks = &v
	}
	if t.BlockPimTunneled == nil {
		var v bool = false
		t.BlockPimTunneled = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection.
func (*NokiaConf_Configure_System_Security_CpuProtection_ProtocolProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection represents the /nokia-conf/configure/system/security/dist-cpu-protection YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection struct {
	ApplyGroups        []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             map[string]*NokiaConf_Configure_System_Security_DistCpuProtection_Policy `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// NokiaConf_Configure_System_Security_DistCpuProtection struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection) NewPolicy(PolicyName string) (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NokiaConf_Configure_System_Security_DistCpuProtection_Policy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy{
		PolicyName: &PolicyName,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the NokiaConf_Configure_System_Security_DistCpuProtection struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.PolicyName = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_DistCpuProtection. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection) GetOrCreatePolicy(PolicyName string) *NokiaConf_Configure_System_Security_DistCpuProtection_Policy {

	key := PolicyName

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of NokiaConf_Configure_System_Security_DistCpuProtection. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection) GetPolicy(PolicyName string) *NokiaConf_Configure_System_Security_DistCpuProtection_Policy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_DistCpuProtection. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection) DeletePolicy(PolicyName string) {
	key := PolicyName

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied NokiaConf_Configure_System_Security_DistCpuProtection_Policy struct to the
// list Policy of NokiaConf_Configure_System_Security_DistCpuProtection. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_DistCpuProtection_Policy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection) AppendPolicy(v *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NokiaConf_Configure_System_Security_DistCpuProtection_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_DistCpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_DistCpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection.
func (*NokiaConf_Configure_System_Security_DistCpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy struct {
	ApplyGroups            []string                                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Description            *string                                                                                                         `path:"description" module:"nokia-conf"`
	LocalMonitoringPolicer map[string]*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer                 `path:"local-monitoring-policer" module:"nokia-conf"`
	PolicyName             *string                                                                                                         `path:"policy-name" module:"nokia-conf"`
	Protocol               map[E_NokiaTypesSystem_DistCpuProtocolId]*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol `path:"protocol" module:"nokia-conf"`
	StaticPolicer          map[string]*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer                          `path:"static-policer" module:"nokia-conf"`
	Type                   E_NokiaTypesSystem_DcpuPolicyType                                                                               `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy) IsYANGGoStruct() {}

// NewLocalMonitoringPolicer creates a new entry in the LocalMonitoringPolicer list of the
// NokiaConf_Configure_System_Security_DistCpuProtection_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) NewLocalMonitoringPolicer(PolicerName string) (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalMonitoringPolicer == nil {
		t.LocalMonitoringPolicer = make(map[string]*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LocalMonitoringPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LocalMonitoringPolicer", key)
	}

	t.LocalMonitoringPolicer[key] = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer{
		PolicerName: &PolicerName,
	}

	return t.LocalMonitoringPolicer[key], nil
}

// RenameLocalMonitoringPolicer renames an entry in the list LocalMonitoringPolicer within
// the NokiaConf_Configure_System_Security_DistCpuProtection_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) RenameLocalMonitoringPolicer(oldK, newK string) error {
	if _, ok := t.LocalMonitoringPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in LocalMonitoringPolicer", newK)
	}

	e, ok := t.LocalMonitoringPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LocalMonitoringPolicer", oldK)
	}
	e.PolicerName = &newK

	t.LocalMonitoringPolicer[newK] = e
	delete(t.LocalMonitoringPolicer, oldK)
	return nil
}

// GetOrCreateLocalMonitoringPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_DistCpuProtection_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) GetOrCreateLocalMonitoringPolicer(PolicerName string) *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer {

	key := PolicerName

	if v, ok := t.LocalMonitoringPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocalMonitoringPolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocalMonitoringPolicer got unexpected error: %v", err))
	}
	return v
}

// GetLocalMonitoringPolicer retrieves the value with the specified key from
// the LocalMonitoringPolicer map field of NokiaConf_Configure_System_Security_DistCpuProtection_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) GetLocalMonitoringPolicer(PolicerName string) *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.LocalMonitoringPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocalMonitoringPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_DistCpuProtection_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) DeleteLocalMonitoringPolicer(PolicerName string) {
	key := PolicerName

	delete(t.LocalMonitoringPolicer, key)
}

// AppendLocalMonitoringPolicer appends the supplied NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer struct to the
// list LocalMonitoringPolicer of NokiaConf_Configure_System_Security_DistCpuProtection_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) AppendLocalMonitoringPolicer(v *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalMonitoringPolicer == nil {
		t.LocalMonitoringPolicer = make(map[string]*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer)
	}

	if _, ok := t.LocalMonitoringPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list LocalMonitoringPolicer %v", key)
	}

	t.LocalMonitoringPolicer[key] = v
	return nil
}

// NewProtocol creates a new entry in the Protocol list of the
// NokiaConf_Configure_System_Security_DistCpuProtection_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) NewProtocol(ProtocolName E_NokiaTypesSystem_DistCpuProtocolId) (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[E_NokiaTypesSystem_DistCpuProtocolId]*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol)
	}

	key := ProtocolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Protocol[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Protocol", key)
	}

	t.Protocol[key] = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol{
		ProtocolName: ProtocolName,
	}

	return t.Protocol[key], nil
}

// RenameProtocol renames an entry in the list Protocol within
// the NokiaConf_Configure_System_Security_DistCpuProtection_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) RenameProtocol(oldK, newK E_NokiaTypesSystem_DistCpuProtocolId) error {
	if _, ok := t.Protocol[newK]; ok {
		return fmt.Errorf("key %v already exists in Protocol", newK)
	}

	e, ok := t.Protocol[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Protocol", oldK)
	}
	e.ProtocolName = newK

	t.Protocol[newK] = e
	delete(t.Protocol, oldK)
	return nil
}

// GetOrCreateProtocol retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_DistCpuProtection_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) GetOrCreateProtocol(ProtocolName E_NokiaTypesSystem_DistCpuProtocolId) *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol {

	key := ProtocolName

	if v, ok := t.Protocol[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProtocol(ProtocolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProtocol got unexpected error: %v", err))
	}
	return v
}

// GetProtocol retrieves the value with the specified key from
// the Protocol map field of NokiaConf_Configure_System_Security_DistCpuProtection_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) GetProtocol(ProtocolName E_NokiaTypesSystem_DistCpuProtocolId) *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol {

	if t == nil {
		return nil
	}

	key := ProtocolName

	if lm, ok := t.Protocol[key]; ok {
		return lm
	}
	return nil
}

// DeleteProtocol deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_DistCpuProtection_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) DeleteProtocol(ProtocolName E_NokiaTypesSystem_DistCpuProtocolId) {
	key := ProtocolName

	delete(t.Protocol, key)
}

// AppendProtocol appends the supplied NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol struct to the
// list Protocol of NokiaConf_Configure_System_Security_DistCpuProtection_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) AppendProtocol(v *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) error {
	key := v.ProtocolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[E_NokiaTypesSystem_DistCpuProtocolId]*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol)
	}

	if _, ok := t.Protocol[key]; ok {
		return fmt.Errorf("duplicate key for list Protocol %v", key)
	}

	t.Protocol[key] = v
	return nil
}

// NewStaticPolicer creates a new entry in the StaticPolicer list of the
// NokiaConf_Configure_System_Security_DistCpuProtection_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) NewStaticPolicer(PolicerName string) (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticPolicer == nil {
		t.StaticPolicer = make(map[string]*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticPolicer", key)
	}

	t.StaticPolicer[key] = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer{
		PolicerName: &PolicerName,
	}

	return t.StaticPolicer[key], nil
}

// RenameStaticPolicer renames an entry in the list StaticPolicer within
// the NokiaConf_Configure_System_Security_DistCpuProtection_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) RenameStaticPolicer(oldK, newK string) error {
	if _, ok := t.StaticPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticPolicer", newK)
	}

	e, ok := t.StaticPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticPolicer", oldK)
	}
	e.PolicerName = &newK

	t.StaticPolicer[newK] = e
	delete(t.StaticPolicer, oldK)
	return nil
}

// GetOrCreateStaticPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_DistCpuProtection_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) GetOrCreateStaticPolicer(PolicerName string) *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer {

	key := PolicerName

	if v, ok := t.StaticPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticPolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticPolicer got unexpected error: %v", err))
	}
	return v
}

// GetStaticPolicer retrieves the value with the specified key from
// the StaticPolicer map field of NokiaConf_Configure_System_Security_DistCpuProtection_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) GetStaticPolicer(PolicerName string) *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.StaticPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_DistCpuProtection_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) DeleteStaticPolicer(PolicerName string) {
	key := PolicerName

	delete(t.StaticPolicer, key)
}

// AppendStaticPolicer appends the supplied NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer struct to the
// list StaticPolicer of NokiaConf_Configure_System_Security_DistCpuProtection_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) AppendStaticPolicer(v *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticPolicer == nil {
		t.StaticPolicer = make(map[string]*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer)
	}

	if _, ok := t.StaticPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list StaticPolicer %v", key)
	}

	t.StaticPolicer[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) GetType() E_NokiaTypesSystem_DcpuPolicyType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.LocalMonitoringPolicer {
		e.PopulateDefaults()
	}
	for _, e := range t.Protocol {
		e.PopulateDefaults()
	}
	for _, e := range t.StaticPolicer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_DistCpuProtection_Policy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/local-monitoring-policer YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer struct {
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                         `path:"description" module:"nokia-conf"`
	ExceedAction       E_NokiaTypesSystem_DcpExceedAction                                                              `path:"exceed-action" module:"nokia-conf"`
	LogEvents          E_NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_LogEvents `path:"log-events" module:"nokia-conf"`
	PolicerName        *string                                                                                         `path:"policer-name" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate       `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) IsYANGGoStruct() {
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetOrCreateRate() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetRate() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExceedAction retrieves the value of the leaf ExceedAction from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedAction is set, it can
// safely use t.GetExceedAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetExceedAction() E_NokiaTypesSystem_DcpExceedAction {
	if t == nil || t.ExceedAction == 0 {
		return NokiaTypesSystem_DcpExceedAction_none
	}
	return t.ExceedAction
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetLogEvents() E_NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_LogEvents {
	if t == nil || t.LogEvents == 0 {
		return NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_LogEvents_true
	}
	return t.LogEvents
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExceedAction == 0 {
		t.ExceedAction = NokiaTypesSystem_DcpExceedAction_none
	}
	if t.LogEvents == 0 {
		t.LogEvents = NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_LogEvents_true
	}
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/local-monitoring-policer/rate YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate struct {
	Kbps    *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps    `path:"kbps" module:"nokia-conf"`
	Packets *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets `path:"packets" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) IsYANGGoStruct() {
}

// GetOrCreateKbps retrieves the value of the Kbps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) GetOrCreateKbps() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps {
	if t.Kbps != nil {
		return t.Kbps
	}
	t.Kbps = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps{}
	return t.Kbps
}

// GetOrCreatePackets retrieves the value of the Packets field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) GetOrCreatePackets() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets {
	if t.Packets != nil {
		return t.Packets
	}
	t.Packets = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets{}
	return t.Packets
}

// GetKbps returns the value of the Kbps struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate. If the receiver or the field Kbps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) GetKbps() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps {
	if t != nil && t.Kbps != nil {
		return t.Kbps
	}
	return nil
}

// GetPackets returns the value of the Packets struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate. If the receiver or the field Packets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) GetPackets() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets {
	if t != nil && t.Packets != nil {
		return t.Packets
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Kbps.PopulateDefaults()
	t.Packets.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/local-monitoring-policer/rate/kbps YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps struct {
	Limit NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps_Limit_Union `path:"limit" module:"nokia-conf"`
	Mbs   *int32                                                                                                    `path:"mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) IsYANGGoStruct() {
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) GetLimit() NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps_Limit_Union {
	if t == nil || t.Limit == nil {
		return NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps_Limit_Enum_max
	}
	return t.Limit
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limit == nil {
		t.Limit = NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps_Limit_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/local-monitoring-policer/rate/packets YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets struct {
	InitialDelay *uint32                                                                                                      `path:"initial-delay" module:"nokia-conf"`
	Limit        NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets_Limit_Union `path:"limit" module:"nokia-conf"`
	Within       *uint32                                                                                                      `path:"within" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) IsYANGGoStruct() {
}

// GetInitialDelay retrieves the value of the leaf InitialDelay from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialDelay is set, it can
// safely use t.GetInitialDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) GetInitialDelay() uint32 {
	if t == nil || t.InitialDelay == nil {
		return 0
	}
	return *t.InitialDelay
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) GetLimit() NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets_Limit_Union {
	if t == nil || t.Limit == nil {
		return NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets_Limit_Enum_max
	}
	return t.Limit
}

// GetWithin retrieves the value of the leaf Within from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Within is set, it can
// safely use t.GetWithin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Within == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) GetWithin() uint32 {
	if t == nil || t.Within == nil {
		return 1
	}
	return *t.Within
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialDelay == nil {
		var v uint32 = 0
		t.InitialDelay = &v
	}
	if t.Limit == nil {
		t.Limit = NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets_Limit_Enum_max
	}
	if t.Within == nil {
		var v uint32 = 1
		t.Within = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/protocol YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol struct {
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	DynamicParameters  *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters `path:"dynamic-parameters" module:"nokia-conf"`
	Enforcement        *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement       `path:"enforcement" module:"nokia-conf"`
	ProtocolName       E_NokiaTypesSystem_DistCpuProtocolId                                                     `path:"protocol-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) IsYANGGoStruct() {}

// GetOrCreateDynamicParameters retrieves the value of the DynamicParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) GetOrCreateDynamicParameters() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters {
	if t.DynamicParameters != nil {
		return t.DynamicParameters
	}
	t.DynamicParameters = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters{}
	return t.DynamicParameters
}

// GetOrCreateEnforcement retrieves the value of the Enforcement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) GetOrCreateEnforcement() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement {
	if t.Enforcement != nil {
		return t.Enforcement
	}
	t.Enforcement = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement{}
	return t.Enforcement
}

// GetDynamicParameters returns the value of the DynamicParameters struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol. If the receiver or the field DynamicParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) GetDynamicParameters() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters {
	if t != nil && t.DynamicParameters != nil {
		return t.DynamicParameters
	}
	return nil
}

// GetEnforcement returns the value of the Enforcement struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol. If the receiver or the field Enforcement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) GetEnforcement() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement {
	if t != nil && t.Enforcement != nil {
		return t.Enforcement
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetProtocolName retrieves the value of the leaf ProtocolName from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolName is set, it can
// safely use t.GetProtocolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) GetProtocolName() E_NokiaTypesSystem_DistCpuProtocolId {
	if t == nil || t.ProtocolName == 0 {
		return 0
	}
	return t.ProtocolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DynamicParameters.PopulateDefaults()
	t.Enforcement.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"protocol-name": t.ProtocolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/protocol/dynamic-parameters YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters struct {
	DetectionTime *uint32                                                                                               `path:"detection-time" module:"nokia-conf"`
	ExceedAction  *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction `path:"exceed-action" module:"nokia-conf"`
	LogEvents     E_NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_LogEvents   `path:"log-events" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate         `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) IsYANGGoStruct() {
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) GetOrCreateExceedAction() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction{}
	return t.ExceedAction
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) GetOrCreateRate() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate{}
	return t.Rate
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) GetExceedAction() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) GetRate() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetDetectionTime retrieves the value of the leaf DetectionTime from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetectionTime is set, it can
// safely use t.GetDetectionTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetectionTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) GetDetectionTime() uint32 {
	if t == nil || t.DetectionTime == nil {
		return 30
	}
	return *t.DetectionTime
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) GetLogEvents() E_NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_LogEvents {
	if t == nil || t.LogEvents == 0 {
		return NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_LogEvents_true
	}
	return t.LogEvents
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DetectionTime == nil {
		var v uint32 = 30
		t.DetectionTime = &v
	}
	if t.LogEvents == 0 {
		t.LogEvents = NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_LogEvents_true
	}
	t.ExceedAction.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/protocol/dynamic-parameters/exceed-action YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction struct {
	Action   E_NokiaTypesSystem_DcpExceedAction                                                                                  `path:"action" module:"nokia-conf"`
	HoldDown NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction_HoldDown_Union `path:"hold-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) GetAction() E_NokiaTypesSystem_DcpExceedAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesSystem_DcpExceedAction_none
	}
	return t.Action
}

// GetHoldDown retrieves the value of the leaf HoldDown from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDown is set, it can
// safely use t.GetHoldDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) GetHoldDown() NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction_HoldDown_Union {
	if t == nil || t.HoldDown == nil {
		return NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction_HoldDown_Enum_none
	}
	return t.HoldDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesSystem_DcpExceedAction_none
	}
	if t.HoldDown == nil {
		t.HoldDown = NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction_HoldDown_Enum_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/protocol/dynamic-parameters/rate YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate struct {
	Kbps    *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps    `path:"kbps" module:"nokia-conf"`
	Packets *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets `path:"packets" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) IsYANGGoStruct() {
}

// GetOrCreateKbps retrieves the value of the Kbps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) GetOrCreateKbps() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps {
	if t.Kbps != nil {
		return t.Kbps
	}
	t.Kbps = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps{}
	return t.Kbps
}

// GetOrCreatePackets retrieves the value of the Packets field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) GetOrCreatePackets() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets {
	if t.Packets != nil {
		return t.Packets
	}
	t.Packets = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets{}
	return t.Packets
}

// GetKbps returns the value of the Kbps struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate. If the receiver or the field Kbps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) GetKbps() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps {
	if t != nil && t.Kbps != nil {
		return t.Kbps
	}
	return nil
}

// GetPackets returns the value of the Packets struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate. If the receiver or the field Packets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) GetPackets() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets {
	if t != nil && t.Packets != nil {
		return t.Packets
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Kbps.PopulateDefaults()
	t.Packets.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/protocol/dynamic-parameters/rate/kbps YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps struct {
	Limit NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps_Limit_Union `path:"limit" module:"nokia-conf"`
	Mbs   *int32                                                                                                        `path:"mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) IsYANGGoStruct() {
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) GetLimit() NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps_Limit_Union {
	if t == nil || t.Limit == nil {
		return NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps_Limit_Enum_max
	}
	return t.Limit
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limit == nil {
		t.Limit = NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps_Limit_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/protocol/dynamic-parameters/rate/packets YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets struct {
	InitialDelay *uint32                                                                                                          `path:"initial-delay" module:"nokia-conf"`
	Limit        NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets_Limit_Union `path:"limit" module:"nokia-conf"`
	Within       *uint32                                                                                                          `path:"within" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) IsYANGGoStruct() {
}

// GetInitialDelay retrieves the value of the leaf InitialDelay from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialDelay is set, it can
// safely use t.GetInitialDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) GetInitialDelay() uint32 {
	if t == nil || t.InitialDelay == nil {
		return 0
	}
	return *t.InitialDelay
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) GetLimit() NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets_Limit_Union {
	if t == nil || t.Limit == nil {
		return NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets_Limit_Enum_max
	}
	return t.Limit
}

// GetWithin retrieves the value of the leaf Within from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Within is set, it can
// safely use t.GetWithin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Within == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) GetWithin() uint32 {
	if t == nil || t.Within == nil {
		return 1
	}
	return *t.Within
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialDelay == nil {
		var v uint32 = 0
		t.InitialDelay = &v
	}
	if t.Limit == nil {
		t.Limit = NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets_Limit_Enum_max
	}
	if t.Within == nil {
		var v uint32 = 1
		t.Within = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/protocol/enforcement YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement struct {
	Dynamic               *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic `path:"dynamic" module:"nokia-conf"`
	DynamicLocalMonBypass YANGEmpty                                                                                  `path:"dynamic-local-mon-bypass" module:"nokia-conf"`
	Static                *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static  `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) IsYANGGoStruct() {
}

// GetOrCreateDynamic retrieves the value of the Dynamic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) GetOrCreateDynamic() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic {
	if t.Dynamic != nil {
		return t.Dynamic
	}
	t.Dynamic = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic{}
	return t.Dynamic
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) GetOrCreateStatic() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static{}
	return t.Static
}

// GetDynamic returns the value of the Dynamic struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement. If the receiver or the field Dynamic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) GetDynamic() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic {
	if t != nil && t.Dynamic != nil {
		return t.Dynamic
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) GetStatic() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetDynamicLocalMonBypass retrieves the value of the leaf DynamicLocalMonBypass from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicLocalMonBypass is set, it can
// safely use t.GetDynamicLocalMonBypass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicLocalMonBypass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) GetDynamicLocalMonBypass() YANGEmpty {
	if t == nil || t.DynamicLocalMonBypass == false {
		return false
	}
	return t.DynamicLocalMonBypass
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dynamic.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/protocol/enforcement/dynamic YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic struct {
	MonPolicerName *string `path:"mon-policer-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) IsYANGGoStruct() {
}

// GetMonPolicerName retrieves the value of the leaf MonPolicerName from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonPolicerName is set, it can
// safely use t.GetMonPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonPolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) GetMonPolicerName() string {
	if t == nil || t.MonPolicerName == nil {
		return ""
	}
	return *t.MonPolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/protocol/enforcement/static YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static struct {
	PolicerName *string `path:"policer-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) IsYANGGoStruct() {
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/static-policer YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer struct {
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                  `path:"description" module:"nokia-conf"`
	DetectionTime      *uint32                                                                                  `path:"detection-time" module:"nokia-conf"`
	ExceedAction       *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction `path:"exceed-action" module:"nokia-conf"`
	LogEvents          E_NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_LogEvents   `path:"log-events" module:"nokia-conf"`
	PolicerName        *string                                                                                  `path:"policer-name" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate         `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) IsYANGGoStruct() {}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) GetOrCreateExceedAction() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction{}
	return t.ExceedAction
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) GetOrCreateRate() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate{}
	return t.Rate
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) GetExceedAction() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) GetRate() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDetectionTime retrieves the value of the leaf DetectionTime from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetectionTime is set, it can
// safely use t.GetDetectionTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetectionTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) GetDetectionTime() uint32 {
	if t == nil || t.DetectionTime == nil {
		return 30
	}
	return *t.DetectionTime
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) GetLogEvents() E_NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_LogEvents {
	if t == nil || t.LogEvents == 0 {
		return NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_LogEvents_true
	}
	return t.LogEvents
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DetectionTime == nil {
		var v uint32 = 30
		t.DetectionTime = &v
	}
	if t.LogEvents == 0 {
		t.LogEvents = NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_LogEvents_true
	}
	t.ExceedAction.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/static-policer/exceed-action YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction struct {
	Action   E_NokiaTypesSystem_DcpExceedAction                                                                     `path:"action" module:"nokia-conf"`
	HoldDown NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction_HoldDown_Union `path:"hold-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) GetAction() E_NokiaTypesSystem_DcpExceedAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesSystem_DcpExceedAction_none
	}
	return t.Action
}

// GetHoldDown retrieves the value of the leaf HoldDown from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDown is set, it can
// safely use t.GetHoldDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) GetHoldDown() NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction_HoldDown_Union {
	if t == nil || t.HoldDown == nil {
		return NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction_HoldDown_Enum_none
	}
	return t.HoldDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesSystem_DcpExceedAction_none
	}
	if t.HoldDown == nil {
		t.HoldDown = NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction_HoldDown_Enum_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/static-policer/rate YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate struct {
	Kbps    *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps    `path:"kbps" module:"nokia-conf"`
	Packets *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets `path:"packets" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) IsYANGGoStruct() {
}

// GetOrCreateKbps retrieves the value of the Kbps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) GetOrCreateKbps() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps {
	if t.Kbps != nil {
		return t.Kbps
	}
	t.Kbps = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps{}
	return t.Kbps
}

// GetOrCreatePackets retrieves the value of the Packets field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) GetOrCreatePackets() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets {
	if t.Packets != nil {
		return t.Packets
	}
	t.Packets = &NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets{}
	return t.Packets
}

// GetKbps returns the value of the Kbps struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate. If the receiver or the field Kbps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) GetKbps() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps {
	if t != nil && t.Kbps != nil {
		return t.Kbps
	}
	return nil
}

// GetPackets returns the value of the Packets struct pointer
// from NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate. If the receiver or the field Packets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) GetPackets() *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets {
	if t != nil && t.Packets != nil {
		return t.Packets
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Kbps.PopulateDefaults()
	t.Packets.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/static-policer/rate/kbps YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps struct {
	Limit NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps_Limit_Union `path:"limit" module:"nokia-conf"`
	Mbs   *int32                                                                                           `path:"mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) IsYANGGoStruct() {
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) GetLimit() NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps_Limit_Union {
	if t == nil || t.Limit == nil {
		return NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps_Limit_Enum_max
	}
	return t.Limit
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limit == nil {
		t.Limit = NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps_Limit_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets represents the /nokia-conf/configure/system/security/dist-cpu-protection/policy/static-policer/rate/packets YANG schema element.
type NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets struct {
	InitialDelay *uint32                                                                                             `path:"initial-delay" module:"nokia-conf"`
	Limit        NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets_Limit_Union `path:"limit" module:"nokia-conf"`
	Within       *uint32                                                                                             `path:"within" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) IsYANGGoStruct() {
}

// GetInitialDelay retrieves the value of the leaf InitialDelay from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialDelay is set, it can
// safely use t.GetInitialDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) GetInitialDelay() uint32 {
	if t == nil || t.InitialDelay == nil {
		return 0
	}
	return *t.InitialDelay
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) GetLimit() NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets_Limit_Union {
	if t == nil || t.Limit == nil {
		return NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets_Limit_Enum_max
	}
	return t.Limit
}

// GetWithin retrieves the value of the leaf Within from the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Within is set, it can
// safely use t.GetWithin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Within == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) GetWithin() uint32 {
	if t == nil || t.Within == nil {
		return 1
	}
	return *t.Within
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialDelay == nil {
		var v uint32 = 0
		t.InitialDelay = &v
	}
	if t.Limit == nil {
		t.Limit = NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets_Limit_Enum_max
	}
	if t.Within == nil {
		var v uint32 = 1
		t.Within = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets.
func (*NokiaConf_Configure_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Dot1X represents the /nokia-conf/configure/system/security/dot1x YANG schema element.
type NokiaConf_Configure_System_Security_Dot1X struct {
	AdminState         E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	RadiusPolicy       map[string]*NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy `path:"radius-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Dot1X implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Dot1X) IsYANGGoStruct() {}

// NewRadiusPolicy creates a new entry in the RadiusPolicy list of the
// NokiaConf_Configure_System_Security_Dot1X struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Dot1X) NewRadiusPolicy(PolicyName string) (*NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusPolicy == nil {
		t.RadiusPolicy = make(map[string]*NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RadiusPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RadiusPolicy", key)
	}

	t.RadiusPolicy[key] = &NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy{
		PolicyName: &PolicyName,
	}

	return t.RadiusPolicy[key], nil
}

// RenameRadiusPolicy renames an entry in the list RadiusPolicy within
// the NokiaConf_Configure_System_Security_Dot1X struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Dot1X) RenameRadiusPolicy(oldK, newK string) error {
	if _, ok := t.RadiusPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RadiusPolicy", newK)
	}

	e, ok := t.RadiusPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RadiusPolicy", oldK)
	}
	e.PolicyName = &newK

	t.RadiusPolicy[newK] = e
	delete(t.RadiusPolicy, oldK)
	return nil
}

// GetOrCreateRadiusPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Dot1X. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Dot1X) GetOrCreateRadiusPolicy(PolicyName string) *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy {

	key := PolicyName

	if v, ok := t.RadiusPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRadiusPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRadiusPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRadiusPolicy retrieves the value with the specified key from
// the RadiusPolicy map field of NokiaConf_Configure_System_Security_Dot1X. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Dot1X) GetRadiusPolicy(PolicyName string) *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.RadiusPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRadiusPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Dot1X. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Dot1X) DeleteRadiusPolicy(PolicyName string) {
	key := PolicyName

	delete(t.RadiusPolicy, key)
}

// AppendRadiusPolicy appends the supplied NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy struct to the
// list RadiusPolicy of NokiaConf_Configure_System_Security_Dot1X. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Dot1X) AppendRadiusPolicy(v *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusPolicy == nil {
		t.RadiusPolicy = make(map[string]*NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy)
	}

	if _, ok := t.RadiusPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RadiusPolicy %v", key)
	}

	t.RadiusPolicy[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Dot1X
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Dot1X) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.RadiusPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Dot1X) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Dot1X"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Dot1X) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Dot1X) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Dot1X.
func (*NokiaConf_Configure_System_Security_Dot1X) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy represents the /nokia-conf/configure/system/security/dot1x/radius-policy YANG schema element.
type NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy struct {
	AdminState         E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	PolicyName         *string                                                                   `path:"policy-name" module:"nokia-conf"`
	Retry              *uint32                                                                   `path:"retry" module:"nokia-conf"`
	Server             map[uint32]*NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server `path:"server" module:"nokia-conf"`
	SourceAddress      *string                                                                   `path:"source-address" module:"nokia-conf"`
	Timeout            *uint32                                                                   `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) NewServer(ServerIndex uint32) (*NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server)
	}

	key := ServerIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server{
		ServerIndex: &ServerIndex,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) RenameServer(oldK, newK uint32) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.ServerIndex = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) GetOrCreateServer(ServerIndex uint32) *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server {

	key := ServerIndex

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(ServerIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) GetServer(ServerIndex uint32) *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server {

	if t == nil {
		return nil
	}

	key := ServerIndex

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) DeleteServer(ServerIndex uint32) {
	key := ServerIndex

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server struct to the
// list Server of NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) AppendServer(v *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) error {
	if v.ServerIndex == nil {
		return fmt.Errorf("invalid nil key received for ServerIndex")
	}

	key := *v.ServerIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetRetry retrieves the value of the leaf Retry from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retry is set, it can
// safely use t.GetRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) GetRetry() uint32 {
	if t == nil || t.Retry == nil {
		return 3
	}
	return *t.Retry
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Retry == nil {
		var v uint32 = 3
		t.Retry = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy.
func (*NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server represents the /nokia-conf/configure/system/security/dot1x/radius-policy/server YANG schema element.
type NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server struct {
	AccountingPort     *int32                                                               `path:"accounting-port" module:"nokia-conf"`
	Address            *string                                                              `path:"address" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationPort *int32                                                               `path:"authentication-port" module:"nokia-conf"`
	Secret             *string                                                              `path:"secret" module:"nokia-conf"`
	ServerIndex        *uint32                                                              `path:"server-index" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) IsYANGGoStruct() {}

// GetAccountingPort retrieves the value of the leaf AccountingPort from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPort is set, it can
// safely use t.GetAccountingPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) GetAccountingPort() int32 {
	if t == nil || t.AccountingPort == nil {
		return 1813
	}
	return *t.AccountingPort
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationPort retrieves the value of the leaf AuthenticationPort from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPort is set, it can
// safely use t.GetAuthenticationPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) GetAuthenticationPort() int32 {
	if t == nil || t.AuthenticationPort == nil {
		return 1812
	}
	return *t.AuthenticationPort
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetServerIndex retrieves the value of the leaf ServerIndex from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerIndex is set, it can
// safely use t.GetServerIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) GetServerIndex() uint32 {
	if t == nil || t.ServerIndex == nil {
		return 0
	}
	return *t.ServerIndex
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) GetType() E_NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server_Type_authorization
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccountingPort == nil {
		var v int32 = 1813
		t.AccountingPort = &v
	}
	if t.AuthenticationPort == nil {
		var v int32 = 1812
		t.AuthenticationPort = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server_Type_authorization
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServerIndex == nil {
		return nil, fmt.Errorf("nil value for key ServerIndex")
	}

	return map[string]interface{}{
		"server-index": *t.ServerIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server.
func (*NokiaConf_Configure_System_Security_Dot1X_RadiusPolicy_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_HashControl represents the /nokia-conf/configure/system/security/hash-control YANG schema element.
type NokiaConf_Configure_System_Security_HashControl struct {
	ApplyGroups         []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	ManagementInterface *NokiaConf_Configure_System_Security_HashControl_ManagementInterface `path:"management-interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_HashControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_HashControl) IsYANGGoStruct() {}

// GetOrCreateManagementInterface retrieves the value of the ManagementInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_HashControl) GetOrCreateManagementInterface() *NokiaConf_Configure_System_Security_HashControl_ManagementInterface {
	if t.ManagementInterface != nil {
		return t.ManagementInterface
	}
	t.ManagementInterface = &NokiaConf_Configure_System_Security_HashControl_ManagementInterface{}
	return t.ManagementInterface
}

// GetManagementInterface returns the value of the ManagementInterface struct pointer
// from NokiaConf_Configure_System_Security_HashControl. If the receiver or the field ManagementInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_HashControl) GetManagementInterface() *NokiaConf_Configure_System_Security_HashControl_ManagementInterface {
	if t != nil && t.ManagementInterface != nil {
		return t.ManagementInterface
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_HashControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_HashControl) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_HashControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_HashControl) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_HashControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_HashControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ManagementInterface.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_HashControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_HashControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_HashControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_HashControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_HashControl.
func (*NokiaConf_Configure_System_Security_HashControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_HashControl_ManagementInterface represents the /nokia-conf/configure/system/security/hash-control/management-interface YANG schema element.
type NokiaConf_Configure_System_Security_HashControl_ManagementInterface struct {
	ClassicCli *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli `path:"classic-cli" module:"nokia-conf"`
	Grpc       *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc       `path:"grpc" module:"nokia-conf"`
	MdCli      *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli      `path:"md-cli" module:"nokia-conf"`
	Netconf    *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf    `path:"netconf" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_HashControl_ManagementInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_HashControl_ManagementInterface) IsYANGGoStruct() {}

// GetOrCreateClassicCli retrieves the value of the ClassicCli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface) GetOrCreateClassicCli() *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli {
	if t.ClassicCli != nil {
		return t.ClassicCli
	}
	t.ClassicCli = &NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli{}
	return t.ClassicCli
}

// GetOrCreateGrpc retrieves the value of the Grpc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface) GetOrCreateGrpc() *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc {
	if t.Grpc != nil {
		return t.Grpc
	}
	t.Grpc = &NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc{}
	return t.Grpc
}

// GetOrCreateMdCli retrieves the value of the MdCli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface) GetOrCreateMdCli() *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli {
	if t.MdCli != nil {
		return t.MdCli
	}
	t.MdCli = &NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli{}
	return t.MdCli
}

// GetOrCreateNetconf retrieves the value of the Netconf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface) GetOrCreateNetconf() *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf {
	if t.Netconf != nil {
		return t.Netconf
	}
	t.Netconf = &NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf{}
	return t.Netconf
}

// GetClassicCli returns the value of the ClassicCli struct pointer
// from NokiaConf_Configure_System_Security_HashControl_ManagementInterface. If the receiver or the field ClassicCli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface) GetClassicCli() *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli {
	if t != nil && t.ClassicCli != nil {
		return t.ClassicCli
	}
	return nil
}

// GetGrpc returns the value of the Grpc struct pointer
// from NokiaConf_Configure_System_Security_HashControl_ManagementInterface. If the receiver or the field Grpc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface) GetGrpc() *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc {
	if t != nil && t.Grpc != nil {
		return t.Grpc
	}
	return nil
}

// GetMdCli returns the value of the MdCli struct pointer
// from NokiaConf_Configure_System_Security_HashControl_ManagementInterface. If the receiver or the field MdCli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface) GetMdCli() *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli {
	if t != nil && t.MdCli != nil {
		return t.MdCli
	}
	return nil
}

// GetNetconf returns the value of the Netconf struct pointer
// from NokiaConf_Configure_System_Security_HashControl_ManagementInterface. If the receiver or the field Netconf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface) GetNetconf() *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf {
	if t != nil && t.Netconf != nil {
		return t.Netconf
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_HashControl_ManagementInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClassicCli.PopulateDefaults()
	t.Grpc.PopulateDefaults()
	t.MdCli.PopulateDefaults()
	t.Netconf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_HashControl_ManagementInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_HashControl_ManagementInterface.
func (*NokiaConf_Configure_System_Security_HashControl_ManagementInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli represents the /nokia-conf/configure/system/security/hash-control/management-interface/classic-cli YANG schema element.
type NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli struct {
	ReadAlgorithm  E_NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli_ReadAlgorithm  `path:"read-algorithm" module:"nokia-conf"`
	WriteAlgorithm E_NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli_WriteAlgorithm `path:"write-algorithm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli) IsYANGGoStruct() {
}

// GetReadAlgorithm retrieves the value of the leaf ReadAlgorithm from the NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReadAlgorithm is set, it can
// safely use t.GetReadAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReadAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli) GetReadAlgorithm() E_NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli_ReadAlgorithm {
	if t == nil || t.ReadAlgorithm == 0 {
		return NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli_ReadAlgorithm_all_hash
	}
	return t.ReadAlgorithm
}

// GetWriteAlgorithm retrieves the value of the leaf WriteAlgorithm from the NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WriteAlgorithm is set, it can
// safely use t.GetWriteAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WriteAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli) GetWriteAlgorithm() E_NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli_WriteAlgorithm {
	if t == nil || t.WriteAlgorithm == 0 {
		return NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli_WriteAlgorithm_hash2
	}
	return t.WriteAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReadAlgorithm == 0 {
		t.ReadAlgorithm = NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli_ReadAlgorithm_all_hash
	}
	if t.WriteAlgorithm == 0 {
		t.WriteAlgorithm = NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli_WriteAlgorithm_hash2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli.
func (*NokiaConf_Configure_System_Security_HashControl_ManagementInterface_ClassicCli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc represents the /nokia-conf/configure/system/security/hash-control/management-interface/grpc YANG schema element.
type NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc struct {
	HashAlgorithm E_NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc_HashAlgorithm `path:"hash-algorithm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc) IsYANGGoStruct() {}

// GetHashAlgorithm retrieves the value of the leaf HashAlgorithm from the NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashAlgorithm is set, it can
// safely use t.GetHashAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc) GetHashAlgorithm() E_NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc_HashAlgorithm {
	if t == nil || t.HashAlgorithm == 0 {
		return NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc_HashAlgorithm_hash2
	}
	return t.HashAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HashAlgorithm == 0 {
		t.HashAlgorithm = NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc_HashAlgorithm_hash2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc.
func (*NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Grpc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli represents the /nokia-conf/configure/system/security/hash-control/management-interface/md-cli YANG schema element.
type NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli struct {
	HashAlgorithm E_NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli_HashAlgorithm `path:"hash-algorithm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli) IsYANGGoStruct() {}

// GetHashAlgorithm retrieves the value of the leaf HashAlgorithm from the NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashAlgorithm is set, it can
// safely use t.GetHashAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli) GetHashAlgorithm() E_NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli_HashAlgorithm {
	if t == nil || t.HashAlgorithm == 0 {
		return NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli_HashAlgorithm_hash2
	}
	return t.HashAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HashAlgorithm == 0 {
		t.HashAlgorithm = NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli_HashAlgorithm_hash2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli.
func (*NokiaConf_Configure_System_Security_HashControl_ManagementInterface_MdCli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf represents the /nokia-conf/configure/system/security/hash-control/management-interface/netconf YANG schema element.
type NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf struct {
	HashAlgorithm E_NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf_HashAlgorithm `path:"hash-algorithm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf) IsYANGGoStruct() {
}

// GetHashAlgorithm retrieves the value of the leaf HashAlgorithm from the NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashAlgorithm is set, it can
// safely use t.GetHashAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf) GetHashAlgorithm() E_NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf_HashAlgorithm {
	if t == nil || t.HashAlgorithm == 0 {
		return NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf_HashAlgorithm_hash2
	}
	return t.HashAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HashAlgorithm == 0 {
		t.HashAlgorithm = NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf_HashAlgorithm_hash2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf.
func (*NokiaConf_Configure_System_Security_HashControl_ManagementInterface_Netconf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Keychains represents the /nokia-conf/configure/system/security/keychains YANG schema element.
type NokiaConf_Configure_System_Security_Keychains struct {
	Keychain map[string]*NokiaConf_Configure_System_Security_Keychains_Keychain `path:"keychain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Keychains implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Keychains) IsYANGGoStruct() {}

// NewKeychain creates a new entry in the Keychain list of the
// NokiaConf_Configure_System_Security_Keychains struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Keychains) NewKeychain(KeychainName string) (*NokiaConf_Configure_System_Security_Keychains_Keychain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*NokiaConf_Configure_System_Security_Keychains_Keychain)
	}

	key := KeychainName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Keychain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Keychain", key)
	}

	t.Keychain[key] = &NokiaConf_Configure_System_Security_Keychains_Keychain{
		KeychainName: &KeychainName,
	}

	return t.Keychain[key], nil
}

// RenameKeychain renames an entry in the list Keychain within
// the NokiaConf_Configure_System_Security_Keychains struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Keychains) RenameKeychain(oldK, newK string) error {
	if _, ok := t.Keychain[newK]; ok {
		return fmt.Errorf("key %v already exists in Keychain", newK)
	}

	e, ok := t.Keychain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Keychain", oldK)
	}
	e.KeychainName = &newK

	t.Keychain[newK] = e
	delete(t.Keychain, oldK)
	return nil
}

// GetOrCreateKeychain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Keychains. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Keychains) GetOrCreateKeychain(KeychainName string) *NokiaConf_Configure_System_Security_Keychains_Keychain {

	key := KeychainName

	if v, ok := t.Keychain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKeychain(KeychainName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKeychain got unexpected error: %v", err))
	}
	return v
}

// GetKeychain retrieves the value with the specified key from
// the Keychain map field of NokiaConf_Configure_System_Security_Keychains. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Keychains) GetKeychain(KeychainName string) *NokiaConf_Configure_System_Security_Keychains_Keychain {

	if t == nil {
		return nil
	}

	key := KeychainName

	if lm, ok := t.Keychain[key]; ok {
		return lm
	}
	return nil
}

// DeleteKeychain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Keychains. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Keychains) DeleteKeychain(KeychainName string) {
	key := KeychainName

	delete(t.Keychain, key)
}

// AppendKeychain appends the supplied NokiaConf_Configure_System_Security_Keychains_Keychain struct to the
// list Keychain of NokiaConf_Configure_System_Security_Keychains. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Keychains_Keychain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Keychains) AppendKeychain(v *NokiaConf_Configure_System_Security_Keychains_Keychain) error {
	if v.KeychainName == nil {
		return fmt.Errorf("invalid nil key received for KeychainName")
	}

	key := *v.KeychainName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*NokiaConf_Configure_System_Security_Keychains_Keychain)
	}

	if _, ok := t.Keychain[key]; ok {
		return fmt.Errorf("duplicate key for list Keychain %v", key)
	}

	t.Keychain[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Keychains
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Keychains) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Keychain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Keychains"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Keychains) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Keychains.
func (*NokiaConf_Configure_System_Security_Keychains) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Keychains_Keychain represents the /nokia-conf/configure/system/security/keychains/keychain YANG schema element.
type NokiaConf_Configure_System_Security_Keychains_Keychain struct {
	AdminState         E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Bidirectional      *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional   `path:"bidirectional" module:"nokia-conf"`
	Description        *string                                                                 `path:"description" module:"nokia-conf"`
	KeychainName       *string                                                                 `path:"keychain-name" module:"nokia-conf"`
	Receive            *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive         `path:"receive" module:"nokia-conf"`
	Send               *NokiaConf_Configure_System_Security_Keychains_Keychain_Send            `path:"send" module:"nokia-conf"`
	TcpOptionNumber    *NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber `path:"tcp-option-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Keychains_Keychain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain) IsYANGGoStruct() {}

// GetOrCreateBidirectional retrieves the value of the Bidirectional field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetOrCreateBidirectional() *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional {
	if t.Bidirectional != nil {
		return t.Bidirectional
	}
	t.Bidirectional = &NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional{}
	return t.Bidirectional
}

// GetOrCreateReceive retrieves the value of the Receive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetOrCreateReceive() *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive {
	if t.Receive != nil {
		return t.Receive
	}
	t.Receive = &NokiaConf_Configure_System_Security_Keychains_Keychain_Receive{}
	return t.Receive
}

// GetOrCreateSend retrieves the value of the Send field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetOrCreateSend() *NokiaConf_Configure_System_Security_Keychains_Keychain_Send {
	if t.Send != nil {
		return t.Send
	}
	t.Send = &NokiaConf_Configure_System_Security_Keychains_Keychain_Send{}
	return t.Send
}

// GetOrCreateTcpOptionNumber retrieves the value of the TcpOptionNumber field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetOrCreateTcpOptionNumber() *NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber {
	if t.TcpOptionNumber != nil {
		return t.TcpOptionNumber
	}
	t.TcpOptionNumber = &NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber{}
	return t.TcpOptionNumber
}

// GetBidirectional returns the value of the Bidirectional struct pointer
// from NokiaConf_Configure_System_Security_Keychains_Keychain. If the receiver or the field Bidirectional is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetBidirectional() *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional {
	if t != nil && t.Bidirectional != nil {
		return t.Bidirectional
	}
	return nil
}

// GetReceive returns the value of the Receive struct pointer
// from NokiaConf_Configure_System_Security_Keychains_Keychain. If the receiver or the field Receive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetReceive() *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive {
	if t != nil && t.Receive != nil {
		return t.Receive
	}
	return nil
}

// GetSend returns the value of the Send struct pointer
// from NokiaConf_Configure_System_Security_Keychains_Keychain. If the receiver or the field Send is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetSend() *NokiaConf_Configure_System_Security_Keychains_Keychain_Send {
	if t != nil && t.Send != nil {
		return t.Send
	}
	return nil
}

// GetTcpOptionNumber returns the value of the TcpOptionNumber struct pointer
// from NokiaConf_Configure_System_Security_Keychains_Keychain. If the receiver or the field TcpOptionNumber is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetTcpOptionNumber() *NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber {
	if t != nil && t.TcpOptionNumber != nil {
		return t.TcpOptionNumber
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Keychains_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Keychains_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Keychains_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_Keychains_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetKeychainName retrieves the value of the leaf KeychainName from the NokiaConf_Configure_System_Security_Keychains_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeychainName is set, it can
// safely use t.GetKeychainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeychainName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) GetKeychainName() string {
	if t == nil || t.KeychainName == nil {
		return ""
	}
	return *t.KeychainName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Keychains_Keychain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Bidirectional.PopulateDefaults()
	t.Receive.PopulateDefaults()
	t.Send.PopulateDefaults()
	t.TcpOptionNumber.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Keychains_Keychain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeychainName == nil {
		return nil, fmt.Errorf("nil value for key KeychainName")
	}

	return map[string]interface{}{
		"keychain-name": *t.KeychainName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Keychains_Keychain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Keychains_Keychain.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional represents the /nokia-conf/configure/system/security/keychains/keychain/bidirectional YANG schema element.
type NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional struct {
	Entry map[uint32]*NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional) NewEntry(KeychainEntryIndex uint32) (*NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry)
	}

	key := KeychainEntryIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry{
		KeychainEntryIndex: &KeychainEntryIndex,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.KeychainEntryIndex = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional) GetOrCreateEntry(KeychainEntryIndex uint32) *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry {

	key := KeychainEntryIndex

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(KeychainEntryIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional) GetEntry(KeychainEntryIndex uint32) *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry {

	if t == nil {
		return nil
	}

	key := KeychainEntryIndex

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional) DeleteEntry(KeychainEntryIndex uint32) {
	key := KeychainEntryIndex

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry struct to the
// list Entry of NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional) AppendEntry(v *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) error {
	if v.KeychainEntryIndex == nil {
		return fmt.Errorf("invalid nil key received for KeychainEntryIndex")
	}

	key := *v.KeychainEntryIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry represents the /nokia-conf/configure/system/security/keychains/keychain/bidirectional/entry YANG schema element.
type NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                `path:"admin-state" module:"nokia-conf"`
	Algorithm          E_NokiaTypesSecurity_KeychainAlgo                                                          `path:"algorithm" module:"nokia-conf"`
	ApplyGroups        []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                                                                    `path:"authentication-key" module:"nokia-conf"`
	BeginTime          *string                                                                                    `path:"begin-time" module:"nokia-conf"`
	KeychainEntryIndex *uint32                                                                                    `path:"keychain-entry-index" module:"nokia-conf"`
	Option             E_NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry_Option        `path:"option" module:"nokia-conf"`
	Tolerance          NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry_Tolerance_Union `path:"tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAlgorithm retrieves the value of the leaf Algorithm from the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) GetAlgorithm() E_NokiaTypesSecurity_KeychainAlgo {
	if t == nil || t.Algorithm == 0 {
		return 0
	}
	return t.Algorithm
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetBeginTime retrieves the value of the leaf BeginTime from the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginTime is set, it can
// safely use t.GetBeginTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) GetBeginTime() string {
	if t == nil || t.BeginTime == nil {
		return ""
	}
	return *t.BeginTime
}

// GetKeychainEntryIndex retrieves the value of the leaf KeychainEntryIndex from the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeychainEntryIndex is set, it can
// safely use t.GetKeychainEntryIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeychainEntryIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) GetKeychainEntryIndex() uint32 {
	if t == nil || t.KeychainEntryIndex == nil {
		return 0
	}
	return *t.KeychainEntryIndex
}

// GetOption retrieves the value of the leaf Option from the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Option is set, it can
// safely use t.GetOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Option == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) GetOption() E_NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry_Option {
	if t == nil || t.Option == 0 {
		return NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry_Option_none
	}
	return t.Option
}

// GetTolerance retrieves the value of the leaf Tolerance from the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tolerance is set, it can
// safely use t.GetTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) GetTolerance() NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry_Tolerance_Union {
	if t == nil || t.Tolerance == nil {
		return UnionUint32(300)
	}
	return t.Tolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Option == 0 {
		t.Option = NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry_Option_none
	}
	if t.Tolerance == nil {
		t.Tolerance = UnionUint32(300)
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeychainEntryIndex == nil {
		return nil, fmt.Errorf("nil value for key KeychainEntryIndex")
	}

	return map[string]interface{}{
		"keychain-entry-index": *t.KeychainEntryIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_Bidirectional_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Keychains_Keychain_Receive represents the /nokia-conf/configure/system/security/keychains/keychain/receive YANG schema element.
type NokiaConf_Configure_System_Security_Keychains_Keychain_Receive struct {
	Entry map[uint32]*NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Keychains_Keychain_Receive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_Receive) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_System_Security_Keychains_Keychain_Receive struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive) NewEntry(KeychainEntryIndex uint32) (*NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry)
	}

	key := KeychainEntryIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry{
		KeychainEntryIndex: &KeychainEntryIndex,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.KeychainEntryIndex = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Keychains_Keychain_Receive. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive) GetOrCreateEntry(KeychainEntryIndex uint32) *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry {

	key := KeychainEntryIndex

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(KeychainEntryIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_System_Security_Keychains_Keychain_Receive. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive) GetEntry(KeychainEntryIndex uint32) *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry {

	if t == nil {
		return nil
	}

	key := KeychainEntryIndex

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Keychains_Keychain_Receive. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive) DeleteEntry(KeychainEntryIndex uint32) {
	key := KeychainEntryIndex

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry struct to the
// list Entry of NokiaConf_Configure_System_Security_Keychains_Keychain_Receive. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive) AppendEntry(v *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) error {
	if v.KeychainEntryIndex == nil {
		return fmt.Errorf("invalid nil key received for KeychainEntryIndex")
	}

	key := *v.KeychainEntryIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Keychains_Keychain_Receive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Keychains_Keychain_Receive.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_Receive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry represents the /nokia-conf/configure/system/security/keychains/keychain/receive/entry YANG schema element.
type NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry struct {
	AdminState         E_NokiaTypesSros_AdminState                                                          `path:"admin-state" module:"nokia-conf"`
	Algorithm          E_NokiaTypesSecurity_KeychainAlgo                                                    `path:"algorithm" module:"nokia-conf"`
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                                                              `path:"authentication-key" module:"nokia-conf"`
	BeginTime          *string                                                                              `path:"begin-time" module:"nokia-conf"`
	EndTime            *string                                                                              `path:"end-time" module:"nokia-conf"`
	KeychainEntryIndex *uint32                                                                              `path:"keychain-entry-index" module:"nokia-conf"`
	Tolerance          NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry_Tolerance_Union `path:"tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAlgorithm retrieves the value of the leaf Algorithm from the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) GetAlgorithm() E_NokiaTypesSecurity_KeychainAlgo {
	if t == nil || t.Algorithm == 0 {
		return 0
	}
	return t.Algorithm
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetBeginTime retrieves the value of the leaf BeginTime from the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginTime is set, it can
// safely use t.GetBeginTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) GetBeginTime() string {
	if t == nil || t.BeginTime == nil {
		return ""
	}
	return *t.BeginTime
}

// GetEndTime retrieves the value of the leaf EndTime from the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndTime is set, it can
// safely use t.GetEndTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) GetEndTime() string {
	if t == nil || t.EndTime == nil {
		return ""
	}
	return *t.EndTime
}

// GetKeychainEntryIndex retrieves the value of the leaf KeychainEntryIndex from the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeychainEntryIndex is set, it can
// safely use t.GetKeychainEntryIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeychainEntryIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) GetKeychainEntryIndex() uint32 {
	if t == nil || t.KeychainEntryIndex == nil {
		return 0
	}
	return *t.KeychainEntryIndex
}

// GetTolerance retrieves the value of the leaf Tolerance from the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tolerance is set, it can
// safely use t.GetTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) GetTolerance() NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry_Tolerance_Union {
	if t == nil || t.Tolerance == nil {
		return UnionUint32(300)
	}
	return t.Tolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Tolerance == nil {
		t.Tolerance = UnionUint32(300)
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeychainEntryIndex == nil {
		return nil, fmt.Errorf("nil value for key KeychainEntryIndex")
	}

	return map[string]interface{}{
		"keychain-entry-index": *t.KeychainEntryIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_Receive_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Keychains_Keychain_Send represents the /nokia-conf/configure/system/security/keychains/keychain/send YANG schema element.
type NokiaConf_Configure_System_Security_Keychains_Keychain_Send struct {
	Entry map[uint32]*NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Keychains_Keychain_Send implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_Send) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_System_Security_Keychains_Keychain_Send struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send) NewEntry(KeychainEntryIndex uint32) (*NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry)
	}

	key := KeychainEntryIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry{
		KeychainEntryIndex: &KeychainEntryIndex,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_System_Security_Keychains_Keychain_Send struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.KeychainEntryIndex = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Keychains_Keychain_Send. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send) GetOrCreateEntry(KeychainEntryIndex uint32) *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry {

	key := KeychainEntryIndex

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(KeychainEntryIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_System_Security_Keychains_Keychain_Send. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send) GetEntry(KeychainEntryIndex uint32) *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry {

	if t == nil {
		return nil
	}

	key := KeychainEntryIndex

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Keychains_Keychain_Send. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send) DeleteEntry(KeychainEntryIndex uint32) {
	key := KeychainEntryIndex

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry struct to the
// list Entry of NokiaConf_Configure_System_Security_Keychains_Keychain_Send. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send) AppendEntry(v *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) error {
	if v.KeychainEntryIndex == nil {
		return fmt.Errorf("invalid nil key received for KeychainEntryIndex")
	}

	key := *v.KeychainEntryIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Keychains_Keychain_Send
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Keychains_Keychain_Send"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Keychains_Keychain_Send.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_Send) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry represents the /nokia-conf/configure/system/security/keychains/keychain/send/entry YANG schema element.
type NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry struct {
	AdminState         E_NokiaTypesSros_AdminState       `path:"admin-state" module:"nokia-conf"`
	Algorithm          E_NokiaTypesSecurity_KeychainAlgo `path:"algorithm" module:"nokia-conf"`
	ApplyGroups        []string                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                          `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                           `path:"authentication-key" module:"nokia-conf"`
	BeginTime          *string                           `path:"begin-time" module:"nokia-conf"`
	KeychainEntryIndex *uint32                           `path:"keychain-entry-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAlgorithm retrieves the value of the leaf Algorithm from the NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) GetAlgorithm() E_NokiaTypesSecurity_KeychainAlgo {
	if t == nil || t.Algorithm == 0 {
		return 0
	}
	return t.Algorithm
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetBeginTime retrieves the value of the leaf BeginTime from the NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginTime is set, it can
// safely use t.GetBeginTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) GetBeginTime() string {
	if t == nil || t.BeginTime == nil {
		return ""
	}
	return *t.BeginTime
}

// GetKeychainEntryIndex retrieves the value of the leaf KeychainEntryIndex from the NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeychainEntryIndex is set, it can
// safely use t.GetKeychainEntryIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeychainEntryIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) GetKeychainEntryIndex() uint32 {
	if t == nil || t.KeychainEntryIndex == nil {
		return 0
	}
	return *t.KeychainEntryIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeychainEntryIndex == nil {
		return nil, fmt.Errorf("nil value for key KeychainEntryIndex")
	}

	return map[string]interface{}{
		"keychain-entry-index": *t.KeychainEntryIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_Send_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber represents the /nokia-conf/configure/system/security/keychains/keychain/tcp-option-number YANG schema element.
type NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber struct {
	Receive E_NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber_Receive `path:"receive" module:"nokia-conf"`
	Send    E_NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber_Send    `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber) GetReceive() E_NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber_Receive {
	if t == nil || t.Receive == 0 {
		return NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber_Receive_option_254
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber) GetSend() E_NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber_Send {
	if t == nil || t.Send == 0 {
		return NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber_Send_option_254
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == 0 {
		t.Receive = NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber_Receive_option_254
	}
	if t.Send == 0 {
		t.Send = NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber_Send_option_254
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber.
func (*NokiaConf_Configure_System_Security_Keychains_Keychain_TcpOptionNumber) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Management represents the /nokia-conf/configure/system/security/management YANG schema element.
type NokiaConf_Configure_System_Security_Management struct {
	AllowFtp           *bool    `path:"allow-ftp" module:"nokia-conf"`
	AllowGrpc          *bool    `path:"allow-grpc" module:"nokia-conf"`
	AllowNetconf       *bool    `path:"allow-netconf" module:"nokia-conf"`
	AllowSsh           *bool    `path:"allow-ssh" module:"nokia-conf"`
	AllowTelnet        *bool    `path:"allow-telnet" module:"nokia-conf"`
	AllowTelnet6       *bool    `path:"allow-telnet6" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Management implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Management) IsYANGGoStruct() {}

// GetAllowFtp retrieves the value of the leaf AllowFtp from the NokiaConf_Configure_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFtp is set, it can
// safely use t.GetAllowFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Management) GetAllowFtp() bool {
	if t == nil || t.AllowFtp == nil {
		return true
	}
	return *t.AllowFtp
}

// GetAllowGrpc retrieves the value of the leaf AllowGrpc from the NokiaConf_Configure_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowGrpc is set, it can
// safely use t.GetAllowGrpc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowGrpc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Management) GetAllowGrpc() bool {
	if t == nil || t.AllowGrpc == nil {
		return true
	}
	return *t.AllowGrpc
}

// GetAllowNetconf retrieves the value of the leaf AllowNetconf from the NokiaConf_Configure_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowNetconf is set, it can
// safely use t.GetAllowNetconf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowNetconf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Management) GetAllowNetconf() bool {
	if t == nil || t.AllowNetconf == nil {
		return true
	}
	return *t.AllowNetconf
}

// GetAllowSsh retrieves the value of the leaf AllowSsh from the NokiaConf_Configure_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowSsh is set, it can
// safely use t.GetAllowSsh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowSsh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Management) GetAllowSsh() bool {
	if t == nil || t.AllowSsh == nil {
		return true
	}
	return *t.AllowSsh
}

// GetAllowTelnet retrieves the value of the leaf AllowTelnet from the NokiaConf_Configure_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowTelnet is set, it can
// safely use t.GetAllowTelnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowTelnet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Management) GetAllowTelnet() bool {
	if t == nil || t.AllowTelnet == nil {
		return true
	}
	return *t.AllowTelnet
}

// GetAllowTelnet6 retrieves the value of the leaf AllowTelnet6 from the NokiaConf_Configure_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowTelnet6 is set, it can
// safely use t.GetAllowTelnet6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowTelnet6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Management) GetAllowTelnet6() bool {
	if t == nil || t.AllowTelnet6 == nil {
		return true
	}
	return *t.AllowTelnet6
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Management) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Management) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Management
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Management) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFtp == nil {
		var v bool = true
		t.AllowFtp = &v
	}
	if t.AllowGrpc == nil {
		var v bool = true
		t.AllowGrpc = &v
	}
	if t.AllowNetconf == nil {
		var v bool = true
		t.AllowNetconf = &v
	}
	if t.AllowSsh == nil {
		var v bool = true
		t.AllowSsh = &v
	}
	if t.AllowTelnet == nil {
		var v bool = true
		t.AllowTelnet = &v
	}
	if t.AllowTelnet6 == nil {
		var v bool = true
		t.AllowTelnet6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Management) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Management"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Management) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Management) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Management.
func (*NokiaConf_Configure_System_Security_Management) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter represents the /nokia-conf/configure/system/security/management-access-filter YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter struct {
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	IpFilter           *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter   `path:"ip-filter" module:"nokia-conf"`
	Ipv6Filter         *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter `path:"ipv6-filter" module:"nokia-conf"`
	MacFilter          *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter  `path:"mac-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter) IsYANGGoStruct() {}

// GetOrCreateIpFilter retrieves the value of the IpFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter) GetOrCreateIpFilter() *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter {
	if t.IpFilter != nil {
		return t.IpFilter
	}
	t.IpFilter = &NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter{}
	return t.IpFilter
}

// GetOrCreateIpv6Filter retrieves the value of the Ipv6Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter) GetOrCreateIpv6Filter() *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter {
	if t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	t.Ipv6Filter = &NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter{}
	return t.Ipv6Filter
}

// GetOrCreateMacFilter retrieves the value of the MacFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter) GetOrCreateMacFilter() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter {
	if t.MacFilter != nil {
		return t.MacFilter
	}
	t.MacFilter = &NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter{}
	return t.MacFilter
}

// GetIpFilter returns the value of the IpFilter struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter. If the receiver or the field IpFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter) GetIpFilter() *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter {
	if t != nil && t.IpFilter != nil {
		return t.IpFilter
	}
	return nil
}

// GetIpv6Filter returns the value of the Ipv6Filter struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter. If the receiver or the field Ipv6Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter) GetIpv6Filter() *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter {
	if t != nil && t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	return nil
}

// GetMacFilter returns the value of the MacFilter struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter. If the receiver or the field MacFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter) GetMacFilter() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter {
	if t != nil && t.MacFilter != nil {
		return t.MacFilter
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_ManagementAccessFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_ManagementAccessFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpFilter.PopulateDefaults()
	t.Ipv6Filter.PopulateDefaults()
	t.MacFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter represents the /nokia-conf/configure/system/security/management-access-filter/ip-filter YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter struct {
	AdminState         E_NokiaTypesSros_AdminState                                                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      E_NokiaTypesFilter_MafAction                                                          `path:"default-action" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) NewEntry(EntryId uint32) (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) GetEntry(EntryId uint32) *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry struct to the
// list Entry of NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) AppendEntry(v *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) GetDefaultAction() E_NokiaTypesFilter_MafAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesFilter_MafAction_ignore_match
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesFilter_MafAction_ignore_match
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry represents the /nokia-conf/configure/system/security/management-access-filter/ip-filter/entry YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry struct {
	Action             E_NokiaTypesFilter_MafAction                                                     `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                          `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                                          `path:"entry-id" module:"nokia-conf"`
	LogEvents          *bool                                                                            `path:"log-events" module:"nokia-conf"`
	Match              *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) GetMatch() *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) GetAction() E_NokiaTypesFilter_MafAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesFilter_MafAction_ignore_match
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) GetLogEvents() bool {
	if t == nil || t.LogEvents == nil {
		return false
	}
	return *t.LogEvents
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesFilter_MafAction_ignore_match
	}
	if t.LogEvents == nil {
		var v bool = false
		t.LogEvents = &v
	}
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match represents the /nokia-conf/configure/system/security/management-access-filter/ip-filter/entry/match YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match struct {
	DstPort        *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf" yangPresence:"true"`
	MgmtPort       *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort      `path:"mgmt-port" module:"nokia-conf"`
	Protocol       NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	RouterInstance *string                                                                                        `path:"router-instance" module:"nokia-conf"`
	SrcIp          *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort        *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateMgmtPort retrieves the value of the MgmtPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetOrCreateMgmtPort() *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort {
	if t.MgmtPort != nil {
		return t.MgmtPort
	}
	t.MgmtPort = &NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort{}
	return t.MgmtPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetDstPort() *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetMgmtPort returns the value of the MgmtPort struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match. If the receiver or the field MgmtPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetMgmtPort() *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort {
	if t != nil && t.MgmtPort != nil {
		return t.MgmtPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetSrcIp() *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetSrcPort() *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetProtocol() NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstPort.PopulateDefaults()
	t.MgmtPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort represents the /nokia-conf/configure/system/security/management-access-filter/ip-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort struct {
	Mask *uint16 `path:"mask" module:"nokia-conf"`
	Port *uint16 `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort represents the /nokia-conf/configure/system/security/management-access-filter/ip-filter/entry/match/mgmt-port YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort struct {
	Cpm    YANGEmpty `path:"cpm" module:"nokia-conf"`
	Lag    *string   `path:"lag" module:"nokia-conf"`
	LagId  *string   `path:"lag-id" module:"nokia-conf"`
	PortId *string   `path:"port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) IsYANGGoStruct() {
}

// GetCpm retrieves the value of the leaf Cpm from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cpm is set, it can
// safely use t.GetCpm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cpm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) GetCpm() YANGEmpty {
	if t == nil || t.Cpm == false {
		return false
	}
	return t.Cpm
}

// GetLag retrieves the value of the leaf Lag from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lag is set, it can
// safely use t.GetLag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) GetLag() string {
	if t == nil || t.Lag == nil {
		return ""
	}
	return *t.Lag
}

// GetLagId retrieves the value of the leaf LagId from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagId is set, it can
// safely use t.GetLagId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) GetLagId() string {
	if t == nil || t.LagId == nil {
		return ""
	}
	return *t.LagId
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp represents the /nokia-conf/configure/system/security/management-access-filter/ip-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort represents the /nokia-conf/configure/system/security/management-access-filter/ip-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort struct {
	Mask *uint16 `path:"mask" module:"nokia-conf"`
	Port *uint16 `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter represents the /nokia-conf/configure/system/security/management-access-filter/ipv6-filter YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter struct {
	AdminState         E_NokiaTypesSros_AdminState                                                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      E_NokiaTypesFilter_MafAction                                                            `path:"default-action" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) NewEntry(EntryId uint32) (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) GetEntry(EntryId uint32) *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry struct to the
// list Entry of NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) AppendEntry(v *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) GetDefaultAction() E_NokiaTypesFilter_MafAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesFilter_MafAction_ignore_match
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesFilter_MafAction_ignore_match
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry represents the /nokia-conf/configure/system/security/management-access-filter/ipv6-filter/entry YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry struct {
	Action             E_NokiaTypesFilter_MafAction                                                       `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                            `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                                            `path:"entry-id" module:"nokia-conf"`
	LogEvents          *bool                                                                              `path:"log-events" module:"nokia-conf"`
	Match              *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) IsYANGGoStruct() {
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetOrCreateMatch() *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetMatch() *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetAction() E_NokiaTypesFilter_MafAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesFilter_MafAction_ignore_match
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetLogEvents() bool {
	if t == nil || t.LogEvents == nil {
		return false
	}
	return *t.LogEvents
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesFilter_MafAction_ignore_match
	}
	if t.LogEvents == nil {
		var v bool = false
		t.LogEvents = &v
	}
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match represents the /nokia-conf/configure/system/security/management-access-filter/ipv6-filter/entry/match YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match struct {
	DstPort        *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf" yangPresence:"true"`
	FlowLabel      *int32                                                                                             `path:"flow-label" module:"nokia-conf"`
	MgmtPort       *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort        `path:"mgmt-port" module:"nokia-conf"`
	NextHeader     NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	RouterInstance *string                                                                                            `path:"router-instance" module:"nokia-conf"`
	SrcIp          *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort        *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateMgmtPort retrieves the value of the MgmtPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetOrCreateMgmtPort() *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort {
	if t.MgmtPort != nil {
		return t.MgmtPort
	}
	t.MgmtPort = &NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort{}
	return t.MgmtPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetDstPort() *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetMgmtPort returns the value of the MgmtPort struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match. If the receiver or the field MgmtPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetMgmtPort() *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort {
	if t != nil && t.MgmtPort != nil {
		return t.MgmtPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetSrcIp() *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetSrcPort() *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetFlowLabel retrieves the value of the leaf FlowLabel from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowLabel is set, it can
// safely use t.GetFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetFlowLabel() int32 {
	if t == nil || t.FlowLabel == nil {
		return 0
	}
	return *t.FlowLabel
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetNextHeader() NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstPort.PopulateDefaults()
	t.MgmtPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort represents the /nokia-conf/configure/system/security/management-access-filter/ipv6-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort struct {
	Mask *uint16 `path:"mask" module:"nokia-conf"`
	Port *uint16 `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort represents the /nokia-conf/configure/system/security/management-access-filter/ipv6-filter/entry/match/mgmt-port YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort struct {
	Cpm    YANGEmpty `path:"cpm" module:"nokia-conf"`
	Lag    *string   `path:"lag" module:"nokia-conf"`
	LagId  *string   `path:"lag-id" module:"nokia-conf"`
	PortId *string   `path:"port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) IsYANGGoStruct() {
}

// GetCpm retrieves the value of the leaf Cpm from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cpm is set, it can
// safely use t.GetCpm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cpm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) GetCpm() YANGEmpty {
	if t == nil || t.Cpm == false {
		return false
	}
	return t.Cpm
}

// GetLag retrieves the value of the leaf Lag from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lag is set, it can
// safely use t.GetLag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) GetLag() string {
	if t == nil || t.Lag == nil {
		return ""
	}
	return *t.Lag
}

// GetLagId retrieves the value of the leaf LagId from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagId is set, it can
// safely use t.GetLagId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) GetLagId() string {
	if t == nil || t.LagId == nil {
		return ""
	}
	return *t.LagId
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp represents the /nokia-conf/configure/system/security/management-access-filter/ipv6-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort represents the /nokia-conf/configure/system/security/management-access-filter/ipv6-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort struct {
	Mask *uint16 `path:"mask" module:"nokia-conf"`
	Port *uint16 `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter represents the /nokia-conf/configure/system/security/management-access-filter/mac-filter YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter struct {
	AdminState         E_NokiaTypesSros_AdminState                                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultAction      E_NokiaTypesFilter_MafMacAction                                                        `path:"default-action" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) NewEntry(EntryId uint32) (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) GetOrCreateEntry(EntryId uint32) *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) GetEntry(EntryId uint32) *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) DeleteEntry(EntryId uint32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry struct to the
// list Entry of NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) AppendEntry(v *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) GetDefaultAction() E_NokiaTypesFilter_MafMacAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesFilter_MafMacAction_ignore_match
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesFilter_MafMacAction_ignore_match
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry represents the /nokia-conf/configure/system/security/management-access-filter/mac-filter/entry YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry struct {
	Action             E_NokiaTypesFilter_MafMacAction                                                   `path:"action" module:"nokia-conf"`
	ApplyGroups        []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                           `path:"description" module:"nokia-conf"`
	EntryId            *uint32                                                                           `path:"entry-id" module:"nokia-conf"`
	LogEvents          *bool                                                                             `path:"log-events" module:"nokia-conf"`
	Match              *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) GetMatch() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) GetAction() E_NokiaTypesFilter_MafMacAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesFilter_MafMacAction_ignore_match
	}
	return t.Action
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) GetLogEvents() bool {
	if t == nil || t.LogEvents == nil {
		return false
	}
	return *t.LogEvents
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesFilter_MafMacAction_ignore_match
	}
	if t.LogEvents == nil {
		var v bool = false
		t.LogEvents = &v
	}
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match represents the /nokia-conf/configure/system/security/management-access-filter/mac-filter/entry/match YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match struct {
	CfmOpcode *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode  `path:"cfm-opcode" module:"nokia-conf"`
	Dot1P     *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P      `path:"dot1p" module:"nokia-conf" yangPresence:"true"`
	DstMac    *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac     `path:"dst-mac" module:"nokia-conf" yangPresence:"true"`
	Etype     *string                                                                                      `path:"etype" module:"nokia-conf"`
	FrameType E_NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_FrameType `path:"frame-type" module:"nokia-conf"`
	LlcDsap   *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap    `path:"llc-dsap" module:"nokia-conf" yangPresence:"true"`
	LlcSsap   *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap    `path:"llc-ssap" module:"nokia-conf" yangPresence:"true"`
	Service   *string                                                                                      `path:"service" module:"nokia-conf"`
	SnapOui   E_NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SnapOui   `path:"snap-oui" module:"nokia-conf"`
	SnapPid   *int32                                                                                       `path:"snap-pid" module:"nokia-conf"`
	SrcMac    *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac     `path:"src-mac" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateCfmOpcode retrieves the value of the CfmOpcode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetOrCreateCfmOpcode() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode {
	if t.CfmOpcode != nil {
		return t.CfmOpcode
	}
	t.CfmOpcode = &NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode{}
	return t.CfmOpcode
}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetOrCreateDot1P() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDstMac retrieves the value of the DstMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetOrCreateDstMac() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac {
	if t.DstMac != nil {
		return t.DstMac
	}
	t.DstMac = &NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac{}
	return t.DstMac
}

// GetOrCreateLlcDsap retrieves the value of the LlcDsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetOrCreateLlcDsap() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap {
	if t.LlcDsap != nil {
		return t.LlcDsap
	}
	t.LlcDsap = &NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap{}
	return t.LlcDsap
}

// GetOrCreateLlcSsap retrieves the value of the LlcSsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetOrCreateLlcSsap() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap {
	if t.LlcSsap != nil {
		return t.LlcSsap
	}
	t.LlcSsap = &NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap{}
	return t.LlcSsap
}

// GetOrCreateSrcMac retrieves the value of the SrcMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetOrCreateSrcMac() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac {
	if t.SrcMac != nil {
		return t.SrcMac
	}
	t.SrcMac = &NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac{}
	return t.SrcMac
}

// GetCfmOpcode returns the value of the CfmOpcode struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match. If the receiver or the field CfmOpcode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetCfmOpcode() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode {
	if t != nil && t.CfmOpcode != nil {
		return t.CfmOpcode
	}
	return nil
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetDot1P() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDstMac returns the value of the DstMac struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match. If the receiver or the field DstMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetDstMac() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac {
	if t != nil && t.DstMac != nil {
		return t.DstMac
	}
	return nil
}

// GetLlcDsap returns the value of the LlcDsap struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match. If the receiver or the field LlcDsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetLlcDsap() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap {
	if t != nil && t.LlcDsap != nil {
		return t.LlcDsap
	}
	return nil
}

// GetLlcSsap returns the value of the LlcSsap struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match. If the receiver or the field LlcSsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetLlcSsap() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap {
	if t != nil && t.LlcSsap != nil {
		return t.LlcSsap
	}
	return nil
}

// GetSrcMac returns the value of the SrcMac struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match. If the receiver or the field SrcMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetSrcMac() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac {
	if t != nil && t.SrcMac != nil {
		return t.SrcMac
	}
	return nil
}

// GetEtype retrieves the value of the leaf Etype from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Etype is set, it can
// safely use t.GetEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Etype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetEtype() string {
	if t == nil || t.Etype == nil {
		return ""
	}
	return *t.Etype
}

// GetFrameType retrieves the value of the leaf FrameType from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameType is set, it can
// safely use t.GetFrameType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetFrameType() E_NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_FrameType {
	if t == nil || t.FrameType == 0 {
		return NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_FrameType_802dot3
	}
	return t.FrameType
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetService() string {
	if t == nil || t.Service == nil {
		return ""
	}
	return *t.Service
}

// GetSnapOui retrieves the value of the leaf SnapOui from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SnapOui is set, it can
// safely use t.GetSnapOui() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SnapOui == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetSnapOui() E_NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SnapOui {
	if t == nil || t.SnapOui == 0 {
		return 0
	}
	return t.SnapOui
}

// GetSnapPid retrieves the value of the leaf SnapPid from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SnapPid is set, it can
// safely use t.GetSnapPid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SnapPid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetSnapPid() int32 {
	if t == nil || t.SnapPid == nil {
		return 0
	}
	return *t.SnapPid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FrameType == 0 {
		t.FrameType = NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_FrameType_802dot3
	}
	t.CfmOpcode.PopulateDefaults()
	t.Dot1P.PopulateDefaults()
	t.DstMac.PopulateDefaults()
	t.LlcDsap.PopulateDefaults()
	t.LlcSsap.PopulateDefaults()
	t.SrcMac.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode represents the /nokia-conf/configure/system/security/management-access-filter/mac-filter/entry/match/cfm-opcode YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode struct {
	Eq    *uint32                                                                                           `path:"eq" module:"nokia-conf"`
	Gt    *uint32                                                                                           `path:"gt" module:"nokia-conf"`
	Lt    *uint32                                                                                           `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) GetOrCreateRange() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) GetRange() *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) GetGt() uint32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) GetLt() uint32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range represents the /nokia-conf/configure/system/security/management-access-filter/mac-filter/entry/match/cfm-opcode/range YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P represents the /nokia-conf/configure/system/security/management-access-filter/mac-filter/entry/match/dot1p YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P struct {
	Mask     *int32 `path:"mask" module:"nokia-conf"`
	Priority *int32 `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 7
	}
	return *t.Mask
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 7
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac represents the /nokia-conf/configure/system/security/management-access-filter/mac-filter/entry/match/dst-mac YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap represents the /nokia-conf/configure/system/security/management-access-filter/mac-filter/entry/match/llc-dsap YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap struct {
	Dsap *int32 `path:"dsap" module:"nokia-conf"`
	Mask *int32 `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) IsYANGGoStruct() {
}

// GetDsap retrieves the value of the leaf Dsap from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dsap is set, it can
// safely use t.GetDsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dsap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) GetDsap() int32 {
	if t == nil || t.Dsap == nil {
		return 0
	}
	return *t.Dsap
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap represents the /nokia-conf/configure/system/security/management-access-filter/mac-filter/entry/match/llc-ssap YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Ssap *int32 `path:"ssap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// GetSsap retrieves the value of the leaf Ssap from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ssap is set, it can
// safely use t.GetSsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ssap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) GetSsap() int32 {
	if t == nil || t.Ssap == nil {
		return 0
	}
	return *t.Ssap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac represents the /nokia-conf/configure/system/security/management-access-filter/mac-filter/entry/match/src-mac YANG schema element.
type NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac.
func (*NokiaConf_Configure_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki represents the /nokia-conf/configure/system/security/pki YANG schema element.
type NokiaConf_Configure_System_Security_Pki struct {
	ApplyGroups                  []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude           []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	CaProfile                    map[string]*NokiaConf_Configure_System_Security_Pki_CaProfile         `path:"ca-profile" module:"nokia-conf"`
	CertificateDisplayFormat     E_NokiaConf_Configure_System_Security_Pki_CertificateDisplayFormat    `path:"certificate-display-format" module:"nokia-conf"`
	CertificateExpirationWarning *NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning `path:"certificate-expiration-warning" module:"nokia-conf"`
	CommonNameList               map[string]*NokiaConf_Configure_System_Security_Pki_CommonNameList    `path:"common-name-list" module:"nokia-conf"`
	CrlExpirationWarning         *NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning         `path:"crl-expiration-warning" module:"nokia-conf"`
	EstProfile                   map[string]*NokiaConf_Configure_System_Security_Pki_EstProfile        `path:"est-profile" module:"nokia-conf"`
	ImportedFormat               E_NokiaConf_Configure_System_Security_Pki_ImportedFormat              `path:"imported-format" module:"nokia-conf"`
	MaximumCertChainDepth        *uint32                                                               `path:"maximum-cert-chain-depth" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki) IsYANGGoStruct() {}

// NewCaProfile creates a new entry in the CaProfile list of the
// NokiaConf_Configure_System_Security_Pki struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Pki) NewCaProfile(CaProfileName string) (*NokiaConf_Configure_System_Security_Pki_CaProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CaProfile == nil {
		t.CaProfile = make(map[string]*NokiaConf_Configure_System_Security_Pki_CaProfile)
	}

	key := CaProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CaProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CaProfile", key)
	}

	t.CaProfile[key] = &NokiaConf_Configure_System_Security_Pki_CaProfile{
		CaProfileName: &CaProfileName,
	}

	return t.CaProfile[key], nil
}

// RenameCaProfile renames an entry in the list CaProfile within
// the NokiaConf_Configure_System_Security_Pki struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Pki) RenameCaProfile(oldK, newK string) error {
	if _, ok := t.CaProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in CaProfile", newK)
	}

	e, ok := t.CaProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CaProfile", oldK)
	}
	e.CaProfileName = &newK

	t.CaProfile[newK] = e
	delete(t.CaProfile, oldK)
	return nil
}

// GetOrCreateCaProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Pki. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Pki) GetOrCreateCaProfile(CaProfileName string) *NokiaConf_Configure_System_Security_Pki_CaProfile {

	key := CaProfileName

	if v, ok := t.CaProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCaProfile(CaProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCaProfile got unexpected error: %v", err))
	}
	return v
}

// GetCaProfile retrieves the value with the specified key from
// the CaProfile map field of NokiaConf_Configure_System_Security_Pki. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki) GetCaProfile(CaProfileName string) *NokiaConf_Configure_System_Security_Pki_CaProfile {

	if t == nil {
		return nil
	}

	key := CaProfileName

	if lm, ok := t.CaProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteCaProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Pki. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Pki) DeleteCaProfile(CaProfileName string) {
	key := CaProfileName

	delete(t.CaProfile, key)
}

// AppendCaProfile appends the supplied NokiaConf_Configure_System_Security_Pki_CaProfile struct to the
// list CaProfile of NokiaConf_Configure_System_Security_Pki. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Pki_CaProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Pki) AppendCaProfile(v *NokiaConf_Configure_System_Security_Pki_CaProfile) error {
	if v.CaProfileName == nil {
		return fmt.Errorf("invalid nil key received for CaProfileName")
	}

	key := *v.CaProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CaProfile == nil {
		t.CaProfile = make(map[string]*NokiaConf_Configure_System_Security_Pki_CaProfile)
	}

	if _, ok := t.CaProfile[key]; ok {
		return fmt.Errorf("duplicate key for list CaProfile %v", key)
	}

	t.CaProfile[key] = v
	return nil
}

// NewCommonNameList creates a new entry in the CommonNameList list of the
// NokiaConf_Configure_System_Security_Pki struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Pki) NewCommonNameList(CnListName string) (*NokiaConf_Configure_System_Security_Pki_CommonNameList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommonNameList == nil {
		t.CommonNameList = make(map[string]*NokiaConf_Configure_System_Security_Pki_CommonNameList)
	}

	key := CnListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CommonNameList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CommonNameList", key)
	}

	t.CommonNameList[key] = &NokiaConf_Configure_System_Security_Pki_CommonNameList{
		CnListName: &CnListName,
	}

	return t.CommonNameList[key], nil
}

// RenameCommonNameList renames an entry in the list CommonNameList within
// the NokiaConf_Configure_System_Security_Pki struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Pki) RenameCommonNameList(oldK, newK string) error {
	if _, ok := t.CommonNameList[newK]; ok {
		return fmt.Errorf("key %v already exists in CommonNameList", newK)
	}

	e, ok := t.CommonNameList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CommonNameList", oldK)
	}
	e.CnListName = &newK

	t.CommonNameList[newK] = e
	delete(t.CommonNameList, oldK)
	return nil
}

// GetOrCreateCommonNameList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Pki. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Pki) GetOrCreateCommonNameList(CnListName string) *NokiaConf_Configure_System_Security_Pki_CommonNameList {

	key := CnListName

	if v, ok := t.CommonNameList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommonNameList(CnListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommonNameList got unexpected error: %v", err))
	}
	return v
}

// GetCommonNameList retrieves the value with the specified key from
// the CommonNameList map field of NokiaConf_Configure_System_Security_Pki. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki) GetCommonNameList(CnListName string) *NokiaConf_Configure_System_Security_Pki_CommonNameList {

	if t == nil {
		return nil
	}

	key := CnListName

	if lm, ok := t.CommonNameList[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommonNameList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Pki. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Pki) DeleteCommonNameList(CnListName string) {
	key := CnListName

	delete(t.CommonNameList, key)
}

// AppendCommonNameList appends the supplied NokiaConf_Configure_System_Security_Pki_CommonNameList struct to the
// list CommonNameList of NokiaConf_Configure_System_Security_Pki. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Pki_CommonNameList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Pki) AppendCommonNameList(v *NokiaConf_Configure_System_Security_Pki_CommonNameList) error {
	if v.CnListName == nil {
		return fmt.Errorf("invalid nil key received for CnListName")
	}

	key := *v.CnListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommonNameList == nil {
		t.CommonNameList = make(map[string]*NokiaConf_Configure_System_Security_Pki_CommonNameList)
	}

	if _, ok := t.CommonNameList[key]; ok {
		return fmt.Errorf("duplicate key for list CommonNameList %v", key)
	}

	t.CommonNameList[key] = v
	return nil
}

// NewEstProfile creates a new entry in the EstProfile list of the
// NokiaConf_Configure_System_Security_Pki struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Pki) NewEstProfile(Name string) (*NokiaConf_Configure_System_Security_Pki_EstProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EstProfile == nil {
		t.EstProfile = make(map[string]*NokiaConf_Configure_System_Security_Pki_EstProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EstProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EstProfile", key)
	}

	t.EstProfile[key] = &NokiaConf_Configure_System_Security_Pki_EstProfile{
		Name: &Name,
	}

	return t.EstProfile[key], nil
}

// RenameEstProfile renames an entry in the list EstProfile within
// the NokiaConf_Configure_System_Security_Pki struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Pki) RenameEstProfile(oldK, newK string) error {
	if _, ok := t.EstProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in EstProfile", newK)
	}

	e, ok := t.EstProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EstProfile", oldK)
	}
	e.Name = &newK

	t.EstProfile[newK] = e
	delete(t.EstProfile, oldK)
	return nil
}

// GetOrCreateEstProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Pki. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Pki) GetOrCreateEstProfile(Name string) *NokiaConf_Configure_System_Security_Pki_EstProfile {

	key := Name

	if v, ok := t.EstProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEstProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEstProfile got unexpected error: %v", err))
	}
	return v
}

// GetEstProfile retrieves the value with the specified key from
// the EstProfile map field of NokiaConf_Configure_System_Security_Pki. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki) GetEstProfile(Name string) *NokiaConf_Configure_System_Security_Pki_EstProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.EstProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteEstProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Pki. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Pki) DeleteEstProfile(Name string) {
	key := Name

	delete(t.EstProfile, key)
}

// AppendEstProfile appends the supplied NokiaConf_Configure_System_Security_Pki_EstProfile struct to the
// list EstProfile of NokiaConf_Configure_System_Security_Pki. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Pki_EstProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Pki) AppendEstProfile(v *NokiaConf_Configure_System_Security_Pki_EstProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EstProfile == nil {
		t.EstProfile = make(map[string]*NokiaConf_Configure_System_Security_Pki_EstProfile)
	}

	if _, ok := t.EstProfile[key]; ok {
		return fmt.Errorf("duplicate key for list EstProfile %v", key)
	}

	t.EstProfile[key] = v
	return nil
}

// GetOrCreateCertificateExpirationWarning retrieves the value of the CertificateExpirationWarning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Pki) GetOrCreateCertificateExpirationWarning() *NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning {
	if t.CertificateExpirationWarning != nil {
		return t.CertificateExpirationWarning
	}
	t.CertificateExpirationWarning = &NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning{}
	return t.CertificateExpirationWarning
}

// GetOrCreateCrlExpirationWarning retrieves the value of the CrlExpirationWarning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Pki) GetOrCreateCrlExpirationWarning() *NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning {
	if t.CrlExpirationWarning != nil {
		return t.CrlExpirationWarning
	}
	t.CrlExpirationWarning = &NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning{}
	return t.CrlExpirationWarning
}

// GetCertificateExpirationWarning returns the value of the CertificateExpirationWarning struct pointer
// from NokiaConf_Configure_System_Security_Pki. If the receiver or the field CertificateExpirationWarning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki) GetCertificateExpirationWarning() *NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning {
	if t != nil && t.CertificateExpirationWarning != nil {
		return t.CertificateExpirationWarning
	}
	return nil
}

// GetCrlExpirationWarning returns the value of the CrlExpirationWarning struct pointer
// from NokiaConf_Configure_System_Security_Pki. If the receiver or the field CrlExpirationWarning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki) GetCrlExpirationWarning() *NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning {
	if t != nil && t.CrlExpirationWarning != nil {
		return t.CrlExpirationWarning
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Pki
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Pki
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCertificateDisplayFormat retrieves the value of the leaf CertificateDisplayFormat from the NokiaConf_Configure_System_Security_Pki
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateDisplayFormat is set, it can
// safely use t.GetCertificateDisplayFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateDisplayFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki) GetCertificateDisplayFormat() E_NokiaConf_Configure_System_Security_Pki_CertificateDisplayFormat {
	if t == nil || t.CertificateDisplayFormat == 0 {
		return NokiaConf_Configure_System_Security_Pki_CertificateDisplayFormat_ascii
	}
	return t.CertificateDisplayFormat
}

// GetImportedFormat retrieves the value of the leaf ImportedFormat from the NokiaConf_Configure_System_Security_Pki
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportedFormat is set, it can
// safely use t.GetImportedFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportedFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki) GetImportedFormat() E_NokiaConf_Configure_System_Security_Pki_ImportedFormat {
	if t == nil || t.ImportedFormat == 0 {
		return NokiaConf_Configure_System_Security_Pki_ImportedFormat_any
	}
	return t.ImportedFormat
}

// GetMaximumCertChainDepth retrieves the value of the leaf MaximumCertChainDepth from the NokiaConf_Configure_System_Security_Pki
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumCertChainDepth is set, it can
// safely use t.GetMaximumCertChainDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumCertChainDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki) GetMaximumCertChainDepth() uint32 {
	if t == nil || t.MaximumCertChainDepth == nil {
		return 7
	}
	return *t.MaximumCertChainDepth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CertificateDisplayFormat == 0 {
		t.CertificateDisplayFormat = NokiaConf_Configure_System_Security_Pki_CertificateDisplayFormat_ascii
	}
	if t.ImportedFormat == 0 {
		t.ImportedFormat = NokiaConf_Configure_System_Security_Pki_ImportedFormat_any
	}
	if t.MaximumCertChainDepth == nil {
		var v uint32 = 7
		t.MaximumCertChainDepth = &v
	}
	t.CertificateExpirationWarning.PopulateDefaults()
	t.CrlExpirationWarning.PopulateDefaults()
	for _, e := range t.CaProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.CommonNameList {
		e.PopulateDefaults()
	}
	for _, e := range t.EstProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki.
func (*NokiaConf_Configure_System_Security_Pki) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CaProfile represents the /nokia-conf/configure/system/security/pki/ca-profile YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CaProfile struct {
	AdminState         E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoCrlUpdate      *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate    `path:"auto-crl-update" module:"nokia-conf" yangPresence:"true"`
	CaProfileName      *string                                                             `path:"ca-profile-name" module:"nokia-conf"`
	CertFile           *string                                                             `path:"cert-file" module:"nokia-conf"`
	Cmpv2              *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2            `path:"cmpv2" module:"nokia-conf"`
	CrlFile            *string                                                             `path:"crl-file" module:"nokia-conf"`
	Description        *string                                                             `path:"description" module:"nokia-conf"`
	Ocsp               *NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp             `path:"ocsp" module:"nokia-conf"`
	RevocationCheck    E_NokiaConf_Configure_System_Security_Pki_CaProfile_RevocationCheck `path:"revocation-check" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CaProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile) IsYANGGoStruct() {}

// GetOrCreateAutoCrlUpdate retrieves the value of the AutoCrlUpdate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetOrCreateAutoCrlUpdate() *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate {
	if t.AutoCrlUpdate != nil {
		return t.AutoCrlUpdate
	}
	t.AutoCrlUpdate = &NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate{}
	return t.AutoCrlUpdate
}

// GetOrCreateCmpv2 retrieves the value of the Cmpv2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetOrCreateCmpv2() *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2 {
	if t.Cmpv2 != nil {
		return t.Cmpv2
	}
	t.Cmpv2 = &NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2{}
	return t.Cmpv2
}

// GetOrCreateOcsp retrieves the value of the Ocsp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetOrCreateOcsp() *NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp {
	if t.Ocsp != nil {
		return t.Ocsp
	}
	t.Ocsp = &NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp{}
	return t.Ocsp
}

// GetAutoCrlUpdate returns the value of the AutoCrlUpdate struct pointer
// from NokiaConf_Configure_System_Security_Pki_CaProfile. If the receiver or the field AutoCrlUpdate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetAutoCrlUpdate() *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate {
	if t != nil && t.AutoCrlUpdate != nil {
		return t.AutoCrlUpdate
	}
	return nil
}

// GetCmpv2 returns the value of the Cmpv2 struct pointer
// from NokiaConf_Configure_System_Security_Pki_CaProfile. If the receiver or the field Cmpv2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetCmpv2() *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2 {
	if t != nil && t.Cmpv2 != nil {
		return t.Cmpv2
	}
	return nil
}

// GetOcsp returns the value of the Ocsp struct pointer
// from NokiaConf_Configure_System_Security_Pki_CaProfile. If the receiver or the field Ocsp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetOcsp() *NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp {
	if t != nil && t.Ocsp != nil {
		return t.Ocsp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCaProfileName retrieves the value of the leaf CaProfileName from the NokiaConf_Configure_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaProfileName is set, it can
// safely use t.GetCaProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetCaProfileName() string {
	if t == nil || t.CaProfileName == nil {
		return ""
	}
	return *t.CaProfileName
}

// GetCertFile retrieves the value of the leaf CertFile from the NokiaConf_Configure_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertFile is set, it can
// safely use t.GetCertFile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertFile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetCertFile() string {
	if t == nil || t.CertFile == nil {
		return ""
	}
	return *t.CertFile
}

// GetCrlFile retrieves the value of the leaf CrlFile from the NokiaConf_Configure_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrlFile is set, it can
// safely use t.GetCrlFile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrlFile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetCrlFile() string {
	if t == nil || t.CrlFile == nil {
		return ""
	}
	return *t.CrlFile
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetRevocationCheck retrieves the value of the leaf RevocationCheck from the NokiaConf_Configure_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevocationCheck is set, it can
// safely use t.GetRevocationCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevocationCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) GetRevocationCheck() E_NokiaConf_Configure_System_Security_Pki_CaProfile_RevocationCheck {
	if t == nil || t.RevocationCheck == 0 {
		return NokiaConf_Configure_System_Security_Pki_CaProfile_RevocationCheck_crl
	}
	return t.RevocationCheck
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CaProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RevocationCheck == 0 {
		t.RevocationCheck = NokiaConf_Configure_System_Security_Pki_CaProfile_RevocationCheck_crl
	}
	t.AutoCrlUpdate.PopulateDefaults()
	t.Cmpv2.PopulateDefaults()
	t.Ocsp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Pki_CaProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CaProfileName == nil {
		return nil, fmt.Errorf("nil value for key CaProfileName")
	}

	return map[string]interface{}{
		"ca-profile-name": *t.CaProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CaProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CaProfile.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate represents the /nokia-conf/configure/system/security/pki/ca-profile/auto-crl-update YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate struct {
	AdminState             E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	CrlUrls                *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls       `path:"crl-urls" module:"nokia-conf"`
	PeriodicUpdateInterval *uint32                                                                        `path:"periodic-update-interval" module:"nokia-conf"`
	PreUpdateTime          *uint32                                                                        `path:"pre-update-time" module:"nokia-conf"`
	RetryInterval          *uint32                                                                        `path:"retry-interval" module:"nokia-conf"`
	ScheduleType           E_NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_ScheduleType `path:"schedule-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) IsYANGGoStruct() {}

// GetOrCreateCrlUrls retrieves the value of the CrlUrls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) GetOrCreateCrlUrls() *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls {
	if t.CrlUrls != nil {
		return t.CrlUrls
	}
	t.CrlUrls = &NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls{}
	return t.CrlUrls
}

// GetCrlUrls returns the value of the CrlUrls struct pointer
// from NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate. If the receiver or the field CrlUrls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) GetCrlUrls() *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls {
	if t != nil && t.CrlUrls != nil {
		return t.CrlUrls
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPeriodicUpdateInterval retrieves the value of the leaf PeriodicUpdateInterval from the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeriodicUpdateInterval is set, it can
// safely use t.GetPeriodicUpdateInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeriodicUpdateInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) GetPeriodicUpdateInterval() uint32 {
	if t == nil || t.PeriodicUpdateInterval == nil {
		return 86400
	}
	return *t.PeriodicUpdateInterval
}

// GetPreUpdateTime retrieves the value of the leaf PreUpdateTime from the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreUpdateTime is set, it can
// safely use t.GetPreUpdateTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreUpdateTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) GetPreUpdateTime() uint32 {
	if t == nil || t.PreUpdateTime == nil {
		return 3600
	}
	return *t.PreUpdateTime
}

// GetRetryInterval retrieves the value of the leaf RetryInterval from the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryInterval is set, it can
// safely use t.GetRetryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) GetRetryInterval() uint32 {
	if t == nil || t.RetryInterval == nil {
		return 3600
	}
	return *t.RetryInterval
}

// GetScheduleType retrieves the value of the leaf ScheduleType from the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScheduleType is set, it can
// safely use t.GetScheduleType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScheduleType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) GetScheduleType() E_NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_ScheduleType {
	if t == nil || t.ScheduleType == 0 {
		return NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_ScheduleType_next_update_based
	}
	return t.ScheduleType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.PeriodicUpdateInterval == nil {
		var v uint32 = 86400
		t.PeriodicUpdateInterval = &v
	}
	if t.PreUpdateTime == nil {
		var v uint32 = 3600
		t.PreUpdateTime = &v
	}
	if t.RetryInterval == nil {
		var v uint32 = 3600
		t.RetryInterval = &v
	}
	if t.ScheduleType == 0 {
		t.ScheduleType = NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_ScheduleType_next_update_based
	}
	t.CrlUrls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls represents the /nokia-conf/configure/system/security/pki/ca-profile/auto-crl-update/crl-urls YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls struct {
	UrlEntry map[uint32]*NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry `path:"url-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) IsYANGGoStruct() {}

// NewUrlEntry creates a new entry in the UrlEntry list of the
// NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) NewUrlEntry(EntryId uint32) (*NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UrlEntry == nil {
		t.UrlEntry = make(map[uint32]*NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UrlEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UrlEntry", key)
	}

	t.UrlEntry[key] = &NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry{
		EntryId: &EntryId,
	}

	return t.UrlEntry[key], nil
}

// RenameUrlEntry renames an entry in the list UrlEntry within
// the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) RenameUrlEntry(oldK, newK uint32) error {
	if _, ok := t.UrlEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in UrlEntry", newK)
	}

	e, ok := t.UrlEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UrlEntry", oldK)
	}
	e.EntryId = &newK

	t.UrlEntry[newK] = e
	delete(t.UrlEntry, oldK)
	return nil
}

// GetOrCreateUrlEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) GetOrCreateUrlEntry(EntryId uint32) *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry {

	key := EntryId

	if v, ok := t.UrlEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUrlEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUrlEntry got unexpected error: %v", err))
	}
	return v
}

// GetUrlEntry retrieves the value with the specified key from
// the UrlEntry map field of NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) GetUrlEntry(EntryId uint32) *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.UrlEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteUrlEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) DeleteUrlEntry(EntryId uint32) {
	key := EntryId

	delete(t.UrlEntry, key)
}

// AppendUrlEntry appends the supplied NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry struct to the
// list UrlEntry of NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) AppendUrlEntry(v *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UrlEntry == nil {
		t.UrlEntry = make(map[uint32]*NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry)
	}

	if _, ok := t.UrlEntry[key]; ok {
		return fmt.Errorf("duplicate key for list UrlEntry %v", key)
	}

	t.UrlEntry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UrlEntry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry represents the /nokia-conf/configure/system/security/pki/ca-profile/auto-crl-update/crl-urls/url-entry YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry struct {
	ApplyGroups         []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string `path:"apply-groups-exclude" module:"nokia-conf"`
	EntryId             *uint32  `path:"entry-id" module:"nokia-conf"`
	TransmissionProfile *string  `path:"transmission-profile" module:"nokia-conf"`
	Url                 *string  `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) GetEntryId() uint32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetTransmissionProfile retrieves the value of the leaf TransmissionProfile from the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmissionProfile is set, it can
// safely use t.GetTransmissionProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmissionProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) GetTransmissionProfile() string {
	if t == nil || t.TransmissionProfile == nil {
		return ""
	}
	return *t.TransmissionProfile
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2 represents the /nokia-conf/configure/system/security/pki/ca-profile/cmpv2 YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2 struct {
	AcceptUnprotectedMessage         *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage `path:"accept-unprotected-message" module:"nokia-conf"`
	AlwaysSetSenderForIr             *bool                                                                             `path:"always-set-sender-for-ir" module:"nokia-conf"`
	Http                             *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http                     `path:"http" module:"nokia-conf"`
	KeyList                          *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList                  `path:"key-list" module:"nokia-conf"`
	ResponseSigningCert              *string                                                                           `path:"response-signing-cert" module:"nokia-conf"`
	SameRecipientNonceForPollRequest *bool                                                                             `path:"same-recipient-nonce-for-poll-request" module:"nokia-conf"`
	Url                              *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url                      `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) IsYANGGoStruct() {}

// GetOrCreateAcceptUnprotectedMessage retrieves the value of the AcceptUnprotectedMessage field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) GetOrCreateAcceptUnprotectedMessage() *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage {
	if t.AcceptUnprotectedMessage != nil {
		return t.AcceptUnprotectedMessage
	}
	t.AcceptUnprotectedMessage = &NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage{}
	return t.AcceptUnprotectedMessage
}

// GetOrCreateHttp retrieves the value of the Http field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) GetOrCreateHttp() *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http {
	if t.Http != nil {
		return t.Http
	}
	t.Http = &NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http{}
	return t.Http
}

// GetOrCreateKeyList retrieves the value of the KeyList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) GetOrCreateKeyList() *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList {
	if t.KeyList != nil {
		return t.KeyList
	}
	t.KeyList = &NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList{}
	return t.KeyList
}

// GetOrCreateUrl retrieves the value of the Url field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) GetOrCreateUrl() *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url {
	if t.Url != nil {
		return t.Url
	}
	t.Url = &NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url{}
	return t.Url
}

// GetAcceptUnprotectedMessage returns the value of the AcceptUnprotectedMessage struct pointer
// from NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2. If the receiver or the field AcceptUnprotectedMessage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) GetAcceptUnprotectedMessage() *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage {
	if t != nil && t.AcceptUnprotectedMessage != nil {
		return t.AcceptUnprotectedMessage
	}
	return nil
}

// GetHttp returns the value of the Http struct pointer
// from NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2. If the receiver or the field Http is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) GetHttp() *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http {
	if t != nil && t.Http != nil {
		return t.Http
	}
	return nil
}

// GetKeyList returns the value of the KeyList struct pointer
// from NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2. If the receiver or the field KeyList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) GetKeyList() *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList {
	if t != nil && t.KeyList != nil {
		return t.KeyList
	}
	return nil
}

// GetUrl returns the value of the Url struct pointer
// from NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2. If the receiver or the field Url is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) GetUrl() *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url {
	if t != nil && t.Url != nil {
		return t.Url
	}
	return nil
}

// GetAlwaysSetSenderForIr retrieves the value of the leaf AlwaysSetSenderForIr from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlwaysSetSenderForIr is set, it can
// safely use t.GetAlwaysSetSenderForIr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlwaysSetSenderForIr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) GetAlwaysSetSenderForIr() bool {
	if t == nil || t.AlwaysSetSenderForIr == nil {
		return false
	}
	return *t.AlwaysSetSenderForIr
}

// GetResponseSigningCert retrieves the value of the leaf ResponseSigningCert from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResponseSigningCert is set, it can
// safely use t.GetResponseSigningCert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResponseSigningCert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) GetResponseSigningCert() string {
	if t == nil || t.ResponseSigningCert == nil {
		return ""
	}
	return *t.ResponseSigningCert
}

// GetSameRecipientNonceForPollRequest retrieves the value of the leaf SameRecipientNonceForPollRequest from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SameRecipientNonceForPollRequest is set, it can
// safely use t.GetSameRecipientNonceForPollRequest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SameRecipientNonceForPollRequest == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) GetSameRecipientNonceForPollRequest() bool {
	if t == nil || t.SameRecipientNonceForPollRequest == nil {
		return false
	}
	return *t.SameRecipientNonceForPollRequest
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AlwaysSetSenderForIr == nil {
		var v bool = false
		t.AlwaysSetSenderForIr = &v
	}
	if t.SameRecipientNonceForPollRequest == nil {
		var v bool = false
		t.SameRecipientNonceForPollRequest = &v
	}
	t.AcceptUnprotectedMessage.PopulateDefaults()
	t.Http.PopulateDefaults()
	t.KeyList.PopulateDefaults()
	t.Url.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage represents the /nokia-conf/configure/system/security/pki/ca-profile/cmpv2/accept-unprotected-message YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage struct {
	ErrorMessage   *bool `path:"error-message" module:"nokia-conf"`
	PkiconfMessage *bool `path:"pkiconf-message" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) IsYANGGoStruct() {
}

// GetErrorMessage retrieves the value of the leaf ErrorMessage from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorMessage is set, it can
// safely use t.GetErrorMessage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorMessage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) GetErrorMessage() bool {
	if t == nil || t.ErrorMessage == nil {
		return false
	}
	return *t.ErrorMessage
}

// GetPkiconfMessage retrieves the value of the leaf PkiconfMessage from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PkiconfMessage is set, it can
// safely use t.GetPkiconfMessage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PkiconfMessage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) GetPkiconfMessage() bool {
	if t == nil || t.PkiconfMessage == nil {
		return false
	}
	return *t.PkiconfMessage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ErrorMessage == nil {
		var v bool = false
		t.ErrorMessage = &v
	}
	if t.PkiconfMessage == nil {
		var v bool = false
		t.PkiconfMessage = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http represents the /nokia-conf/configure/system/security/pki/ca-profile/cmpv2/http YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http struct {
	ResponseTimeout *uint32                                                                `path:"response-timeout" module:"nokia-conf"`
	Version         E_NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http_Version `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http) IsYANGGoStruct() {}

// GetResponseTimeout retrieves the value of the leaf ResponseTimeout from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResponseTimeout is set, it can
// safely use t.GetResponseTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResponseTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http) GetResponseTimeout() uint32 {
	if t == nil || t.ResponseTimeout == nil {
		return 30
	}
	return *t.ResponseTimeout
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http) GetVersion() E_NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http_Version_1_1
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ResponseTimeout == nil {
		var v uint32 = 30
		t.ResponseTimeout = &v
	}
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http_Version_1_1
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Http) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList represents the /nokia-conf/configure/system/security/pki/ca-profile/cmpv2/key-list YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList struct {
	Key map[string]*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key `path:"key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList) IsYANGGoStruct() {}

// NewKey creates a new entry in the Key list of the
// NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList) NewKey(ReferenceNumber string) (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Key == nil {
		t.Key = make(map[string]*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key)
	}

	key := ReferenceNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Key[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Key", key)
	}

	t.Key[key] = &NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key{
		ReferenceNumber: &ReferenceNumber,
	}

	return t.Key[key], nil
}

// RenameKey renames an entry in the list Key within
// the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList) RenameKey(oldK, newK string) error {
	if _, ok := t.Key[newK]; ok {
		return fmt.Errorf("key %v already exists in Key", newK)
	}

	e, ok := t.Key[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Key", oldK)
	}
	e.ReferenceNumber = &newK

	t.Key[newK] = e
	delete(t.Key, oldK)
	return nil
}

// GetOrCreateKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList) GetOrCreateKey(ReferenceNumber string) *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key {

	key := ReferenceNumber

	if v, ok := t.Key[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKey(ReferenceNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKey got unexpected error: %v", err))
	}
	return v
}

// GetKey retrieves the value with the specified key from
// the Key map field of NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList) GetKey(ReferenceNumber string) *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key {

	if t == nil {
		return nil
	}

	key := ReferenceNumber

	if lm, ok := t.Key[key]; ok {
		return lm
	}
	return nil
}

// DeleteKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList) DeleteKey(ReferenceNumber string) {
	key := ReferenceNumber

	delete(t.Key, key)
}

// AppendKey appends the supplied NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key struct to the
// list Key of NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList) AppendKey(v *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) error {
	if v.ReferenceNumber == nil {
		return fmt.Errorf("invalid nil key received for ReferenceNumber")
	}

	key := *v.ReferenceNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Key == nil {
		t.Key = make(map[string]*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key)
	}

	if _, ok := t.Key[key]; ok {
		return fmt.Errorf("duplicate key for list Key %v", key)
	}

	t.Key[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Key {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key represents the /nokia-conf/configure/system/security/pki/ca-profile/cmpv2/key-list/key YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Password           *string  `path:"password" module:"nokia-conf"`
	ReferenceNumber    *string  `path:"reference-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetReferenceNumber retrieves the value of the leaf ReferenceNumber from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceNumber is set, it can
// safely use t.GetReferenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) GetReferenceNumber() string {
	if t == nil || t.ReferenceNumber == nil {
		return ""
	}
	return *t.ReferenceNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ReferenceNumber == nil {
		return nil, fmt.Errorf("nil value for key ReferenceNumber")
	}

	return map[string]interface{}{
		"reference-number": *t.ReferenceNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url represents the /nokia-conf/configure/system/security/pki/ca-profile/cmpv2/url YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url struct {
	ServiceName *string `path:"service-name" module:"nokia-conf"`
	UrlString   *string `path:"url-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url) IsYANGGoStruct() {}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetUrlString retrieves the value of the leaf UrlString from the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrlString is set, it can
// safely use t.GetUrlString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrlString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url) GetUrlString() string {
	if t == nil || t.UrlString == nil {
		return ""
	}
	return *t.UrlString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Cmpv2_Url) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp represents the /nokia-conf/configure/system/security/pki/ca-profile/ocsp YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp struct {
	ResponderUrl        *string `path:"responder-url" module:"nokia-conf"`
	ServiceName         *string `path:"service-name" module:"nokia-conf"`
	TransmissionProfile *string `path:"transmission-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp) IsYANGGoStruct() {}

// GetResponderUrl retrieves the value of the leaf ResponderUrl from the NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResponderUrl is set, it can
// safely use t.GetResponderUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResponderUrl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp) GetResponderUrl() string {
	if t == nil || t.ResponderUrl == nil {
		return ""
	}
	return *t.ResponderUrl
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetTransmissionProfile retrieves the value of the leaf TransmissionProfile from the NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmissionProfile is set, it can
// safely use t.GetTransmissionProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmissionProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp) GetTransmissionProfile() string {
	if t == nil || t.TransmissionProfile == nil {
		return ""
	}
	return *t.TransmissionProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp.
func (*NokiaConf_Configure_System_Security_Pki_CaProfile_Ocsp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning represents the /nokia-conf/configure/system/security/pki/certificate-expiration-warning YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning struct {
	Hours       *int32 `path:"hours" module:"nokia-conf"`
	RepeatHours *int32 `path:"repeat-hours" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning) IsYANGGoStruct() {}

// GetHours retrieves the value of the leaf Hours from the NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hours is set, it can
// safely use t.GetHours() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hours == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning) GetHours() int32 {
	if t == nil || t.Hours == nil {
		return 0
	}
	return *t.Hours
}

// GetRepeatHours retrieves the value of the leaf RepeatHours from the NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatHours is set, it can
// safely use t.GetRepeatHours() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatHours == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning) GetRepeatHours() int32 {
	if t == nil || t.RepeatHours == nil {
		return 0
	}
	return *t.RepeatHours
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RepeatHours == nil {
		var v int32 = 0
		t.RepeatHours = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning.
func (*NokiaConf_Configure_System_Security_Pki_CertificateExpirationWarning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CommonNameList represents the /nokia-conf/configure/system/security/pki/common-name-list YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CommonNameList struct {
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	CnListName         *string                                                                       `path:"cn-list-name" module:"nokia-conf"`
	CommonName         map[uint32]*NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName `path:"common-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CommonNameList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CommonNameList) IsYANGGoStruct() {}

// NewCommonName creates a new entry in the CommonName list of the
// NokiaConf_Configure_System_Security_Pki_CommonNameList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) NewCommonName(CnIndex uint32) (*NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommonName == nil {
		t.CommonName = make(map[uint32]*NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName)
	}

	key := CnIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CommonName[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CommonName", key)
	}

	t.CommonName[key] = &NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName{
		CnIndex: &CnIndex,
	}

	return t.CommonName[key], nil
}

// RenameCommonName renames an entry in the list CommonName within
// the NokiaConf_Configure_System_Security_Pki_CommonNameList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) RenameCommonName(oldK, newK uint32) error {
	if _, ok := t.CommonName[newK]; ok {
		return fmt.Errorf("key %v already exists in CommonName", newK)
	}

	e, ok := t.CommonName[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CommonName", oldK)
	}
	e.CnIndex = &newK

	t.CommonName[newK] = e
	delete(t.CommonName, oldK)
	return nil
}

// GetOrCreateCommonName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Pki_CommonNameList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) GetOrCreateCommonName(CnIndex uint32) *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName {

	key := CnIndex

	if v, ok := t.CommonName[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommonName(CnIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommonName got unexpected error: %v", err))
	}
	return v
}

// GetCommonName retrieves the value with the specified key from
// the CommonName map field of NokiaConf_Configure_System_Security_Pki_CommonNameList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) GetCommonName(CnIndex uint32) *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName {

	if t == nil {
		return nil
	}

	key := CnIndex

	if lm, ok := t.CommonName[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommonName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Pki_CommonNameList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) DeleteCommonName(CnIndex uint32) {
	key := CnIndex

	delete(t.CommonName, key)
}

// AppendCommonName appends the supplied NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName struct to the
// list CommonName of NokiaConf_Configure_System_Security_Pki_CommonNameList. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) AppendCommonName(v *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) error {
	if v.CnIndex == nil {
		return fmt.Errorf("invalid nil key received for CnIndex")
	}

	key := *v.CnIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommonName == nil {
		t.CommonName = make(map[uint32]*NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName)
	}

	if _, ok := t.CommonName[key]; ok {
		return fmt.Errorf("duplicate key for list CommonName %v", key)
	}

	t.CommonName[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Pki_CommonNameList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Pki_CommonNameList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCnListName retrieves the value of the leaf CnListName from the NokiaConf_Configure_System_Security_Pki_CommonNameList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CnListName is set, it can
// safely use t.GetCnListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CnListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) GetCnListName() string {
	if t == nil || t.CnListName == nil {
		return ""
	}
	return *t.CnListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CommonNameList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.CommonName {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Pki_CommonNameList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CnListName == nil {
		return nil, fmt.Errorf("nil value for key CnListName")
	}

	return map[string]interface{}{
		"cn-list-name": *t.CnListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CommonNameList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CommonNameList.
func (*NokiaConf_Configure_System_Security_Pki_CommonNameList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName represents the /nokia-conf/configure/system/security/pki/common-name-list/common-name YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName struct {
	ApplyGroups        []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	CnIndex            *uint32                                                                    `path:"cn-index" module:"nokia-conf"`
	CnType             E_NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName_CnType `path:"cn-type" module:"nokia-conf"`
	CnValue            *string                                                                    `path:"cn-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCnIndex retrieves the value of the leaf CnIndex from the NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CnIndex is set, it can
// safely use t.GetCnIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CnIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) GetCnIndex() uint32 {
	if t == nil || t.CnIndex == nil {
		return 0
	}
	return *t.CnIndex
}

// GetCnType retrieves the value of the leaf CnType from the NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CnType is set, it can
// safely use t.GetCnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) GetCnType() E_NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName_CnType {
	if t == nil || t.CnType == 0 {
		return 0
	}
	return t.CnType
}

// GetCnValue retrieves the value of the leaf CnValue from the NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CnValue is set, it can
// safely use t.GetCnValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CnValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) GetCnValue() string {
	if t == nil || t.CnValue == nil {
		return ""
	}
	return *t.CnValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CnIndex == nil {
		return nil, fmt.Errorf("nil value for key CnIndex")
	}

	return map[string]interface{}{
		"cn-index": *t.CnIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName.
func (*NokiaConf_Configure_System_Security_Pki_CommonNameList_CommonName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning represents the /nokia-conf/configure/system/security/pki/crl-expiration-warning YANG schema element.
type NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning struct {
	Hours       *int32 `path:"hours" module:"nokia-conf"`
	RepeatHours *int32 `path:"repeat-hours" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning) IsYANGGoStruct() {}

// GetHours retrieves the value of the leaf Hours from the NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hours is set, it can
// safely use t.GetHours() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hours == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning) GetHours() int32 {
	if t == nil || t.Hours == nil {
		return 0
	}
	return *t.Hours
}

// GetRepeatHours retrieves the value of the leaf RepeatHours from the NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatHours is set, it can
// safely use t.GetRepeatHours() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatHours == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning) GetRepeatHours() int32 {
	if t == nil || t.RepeatHours == nil {
		return 0
	}
	return *t.RepeatHours
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RepeatHours == nil {
		var v int32 = 0
		t.RepeatHours = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning.
func (*NokiaConf_Configure_System_Security_Pki_CrlExpirationWarning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_EstProfile represents the /nokia-conf/configure/system/security/pki/est-profile YANG schema element.
type NokiaConf_Configure_System_Security_Pki_EstProfile struct {
	ApplyGroups         []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	CheckIdKpCmcraOnly  *bool                                                                  `path:"check-id-kp-cmcra-only" module:"nokia-conf"`
	ClientTlsProfile    *string                                                                `path:"client-tls-profile" module:"nokia-conf"`
	HttpAuthentication  *NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication `path:"http-authentication" module:"nokia-conf"`
	Name                *string                                                                `path:"name" module:"nokia-conf"`
	Server              *NokiaConf_Configure_System_Security_Pki_EstProfile_Server             `path:"server" module:"nokia-conf"`
	TransmissionProfile *string                                                                `path:"transmission-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_EstProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_EstProfile) IsYANGGoStruct() {}

// GetOrCreateHttpAuthentication retrieves the value of the HttpAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) GetOrCreateHttpAuthentication() *NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication {
	if t.HttpAuthentication != nil {
		return t.HttpAuthentication
	}
	t.HttpAuthentication = &NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication{}
	return t.HttpAuthentication
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) GetOrCreateServer() *NokiaConf_Configure_System_Security_Pki_EstProfile_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_System_Security_Pki_EstProfile_Server{}
	return t.Server
}

// GetHttpAuthentication returns the value of the HttpAuthentication struct pointer
// from NokiaConf_Configure_System_Security_Pki_EstProfile. If the receiver or the field HttpAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) GetHttpAuthentication() *NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication {
	if t != nil && t.HttpAuthentication != nil {
		return t.HttpAuthentication
	}
	return nil
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_System_Security_Pki_EstProfile. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) GetServer() *NokiaConf_Configure_System_Security_Pki_EstProfile_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Pki_EstProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Pki_EstProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCheckIdKpCmcraOnly retrieves the value of the leaf CheckIdKpCmcraOnly from the NokiaConf_Configure_System_Security_Pki_EstProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckIdKpCmcraOnly is set, it can
// safely use t.GetCheckIdKpCmcraOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckIdKpCmcraOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) GetCheckIdKpCmcraOnly() bool {
	if t == nil || t.CheckIdKpCmcraOnly == nil {
		return false
	}
	return *t.CheckIdKpCmcraOnly
}

// GetClientTlsProfile retrieves the value of the leaf ClientTlsProfile from the NokiaConf_Configure_System_Security_Pki_EstProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientTlsProfile is set, it can
// safely use t.GetClientTlsProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientTlsProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) GetClientTlsProfile() string {
	if t == nil || t.ClientTlsProfile == nil {
		return ""
	}
	return *t.ClientTlsProfile
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Pki_EstProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTransmissionProfile retrieves the value of the leaf TransmissionProfile from the NokiaConf_Configure_System_Security_Pki_EstProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmissionProfile is set, it can
// safely use t.GetTransmissionProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmissionProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) GetTransmissionProfile() string {
	if t == nil || t.TransmissionProfile == nil {
		return ""
	}
	return *t.TransmissionProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_EstProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CheckIdKpCmcraOnly == nil {
		var v bool = false
		t.CheckIdKpCmcraOnly = &v
	}
	t.HttpAuthentication.PopulateDefaults()
	t.Server.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Pki_EstProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_EstProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_EstProfile.
func (*NokiaConf_Configure_System_Security_Pki_EstProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication represents the /nokia-conf/configure/system/security/pki/est-profile/http-authentication YANG schema element.
type NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication struct {
	Password *string `path:"password" module:"nokia-conf"`
	Username *string `path:"username" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication) IsYANGGoStruct() {}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetUsername retrieves the value of the leaf Username from the NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Username is set, it can
// safely use t.GetUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Username == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication.
func (*NokiaConf_Configure_System_Security_Pki_EstProfile_HttpAuthentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Pki_EstProfile_Server represents the /nokia-conf/configure/system/security/pki/est-profile/server YANG schema element.
type NokiaConf_Configure_System_Security_Pki_EstProfile_Server struct {
	Fqdn *string `path:"fqdn" module:"nokia-conf"`
	Ipv4 *string `path:"ipv4" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Port *int32  `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Pki_EstProfile_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Pki_EstProfile_Server) IsYANGGoStruct() {}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_System_Security_Pki_EstProfile_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_Server) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_System_Security_Pki_EstProfile_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_Server) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_System_Security_Pki_EstProfile_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_Server) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_System_Security_Pki_EstProfile_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_Server) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 443
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Pki_EstProfile_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 443
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Pki_EstProfile_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Pki_EstProfile_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Pki_EstProfile_Server.
func (*NokiaConf_Configure_System_Security_Pki_EstProfile_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_PythonScript represents the /nokia-conf/configure/system/security/python-script YANG schema element.
type NokiaConf_Configure_System_Security_PythonScript struct {
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Authorization      *NokiaConf_Configure_System_Security_PythonScript_Authorization `path:"authorization" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_PythonScript implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_PythonScript) IsYANGGoStruct() {}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_PythonScript) GetOrCreateAuthorization() *NokiaConf_Configure_System_Security_PythonScript_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &NokiaConf_Configure_System_Security_PythonScript_Authorization{}
	return t.Authorization
}

// GetAuthorization returns the value of the Authorization struct pointer
// from NokiaConf_Configure_System_Security_PythonScript. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_PythonScript) GetAuthorization() *NokiaConf_Configure_System_Security_PythonScript_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_PythonScript) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_PythonScript) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_PythonScript
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_PythonScript) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Authorization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_PythonScript) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_PythonScript"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_PythonScript) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_PythonScript) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_PythonScript.
func (*NokiaConf_Configure_System_Security_PythonScript) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_PythonScript_Authorization represents the /nokia-conf/configure/system/security/python-script/authorization YANG schema element.
type NokiaConf_Configure_System_Security_PythonScript_Authorization struct {
	Cron         *NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron         `path:"cron" module:"nokia-conf"`
	EventHandler *NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler `path:"event-handler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_PythonScript_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_PythonScript_Authorization) IsYANGGoStruct() {}

// GetOrCreateCron retrieves the value of the Cron field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization) GetOrCreateCron() *NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron {
	if t.Cron != nil {
		return t.Cron
	}
	t.Cron = &NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron{}
	return t.Cron
}

// GetOrCreateEventHandler retrieves the value of the EventHandler field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization) GetOrCreateEventHandler() *NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler {
	if t.EventHandler != nil {
		return t.EventHandler
	}
	t.EventHandler = &NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler{}
	return t.EventHandler
}

// GetCron returns the value of the Cron struct pointer
// from NokiaConf_Configure_System_Security_PythonScript_Authorization. If the receiver or the field Cron is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization) GetCron() *NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron {
	if t != nil && t.Cron != nil {
		return t.Cron
	}
	return nil
}

// GetEventHandler returns the value of the EventHandler struct pointer
// from NokiaConf_Configure_System_Security_PythonScript_Authorization. If the receiver or the field EventHandler is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization) GetEventHandler() *NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler {
	if t != nil && t.EventHandler != nil {
		return t.EventHandler
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_PythonScript_Authorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cron.PopulateDefaults()
	t.EventHandler.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_PythonScript_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_PythonScript_Authorization.
func (*NokiaConf_Configure_System_Security_PythonScript_Authorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron represents the /nokia-conf/configure/system/security/python-script/authorization/cron YANG schema element.
type NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron struct {
	CliUser *string `path:"cli-user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron) IsYANGGoStruct() {}

// GetCliUser retrieves the value of the leaf CliUser from the NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliUser is set, it can
// safely use t.GetCliUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliUser == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron) GetCliUser() string {
	if t == nil || t.CliUser == nil {
		return ""
	}
	return *t.CliUser
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron.
func (*NokiaConf_Configure_System_Security_PythonScript_Authorization_Cron) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler represents the /nokia-conf/configure/system/security/python-script/authorization/event-handler YANG schema element.
type NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler struct {
	CliUser *string `path:"cli-user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler) IsYANGGoStruct() {
}

// GetCliUser retrieves the value of the leaf CliUser from the NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliUser is set, it can
// safely use t.GetCliUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliUser == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler) GetCliUser() string {
	if t == nil || t.CliUser == nil {
		return ""
	}
	return *t.CliUser
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler.
func (*NokiaConf_Configure_System_Security_PythonScript_Authorization_EventHandler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Snmp represents the /nokia-conf/configure/system/security/snmp YANG schema element.
type NokiaConf_Configure_System_Security_Snmp struct {
	Access             map[NokiaConf_Configure_System_Security_Snmp_Access_Key]*NokiaConf_Configure_System_Security_Snmp_Access `path:"access" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Attempts           *NokiaConf_Configure_System_Security_Snmp_Attempts                                                       `path:"attempts" module:"nokia-conf"`
	Community          map[string]*NokiaConf_Configure_System_Security_Snmp_Community                                           `path:"community" module:"nokia-conf"`
	SourceAccessList   map[string]*NokiaConf_Configure_System_Security_Snmp_SourceAccessList                                    `path:"source-access-list" module:"nokia-conf"`
	UsmCommunity       map[string]*NokiaConf_Configure_System_Security_Snmp_UsmCommunity                                        `path:"usm-community" module:"nokia-conf"`
	View               map[NokiaConf_Configure_System_Security_Snmp_View_Key]*NokiaConf_Configure_System_Security_Snmp_View     `path:"view" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Snmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Snmp) IsYANGGoStruct() {}

// NokiaConf_Configure_System_Security_Snmp_Access_Key represents the key for list Access of element /nokia-conf/configure/system/security/snmp.
type NokiaConf_Configure_System_Security_Snmp_Access_Key struct {
	Group         string                                                          `path:"group"`
	Context       string                                                          `path:"context"`
	SecurityModel E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityModel `path:"security-model"`
	SecurityLevel E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityLevel `path:"security-level"`
}

// NokiaConf_Configure_System_Security_Snmp_View_Key represents the key for list View of element /nokia-conf/configure/system/security/snmp.
type NokiaConf_Configure_System_Security_Snmp_View_Key struct {
	ViewName string `path:"view-name"`
	Subtree  string `path:"subtree"`
}

// NewAccess creates a new entry in the Access list of the
// NokiaConf_Configure_System_Security_Snmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Snmp) NewAccess(Group string, Context string, SecurityModel E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityModel, SecurityLevel E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityLevel) (*NokiaConf_Configure_System_Security_Snmp_Access, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Access == nil {
		t.Access = make(map[NokiaConf_Configure_System_Security_Snmp_Access_Key]*NokiaConf_Configure_System_Security_Snmp_Access)
	}

	key := NokiaConf_Configure_System_Security_Snmp_Access_Key{
		Group:         Group,
		Context:       Context,
		SecurityModel: SecurityModel,
		SecurityLevel: SecurityLevel,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Access[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Access", key)
	}

	t.Access[key] = &NokiaConf_Configure_System_Security_Snmp_Access{
		Group:         &Group,
		Context:       &Context,
		SecurityModel: SecurityModel,
		SecurityLevel: SecurityLevel,
	}

	return t.Access[key], nil
}

// RenameAccess renames an entry in the list Access within
// the NokiaConf_Configure_System_Security_Snmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Snmp) RenameAccess(oldK, newK NokiaConf_Configure_System_Security_Snmp_Access_Key) error {
	if _, ok := t.Access[newK]; ok {
		return fmt.Errorf("key %v already exists in Access", newK)
	}

	e, ok := t.Access[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Access", oldK)
	}
	e.Group = &newK.Group
	e.Context = &newK.Context
	e.SecurityModel = newK.SecurityModel
	e.SecurityLevel = newK.SecurityLevel

	t.Access[newK] = e
	delete(t.Access, oldK)
	return nil
}

// GetOrCreateAccess retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Snmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Snmp) GetOrCreateAccess(Group string, Context string, SecurityModel E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityModel, SecurityLevel E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityLevel) *NokiaConf_Configure_System_Security_Snmp_Access {

	key := NokiaConf_Configure_System_Security_Snmp_Access_Key{
		Group:         Group,
		Context:       Context,
		SecurityModel: SecurityModel,
		SecurityLevel: SecurityLevel,
	}

	if v, ok := t.Access[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAccess(Group, Context, SecurityModel, SecurityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAccess got unexpected error: %v", err))
	}
	return v
}

// GetAccess retrieves the value with the specified key from
// the Access map field of NokiaConf_Configure_System_Security_Snmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Snmp) GetAccess(Group string, Context string, SecurityModel E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityModel, SecurityLevel E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityLevel) *NokiaConf_Configure_System_Security_Snmp_Access {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_System_Security_Snmp_Access_Key{
		Group:         Group,
		Context:       Context,
		SecurityModel: SecurityModel,
		SecurityLevel: SecurityLevel,
	}

	if lm, ok := t.Access[key]; ok {
		return lm
	}
	return nil
}

// DeleteAccess deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Snmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Snmp) DeleteAccess(Group string, Context string, SecurityModel E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityModel, SecurityLevel E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityLevel) {
	key := NokiaConf_Configure_System_Security_Snmp_Access_Key{
		Group:         Group,
		Context:       Context,
		SecurityModel: SecurityModel,
		SecurityLevel: SecurityLevel,
	}

	delete(t.Access, key)
}

// AppendAccess appends the supplied NokiaConf_Configure_System_Security_Snmp_Access struct to the
// list Access of NokiaConf_Configure_System_Security_Snmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Snmp_Access already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Snmp) AppendAccess(v *NokiaConf_Configure_System_Security_Snmp_Access) error {
	if v.Group == nil {
		return fmt.Errorf("invalid nil key for Group")
	}

	if v.Context == nil {
		return fmt.Errorf("invalid nil key for Context")
	}

	key := NokiaConf_Configure_System_Security_Snmp_Access_Key{
		Group:         *v.Group,
		Context:       *v.Context,
		SecurityModel: v.SecurityModel,
		SecurityLevel: v.SecurityLevel,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Access == nil {
		t.Access = make(map[NokiaConf_Configure_System_Security_Snmp_Access_Key]*NokiaConf_Configure_System_Security_Snmp_Access)
	}

	if _, ok := t.Access[key]; ok {
		return fmt.Errorf("duplicate key for list Access %v", key)
	}

	t.Access[key] = v
	return nil
}

// NewCommunity creates a new entry in the Community list of the
// NokiaConf_Configure_System_Security_Snmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Snmp) NewCommunity(CommunityString string) (*NokiaConf_Configure_System_Security_Snmp_Community, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[string]*NokiaConf_Configure_System_Security_Snmp_Community)
	}

	key := CommunityString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Community[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Community", key)
	}

	t.Community[key] = &NokiaConf_Configure_System_Security_Snmp_Community{
		CommunityString: &CommunityString,
	}

	return t.Community[key], nil
}

// RenameCommunity renames an entry in the list Community within
// the NokiaConf_Configure_System_Security_Snmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Snmp) RenameCommunity(oldK, newK string) error {
	if _, ok := t.Community[newK]; ok {
		return fmt.Errorf("key %v already exists in Community", newK)
	}

	e, ok := t.Community[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Community", oldK)
	}
	e.CommunityString = &newK

	t.Community[newK] = e
	delete(t.Community, oldK)
	return nil
}

// GetOrCreateCommunity retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Snmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Snmp) GetOrCreateCommunity(CommunityString string) *NokiaConf_Configure_System_Security_Snmp_Community {

	key := CommunityString

	if v, ok := t.Community[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommunity(CommunityString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommunity got unexpected error: %v", err))
	}
	return v
}

// GetCommunity retrieves the value with the specified key from
// the Community map field of NokiaConf_Configure_System_Security_Snmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Snmp) GetCommunity(CommunityString string) *NokiaConf_Configure_System_Security_Snmp_Community {

	if t == nil {
		return nil
	}

	key := CommunityString

	if lm, ok := t.Community[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommunity deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Snmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Snmp) DeleteCommunity(CommunityString string) {
	key := CommunityString

	delete(t.Community, key)
}

// AppendCommunity appends the supplied NokiaConf_Configure_System_Security_Snmp_Community struct to the
// list Community of NokiaConf_Configure_System_Security_Snmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Snmp_Community already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Snmp) AppendCommunity(v *NokiaConf_Configure_System_Security_Snmp_Community) error {
	if v.CommunityString == nil {
		return fmt.Errorf("invalid nil key received for CommunityString")
	}

	key := *v.CommunityString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[string]*NokiaConf_Configure_System_Security_Snmp_Community)
	}

	if _, ok := t.Community[key]; ok {
		return fmt.Errorf("duplicate key for list Community %v", key)
	}

	t.Community[key] = v
	return nil
}

// NewSourceAccessList creates a new entry in the SourceAccessList list of the
// NokiaConf_Configure_System_Security_Snmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Snmp) NewSourceAccessList(ListName string) (*NokiaConf_Configure_System_Security_Snmp_SourceAccessList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceAccessList == nil {
		t.SourceAccessList = make(map[string]*NokiaConf_Configure_System_Security_Snmp_SourceAccessList)
	}

	key := ListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourceAccessList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourceAccessList", key)
	}

	t.SourceAccessList[key] = &NokiaConf_Configure_System_Security_Snmp_SourceAccessList{
		ListName: &ListName,
	}

	return t.SourceAccessList[key], nil
}

// RenameSourceAccessList renames an entry in the list SourceAccessList within
// the NokiaConf_Configure_System_Security_Snmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Snmp) RenameSourceAccessList(oldK, newK string) error {
	if _, ok := t.SourceAccessList[newK]; ok {
		return fmt.Errorf("key %v already exists in SourceAccessList", newK)
	}

	e, ok := t.SourceAccessList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourceAccessList", oldK)
	}
	e.ListName = &newK

	t.SourceAccessList[newK] = e
	delete(t.SourceAccessList, oldK)
	return nil
}

// GetOrCreateSourceAccessList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Snmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Snmp) GetOrCreateSourceAccessList(ListName string) *NokiaConf_Configure_System_Security_Snmp_SourceAccessList {

	key := ListName

	if v, ok := t.SourceAccessList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourceAccessList(ListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourceAccessList got unexpected error: %v", err))
	}
	return v
}

// GetSourceAccessList retrieves the value with the specified key from
// the SourceAccessList map field of NokiaConf_Configure_System_Security_Snmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Snmp) GetSourceAccessList(ListName string) *NokiaConf_Configure_System_Security_Snmp_SourceAccessList {

	if t == nil {
		return nil
	}

	key := ListName

	if lm, ok := t.SourceAccessList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourceAccessList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Snmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Snmp) DeleteSourceAccessList(ListName string) {
	key := ListName

	delete(t.SourceAccessList, key)
}

// AppendSourceAccessList appends the supplied NokiaConf_Configure_System_Security_Snmp_SourceAccessList struct to the
// list SourceAccessList of NokiaConf_Configure_System_Security_Snmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Snmp_SourceAccessList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Snmp) AppendSourceAccessList(v *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) error {
	if v.ListName == nil {
		return fmt.Errorf("invalid nil key received for ListName")
	}

	key := *v.ListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceAccessList == nil {
		t.SourceAccessList = make(map[string]*NokiaConf_Configure_System_Security_Snmp_SourceAccessList)
	}

	if _, ok := t.SourceAccessList[key]; ok {
		return fmt.Errorf("duplicate key for list SourceAccessList %v", key)
	}

	t.SourceAccessList[key] = v
	return nil
}

// NewUsmCommunity creates a new entry in the UsmCommunity list of the
// NokiaConf_Configure_System_Security_Snmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Snmp) NewUsmCommunity(CommunityString string) (*NokiaConf_Configure_System_Security_Snmp_UsmCommunity, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UsmCommunity == nil {
		t.UsmCommunity = make(map[string]*NokiaConf_Configure_System_Security_Snmp_UsmCommunity)
	}

	key := CommunityString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UsmCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UsmCommunity", key)
	}

	t.UsmCommunity[key] = &NokiaConf_Configure_System_Security_Snmp_UsmCommunity{
		CommunityString: &CommunityString,
	}

	return t.UsmCommunity[key], nil
}

// RenameUsmCommunity renames an entry in the list UsmCommunity within
// the NokiaConf_Configure_System_Security_Snmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Snmp) RenameUsmCommunity(oldK, newK string) error {
	if _, ok := t.UsmCommunity[newK]; ok {
		return fmt.Errorf("key %v already exists in UsmCommunity", newK)
	}

	e, ok := t.UsmCommunity[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UsmCommunity", oldK)
	}
	e.CommunityString = &newK

	t.UsmCommunity[newK] = e
	delete(t.UsmCommunity, oldK)
	return nil
}

// GetOrCreateUsmCommunity retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Snmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Snmp) GetOrCreateUsmCommunity(CommunityString string) *NokiaConf_Configure_System_Security_Snmp_UsmCommunity {

	key := CommunityString

	if v, ok := t.UsmCommunity[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUsmCommunity(CommunityString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUsmCommunity got unexpected error: %v", err))
	}
	return v
}

// GetUsmCommunity retrieves the value with the specified key from
// the UsmCommunity map field of NokiaConf_Configure_System_Security_Snmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Snmp) GetUsmCommunity(CommunityString string) *NokiaConf_Configure_System_Security_Snmp_UsmCommunity {

	if t == nil {
		return nil
	}

	key := CommunityString

	if lm, ok := t.UsmCommunity[key]; ok {
		return lm
	}
	return nil
}

// DeleteUsmCommunity deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Snmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Snmp) DeleteUsmCommunity(CommunityString string) {
	key := CommunityString

	delete(t.UsmCommunity, key)
}

// AppendUsmCommunity appends the supplied NokiaConf_Configure_System_Security_Snmp_UsmCommunity struct to the
// list UsmCommunity of NokiaConf_Configure_System_Security_Snmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Snmp_UsmCommunity already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Snmp) AppendUsmCommunity(v *NokiaConf_Configure_System_Security_Snmp_UsmCommunity) error {
	if v.CommunityString == nil {
		return fmt.Errorf("invalid nil key received for CommunityString")
	}

	key := *v.CommunityString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UsmCommunity == nil {
		t.UsmCommunity = make(map[string]*NokiaConf_Configure_System_Security_Snmp_UsmCommunity)
	}

	if _, ok := t.UsmCommunity[key]; ok {
		return fmt.Errorf("duplicate key for list UsmCommunity %v", key)
	}

	t.UsmCommunity[key] = v
	return nil
}

// NewView creates a new entry in the View list of the
// NokiaConf_Configure_System_Security_Snmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Snmp) NewView(ViewName string, Subtree string) (*NokiaConf_Configure_System_Security_Snmp_View, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.View == nil {
		t.View = make(map[NokiaConf_Configure_System_Security_Snmp_View_Key]*NokiaConf_Configure_System_Security_Snmp_View)
	}

	key := NokiaConf_Configure_System_Security_Snmp_View_Key{
		ViewName: ViewName,
		Subtree:  Subtree,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.View[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list View", key)
	}

	t.View[key] = &NokiaConf_Configure_System_Security_Snmp_View{
		ViewName: &ViewName,
		Subtree:  &Subtree,
	}

	return t.View[key], nil
}

// RenameView renames an entry in the list View within
// the NokiaConf_Configure_System_Security_Snmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Snmp) RenameView(oldK, newK NokiaConf_Configure_System_Security_Snmp_View_Key) error {
	if _, ok := t.View[newK]; ok {
		return fmt.Errorf("key %v already exists in View", newK)
	}

	e, ok := t.View[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in View", oldK)
	}
	e.ViewName = &newK.ViewName
	e.Subtree = &newK.Subtree

	t.View[newK] = e
	delete(t.View, oldK)
	return nil
}

// GetOrCreateView retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Snmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Snmp) GetOrCreateView(ViewName string, Subtree string) *NokiaConf_Configure_System_Security_Snmp_View {

	key := NokiaConf_Configure_System_Security_Snmp_View_Key{
		ViewName: ViewName,
		Subtree:  Subtree,
	}

	if v, ok := t.View[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewView(ViewName, Subtree)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateView got unexpected error: %v", err))
	}
	return v
}

// GetView retrieves the value with the specified key from
// the View map field of NokiaConf_Configure_System_Security_Snmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Snmp) GetView(ViewName string, Subtree string) *NokiaConf_Configure_System_Security_Snmp_View {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_System_Security_Snmp_View_Key{
		ViewName: ViewName,
		Subtree:  Subtree,
	}

	if lm, ok := t.View[key]; ok {
		return lm
	}
	return nil
}

// DeleteView deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Snmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Snmp) DeleteView(ViewName string, Subtree string) {
	key := NokiaConf_Configure_System_Security_Snmp_View_Key{
		ViewName: ViewName,
		Subtree:  Subtree,
	}

	delete(t.View, key)
}

// AppendView appends the supplied NokiaConf_Configure_System_Security_Snmp_View struct to the
// list View of NokiaConf_Configure_System_Security_Snmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Snmp_View already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Snmp) AppendView(v *NokiaConf_Configure_System_Security_Snmp_View) error {
	if v.ViewName == nil {
		return fmt.Errorf("invalid nil key for ViewName")
	}

	if v.Subtree == nil {
		return fmt.Errorf("invalid nil key for Subtree")
	}

	key := NokiaConf_Configure_System_Security_Snmp_View_Key{
		ViewName: *v.ViewName,
		Subtree:  *v.Subtree,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.View == nil {
		t.View = make(map[NokiaConf_Configure_System_Security_Snmp_View_Key]*NokiaConf_Configure_System_Security_Snmp_View)
	}

	if _, ok := t.View[key]; ok {
		return fmt.Errorf("duplicate key for list View %v", key)
	}

	t.View[key] = v
	return nil
}

// GetOrCreateAttempts retrieves the value of the Attempts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Snmp) GetOrCreateAttempts() *NokiaConf_Configure_System_Security_Snmp_Attempts {
	if t.Attempts != nil {
		return t.Attempts
	}
	t.Attempts = &NokiaConf_Configure_System_Security_Snmp_Attempts{}
	return t.Attempts
}

// GetAttempts returns the value of the Attempts struct pointer
// from NokiaConf_Configure_System_Security_Snmp. If the receiver or the field Attempts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Snmp) GetAttempts() *NokiaConf_Configure_System_Security_Snmp_Attempts {
	if t != nil && t.Attempts != nil {
		return t.Attempts
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Snmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Snmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Attempts.PopulateDefaults()
	for _, e := range t.Access {
		e.PopulateDefaults()
	}
	for _, e := range t.Community {
		e.PopulateDefaults()
	}
	for _, e := range t.SourceAccessList {
		e.PopulateDefaults()
	}
	for _, e := range t.UsmCommunity {
		e.PopulateDefaults()
	}
	for _, e := range t.View {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Snmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Snmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Snmp.
func (*NokiaConf_Configure_System_Security_Snmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Snmp_Access represents the /nokia-conf/configure/system/security/snmp/access YANG schema element.
type NokiaConf_Configure_System_Security_Snmp_Access struct {
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Context            *string                                                         `path:"context" module:"nokia-conf"`
	Group              *string                                                         `path:"group" module:"nokia-conf"`
	Notify             *string                                                         `path:"notify" module:"nokia-conf"`
	PrefixMatch        E_NokiaConf_Configure_System_Security_Snmp_Access_PrefixMatch   `path:"prefix-match" module:"nokia-conf"`
	Read               *string                                                         `path:"read" module:"nokia-conf"`
	SecurityLevel      E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityLevel `path:"security-level" module:"nokia-conf"`
	SecurityModel      E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityModel `path:"security-model" module:"nokia-conf"`
	Write              *string                                                         `path:"write" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Snmp_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Snmp_Access) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetContext retrieves the value of the leaf Context from the NokiaConf_Configure_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Context is set, it can
// safely use t.GetContext() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Context == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) GetContext() string {
	if t == nil || t.Context == nil {
		return ""
	}
	return *t.Context
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetNotify retrieves the value of the leaf Notify from the NokiaConf_Configure_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Notify is set, it can
// safely use t.GetNotify() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Notify == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) GetNotify() string {
	if t == nil || t.Notify == nil {
		return ""
	}
	return *t.Notify
}

// GetPrefixMatch retrieves the value of the leaf PrefixMatch from the NokiaConf_Configure_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixMatch is set, it can
// safely use t.GetPrefixMatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixMatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) GetPrefixMatch() E_NokiaConf_Configure_System_Security_Snmp_Access_PrefixMatch {
	if t == nil || t.PrefixMatch == 0 {
		return 0
	}
	return t.PrefixMatch
}

// GetRead retrieves the value of the leaf Read from the NokiaConf_Configure_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Read is set, it can
// safely use t.GetRead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Read == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) GetRead() string {
	if t == nil || t.Read == nil {
		return ""
	}
	return *t.Read
}

// GetSecurityLevel retrieves the value of the leaf SecurityLevel from the NokiaConf_Configure_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityLevel is set, it can
// safely use t.GetSecurityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) GetSecurityLevel() E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityLevel {
	if t == nil || t.SecurityLevel == 0 {
		return 0
	}
	return t.SecurityLevel
}

// GetSecurityModel retrieves the value of the leaf SecurityModel from the NokiaConf_Configure_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityModel is set, it can
// safely use t.GetSecurityModel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityModel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) GetSecurityModel() E_NokiaConf_Configure_System_Security_Snmp_Access_SecurityModel {
	if t == nil || t.SecurityModel == 0 {
		return 0
	}
	return t.SecurityModel
}

// GetWrite retrieves the value of the leaf Write from the NokiaConf_Configure_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Write is set, it can
// safely use t.GetWrite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Write == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) GetWrite() string {
	if t == nil || t.Write == nil {
		return ""
	}
	return *t.Write
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Snmp_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Snmp_Access struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Context == nil {
		return nil, fmt.Errorf("nil value for key Context")
	}

	if t.Group == nil {
		return nil, fmt.Errorf("nil value for key Group")
	}

	return map[string]interface{}{
		"context":        *t.Context,
		"group":          *t.Group,
		"security-level": t.SecurityLevel,
		"security-model": t.SecurityModel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Snmp_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Snmp_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Snmp_Access.
func (*NokiaConf_Configure_System_Security_Snmp_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Snmp_Attempts represents the /nokia-conf/configure/system/security/snmp/attempts YANG schema element.
type NokiaConf_Configure_System_Security_Snmp_Attempts struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Count              *uint16  `path:"count" module:"nokia-conf"`
	Lockout            *uint16  `path:"lockout" module:"nokia-conf"`
	Time               *uint16  `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Snmp_Attempts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Snmp_Attempts) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Snmp_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Attempts) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Snmp_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Attempts) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_System_Security_Snmp_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Attempts) GetCount() uint16 {
	if t == nil || t.Count == nil {
		return 20
	}
	return *t.Count
}

// GetLockout retrieves the value of the leaf Lockout from the NokiaConf_Configure_System_Security_Snmp_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lockout is set, it can
// safely use t.GetLockout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lockout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Attempts) GetLockout() uint16 {
	if t == nil || t.Lockout == nil {
		return 10
	}
	return *t.Lockout
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_System_Security_Snmp_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Attempts) GetTime() uint16 {
	if t == nil || t.Time == nil {
		return 5
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Snmp_Attempts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Snmp_Attempts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Count == nil {
		var v uint16 = 20
		t.Count = &v
	}
	if t.Lockout == nil {
		var v uint16 = 10
		t.Lockout = &v
	}
	if t.Time == nil {
		var v uint16 = 5
		t.Time = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_Attempts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Snmp_Attempts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_Attempts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Snmp_Attempts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Snmp_Attempts.
func (*NokiaConf_Configure_System_Security_Snmp_Attempts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Snmp_Community represents the /nokia-conf/configure/system/security/snmp/community YANG schema element.
type NokiaConf_Configure_System_Security_Snmp_Community struct {
	AccessPermissions  E_NokiaConf_Configure_System_Security_Snmp_Community_AccessPermissions `path:"access-permissions" module:"nokia-conf"`
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	CommunityString    *string                                                                `path:"community-string" module:"nokia-conf"`
	SourceAccessList   *string                                                                `path:"source-access-list" module:"nokia-conf"`
	Version            E_NokiaConf_Configure_System_Security_Snmp_Community_Version           `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Snmp_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Snmp_Community) IsYANGGoStruct() {}

// GetAccessPermissions retrieves the value of the leaf AccessPermissions from the NokiaConf_Configure_System_Security_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessPermissions is set, it can
// safely use t.GetAccessPermissions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessPermissions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Community) GetAccessPermissions() E_NokiaConf_Configure_System_Security_Snmp_Community_AccessPermissions {
	if t == nil || t.AccessPermissions == 0 {
		return 0
	}
	return t.AccessPermissions
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Community) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Community) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCommunityString retrieves the value of the leaf CommunityString from the NokiaConf_Configure_System_Security_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityString is set, it can
// safely use t.GetCommunityString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Community) GetCommunityString() string {
	if t == nil || t.CommunityString == nil {
		return ""
	}
	return *t.CommunityString
}

// GetSourceAccessList retrieves the value of the leaf SourceAccessList from the NokiaConf_Configure_System_Security_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAccessList is set, it can
// safely use t.GetSourceAccessList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAccessList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Community) GetSourceAccessList() string {
	if t == nil || t.SourceAccessList == nil {
		return ""
	}
	return *t.SourceAccessList
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_System_Security_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_Community) GetVersion() E_NokiaConf_Configure_System_Security_Snmp_Community_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_System_Security_Snmp_Community_Version_both
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Snmp_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Snmp_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_System_Security_Snmp_Community_Version_both
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Snmp_Community struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Snmp_Community) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityString == nil {
		return nil, fmt.Errorf("nil value for key CommunityString")
	}

	return map[string]interface{}{
		"community-string": *t.CommunityString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Snmp_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Snmp_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Snmp_Community.
func (*NokiaConf_Configure_System_Security_Snmp_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Snmp_SourceAccessList represents the /nokia-conf/configure/system/security/snmp/source-access-list YANG schema element.
type NokiaConf_Configure_System_Security_Snmp_SourceAccessList struct {
	ApplyGroups        []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	ListName           *string                                                                          `path:"list-name" module:"nokia-conf"`
	SourceHost         map[string]*NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost `path:"source-host" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Snmp_SourceAccessList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Snmp_SourceAccessList) IsYANGGoStruct() {}

// NewSourceHost creates a new entry in the SourceHost list of the
// NokiaConf_Configure_System_Security_Snmp_SourceAccessList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) NewSourceHost(HostName string) (*NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceHost == nil {
		t.SourceHost = make(map[string]*NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost)
	}

	key := HostName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourceHost[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourceHost", key)
	}

	t.SourceHost[key] = &NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost{
		HostName: &HostName,
	}

	return t.SourceHost[key], nil
}

// RenameSourceHost renames an entry in the list SourceHost within
// the NokiaConf_Configure_System_Security_Snmp_SourceAccessList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) RenameSourceHost(oldK, newK string) error {
	if _, ok := t.SourceHost[newK]; ok {
		return fmt.Errorf("key %v already exists in SourceHost", newK)
	}

	e, ok := t.SourceHost[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourceHost", oldK)
	}
	e.HostName = &newK

	t.SourceHost[newK] = e
	delete(t.SourceHost, oldK)
	return nil
}

// GetOrCreateSourceHost retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Snmp_SourceAccessList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) GetOrCreateSourceHost(HostName string) *NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost {

	key := HostName

	if v, ok := t.SourceHost[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourceHost(HostName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourceHost got unexpected error: %v", err))
	}
	return v
}

// GetSourceHost retrieves the value with the specified key from
// the SourceHost map field of NokiaConf_Configure_System_Security_Snmp_SourceAccessList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) GetSourceHost(HostName string) *NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost {

	if t == nil {
		return nil
	}

	key := HostName

	if lm, ok := t.SourceHost[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourceHost deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Snmp_SourceAccessList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) DeleteSourceHost(HostName string) {
	key := HostName

	delete(t.SourceHost, key)
}

// AppendSourceHost appends the supplied NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost struct to the
// list SourceHost of NokiaConf_Configure_System_Security_Snmp_SourceAccessList. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) AppendSourceHost(v *NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost) error {
	if v.HostName == nil {
		return fmt.Errorf("invalid nil key received for HostName")
	}

	key := *v.HostName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceHost == nil {
		t.SourceHost = make(map[string]*NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost)
	}

	if _, ok := t.SourceHost[key]; ok {
		return fmt.Errorf("duplicate key for list SourceHost %v", key)
	}

	t.SourceHost[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Snmp_SourceAccessList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Snmp_SourceAccessList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetListName retrieves the value of the leaf ListName from the NokiaConf_Configure_System_Security_Snmp_SourceAccessList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ListName is set, it can
// safely use t.GetListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) GetListName() string {
	if t == nil || t.ListName == nil {
		return ""
	}
	return *t.ListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Snmp_SourceAccessList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SourceHost {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Snmp_SourceAccessList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ListName == nil {
		return nil, fmt.Errorf("nil value for key ListName")
	}

	return map[string]interface{}{
		"list-name": *t.ListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Snmp_SourceAccessList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Snmp_SourceAccessList.
func (*NokiaConf_Configure_System_Security_Snmp_SourceAccessList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost represents the /nokia-conf/configure/system/security/snmp/source-access-list/source-host YANG schema element.
type NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	HostName           *string  `path:"host-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHostName retrieves the value of the leaf HostName from the NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostName is set, it can
// safely use t.GetHostName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost) GetHostName() string {
	if t == nil || t.HostName == nil {
		return ""
	}
	return *t.HostName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HostName == nil {
		return nil, fmt.Errorf("nil value for key HostName")
	}

	return map[string]interface{}{
		"host-name": *t.HostName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost.
func (*NokiaConf_Configure_System_Security_Snmp_SourceAccessList_SourceHost) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Snmp_UsmCommunity represents the /nokia-conf/configure/system/security/snmp/usm-community YANG schema element.
type NokiaConf_Configure_System_Security_Snmp_UsmCommunity struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CommunityString    *string  `path:"community-string" module:"nokia-conf"`
	Group              *string  `path:"group" module:"nokia-conf"`
	SourceAccessList   *string  `path:"source-access-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Snmp_UsmCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Snmp_UsmCommunity) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Snmp_UsmCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_UsmCommunity) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Snmp_UsmCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_UsmCommunity) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCommunityString retrieves the value of the leaf CommunityString from the NokiaConf_Configure_System_Security_Snmp_UsmCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityString is set, it can
// safely use t.GetCommunityString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_UsmCommunity) GetCommunityString() string {
	if t == nil || t.CommunityString == nil {
		return ""
	}
	return *t.CommunityString
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_System_Security_Snmp_UsmCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_UsmCommunity) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetSourceAccessList retrieves the value of the leaf SourceAccessList from the NokiaConf_Configure_System_Security_Snmp_UsmCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAccessList is set, it can
// safely use t.GetSourceAccessList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAccessList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_UsmCommunity) GetSourceAccessList() string {
	if t == nil || t.SourceAccessList == nil {
		return ""
	}
	return *t.SourceAccessList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Snmp_UsmCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Snmp_UsmCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Snmp_UsmCommunity struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Snmp_UsmCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityString == nil {
		return nil, fmt.Errorf("nil value for key CommunityString")
	}

	return map[string]interface{}{
		"community-string": *t.CommunityString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_UsmCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Snmp_UsmCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_UsmCommunity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Snmp_UsmCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Snmp_UsmCommunity.
func (*NokiaConf_Configure_System_Security_Snmp_UsmCommunity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Snmp_View represents the /nokia-conf/configure/system/security/snmp/view YANG schema element.
type NokiaConf_Configure_System_Security_Snmp_View struct {
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Mask               *string                                              `path:"mask" module:"nokia-conf"`
	Subtree            *string                                              `path:"subtree" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_System_Security_Snmp_View_Type `path:"type" module:"nokia-conf"`
	ViewName           *string                                              `path:"view-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Snmp_View implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Snmp_View) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Snmp_View
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_View) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Snmp_View
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_View) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_System_Security_Snmp_View
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_View) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// GetSubtree retrieves the value of the leaf Subtree from the NokiaConf_Configure_System_Security_Snmp_View
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtree is set, it can
// safely use t.GetSubtree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtree == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_View) GetSubtree() string {
	if t == nil || t.Subtree == nil {
		return ""
	}
	return *t.Subtree
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_System_Security_Snmp_View
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_View) GetType() E_NokiaConf_Configure_System_Security_Snmp_View_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetViewName retrieves the value of the leaf ViewName from the NokiaConf_Configure_System_Security_Snmp_View
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViewName is set, it can
// safely use t.GetViewName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViewName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Snmp_View) GetViewName() string {
	if t == nil || t.ViewName == nil {
		return ""
	}
	return *t.ViewName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Snmp_View
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Snmp_View) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Snmp_View struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Snmp_View) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Subtree == nil {
		return nil, fmt.Errorf("nil value for key Subtree")
	}

	if t.ViewName == nil {
		return nil, fmt.Errorf("nil value for key ViewName")
	}

	return map[string]interface{}{
		"subtree":   *t.Subtree,
		"view-name": *t.ViewName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_View) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Snmp_View"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Snmp_View) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Snmp_View) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Snmp_View.
func (*NokiaConf_Configure_System_Security_Snmp_View) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_SourceAddress represents the /nokia-conf/configure/system/security/source-address YANG schema element.
type NokiaConf_Configure_System_Security_SourceAddress struct {
	Ipv4 map[E_NokiaConf_Configure_System_Security_SourceAddress_Ipv4_Application]*NokiaConf_Configure_System_Security_SourceAddress_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 map[E_NokiaConf_Configure_System_Security_SourceAddress_Ipv6_Application]*NokiaConf_Configure_System_Security_SourceAddress_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_SourceAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_SourceAddress) IsYANGGoStruct() {}

// NewIpv4 creates a new entry in the Ipv4 list of the
// NokiaConf_Configure_System_Security_SourceAddress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_SourceAddress) NewIpv4(Application E_NokiaConf_Configure_System_Security_SourceAddress_Ipv4_Application) (*NokiaConf_Configure_System_Security_SourceAddress_Ipv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[E_NokiaConf_Configure_System_Security_SourceAddress_Ipv4_Application]*NokiaConf_Configure_System_Security_SourceAddress_Ipv4)
	}

	key := Application

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4", key)
	}

	t.Ipv4[key] = &NokiaConf_Configure_System_Security_SourceAddress_Ipv4{
		Application: Application,
	}

	return t.Ipv4[key], nil
}

// RenameIpv4 renames an entry in the list Ipv4 within
// the NokiaConf_Configure_System_Security_SourceAddress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_SourceAddress) RenameIpv4(oldK, newK E_NokiaConf_Configure_System_Security_SourceAddress_Ipv4_Application) error {
	if _, ok := t.Ipv4[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4", newK)
	}

	e, ok := t.Ipv4[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4", oldK)
	}
	e.Application = newK

	t.Ipv4[newK] = e
	delete(t.Ipv4, oldK)
	return nil
}

// GetOrCreateIpv4 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_SourceAddress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_SourceAddress) GetOrCreateIpv4(Application E_NokiaConf_Configure_System_Security_SourceAddress_Ipv4_Application) *NokiaConf_Configure_System_Security_SourceAddress_Ipv4 {

	key := Application

	if v, ok := t.Ipv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4(Application)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4 got unexpected error: %v", err))
	}
	return v
}

// GetIpv4 retrieves the value with the specified key from
// the Ipv4 map field of NokiaConf_Configure_System_Security_SourceAddress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_SourceAddress) GetIpv4(Application E_NokiaConf_Configure_System_Security_SourceAddress_Ipv4_Application) *NokiaConf_Configure_System_Security_SourceAddress_Ipv4 {

	if t == nil {
		return nil
	}

	key := Application

	if lm, ok := t.Ipv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_SourceAddress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_SourceAddress) DeleteIpv4(Application E_NokiaConf_Configure_System_Security_SourceAddress_Ipv4_Application) {
	key := Application

	delete(t.Ipv4, key)
}

// AppendIpv4 appends the supplied NokiaConf_Configure_System_Security_SourceAddress_Ipv4 struct to the
// list Ipv4 of NokiaConf_Configure_System_Security_SourceAddress. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_SourceAddress_Ipv4 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_SourceAddress) AppendIpv4(v *NokiaConf_Configure_System_Security_SourceAddress_Ipv4) error {
	key := v.Application

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[E_NokiaConf_Configure_System_Security_SourceAddress_Ipv4_Application]*NokiaConf_Configure_System_Security_SourceAddress_Ipv4)
	}

	if _, ok := t.Ipv4[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4 %v", key)
	}

	t.Ipv4[key] = v
	return nil
}

// NewIpv6 creates a new entry in the Ipv6 list of the
// NokiaConf_Configure_System_Security_SourceAddress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_SourceAddress) NewIpv6(Application E_NokiaConf_Configure_System_Security_SourceAddress_Ipv6_Application) (*NokiaConf_Configure_System_Security_SourceAddress_Ipv6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[E_NokiaConf_Configure_System_Security_SourceAddress_Ipv6_Application]*NokiaConf_Configure_System_Security_SourceAddress_Ipv6)
	}

	key := Application

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6", key)
	}

	t.Ipv6[key] = &NokiaConf_Configure_System_Security_SourceAddress_Ipv6{
		Application: Application,
	}

	return t.Ipv6[key], nil
}

// RenameIpv6 renames an entry in the list Ipv6 within
// the NokiaConf_Configure_System_Security_SourceAddress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_SourceAddress) RenameIpv6(oldK, newK E_NokiaConf_Configure_System_Security_SourceAddress_Ipv6_Application) error {
	if _, ok := t.Ipv6[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6", newK)
	}

	e, ok := t.Ipv6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6", oldK)
	}
	e.Application = newK

	t.Ipv6[newK] = e
	delete(t.Ipv6, oldK)
	return nil
}

// GetOrCreateIpv6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_SourceAddress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_SourceAddress) GetOrCreateIpv6(Application E_NokiaConf_Configure_System_Security_SourceAddress_Ipv6_Application) *NokiaConf_Configure_System_Security_SourceAddress_Ipv6 {

	key := Application

	if v, ok := t.Ipv6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6(Application)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6 got unexpected error: %v", err))
	}
	return v
}

// GetIpv6 retrieves the value with the specified key from
// the Ipv6 map field of NokiaConf_Configure_System_Security_SourceAddress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_SourceAddress) GetIpv6(Application E_NokiaConf_Configure_System_Security_SourceAddress_Ipv6_Application) *NokiaConf_Configure_System_Security_SourceAddress_Ipv6 {

	if t == nil {
		return nil
	}

	key := Application

	if lm, ok := t.Ipv6[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_SourceAddress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_SourceAddress) DeleteIpv6(Application E_NokiaConf_Configure_System_Security_SourceAddress_Ipv6_Application) {
	key := Application

	delete(t.Ipv6, key)
}

// AppendIpv6 appends the supplied NokiaConf_Configure_System_Security_SourceAddress_Ipv6 struct to the
// list Ipv6 of NokiaConf_Configure_System_Security_SourceAddress. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_SourceAddress_Ipv6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_SourceAddress) AppendIpv6(v *NokiaConf_Configure_System_Security_SourceAddress_Ipv6) error {
	key := v.Application

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[E_NokiaConf_Configure_System_Security_SourceAddress_Ipv6_Application]*NokiaConf_Configure_System_Security_SourceAddress_Ipv6)
	}

	if _, ok := t.Ipv6[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6 %v", key)
	}

	t.Ipv6[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_SourceAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_SourceAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4 {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_SourceAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_SourceAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_SourceAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_SourceAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_SourceAddress.
func (*NokiaConf_Configure_System_Security_SourceAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_SourceAddress_Ipv4 represents the /nokia-conf/configure/system/security/source-address/ipv4 YANG schema element.
type NokiaConf_Configure_System_Security_SourceAddress_Ipv4 struct {
	Address            *string                                                              `path:"address" module:"nokia-conf"`
	Application        E_NokiaConf_Configure_System_Security_SourceAddress_Ipv4_Application `path:"application" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	InterfaceName      *string                                                              `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_SourceAddress_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_SourceAddress_Ipv4) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv4) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplication retrieves the value of the leaf Application from the NokiaConf_Configure_System_Security_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Application is set, it can
// safely use t.GetApplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Application == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv4) GetApplication() E_NokiaConf_Configure_System_Security_SourceAddress_Ipv4_Application {
	if t == nil || t.Application == 0 {
		return 0
	}
	return t.Application
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_System_Security_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv4) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_SourceAddress_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_SourceAddress_Ipv4 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv4) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"application": t.Application,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_SourceAddress_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_SourceAddress_Ipv4.
func (*NokiaConf_Configure_System_Security_SourceAddress_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_SourceAddress_Ipv6 represents the /nokia-conf/configure/system/security/source-address/ipv6 YANG schema element.
type NokiaConf_Configure_System_Security_SourceAddress_Ipv6 struct {
	Address            *string                                                              `path:"address" module:"nokia-conf"`
	Application        E_NokiaConf_Configure_System_Security_SourceAddress_Ipv6_Application `path:"application" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_SourceAddress_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_SourceAddress_Ipv6) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Security_SourceAddress_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv6) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplication retrieves the value of the leaf Application from the NokiaConf_Configure_System_Security_SourceAddress_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Application is set, it can
// safely use t.GetApplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Application == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv6) GetApplication() E_NokiaConf_Configure_System_Security_SourceAddress_Ipv6_Application {
	if t == nil || t.Application == 0 {
		return 0
	}
	return t.Application
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_SourceAddress_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_SourceAddress_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_SourceAddress_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_SourceAddress_Ipv6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv6) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"application": t.Application,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_SourceAddress_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_SourceAddress_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_SourceAddress_Ipv6.
func (*NokiaConf_Configure_System_Security_SourceAddress_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh represents the /nokia-conf/configure/system/security/ssh YANG schema element.
type NokiaConf_Configure_System_Security_Ssh struct {
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	ClientCipherListV1 *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1 `path:"client-cipher-list-v1" module:"nokia-conf"`
	ClientCipherListV2 *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2 `path:"client-cipher-list-v2" module:"nokia-conf"`
	ClientKexListV2    *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2    `path:"client-kex-list-v2" module:"nokia-conf"`
	ClientMacListV2    *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2    `path:"client-mac-list-v2" module:"nokia-conf"`
	KeyReExchange      *NokiaConf_Configure_System_Security_Ssh_KeyReExchange      `path:"key-re-exchange" module:"nokia-conf"`
	PreserveKey        *bool                                                       `path:"preserve-key" module:"nokia-conf"`
	ServerAdminState   E_NokiaTypesSros_AdminState                                 `path:"server-admin-state" module:"nokia-conf"`
	ServerCipherListV1 *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1 `path:"server-cipher-list-v1" module:"nokia-conf"`
	ServerCipherListV2 *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2 `path:"server-cipher-list-v2" module:"nokia-conf"`
	ServerKexListV2    *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2    `path:"server-kex-list-v2" module:"nokia-conf"`
	ServerMacListV2    *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2    `path:"server-mac-list-v2" module:"nokia-conf"`
	Version            E_NokiaConf_Configure_System_Security_Ssh_Version           `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh) IsYANGGoStruct() {}

// GetOrCreateClientCipherListV1 retrieves the value of the ClientCipherListV1 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Ssh) GetOrCreateClientCipherListV1() *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1 {
	if t.ClientCipherListV1 != nil {
		return t.ClientCipherListV1
	}
	t.ClientCipherListV1 = &NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1{}
	return t.ClientCipherListV1
}

// GetOrCreateClientCipherListV2 retrieves the value of the ClientCipherListV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Ssh) GetOrCreateClientCipherListV2() *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2 {
	if t.ClientCipherListV2 != nil {
		return t.ClientCipherListV2
	}
	t.ClientCipherListV2 = &NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2{}
	return t.ClientCipherListV2
}

// GetOrCreateClientKexListV2 retrieves the value of the ClientKexListV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Ssh) GetOrCreateClientKexListV2() *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2 {
	if t.ClientKexListV2 != nil {
		return t.ClientKexListV2
	}
	t.ClientKexListV2 = &NokiaConf_Configure_System_Security_Ssh_ClientKexListV2{}
	return t.ClientKexListV2
}

// GetOrCreateClientMacListV2 retrieves the value of the ClientMacListV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Ssh) GetOrCreateClientMacListV2() *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2 {
	if t.ClientMacListV2 != nil {
		return t.ClientMacListV2
	}
	t.ClientMacListV2 = &NokiaConf_Configure_System_Security_Ssh_ClientMacListV2{}
	return t.ClientMacListV2
}

// GetOrCreateKeyReExchange retrieves the value of the KeyReExchange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Ssh) GetOrCreateKeyReExchange() *NokiaConf_Configure_System_Security_Ssh_KeyReExchange {
	if t.KeyReExchange != nil {
		return t.KeyReExchange
	}
	t.KeyReExchange = &NokiaConf_Configure_System_Security_Ssh_KeyReExchange{}
	return t.KeyReExchange
}

// GetOrCreateServerCipherListV1 retrieves the value of the ServerCipherListV1 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Ssh) GetOrCreateServerCipherListV1() *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1 {
	if t.ServerCipherListV1 != nil {
		return t.ServerCipherListV1
	}
	t.ServerCipherListV1 = &NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1{}
	return t.ServerCipherListV1
}

// GetOrCreateServerCipherListV2 retrieves the value of the ServerCipherListV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Ssh) GetOrCreateServerCipherListV2() *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2 {
	if t.ServerCipherListV2 != nil {
		return t.ServerCipherListV2
	}
	t.ServerCipherListV2 = &NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2{}
	return t.ServerCipherListV2
}

// GetOrCreateServerKexListV2 retrieves the value of the ServerKexListV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Ssh) GetOrCreateServerKexListV2() *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2 {
	if t.ServerKexListV2 != nil {
		return t.ServerKexListV2
	}
	t.ServerKexListV2 = &NokiaConf_Configure_System_Security_Ssh_ServerKexListV2{}
	return t.ServerKexListV2
}

// GetOrCreateServerMacListV2 retrieves the value of the ServerMacListV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Ssh) GetOrCreateServerMacListV2() *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2 {
	if t.ServerMacListV2 != nil {
		return t.ServerMacListV2
	}
	t.ServerMacListV2 = &NokiaConf_Configure_System_Security_Ssh_ServerMacListV2{}
	return t.ServerMacListV2
}

// GetClientCipherListV1 returns the value of the ClientCipherListV1 struct pointer
// from NokiaConf_Configure_System_Security_Ssh. If the receiver or the field ClientCipherListV1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh) GetClientCipherListV1() *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1 {
	if t != nil && t.ClientCipherListV1 != nil {
		return t.ClientCipherListV1
	}
	return nil
}

// GetClientCipherListV2 returns the value of the ClientCipherListV2 struct pointer
// from NokiaConf_Configure_System_Security_Ssh. If the receiver or the field ClientCipherListV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh) GetClientCipherListV2() *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2 {
	if t != nil && t.ClientCipherListV2 != nil {
		return t.ClientCipherListV2
	}
	return nil
}

// GetClientKexListV2 returns the value of the ClientKexListV2 struct pointer
// from NokiaConf_Configure_System_Security_Ssh. If the receiver or the field ClientKexListV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh) GetClientKexListV2() *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2 {
	if t != nil && t.ClientKexListV2 != nil {
		return t.ClientKexListV2
	}
	return nil
}

// GetClientMacListV2 returns the value of the ClientMacListV2 struct pointer
// from NokiaConf_Configure_System_Security_Ssh. If the receiver or the field ClientMacListV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh) GetClientMacListV2() *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2 {
	if t != nil && t.ClientMacListV2 != nil {
		return t.ClientMacListV2
	}
	return nil
}

// GetKeyReExchange returns the value of the KeyReExchange struct pointer
// from NokiaConf_Configure_System_Security_Ssh. If the receiver or the field KeyReExchange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh) GetKeyReExchange() *NokiaConf_Configure_System_Security_Ssh_KeyReExchange {
	if t != nil && t.KeyReExchange != nil {
		return t.KeyReExchange
	}
	return nil
}

// GetServerCipherListV1 returns the value of the ServerCipherListV1 struct pointer
// from NokiaConf_Configure_System_Security_Ssh. If the receiver or the field ServerCipherListV1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh) GetServerCipherListV1() *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1 {
	if t != nil && t.ServerCipherListV1 != nil {
		return t.ServerCipherListV1
	}
	return nil
}

// GetServerCipherListV2 returns the value of the ServerCipherListV2 struct pointer
// from NokiaConf_Configure_System_Security_Ssh. If the receiver or the field ServerCipherListV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh) GetServerCipherListV2() *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2 {
	if t != nil && t.ServerCipherListV2 != nil {
		return t.ServerCipherListV2
	}
	return nil
}

// GetServerKexListV2 returns the value of the ServerKexListV2 struct pointer
// from NokiaConf_Configure_System_Security_Ssh. If the receiver or the field ServerKexListV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh) GetServerKexListV2() *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2 {
	if t != nil && t.ServerKexListV2 != nil {
		return t.ServerKexListV2
	}
	return nil
}

// GetServerMacListV2 returns the value of the ServerMacListV2 struct pointer
// from NokiaConf_Configure_System_Security_Ssh. If the receiver or the field ServerMacListV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh) GetServerMacListV2() *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2 {
	if t != nil && t.ServerMacListV2 != nil {
		return t.ServerMacListV2
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPreserveKey retrieves the value of the leaf PreserveKey from the NokiaConf_Configure_System_Security_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreserveKey is set, it can
// safely use t.GetPreserveKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreserveKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh) GetPreserveKey() bool {
	if t == nil || t.PreserveKey == nil {
		return false
	}
	return *t.PreserveKey
}

// GetServerAdminState retrieves the value of the leaf ServerAdminState from the NokiaConf_Configure_System_Security_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerAdminState is set, it can
// safely use t.GetServerAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerAdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh) GetServerAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.ServerAdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.ServerAdminState
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_System_Security_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh) GetVersion() E_NokiaConf_Configure_System_Security_Ssh_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_System_Security_Ssh_Version_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreserveKey == nil {
		var v bool = false
		t.PreserveKey = &v
	}
	if t.ServerAdminState == 0 {
		t.ServerAdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_System_Security_Ssh_Version_2
	}
	t.ClientCipherListV1.PopulateDefaults()
	t.ClientCipherListV2.PopulateDefaults()
	t.ClientKexListV2.PopulateDefaults()
	t.ClientMacListV2.PopulateDefaults()
	t.KeyReExchange.PopulateDefaults()
	t.ServerCipherListV1.PopulateDefaults()
	t.ServerCipherListV2.PopulateDefaults()
	t.ServerKexListV2.PopulateDefaults()
	t.ServerMacListV2.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh.
func (*NokiaConf_Configure_System_Security_Ssh) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1 represents the /nokia-conf/configure/system/security/ssh/client-cipher-list-v1 YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1 struct {
	ApplyGroups        []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Cipher             map[int32]*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher `path:"cipher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) IsYANGGoStruct() {}

// NewCipher creates a new entry in the Cipher list of the
// NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) NewCipher(Index int32) (*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[int32]*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cipher", key)
	}

	t.Cipher[key] = &NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher{
		Index: &Index,
	}

	return t.Cipher[key], nil
}

// RenameCipher renames an entry in the list Cipher within
// the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) RenameCipher(oldK, newK int32) error {
	if _, ok := t.Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Cipher", newK)
	}

	e, ok := t.Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cipher", oldK)
	}
	e.Index = &newK

	t.Cipher[newK] = e
	delete(t.Cipher, oldK)
	return nil
}

// GetOrCreateCipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) GetOrCreateCipher(Index int32) *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher {

	key := Index

	if v, ok := t.Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCipher got unexpected error: %v", err))
	}
	return v
}

// GetCipher retrieves the value with the specified key from
// the Cipher map field of NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) GetCipher(Index int32) *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteCipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) DeleteCipher(Index int32) {
	key := Index

	delete(t.Cipher, key)
}

// AppendCipher appends the supplied NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher struct to the
// list Cipher of NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) AppendCipher(v *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[int32]*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher)
	}

	if _, ok := t.Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Cipher %v", key)
	}

	t.Cipher[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Cipher {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1.
func (*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher represents the /nokia-conf/configure/system/security/ssh/client-cipher-list-v1/cipher YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher struct {
	ApplyGroups        []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *int32                                                                   `path:"index" module:"nokia-conf"`
	Name               E_NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher) GetIndex() int32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher) GetName() E_NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher.
func (*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV1_Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2 represents the /nokia-conf/configure/system/security/ssh/client-cipher-list-v2 YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2 struct {
	ApplyGroups        []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Cipher             map[int32]*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher `path:"cipher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) IsYANGGoStruct() {}

// NewCipher creates a new entry in the Cipher list of the
// NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) NewCipher(Index int32) (*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[int32]*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cipher", key)
	}

	t.Cipher[key] = &NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher{
		Index: &Index,
	}

	return t.Cipher[key], nil
}

// RenameCipher renames an entry in the list Cipher within
// the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) RenameCipher(oldK, newK int32) error {
	if _, ok := t.Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Cipher", newK)
	}

	e, ok := t.Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cipher", oldK)
	}
	e.Index = &newK

	t.Cipher[newK] = e
	delete(t.Cipher, oldK)
	return nil
}

// GetOrCreateCipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) GetOrCreateCipher(Index int32) *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher {

	key := Index

	if v, ok := t.Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCipher got unexpected error: %v", err))
	}
	return v
}

// GetCipher retrieves the value with the specified key from
// the Cipher map field of NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) GetCipher(Index int32) *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteCipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) DeleteCipher(Index int32) {
	key := Index

	delete(t.Cipher, key)
}

// AppendCipher appends the supplied NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher struct to the
// list Cipher of NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) AppendCipher(v *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[int32]*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher)
	}

	if _, ok := t.Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Cipher %v", key)
	}

	t.Cipher[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Cipher {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2.
func (*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher represents the /nokia-conf/configure/system/security/ssh/client-cipher-list-v2/cipher YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher struct {
	ApplyGroups        []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *int32                                                                   `path:"index" module:"nokia-conf"`
	Name               E_NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher) GetIndex() int32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher) GetName() E_NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher.
func (*NokiaConf_Configure_System_Security_Ssh_ClientCipherListV2_Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ClientKexListV2 represents the /nokia-conf/configure/system/security/ssh/client-kex-list-v2 YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ClientKexListV2 struct {
	Kex map[uint32]*NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex `path:"kex" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ClientKexListV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ClientKexListV2) IsYANGGoStruct() {}

// NewKex creates a new entry in the Kex list of the
// NokiaConf_Configure_System_Security_Ssh_ClientKexListV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2) NewKex(Index uint32) (*NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Kex == nil {
		t.Kex = make(map[uint32]*NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Kex[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Kex", key)
	}

	t.Kex[key] = &NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex{
		Index: &Index,
	}

	return t.Kex[key], nil
}

// RenameKex renames an entry in the list Kex within
// the NokiaConf_Configure_System_Security_Ssh_ClientKexListV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2) RenameKex(oldK, newK uint32) error {
	if _, ok := t.Kex[newK]; ok {
		return fmt.Errorf("key %v already exists in Kex", newK)
	}

	e, ok := t.Kex[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Kex", oldK)
	}
	e.Index = &newK

	t.Kex[newK] = e
	delete(t.Kex, oldK)
	return nil
}

// GetOrCreateKex retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ClientKexListV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2) GetOrCreateKex(Index uint32) *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex {

	key := Index

	if v, ok := t.Kex[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKex(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKex got unexpected error: %v", err))
	}
	return v
}

// GetKex retrieves the value with the specified key from
// the Kex map field of NokiaConf_Configure_System_Security_Ssh_ClientKexListV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2) GetKex(Index uint32) *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Kex[key]; ok {
		return lm
	}
	return nil
}

// DeleteKex deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ClientKexListV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2) DeleteKex(Index uint32) {
	key := Index

	delete(t.Kex, key)
}

// AppendKex appends the supplied NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex struct to the
// list Kex of NokiaConf_Configure_System_Security_Ssh_ClientKexListV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2) AppendKex(v *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Kex == nil {
		t.Kex = make(map[uint32]*NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex)
	}

	if _, ok := t.Kex[key]; ok {
		return fmt.Errorf("duplicate key for list Kex %v", key)
	}

	t.Kex[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ClientKexListV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Kex {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ClientKexListV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ClientKexListV2.
func (*NokiaConf_Configure_System_Security_Ssh_ClientKexListV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex represents the /nokia-conf/configure/system/security/ssh/client-kex-list-v2/kex YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32                                                            `path:"index" module:"nokia-conf"`
	Name               E_NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex) GetName() E_NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex.
func (*NokiaConf_Configure_System_Security_Ssh_ClientKexListV2_Kex) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ClientMacListV2 represents the /nokia-conf/configure/system/security/ssh/client-mac-list-v2 YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ClientMacListV2 struct {
	Mac map[uint32]*NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ClientMacListV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ClientMacListV2) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_System_Security_Ssh_ClientMacListV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2) NewMac(Index uint32) (*NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[uint32]*NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac{
		Index: &Index,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_System_Security_Ssh_ClientMacListV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2) RenameMac(oldK, newK uint32) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.Index = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ClientMacListV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2) GetOrCreateMac(Index uint32) *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac {

	key := Index

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_System_Security_Ssh_ClientMacListV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2) GetMac(Index uint32) *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ClientMacListV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2) DeleteMac(Index uint32) {
	key := Index

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac struct to the
// list Mac of NokiaConf_Configure_System_Security_Ssh_ClientMacListV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2) AppendMac(v *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[uint32]*NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ClientMacListV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ClientMacListV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ClientMacListV2.
func (*NokiaConf_Configure_System_Security_Ssh_ClientMacListV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac represents the /nokia-conf/configure/system/security/ssh/client-mac-list-v2/mac YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32                                                            `path:"index" module:"nokia-conf"`
	Name               E_NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac) GetName() E_NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac.
func (*NokiaConf_Configure_System_Security_Ssh_ClientMacListV2_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_KeyReExchange represents the /nokia-conf/configure/system/security/ssh/key-re-exchange YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_KeyReExchange struct {
	Client *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client `path:"client" module:"nokia-conf"`
	Server *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_KeyReExchange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_KeyReExchange) IsYANGGoStruct() {}

// GetOrCreateClient retrieves the value of the Client field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange) GetOrCreateClient() *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client {
	if t.Client != nil {
		return t.Client
	}
	t.Client = &NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client{}
	return t.Client
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange) GetOrCreateServer() *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server{}
	return t.Server
}

// GetClient returns the value of the Client struct pointer
// from NokiaConf_Configure_System_Security_Ssh_KeyReExchange. If the receiver or the field Client is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange) GetClient() *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client {
	if t != nil && t.Client != nil {
		return t.Client
	}
	return nil
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_System_Security_Ssh_KeyReExchange. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange) GetServer() *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_KeyReExchange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Client.PopulateDefaults()
	t.Server.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_KeyReExchange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_KeyReExchange.
func (*NokiaConf_Configure_System_Security_Ssh_KeyReExchange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client represents the /nokia-conf/configure/system/security/ssh/key-re-exchange/client YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client struct {
	AdminState         E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Mbytes             NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client_Mbytes_Union  `path:"mbytes" module:"nokia-conf"`
	Minutes            NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client_Minutes_Union `path:"minutes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbytes retrieves the value of the leaf Mbytes from the NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbytes is set, it can
// safely use t.GetMbytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbytes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client) GetMbytes() NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client_Mbytes_Union {
	if t == nil || t.Mbytes == nil {
		return UnionUint32(1024)
	}
	return t.Mbytes
}

// GetMinutes retrieves the value of the leaf Minutes from the NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minutes is set, it can
// safely use t.GetMinutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client) GetMinutes() NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client_Minutes_Union {
	if t == nil || t.Minutes == nil {
		return UnionUint32(60)
	}
	return t.Minutes
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Mbytes == nil {
		t.Mbytes = UnionUint32(1024)
	}
	if t.Minutes == nil {
		t.Minutes = UnionUint32(60)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client.
func (*NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Client) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server represents the /nokia-conf/configure/system/security/ssh/key-re-exchange/server YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server struct {
	AdminState         E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Mbytes             NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server_Mbytes_Union  `path:"mbytes" module:"nokia-conf"`
	Minutes            NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server_Minutes_Union `path:"minutes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbytes retrieves the value of the leaf Mbytes from the NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbytes is set, it can
// safely use t.GetMbytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbytes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server) GetMbytes() NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server_Mbytes_Union {
	if t == nil || t.Mbytes == nil {
		return UnionUint32(1024)
	}
	return t.Mbytes
}

// GetMinutes retrieves the value of the leaf Minutes from the NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minutes is set, it can
// safely use t.GetMinutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server) GetMinutes() NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server_Minutes_Union {
	if t == nil || t.Minutes == nil {
		return UnionUint32(60)
	}
	return t.Minutes
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Mbytes == nil {
		t.Mbytes = UnionUint32(1024)
	}
	if t.Minutes == nil {
		t.Minutes = UnionUint32(60)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server.
func (*NokiaConf_Configure_System_Security_Ssh_KeyReExchange_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1 represents the /nokia-conf/configure/system/security/ssh/server-cipher-list-v1 YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1 struct {
	ApplyGroups        []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Cipher             map[int32]*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher `path:"cipher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) IsYANGGoStruct() {}

// NewCipher creates a new entry in the Cipher list of the
// NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) NewCipher(Index int32) (*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[int32]*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cipher", key)
	}

	t.Cipher[key] = &NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher{
		Index: &Index,
	}

	return t.Cipher[key], nil
}

// RenameCipher renames an entry in the list Cipher within
// the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) RenameCipher(oldK, newK int32) error {
	if _, ok := t.Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Cipher", newK)
	}

	e, ok := t.Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cipher", oldK)
	}
	e.Index = &newK

	t.Cipher[newK] = e
	delete(t.Cipher, oldK)
	return nil
}

// GetOrCreateCipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) GetOrCreateCipher(Index int32) *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher {

	key := Index

	if v, ok := t.Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCipher got unexpected error: %v", err))
	}
	return v
}

// GetCipher retrieves the value with the specified key from
// the Cipher map field of NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) GetCipher(Index int32) *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteCipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) DeleteCipher(Index int32) {
	key := Index

	delete(t.Cipher, key)
}

// AppendCipher appends the supplied NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher struct to the
// list Cipher of NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) AppendCipher(v *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[int32]*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher)
	}

	if _, ok := t.Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Cipher %v", key)
	}

	t.Cipher[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Cipher {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1.
func (*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher represents the /nokia-conf/configure/system/security/ssh/server-cipher-list-v1/cipher YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher struct {
	ApplyGroups        []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *int32                                                                   `path:"index" module:"nokia-conf"`
	Name               E_NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher) GetIndex() int32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher) GetName() E_NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher.
func (*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV1_Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2 represents the /nokia-conf/configure/system/security/ssh/server-cipher-list-v2 YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2 struct {
	ApplyGroups        []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Cipher             map[int32]*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher `path:"cipher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) IsYANGGoStruct() {}

// NewCipher creates a new entry in the Cipher list of the
// NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) NewCipher(Index int32) (*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[int32]*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cipher", key)
	}

	t.Cipher[key] = &NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher{
		Index: &Index,
	}

	return t.Cipher[key], nil
}

// RenameCipher renames an entry in the list Cipher within
// the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) RenameCipher(oldK, newK int32) error {
	if _, ok := t.Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Cipher", newK)
	}

	e, ok := t.Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cipher", oldK)
	}
	e.Index = &newK

	t.Cipher[newK] = e
	delete(t.Cipher, oldK)
	return nil
}

// GetOrCreateCipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) GetOrCreateCipher(Index int32) *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher {

	key := Index

	if v, ok := t.Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCipher got unexpected error: %v", err))
	}
	return v
}

// GetCipher retrieves the value with the specified key from
// the Cipher map field of NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) GetCipher(Index int32) *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteCipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) DeleteCipher(Index int32) {
	key := Index

	delete(t.Cipher, key)
}

// AppendCipher appends the supplied NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher struct to the
// list Cipher of NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) AppendCipher(v *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[int32]*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher)
	}

	if _, ok := t.Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Cipher %v", key)
	}

	t.Cipher[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Cipher {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2.
func (*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher represents the /nokia-conf/configure/system/security/ssh/server-cipher-list-v2/cipher YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher struct {
	ApplyGroups        []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *int32                                                                   `path:"index" module:"nokia-conf"`
	Name               E_NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher) GetIndex() int32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher) GetName() E_NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher.
func (*NokiaConf_Configure_System_Security_Ssh_ServerCipherListV2_Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ServerKexListV2 represents the /nokia-conf/configure/system/security/ssh/server-kex-list-v2 YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ServerKexListV2 struct {
	Kex map[uint32]*NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex `path:"kex" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ServerKexListV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ServerKexListV2) IsYANGGoStruct() {}

// NewKex creates a new entry in the Kex list of the
// NokiaConf_Configure_System_Security_Ssh_ServerKexListV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2) NewKex(Index uint32) (*NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Kex == nil {
		t.Kex = make(map[uint32]*NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Kex[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Kex", key)
	}

	t.Kex[key] = &NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex{
		Index: &Index,
	}

	return t.Kex[key], nil
}

// RenameKex renames an entry in the list Kex within
// the NokiaConf_Configure_System_Security_Ssh_ServerKexListV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2) RenameKex(oldK, newK uint32) error {
	if _, ok := t.Kex[newK]; ok {
		return fmt.Errorf("key %v already exists in Kex", newK)
	}

	e, ok := t.Kex[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Kex", oldK)
	}
	e.Index = &newK

	t.Kex[newK] = e
	delete(t.Kex, oldK)
	return nil
}

// GetOrCreateKex retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ServerKexListV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2) GetOrCreateKex(Index uint32) *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex {

	key := Index

	if v, ok := t.Kex[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKex(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKex got unexpected error: %v", err))
	}
	return v
}

// GetKex retrieves the value with the specified key from
// the Kex map field of NokiaConf_Configure_System_Security_Ssh_ServerKexListV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2) GetKex(Index uint32) *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Kex[key]; ok {
		return lm
	}
	return nil
}

// DeleteKex deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ServerKexListV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2) DeleteKex(Index uint32) {
	key := Index

	delete(t.Kex, key)
}

// AppendKex appends the supplied NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex struct to the
// list Kex of NokiaConf_Configure_System_Security_Ssh_ServerKexListV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2) AppendKex(v *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Kex == nil {
		t.Kex = make(map[uint32]*NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex)
	}

	if _, ok := t.Kex[key]; ok {
		return fmt.Errorf("duplicate key for list Kex %v", key)
	}

	t.Kex[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ServerKexListV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Kex {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ServerKexListV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ServerKexListV2.
func (*NokiaConf_Configure_System_Security_Ssh_ServerKexListV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex represents the /nokia-conf/configure/system/security/ssh/server-kex-list-v2/kex YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32                                                            `path:"index" module:"nokia-conf"`
	Name               E_NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex) GetName() E_NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex.
func (*NokiaConf_Configure_System_Security_Ssh_ServerKexListV2_Kex) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ServerMacListV2 represents the /nokia-conf/configure/system/security/ssh/server-mac-list-v2 YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ServerMacListV2 struct {
	Mac map[uint32]*NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ServerMacListV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ServerMacListV2) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_System_Security_Ssh_ServerMacListV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2) NewMac(Index uint32) (*NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[uint32]*NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac{
		Index: &Index,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_System_Security_Ssh_ServerMacListV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2) RenameMac(oldK, newK uint32) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.Index = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ServerMacListV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2) GetOrCreateMac(Index uint32) *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac {

	key := Index

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_System_Security_Ssh_ServerMacListV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2) GetMac(Index uint32) *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Ssh_ServerMacListV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2) DeleteMac(Index uint32) {
	key := Index

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac struct to the
// list Mac of NokiaConf_Configure_System_Security_Ssh_ServerMacListV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2) AppendMac(v *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[uint32]*NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ServerMacListV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ServerMacListV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ServerMacListV2.
func (*NokiaConf_Configure_System_Security_Ssh_ServerMacListV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac represents the /nokia-conf/configure/system/security/ssh/server-mac-list-v2/mac YANG schema element.
type NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32                                                            `path:"index" module:"nokia-conf"`
	Name               E_NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac) GetName() E_NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac.
func (*NokiaConf_Configure_System_Security_Ssh_ServerMacListV2_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_SystemPasswords represents the /nokia-conf/configure/system/security/system-passwords YANG schema element.
type NokiaConf_Configure_System_Security_SystemPasswords struct {
	AdminPassword      *string  `path:"admin-password" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	VsdPassword        *string  `path:"vsd-password" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_SystemPasswords implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_SystemPasswords) IsYANGGoStruct() {}

// GetAdminPassword retrieves the value of the leaf AdminPassword from the NokiaConf_Configure_System_Security_SystemPasswords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminPassword is set, it can
// safely use t.GetAdminPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminPassword == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SystemPasswords) GetAdminPassword() string {
	if t == nil || t.AdminPassword == nil {
		return ""
	}
	return *t.AdminPassword
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_SystemPasswords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SystemPasswords) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_SystemPasswords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SystemPasswords) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetVsdPassword retrieves the value of the leaf VsdPassword from the NokiaConf_Configure_System_Security_SystemPasswords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VsdPassword is set, it can
// safely use t.GetVsdPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VsdPassword == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_SystemPasswords) GetVsdPassword() string {
	if t == nil || t.VsdPassword == nil {
		return ""
	}
	return *t.VsdPassword
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_SystemPasswords
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_SystemPasswords) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_SystemPasswords) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_SystemPasswords"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_SystemPasswords) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_SystemPasswords) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_SystemPasswords.
func (*NokiaConf_Configure_System_Security_SystemPasswords) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_TechSupport represents the /nokia-conf/configure/system/security/tech-support YANG schema element.
type NokiaConf_Configure_System_Security_TechSupport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	TsLocation         *string  `path:"ts-location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_TechSupport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_TechSupport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_TechSupport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_TechSupport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_TechSupport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_TechSupport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetTsLocation retrieves the value of the leaf TsLocation from the NokiaConf_Configure_System_Security_TechSupport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TsLocation is set, it can
// safely use t.GetTsLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TsLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_TechSupport) GetTsLocation() string {
	if t == nil || t.TsLocation == nil {
		return ""
	}
	return *t.TsLocation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_TechSupport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_TechSupport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_TechSupport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_TechSupport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_TechSupport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_TechSupport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_TechSupport.
func (*NokiaConf_Configure_System_Security_TechSupport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls represents the /nokia-conf/configure/system/security/tls YANG schema element.
type NokiaConf_Configure_System_Security_Tls struct {
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	CertProfile        map[string]*NokiaConf_Configure_System_Security_Tls_CertProfile        `path:"cert-profile" module:"nokia-conf"`
	ClientCipherList   map[string]*NokiaConf_Configure_System_Security_Tls_ClientCipherList   `path:"client-cipher-list" module:"nokia-conf"`
	ClientTlsProfile   map[string]*NokiaConf_Configure_System_Security_Tls_ClientTlsProfile   `path:"client-tls-profile" module:"nokia-conf"`
	ServerCipherList   map[string]*NokiaConf_Configure_System_Security_Tls_ServerCipherList   `path:"server-cipher-list" module:"nokia-conf"`
	ServerTlsProfile   map[string]*NokiaConf_Configure_System_Security_Tls_ServerTlsProfile   `path:"server-tls-profile" module:"nokia-conf"`
	TrustAnchorProfile map[string]*NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile `path:"trust-anchor-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls) IsYANGGoStruct() {}

// NewCertProfile creates a new entry in the CertProfile list of the
// NokiaConf_Configure_System_Security_Tls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls) NewCertProfile(CertProfileName string) (*NokiaConf_Configure_System_Security_Tls_CertProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CertProfile == nil {
		t.CertProfile = make(map[string]*NokiaConf_Configure_System_Security_Tls_CertProfile)
	}

	key := CertProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CertProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CertProfile", key)
	}

	t.CertProfile[key] = &NokiaConf_Configure_System_Security_Tls_CertProfile{
		CertProfileName: &CertProfileName,
	}

	return t.CertProfile[key], nil
}

// RenameCertProfile renames an entry in the list CertProfile within
// the NokiaConf_Configure_System_Security_Tls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls) RenameCertProfile(oldK, newK string) error {
	if _, ok := t.CertProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in CertProfile", newK)
	}

	e, ok := t.CertProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CertProfile", oldK)
	}
	e.CertProfileName = &newK

	t.CertProfile[newK] = e
	delete(t.CertProfile, oldK)
	return nil
}

// GetOrCreateCertProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls) GetOrCreateCertProfile(CertProfileName string) *NokiaConf_Configure_System_Security_Tls_CertProfile {

	key := CertProfileName

	if v, ok := t.CertProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCertProfile(CertProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCertProfile got unexpected error: %v", err))
	}
	return v
}

// GetCertProfile retrieves the value with the specified key from
// the CertProfile map field of NokiaConf_Configure_System_Security_Tls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls) GetCertProfile(CertProfileName string) *NokiaConf_Configure_System_Security_Tls_CertProfile {

	if t == nil {
		return nil
	}

	key := CertProfileName

	if lm, ok := t.CertProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteCertProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls) DeleteCertProfile(CertProfileName string) {
	key := CertProfileName

	delete(t.CertProfile, key)
}

// AppendCertProfile appends the supplied NokiaConf_Configure_System_Security_Tls_CertProfile struct to the
// list CertProfile of NokiaConf_Configure_System_Security_Tls. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_CertProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls) AppendCertProfile(v *NokiaConf_Configure_System_Security_Tls_CertProfile) error {
	if v.CertProfileName == nil {
		return fmt.Errorf("invalid nil key received for CertProfileName")
	}

	key := *v.CertProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CertProfile == nil {
		t.CertProfile = make(map[string]*NokiaConf_Configure_System_Security_Tls_CertProfile)
	}

	if _, ok := t.CertProfile[key]; ok {
		return fmt.Errorf("duplicate key for list CertProfile %v", key)
	}

	t.CertProfile[key] = v
	return nil
}

// NewClientCipherList creates a new entry in the ClientCipherList list of the
// NokiaConf_Configure_System_Security_Tls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls) NewClientCipherList(ClientCipherListName string) (*NokiaConf_Configure_System_Security_Tls_ClientCipherList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClientCipherList == nil {
		t.ClientCipherList = make(map[string]*NokiaConf_Configure_System_Security_Tls_ClientCipherList)
	}

	key := ClientCipherListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ClientCipherList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ClientCipherList", key)
	}

	t.ClientCipherList[key] = &NokiaConf_Configure_System_Security_Tls_ClientCipherList{
		ClientCipherListName: &ClientCipherListName,
	}

	return t.ClientCipherList[key], nil
}

// RenameClientCipherList renames an entry in the list ClientCipherList within
// the NokiaConf_Configure_System_Security_Tls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls) RenameClientCipherList(oldK, newK string) error {
	if _, ok := t.ClientCipherList[newK]; ok {
		return fmt.Errorf("key %v already exists in ClientCipherList", newK)
	}

	e, ok := t.ClientCipherList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ClientCipherList", oldK)
	}
	e.ClientCipherListName = &newK

	t.ClientCipherList[newK] = e
	delete(t.ClientCipherList, oldK)
	return nil
}

// GetOrCreateClientCipherList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls) GetOrCreateClientCipherList(ClientCipherListName string) *NokiaConf_Configure_System_Security_Tls_ClientCipherList {

	key := ClientCipherListName

	if v, ok := t.ClientCipherList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClientCipherList(ClientCipherListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClientCipherList got unexpected error: %v", err))
	}
	return v
}

// GetClientCipherList retrieves the value with the specified key from
// the ClientCipherList map field of NokiaConf_Configure_System_Security_Tls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls) GetClientCipherList(ClientCipherListName string) *NokiaConf_Configure_System_Security_Tls_ClientCipherList {

	if t == nil {
		return nil
	}

	key := ClientCipherListName

	if lm, ok := t.ClientCipherList[key]; ok {
		return lm
	}
	return nil
}

// DeleteClientCipherList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls) DeleteClientCipherList(ClientCipherListName string) {
	key := ClientCipherListName

	delete(t.ClientCipherList, key)
}

// AppendClientCipherList appends the supplied NokiaConf_Configure_System_Security_Tls_ClientCipherList struct to the
// list ClientCipherList of NokiaConf_Configure_System_Security_Tls. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_ClientCipherList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls) AppendClientCipherList(v *NokiaConf_Configure_System_Security_Tls_ClientCipherList) error {
	if v.ClientCipherListName == nil {
		return fmt.Errorf("invalid nil key received for ClientCipherListName")
	}

	key := *v.ClientCipherListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClientCipherList == nil {
		t.ClientCipherList = make(map[string]*NokiaConf_Configure_System_Security_Tls_ClientCipherList)
	}

	if _, ok := t.ClientCipherList[key]; ok {
		return fmt.Errorf("duplicate key for list ClientCipherList %v", key)
	}

	t.ClientCipherList[key] = v
	return nil
}

// NewClientTlsProfile creates a new entry in the ClientTlsProfile list of the
// NokiaConf_Configure_System_Security_Tls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls) NewClientTlsProfile(ClientProfileName string) (*NokiaConf_Configure_System_Security_Tls_ClientTlsProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClientTlsProfile == nil {
		t.ClientTlsProfile = make(map[string]*NokiaConf_Configure_System_Security_Tls_ClientTlsProfile)
	}

	key := ClientProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ClientTlsProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ClientTlsProfile", key)
	}

	t.ClientTlsProfile[key] = &NokiaConf_Configure_System_Security_Tls_ClientTlsProfile{
		ClientProfileName: &ClientProfileName,
	}

	return t.ClientTlsProfile[key], nil
}

// RenameClientTlsProfile renames an entry in the list ClientTlsProfile within
// the NokiaConf_Configure_System_Security_Tls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls) RenameClientTlsProfile(oldK, newK string) error {
	if _, ok := t.ClientTlsProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in ClientTlsProfile", newK)
	}

	e, ok := t.ClientTlsProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ClientTlsProfile", oldK)
	}
	e.ClientProfileName = &newK

	t.ClientTlsProfile[newK] = e
	delete(t.ClientTlsProfile, oldK)
	return nil
}

// GetOrCreateClientTlsProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls) GetOrCreateClientTlsProfile(ClientProfileName string) *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile {

	key := ClientProfileName

	if v, ok := t.ClientTlsProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClientTlsProfile(ClientProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClientTlsProfile got unexpected error: %v", err))
	}
	return v
}

// GetClientTlsProfile retrieves the value with the specified key from
// the ClientTlsProfile map field of NokiaConf_Configure_System_Security_Tls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls) GetClientTlsProfile(ClientProfileName string) *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile {

	if t == nil {
		return nil
	}

	key := ClientProfileName

	if lm, ok := t.ClientTlsProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteClientTlsProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls) DeleteClientTlsProfile(ClientProfileName string) {
	key := ClientProfileName

	delete(t.ClientTlsProfile, key)
}

// AppendClientTlsProfile appends the supplied NokiaConf_Configure_System_Security_Tls_ClientTlsProfile struct to the
// list ClientTlsProfile of NokiaConf_Configure_System_Security_Tls. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_ClientTlsProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls) AppendClientTlsProfile(v *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) error {
	if v.ClientProfileName == nil {
		return fmt.Errorf("invalid nil key received for ClientProfileName")
	}

	key := *v.ClientProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClientTlsProfile == nil {
		t.ClientTlsProfile = make(map[string]*NokiaConf_Configure_System_Security_Tls_ClientTlsProfile)
	}

	if _, ok := t.ClientTlsProfile[key]; ok {
		return fmt.Errorf("duplicate key for list ClientTlsProfile %v", key)
	}

	t.ClientTlsProfile[key] = v
	return nil
}

// NewServerCipherList creates a new entry in the ServerCipherList list of the
// NokiaConf_Configure_System_Security_Tls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls) NewServerCipherList(ServerCipherListName string) (*NokiaConf_Configure_System_Security_Tls_ServerCipherList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerCipherList == nil {
		t.ServerCipherList = make(map[string]*NokiaConf_Configure_System_Security_Tls_ServerCipherList)
	}

	key := ServerCipherListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerCipherList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerCipherList", key)
	}

	t.ServerCipherList[key] = &NokiaConf_Configure_System_Security_Tls_ServerCipherList{
		ServerCipherListName: &ServerCipherListName,
	}

	return t.ServerCipherList[key], nil
}

// RenameServerCipherList renames an entry in the list ServerCipherList within
// the NokiaConf_Configure_System_Security_Tls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls) RenameServerCipherList(oldK, newK string) error {
	if _, ok := t.ServerCipherList[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerCipherList", newK)
	}

	e, ok := t.ServerCipherList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerCipherList", oldK)
	}
	e.ServerCipherListName = &newK

	t.ServerCipherList[newK] = e
	delete(t.ServerCipherList, oldK)
	return nil
}

// GetOrCreateServerCipherList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls) GetOrCreateServerCipherList(ServerCipherListName string) *NokiaConf_Configure_System_Security_Tls_ServerCipherList {

	key := ServerCipherListName

	if v, ok := t.ServerCipherList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerCipherList(ServerCipherListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerCipherList got unexpected error: %v", err))
	}
	return v
}

// GetServerCipherList retrieves the value with the specified key from
// the ServerCipherList map field of NokiaConf_Configure_System_Security_Tls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls) GetServerCipherList(ServerCipherListName string) *NokiaConf_Configure_System_Security_Tls_ServerCipherList {

	if t == nil {
		return nil
	}

	key := ServerCipherListName

	if lm, ok := t.ServerCipherList[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerCipherList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls) DeleteServerCipherList(ServerCipherListName string) {
	key := ServerCipherListName

	delete(t.ServerCipherList, key)
}

// AppendServerCipherList appends the supplied NokiaConf_Configure_System_Security_Tls_ServerCipherList struct to the
// list ServerCipherList of NokiaConf_Configure_System_Security_Tls. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_ServerCipherList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls) AppendServerCipherList(v *NokiaConf_Configure_System_Security_Tls_ServerCipherList) error {
	if v.ServerCipherListName == nil {
		return fmt.Errorf("invalid nil key received for ServerCipherListName")
	}

	key := *v.ServerCipherListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerCipherList == nil {
		t.ServerCipherList = make(map[string]*NokiaConf_Configure_System_Security_Tls_ServerCipherList)
	}

	if _, ok := t.ServerCipherList[key]; ok {
		return fmt.Errorf("duplicate key for list ServerCipherList %v", key)
	}

	t.ServerCipherList[key] = v
	return nil
}

// NewServerTlsProfile creates a new entry in the ServerTlsProfile list of the
// NokiaConf_Configure_System_Security_Tls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls) NewServerTlsProfile(ServerProfileName string) (*NokiaConf_Configure_System_Security_Tls_ServerTlsProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerTlsProfile == nil {
		t.ServerTlsProfile = make(map[string]*NokiaConf_Configure_System_Security_Tls_ServerTlsProfile)
	}

	key := ServerProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerTlsProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerTlsProfile", key)
	}

	t.ServerTlsProfile[key] = &NokiaConf_Configure_System_Security_Tls_ServerTlsProfile{
		ServerProfileName: &ServerProfileName,
	}

	return t.ServerTlsProfile[key], nil
}

// RenameServerTlsProfile renames an entry in the list ServerTlsProfile within
// the NokiaConf_Configure_System_Security_Tls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls) RenameServerTlsProfile(oldK, newK string) error {
	if _, ok := t.ServerTlsProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerTlsProfile", newK)
	}

	e, ok := t.ServerTlsProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerTlsProfile", oldK)
	}
	e.ServerProfileName = &newK

	t.ServerTlsProfile[newK] = e
	delete(t.ServerTlsProfile, oldK)
	return nil
}

// GetOrCreateServerTlsProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls) GetOrCreateServerTlsProfile(ServerProfileName string) *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile {

	key := ServerProfileName

	if v, ok := t.ServerTlsProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerTlsProfile(ServerProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerTlsProfile got unexpected error: %v", err))
	}
	return v
}

// GetServerTlsProfile retrieves the value with the specified key from
// the ServerTlsProfile map field of NokiaConf_Configure_System_Security_Tls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls) GetServerTlsProfile(ServerProfileName string) *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile {

	if t == nil {
		return nil
	}

	key := ServerProfileName

	if lm, ok := t.ServerTlsProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerTlsProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls) DeleteServerTlsProfile(ServerProfileName string) {
	key := ServerProfileName

	delete(t.ServerTlsProfile, key)
}

// AppendServerTlsProfile appends the supplied NokiaConf_Configure_System_Security_Tls_ServerTlsProfile struct to the
// list ServerTlsProfile of NokiaConf_Configure_System_Security_Tls. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_ServerTlsProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls) AppendServerTlsProfile(v *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) error {
	if v.ServerProfileName == nil {
		return fmt.Errorf("invalid nil key received for ServerProfileName")
	}

	key := *v.ServerProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerTlsProfile == nil {
		t.ServerTlsProfile = make(map[string]*NokiaConf_Configure_System_Security_Tls_ServerTlsProfile)
	}

	if _, ok := t.ServerTlsProfile[key]; ok {
		return fmt.Errorf("duplicate key for list ServerTlsProfile %v", key)
	}

	t.ServerTlsProfile[key] = v
	return nil
}

// NewTrustAnchorProfile creates a new entry in the TrustAnchorProfile list of the
// NokiaConf_Configure_System_Security_Tls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls) NewTrustAnchorProfile(TrustAnchorProfileName string) (*NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustAnchorProfile == nil {
		t.TrustAnchorProfile = make(map[string]*NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile)
	}

	key := TrustAnchorProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrustAnchorProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrustAnchorProfile", key)
	}

	t.TrustAnchorProfile[key] = &NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile{
		TrustAnchorProfileName: &TrustAnchorProfileName,
	}

	return t.TrustAnchorProfile[key], nil
}

// RenameTrustAnchorProfile renames an entry in the list TrustAnchorProfile within
// the NokiaConf_Configure_System_Security_Tls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls) RenameTrustAnchorProfile(oldK, newK string) error {
	if _, ok := t.TrustAnchorProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in TrustAnchorProfile", newK)
	}

	e, ok := t.TrustAnchorProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrustAnchorProfile", oldK)
	}
	e.TrustAnchorProfileName = &newK

	t.TrustAnchorProfile[newK] = e
	delete(t.TrustAnchorProfile, oldK)
	return nil
}

// GetOrCreateTrustAnchorProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls) GetOrCreateTrustAnchorProfile(TrustAnchorProfileName string) *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile {

	key := TrustAnchorProfileName

	if v, ok := t.TrustAnchorProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrustAnchorProfile(TrustAnchorProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrustAnchorProfile got unexpected error: %v", err))
	}
	return v
}

// GetTrustAnchorProfile retrieves the value with the specified key from
// the TrustAnchorProfile map field of NokiaConf_Configure_System_Security_Tls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls) GetTrustAnchorProfile(TrustAnchorProfileName string) *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile {

	if t == nil {
		return nil
	}

	key := TrustAnchorProfileName

	if lm, ok := t.TrustAnchorProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrustAnchorProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls) DeleteTrustAnchorProfile(TrustAnchorProfileName string) {
	key := TrustAnchorProfileName

	delete(t.TrustAnchorProfile, key)
}

// AppendTrustAnchorProfile appends the supplied NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile struct to the
// list TrustAnchorProfile of NokiaConf_Configure_System_Security_Tls. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls) AppendTrustAnchorProfile(v *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) error {
	if v.TrustAnchorProfileName == nil {
		return fmt.Errorf("invalid nil key received for TrustAnchorProfileName")
	}

	key := *v.TrustAnchorProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustAnchorProfile == nil {
		t.TrustAnchorProfile = make(map[string]*NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile)
	}

	if _, ok := t.TrustAnchorProfile[key]; ok {
		return fmt.Errorf("duplicate key for list TrustAnchorProfile %v", key)
	}

	t.TrustAnchorProfile[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Tls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Tls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.CertProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.ClientCipherList {
		e.PopulateDefaults()
	}
	for _, e := range t.ClientTlsProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.ServerCipherList {
		e.PopulateDefaults()
	}
	for _, e := range t.ServerTlsProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.TrustAnchorProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls.
func (*NokiaConf_Configure_System_Security_Tls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_CertProfile represents the /nokia-conf/configure/system/security/tls/cert-profile YANG schema element.
type NokiaConf_Configure_System_Security_Tls_CertProfile struct {
	AdminState         E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	CertProfileName    *string                                                              `path:"cert-profile-name" module:"nokia-conf"`
	Entry              map[int32]*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_CertProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_CertProfile) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_System_Security_Tls_CertProfile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) NewEntry(EntryId int32) (*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[int32]*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_System_Security_Tls_CertProfile_Entry{
		EntryId: &EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_System_Security_Tls_CertProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) RenameEntry(oldK, newK int32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_CertProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) GetOrCreateEntry(EntryId int32) *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_System_Security_Tls_CertProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) GetEntry(EntryId int32) *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_CertProfile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) DeleteEntry(EntryId int32) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_System_Security_Tls_CertProfile_Entry struct to the
// list Entry of NokiaConf_Configure_System_Security_Tls_CertProfile. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_CertProfile_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) AppendEntry(v *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) error {
	if v.EntryId == nil {
		return fmt.Errorf("invalid nil key received for EntryId")
	}

	key := *v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[int32]*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Tls_CertProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Tls_CertProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Tls_CertProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCertProfileName retrieves the value of the leaf CertProfileName from the NokiaConf_Configure_System_Security_Tls_CertProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfileName is set, it can
// safely use t.GetCertProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) GetCertProfileName() string {
	if t == nil || t.CertProfileName == nil {
		return ""
	}
	return *t.CertProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_CertProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_CertProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CertProfileName == nil {
		return nil, fmt.Errorf("nil value for key CertProfileName")
	}

	return map[string]interface{}{
		"cert-profile-name": *t.CertProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_CertProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_CertProfile.
func (*NokiaConf_Configure_System_Security_Tls_CertProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_CertProfile_Entry represents the /nokia-conf/configure/system/security/tls/cert-profile/entry YANG schema element.
type NokiaConf_Configure_System_Security_Tls_CertProfile_Entry struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	CertificateFile    *string                                                              `path:"certificate-file" module:"nokia-conf"`
	EntryId            *int32                                                               `path:"entry-id" module:"nokia-conf"`
	KeyFile            *string                                                              `path:"key-file" module:"nokia-conf"`
	SendChain          *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain `path:"send-chain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_CertProfile_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) IsYANGGoStruct() {}

// GetOrCreateSendChain retrieves the value of the SendChain field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) GetOrCreateSendChain() *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain {
	if t.SendChain != nil {
		return t.SendChain
	}
	t.SendChain = &NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain{}
	return t.SendChain
}

// GetSendChain returns the value of the SendChain struct pointer
// from NokiaConf_Configure_System_Security_Tls_CertProfile_Entry. If the receiver or the field SendChain is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) GetSendChain() *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain {
	if t != nil && t.SendChain != nil {
		return t.SendChain
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Tls_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Tls_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCertificateFile retrieves the value of the leaf CertificateFile from the NokiaConf_Configure_System_Security_Tls_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateFile is set, it can
// safely use t.GetCertificateFile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateFile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) GetCertificateFile() string {
	if t == nil || t.CertificateFile == nil {
		return ""
	}
	return *t.CertificateFile
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_System_Security_Tls_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) GetEntryId() int32 {
	if t == nil || t.EntryId == nil {
		return 0
	}
	return *t.EntryId
}

// GetKeyFile retrieves the value of the leaf KeyFile from the NokiaConf_Configure_System_Security_Tls_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyFile is set, it can
// safely use t.GetKeyFile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyFile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) GetKeyFile() string {
	if t == nil || t.KeyFile == nil {
		return ""
	}
	return *t.KeyFile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_CertProfile_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SendChain.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_CertProfile_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EntryId == nil {
		return nil, fmt.Errorf("nil value for key EntryId")
	}

	return map[string]interface{}{
		"entry-id": *t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_CertProfile_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_CertProfile_Entry.
func (*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain represents the /nokia-conf/configure/system/security/tls/cert-profile/entry/send-chain YANG schema element.
type NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain struct {
	CaProfile map[string]*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile `path:"ca-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain) IsYANGGoStruct() {}

// NewCaProfile creates a new entry in the CaProfile list of the
// NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain) NewCaProfile(CaProfileName string) (*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CaProfile == nil {
		t.CaProfile = make(map[string]*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile)
	}

	key := CaProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CaProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CaProfile", key)
	}

	t.CaProfile[key] = &NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile{
		CaProfileName: &CaProfileName,
	}

	return t.CaProfile[key], nil
}

// RenameCaProfile renames an entry in the list CaProfile within
// the NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain) RenameCaProfile(oldK, newK string) error {
	if _, ok := t.CaProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in CaProfile", newK)
	}

	e, ok := t.CaProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CaProfile", oldK)
	}
	e.CaProfileName = &newK

	t.CaProfile[newK] = e
	delete(t.CaProfile, oldK)
	return nil
}

// GetOrCreateCaProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain) GetOrCreateCaProfile(CaProfileName string) *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile {

	key := CaProfileName

	if v, ok := t.CaProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCaProfile(CaProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCaProfile got unexpected error: %v", err))
	}
	return v
}

// GetCaProfile retrieves the value with the specified key from
// the CaProfile map field of NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain) GetCaProfile(CaProfileName string) *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile {

	if t == nil {
		return nil
	}

	key := CaProfileName

	if lm, ok := t.CaProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteCaProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain) DeleteCaProfile(CaProfileName string) {
	key := CaProfileName

	delete(t.CaProfile, key)
}

// AppendCaProfile appends the supplied NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile struct to the
// list CaProfile of NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain) AppendCaProfile(v *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) error {
	if v.CaProfileName == nil {
		return fmt.Errorf("invalid nil key received for CaProfileName")
	}

	key := *v.CaProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CaProfile == nil {
		t.CaProfile = make(map[string]*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile)
	}

	if _, ok := t.CaProfile[key]; ok {
		return fmt.Errorf("duplicate key for list CaProfile %v", key)
	}

	t.CaProfile[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.CaProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain.
func (*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile represents the /nokia-conf/configure/system/security/tls/cert-profile/entry/send-chain/ca-profile YANG schema element.
type NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile struct {
	CaProfileName *string `path:"ca-profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) IsYANGGoStruct() {
}

// GetCaProfileName retrieves the value of the leaf CaProfileName from the NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaProfileName is set, it can
// safely use t.GetCaProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) GetCaProfileName() string {
	if t == nil || t.CaProfileName == nil {
		return ""
	}
	return *t.CaProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CaProfileName == nil {
		return nil, fmt.Errorf("nil value for key CaProfileName")
	}

	return map[string]interface{}{
		"ca-profile-name": *t.CaProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile.
func (*NokiaConf_Configure_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_ClientCipherList represents the /nokia-conf/configure/system/security/tls/client-cipher-list YANG schema element.
type NokiaConf_Configure_System_Security_Tls_ClientCipherList struct {
	ApplyGroups          []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Cipher               map[uint32]*NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher      `path:"cipher" module:"nokia-conf"`
	ClientCipherListName *string                                                                          `path:"client-cipher-list-name" module:"nokia-conf"`
	Tls12Cipher          map[uint32]*NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher `path:"tls12-cipher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_ClientCipherList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_ClientCipherList) IsYANGGoStruct() {}

// NewCipher creates a new entry in the Cipher list of the
// NokiaConf_Configure_System_Security_Tls_ClientCipherList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) NewCipher(Index uint32) (*NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[uint32]*NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cipher", key)
	}

	t.Cipher[key] = &NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher{
		Index: &Index,
	}

	return t.Cipher[key], nil
}

// RenameCipher renames an entry in the list Cipher within
// the NokiaConf_Configure_System_Security_Tls_ClientCipherList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) RenameCipher(oldK, newK uint32) error {
	if _, ok := t.Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Cipher", newK)
	}

	e, ok := t.Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cipher", oldK)
	}
	e.Index = &newK

	t.Cipher[newK] = e
	delete(t.Cipher, oldK)
	return nil
}

// GetOrCreateCipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_ClientCipherList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) GetOrCreateCipher(Index uint32) *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher {

	key := Index

	if v, ok := t.Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCipher got unexpected error: %v", err))
	}
	return v
}

// GetCipher retrieves the value with the specified key from
// the Cipher map field of NokiaConf_Configure_System_Security_Tls_ClientCipherList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) GetCipher(Index uint32) *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteCipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_ClientCipherList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) DeleteCipher(Index uint32) {
	key := Index

	delete(t.Cipher, key)
}

// AppendCipher appends the supplied NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher struct to the
// list Cipher of NokiaConf_Configure_System_Security_Tls_ClientCipherList. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) AppendCipher(v *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[uint32]*NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher)
	}

	if _, ok := t.Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Cipher %v", key)
	}

	t.Cipher[key] = v
	return nil
}

// NewTls12Cipher creates a new entry in the Tls12Cipher list of the
// NokiaConf_Configure_System_Security_Tls_ClientCipherList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) NewTls12Cipher(Index uint32) (*NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tls12Cipher == nil {
		t.Tls12Cipher = make(map[uint32]*NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tls12Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tls12Cipher", key)
	}

	t.Tls12Cipher[key] = &NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher{
		Index: &Index,
	}

	return t.Tls12Cipher[key], nil
}

// RenameTls12Cipher renames an entry in the list Tls12Cipher within
// the NokiaConf_Configure_System_Security_Tls_ClientCipherList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) RenameTls12Cipher(oldK, newK uint32) error {
	if _, ok := t.Tls12Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Tls12Cipher", newK)
	}

	e, ok := t.Tls12Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tls12Cipher", oldK)
	}
	e.Index = &newK

	t.Tls12Cipher[newK] = e
	delete(t.Tls12Cipher, oldK)
	return nil
}

// GetOrCreateTls12Cipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_ClientCipherList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) GetOrCreateTls12Cipher(Index uint32) *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher {

	key := Index

	if v, ok := t.Tls12Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTls12Cipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTls12Cipher got unexpected error: %v", err))
	}
	return v
}

// GetTls12Cipher retrieves the value with the specified key from
// the Tls12Cipher map field of NokiaConf_Configure_System_Security_Tls_ClientCipherList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) GetTls12Cipher(Index uint32) *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Tls12Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteTls12Cipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_ClientCipherList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) DeleteTls12Cipher(Index uint32) {
	key := Index

	delete(t.Tls12Cipher, key)
}

// AppendTls12Cipher appends the supplied NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher struct to the
// list Tls12Cipher of NokiaConf_Configure_System_Security_Tls_ClientCipherList. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) AppendTls12Cipher(v *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tls12Cipher == nil {
		t.Tls12Cipher = make(map[uint32]*NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher)
	}

	if _, ok := t.Tls12Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Tls12Cipher %v", key)
	}

	t.Tls12Cipher[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Tls_ClientCipherList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Tls_ClientCipherList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClientCipherListName retrieves the value of the leaf ClientCipherListName from the NokiaConf_Configure_System_Security_Tls_ClientCipherList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientCipherListName is set, it can
// safely use t.GetClientCipherListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientCipherListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) GetClientCipherListName() string {
	if t == nil || t.ClientCipherListName == nil {
		return ""
	}
	return *t.ClientCipherListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_ClientCipherList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Cipher {
		e.PopulateDefaults()
	}
	for _, e := range t.Tls12Cipher {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_ClientCipherList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClientCipherListName == nil {
		return nil, fmt.Errorf("nil value for key ClientCipherListName")
	}

	return map[string]interface{}{
		"client-cipher-list-name": *t.ClientCipherListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_ClientCipherList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_ClientCipherList.
func (*NokiaConf_Configure_System_Security_Tls_ClientCipherList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher represents the /nokia-conf/configure/system/security/tls/client-cipher-list/cipher YANG schema element.
type NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher struct {
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32                                                                `path:"index" module:"nokia-conf"`
	Name               E_NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher) GetName() E_NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher.
func (*NokiaConf_Configure_System_Security_Tls_ClientCipherList_Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher represents the /nokia-conf/configure/system/security/tls/client-cipher-list/tls12-cipher YANG schema element.
type NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher struct {
	ApplyGroups        []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32                                                                     `path:"index" module:"nokia-conf"`
	Name               E_NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher) GetName() E_NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher.
func (*NokiaConf_Configure_System_Security_Tls_ClientCipherList_Tls12Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_ClientTlsProfile represents the /nokia-conf/configure/system/security/tls/client-tls-profile YANG schema element.
type NokiaConf_Configure_System_Security_Tls_ClientTlsProfile struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	CertProfile        *string                     `path:"cert-profile" module:"nokia-conf"`
	CipherList         *string                     `path:"cipher-list" module:"nokia-conf"`
	ClientProfileName  *string                     `path:"client-profile-name" module:"nokia-conf"`
	TrustAnchorProfile *string                     `path:"trust-anchor-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_ClientTlsProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Tls_ClientTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Tls_ClientTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Tls_ClientTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCertProfile retrieves the value of the leaf CertProfile from the NokiaConf_Configure_System_Security_Tls_ClientTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfile is set, it can
// safely use t.GetCertProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) GetCertProfile() string {
	if t == nil || t.CertProfile == nil {
		return ""
	}
	return *t.CertProfile
}

// GetCipherList retrieves the value of the leaf CipherList from the NokiaConf_Configure_System_Security_Tls_ClientTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CipherList is set, it can
// safely use t.GetCipherList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CipherList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) GetCipherList() string {
	if t == nil || t.CipherList == nil {
		return ""
	}
	return *t.CipherList
}

// GetClientProfileName retrieves the value of the leaf ClientProfileName from the NokiaConf_Configure_System_Security_Tls_ClientTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientProfileName is set, it can
// safely use t.GetClientProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) GetClientProfileName() string {
	if t == nil || t.ClientProfileName == nil {
		return ""
	}
	return *t.ClientProfileName
}

// GetTrustAnchorProfile retrieves the value of the leaf TrustAnchorProfile from the NokiaConf_Configure_System_Security_Tls_ClientTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrustAnchorProfile is set, it can
// safely use t.GetTrustAnchorProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrustAnchorProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) GetTrustAnchorProfile() string {
	if t == nil || t.TrustAnchorProfile == nil {
		return ""
	}
	return *t.TrustAnchorProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_ClientTlsProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_ClientTlsProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClientProfileName == nil {
		return nil, fmt.Errorf("nil value for key ClientProfileName")
	}

	return map[string]interface{}{
		"client-profile-name": *t.ClientProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_ClientTlsProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_ClientTlsProfile.
func (*NokiaConf_Configure_System_Security_Tls_ClientTlsProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_ServerCipherList represents the /nokia-conf/configure/system/security/tls/server-cipher-list YANG schema element.
type NokiaConf_Configure_System_Security_Tls_ServerCipherList struct {
	ApplyGroups          []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Cipher               map[uint32]*NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher      `path:"cipher" module:"nokia-conf"`
	ServerCipherListName *string                                                                          `path:"server-cipher-list-name" module:"nokia-conf"`
	Tls12Cipher          map[uint32]*NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher `path:"tls12-cipher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_ServerCipherList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_ServerCipherList) IsYANGGoStruct() {}

// NewCipher creates a new entry in the Cipher list of the
// NokiaConf_Configure_System_Security_Tls_ServerCipherList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) NewCipher(Index uint32) (*NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[uint32]*NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cipher", key)
	}

	t.Cipher[key] = &NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher{
		Index: &Index,
	}

	return t.Cipher[key], nil
}

// RenameCipher renames an entry in the list Cipher within
// the NokiaConf_Configure_System_Security_Tls_ServerCipherList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) RenameCipher(oldK, newK uint32) error {
	if _, ok := t.Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Cipher", newK)
	}

	e, ok := t.Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cipher", oldK)
	}
	e.Index = &newK

	t.Cipher[newK] = e
	delete(t.Cipher, oldK)
	return nil
}

// GetOrCreateCipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_ServerCipherList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) GetOrCreateCipher(Index uint32) *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher {

	key := Index

	if v, ok := t.Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCipher got unexpected error: %v", err))
	}
	return v
}

// GetCipher retrieves the value with the specified key from
// the Cipher map field of NokiaConf_Configure_System_Security_Tls_ServerCipherList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) GetCipher(Index uint32) *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteCipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_ServerCipherList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) DeleteCipher(Index uint32) {
	key := Index

	delete(t.Cipher, key)
}

// AppendCipher appends the supplied NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher struct to the
// list Cipher of NokiaConf_Configure_System_Security_Tls_ServerCipherList. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) AppendCipher(v *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[uint32]*NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher)
	}

	if _, ok := t.Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Cipher %v", key)
	}

	t.Cipher[key] = v
	return nil
}

// NewTls12Cipher creates a new entry in the Tls12Cipher list of the
// NokiaConf_Configure_System_Security_Tls_ServerCipherList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) NewTls12Cipher(Index uint32) (*NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tls12Cipher == nil {
		t.Tls12Cipher = make(map[uint32]*NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tls12Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tls12Cipher", key)
	}

	t.Tls12Cipher[key] = &NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher{
		Index: &Index,
	}

	return t.Tls12Cipher[key], nil
}

// RenameTls12Cipher renames an entry in the list Tls12Cipher within
// the NokiaConf_Configure_System_Security_Tls_ServerCipherList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) RenameTls12Cipher(oldK, newK uint32) error {
	if _, ok := t.Tls12Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Tls12Cipher", newK)
	}

	e, ok := t.Tls12Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tls12Cipher", oldK)
	}
	e.Index = &newK

	t.Tls12Cipher[newK] = e
	delete(t.Tls12Cipher, oldK)
	return nil
}

// GetOrCreateTls12Cipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_ServerCipherList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) GetOrCreateTls12Cipher(Index uint32) *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher {

	key := Index

	if v, ok := t.Tls12Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTls12Cipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTls12Cipher got unexpected error: %v", err))
	}
	return v
}

// GetTls12Cipher retrieves the value with the specified key from
// the Tls12Cipher map field of NokiaConf_Configure_System_Security_Tls_ServerCipherList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) GetTls12Cipher(Index uint32) *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Tls12Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteTls12Cipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_ServerCipherList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) DeleteTls12Cipher(Index uint32) {
	key := Index

	delete(t.Tls12Cipher, key)
}

// AppendTls12Cipher appends the supplied NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher struct to the
// list Tls12Cipher of NokiaConf_Configure_System_Security_Tls_ServerCipherList. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) AppendTls12Cipher(v *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tls12Cipher == nil {
		t.Tls12Cipher = make(map[uint32]*NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher)
	}

	if _, ok := t.Tls12Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Tls12Cipher %v", key)
	}

	t.Tls12Cipher[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Tls_ServerCipherList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Tls_ServerCipherList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetServerCipherListName retrieves the value of the leaf ServerCipherListName from the NokiaConf_Configure_System_Security_Tls_ServerCipherList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerCipherListName is set, it can
// safely use t.GetServerCipherListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerCipherListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) GetServerCipherListName() string {
	if t == nil || t.ServerCipherListName == nil {
		return ""
	}
	return *t.ServerCipherListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_ServerCipherList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Cipher {
		e.PopulateDefaults()
	}
	for _, e := range t.Tls12Cipher {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_ServerCipherList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServerCipherListName == nil {
		return nil, fmt.Errorf("nil value for key ServerCipherListName")
	}

	return map[string]interface{}{
		"server-cipher-list-name": *t.ServerCipherListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_ServerCipherList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_ServerCipherList.
func (*NokiaConf_Configure_System_Security_Tls_ServerCipherList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher represents the /nokia-conf/configure/system/security/tls/server-cipher-list/cipher YANG schema element.
type NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher struct {
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32                                                                `path:"index" module:"nokia-conf"`
	Name               E_NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher) GetName() E_NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher.
func (*NokiaConf_Configure_System_Security_Tls_ServerCipherList_Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher represents the /nokia-conf/configure/system/security/tls/server-cipher-list/tls12-cipher YANG schema element.
type NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher struct {
	ApplyGroups        []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32                                                                     `path:"index" module:"nokia-conf"`
	Name               E_NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher) GetName() E_NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher.
func (*NokiaConf_Configure_System_Security_Tls_ServerCipherList_Tls12Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_ServerTlsProfile represents the /nokia-conf/configure/system/security/tls/server-tls-profile YANG schema element.
type NokiaConf_Configure_System_Security_Tls_ServerTlsProfile struct {
	AdminState          E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticateClient  *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient `path:"authenticate-client" module:"nokia-conf"`
	CertProfile         *string                                                                      `path:"cert-profile" module:"nokia-conf"`
	CipherList          *string                                                                      `path:"cipher-list" module:"nokia-conf"`
	ServerProfileName   *string                                                                      `path:"server-profile-name" module:"nokia-conf"`
	TlsReNegotiateTimer *uint32                                                                      `path:"tls-re-negotiate-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_ServerTlsProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) IsYANGGoStruct() {}

// GetOrCreateAuthenticateClient retrieves the value of the AuthenticateClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) GetOrCreateAuthenticateClient() *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient {
	if t.AuthenticateClient != nil {
		return t.AuthenticateClient
	}
	t.AuthenticateClient = &NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient{}
	return t.AuthenticateClient
}

// GetAuthenticateClient returns the value of the AuthenticateClient struct pointer
// from NokiaConf_Configure_System_Security_Tls_ServerTlsProfile. If the receiver or the field AuthenticateClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) GetAuthenticateClient() *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient {
	if t != nil && t.AuthenticateClient != nil {
		return t.AuthenticateClient
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Security_Tls_ServerTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Tls_ServerTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Tls_ServerTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCertProfile retrieves the value of the leaf CertProfile from the NokiaConf_Configure_System_Security_Tls_ServerTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfile is set, it can
// safely use t.GetCertProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) GetCertProfile() string {
	if t == nil || t.CertProfile == nil {
		return ""
	}
	return *t.CertProfile
}

// GetCipherList retrieves the value of the leaf CipherList from the NokiaConf_Configure_System_Security_Tls_ServerTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CipherList is set, it can
// safely use t.GetCipherList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CipherList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) GetCipherList() string {
	if t == nil || t.CipherList == nil {
		return ""
	}
	return *t.CipherList
}

// GetServerProfileName retrieves the value of the leaf ServerProfileName from the NokiaConf_Configure_System_Security_Tls_ServerTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerProfileName is set, it can
// safely use t.GetServerProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) GetServerProfileName() string {
	if t == nil || t.ServerProfileName == nil {
		return ""
	}
	return *t.ServerProfileName
}

// GetTlsReNegotiateTimer retrieves the value of the leaf TlsReNegotiateTimer from the NokiaConf_Configure_System_Security_Tls_ServerTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsReNegotiateTimer is set, it can
// safely use t.GetTlsReNegotiateTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsReNegotiateTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) GetTlsReNegotiateTimer() uint32 {
	if t == nil || t.TlsReNegotiateTimer == nil {
		return 0
	}
	return *t.TlsReNegotiateTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_ServerTlsProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.TlsReNegotiateTimer == nil {
		var v uint32 = 0
		t.TlsReNegotiateTimer = &v
	}
	t.AuthenticateClient.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_ServerTlsProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServerProfileName == nil {
		return nil, fmt.Errorf("nil value for key ServerProfileName")
	}

	return map[string]interface{}{
		"server-profile-name": *t.ServerProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_ServerTlsProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_ServerTlsProfile.
func (*NokiaConf_Configure_System_Security_Tls_ServerTlsProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient represents the /nokia-conf/configure/system/security/tls/server-tls-profile/authenticate-client YANG schema element.
type NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient struct {
	CommonNameList     *string `path:"common-name-list" module:"nokia-conf"`
	TrustAnchorProfile *string `path:"trust-anchor-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient) IsYANGGoStruct() {
}

// GetCommonNameList retrieves the value of the leaf CommonNameList from the NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommonNameList is set, it can
// safely use t.GetCommonNameList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommonNameList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient) GetCommonNameList() string {
	if t == nil || t.CommonNameList == nil {
		return ""
	}
	return *t.CommonNameList
}

// GetTrustAnchorProfile retrieves the value of the leaf TrustAnchorProfile from the NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrustAnchorProfile is set, it can
// safely use t.GetTrustAnchorProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrustAnchorProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient) GetTrustAnchorProfile() string {
	if t == nil || t.TrustAnchorProfile == nil {
		return ""
	}
	return *t.TrustAnchorProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient.
func (*NokiaConf_Configure_System_Security_Tls_ServerTlsProfile_AuthenticateClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile represents the /nokia-conf/configure/system/security/tls/trust-anchor-profile YANG schema element.
type NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile struct {
	ApplyGroups            []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	TrustAnchor            map[string]*NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor `path:"trust-anchor" module:"nokia-conf"`
	TrustAnchorProfileName *string                                                                            `path:"trust-anchor-profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) IsYANGGoStruct() {}

// NewTrustAnchor creates a new entry in the TrustAnchor list of the
// NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) NewTrustAnchor(CaProfileName string) (*NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustAnchor == nil {
		t.TrustAnchor = make(map[string]*NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor)
	}

	key := CaProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrustAnchor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrustAnchor", key)
	}

	t.TrustAnchor[key] = &NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor{
		CaProfileName: &CaProfileName,
	}

	return t.TrustAnchor[key], nil
}

// RenameTrustAnchor renames an entry in the list TrustAnchor within
// the NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) RenameTrustAnchor(oldK, newK string) error {
	if _, ok := t.TrustAnchor[newK]; ok {
		return fmt.Errorf("key %v already exists in TrustAnchor", newK)
	}

	e, ok := t.TrustAnchor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrustAnchor", oldK)
	}
	e.CaProfileName = &newK

	t.TrustAnchor[newK] = e
	delete(t.TrustAnchor, oldK)
	return nil
}

// GetOrCreateTrustAnchor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) GetOrCreateTrustAnchor(CaProfileName string) *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor {

	key := CaProfileName

	if v, ok := t.TrustAnchor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrustAnchor(CaProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrustAnchor got unexpected error: %v", err))
	}
	return v
}

// GetTrustAnchor retrieves the value with the specified key from
// the TrustAnchor map field of NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) GetTrustAnchor(CaProfileName string) *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor {

	if t == nil {
		return nil
	}

	key := CaProfileName

	if lm, ok := t.TrustAnchor[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrustAnchor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) DeleteTrustAnchor(CaProfileName string) {
	key := CaProfileName

	delete(t.TrustAnchor, key)
}

// AppendTrustAnchor appends the supplied NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor struct to the
// list TrustAnchor of NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) AppendTrustAnchor(v *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor) error {
	if v.CaProfileName == nil {
		return fmt.Errorf("invalid nil key received for CaProfileName")
	}

	key := *v.CaProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustAnchor == nil {
		t.TrustAnchor = make(map[string]*NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor)
	}

	if _, ok := t.TrustAnchor[key]; ok {
		return fmt.Errorf("duplicate key for list TrustAnchor %v", key)
	}

	t.TrustAnchor[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetTrustAnchorProfileName retrieves the value of the leaf TrustAnchorProfileName from the NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrustAnchorProfileName is set, it can
// safely use t.GetTrustAnchorProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrustAnchorProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) GetTrustAnchorProfileName() string {
	if t == nil || t.TrustAnchorProfileName == nil {
		return ""
	}
	return *t.TrustAnchorProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.TrustAnchor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TrustAnchorProfileName == nil {
		return nil, fmt.Errorf("nil value for key TrustAnchorProfileName")
	}

	return map[string]interface{}{
		"trust-anchor-profile-name": *t.TrustAnchorProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile.
func (*NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor represents the /nokia-conf/configure/system/security/tls/trust-anchor-profile/trust-anchor YANG schema element.
type NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor struct {
	CaProfileName *string `path:"ca-profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor) IsYANGGoStruct() {}

// GetCaProfileName retrieves the value of the leaf CaProfileName from the NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaProfileName is set, it can
// safely use t.GetCaProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor) GetCaProfileName() string {
	if t == nil || t.CaProfileName == nil {
		return ""
	}
	return *t.CaProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CaProfileName == nil {
		return nil, fmt.Errorf("nil value for key CaProfileName")
	}

	return map[string]interface{}{
		"ca-profile-name": *t.CaProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor.
func (*NokiaConf_Configure_System_Security_Tls_TrustAnchorProfile_TrustAnchor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams represents the /nokia-conf/configure/system/security/user-params YANG schema element.
type NokiaConf_Configure_System_Security_UserParams struct {
	ApplyGroups         []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Attempts            *NokiaConf_Configure_System_Security_UserParams_Attempts            `path:"attempts" module:"nokia-conf"`
	AuthenticationOrder *NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder `path:"authentication-order" module:"nokia-conf"`
	LocalUser           *NokiaConf_Configure_System_Security_UserParams_LocalUser           `path:"local-user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams) IsYANGGoStruct() {}

// GetOrCreateAttempts retrieves the value of the Attempts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams) GetOrCreateAttempts() *NokiaConf_Configure_System_Security_UserParams_Attempts {
	if t.Attempts != nil {
		return t.Attempts
	}
	t.Attempts = &NokiaConf_Configure_System_Security_UserParams_Attempts{}
	return t.Attempts
}

// GetOrCreateAuthenticationOrder retrieves the value of the AuthenticationOrder field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams) GetOrCreateAuthenticationOrder() *NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder {
	if t.AuthenticationOrder != nil {
		return t.AuthenticationOrder
	}
	t.AuthenticationOrder = &NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder{}
	return t.AuthenticationOrder
}

// GetOrCreateLocalUser retrieves the value of the LocalUser field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams) GetOrCreateLocalUser() *NokiaConf_Configure_System_Security_UserParams_LocalUser {
	if t.LocalUser != nil {
		return t.LocalUser
	}
	t.LocalUser = &NokiaConf_Configure_System_Security_UserParams_LocalUser{}
	return t.LocalUser
}

// GetAttempts returns the value of the Attempts struct pointer
// from NokiaConf_Configure_System_Security_UserParams. If the receiver or the field Attempts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams) GetAttempts() *NokiaConf_Configure_System_Security_UserParams_Attempts {
	if t != nil && t.Attempts != nil {
		return t.Attempts
	}
	return nil
}

// GetAuthenticationOrder returns the value of the AuthenticationOrder struct pointer
// from NokiaConf_Configure_System_Security_UserParams. If the receiver or the field AuthenticationOrder is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams) GetAuthenticationOrder() *NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder {
	if t != nil && t.AuthenticationOrder != nil {
		return t.AuthenticationOrder
	}
	return nil
}

// GetLocalUser returns the value of the LocalUser struct pointer
// from NokiaConf_Configure_System_Security_UserParams. If the receiver or the field LocalUser is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams) GetLocalUser() *NokiaConf_Configure_System_Security_UserParams_LocalUser {
	if t != nil && t.LocalUser != nil {
		return t.LocalUser
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_UserParams
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_UserParams
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Attempts.PopulateDefaults()
	t.AuthenticationOrder.PopulateDefaults()
	t.LocalUser.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams.
func (*NokiaConf_Configure_System_Security_UserParams) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_Attempts represents the /nokia-conf/configure/system/security/user-params/attempts YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_Attempts struct {
	Count   *uint32 `path:"count" module:"nokia-conf"`
	Lockout *uint32 `path:"lockout" module:"nokia-conf"`
	Time    *uint32 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_Attempts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_Attempts) IsYANGGoStruct() {}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_System_Security_UserParams_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_Attempts) GetCount() uint32 {
	if t == nil || t.Count == nil {
		return 3
	}
	return *t.Count
}

// GetLockout retrieves the value of the leaf Lockout from the NokiaConf_Configure_System_Security_UserParams_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lockout is set, it can
// safely use t.GetLockout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lockout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_Attempts) GetLockout() uint32 {
	if t == nil || t.Lockout == nil {
		return 10
	}
	return *t.Lockout
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_System_Security_UserParams_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_Attempts) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 5
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_Attempts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_Attempts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Count == nil {
		var v uint32 = 3
		t.Count = &v
	}
	if t.Lockout == nil {
		var v uint32 = 10
		t.Lockout = &v
	}
	if t.Time == nil {
		var v uint32 = 5
		t.Time = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_Attempts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_Attempts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_Attempts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_Attempts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_Attempts.
func (*NokiaConf_Configure_System_Security_UserParams_Attempts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder represents the /nokia-conf/configure/system/security/user-params/authentication-order YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder struct {
	ExitOnReject *bool                                              `path:"exit-on-reject" module:"nokia-conf"`
	Order        []E_NokiaTypesSecurity_PasswordAuthenticationOrder `path:"order" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder) IsYANGGoStruct() {}

// GetExitOnReject retrieves the value of the leaf ExitOnReject from the NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExitOnReject is set, it can
// safely use t.GetExitOnReject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExitOnReject == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder) GetExitOnReject() bool {
	if t == nil || t.ExitOnReject == nil {
		return false
	}
	return *t.ExitOnReject
}

// GetOrder retrieves the value of the leaf Order from the NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Order is set, it can
// safely use t.GetOrder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Order == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder) GetOrder() []E_NokiaTypesSecurity_PasswordAuthenticationOrder {
	if t == nil || t.Order == nil {
		return nil
	}
	return t.Order
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExitOnReject == nil {
		var v bool = false
		t.ExitOnReject = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder.
func (*NokiaConf_Configure_System_Security_UserParams_AuthenticationOrder) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser represents the /nokia-conf/configure/system/security/user-params/local-user YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser struct {
	Password *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password        `path:"password" module:"nokia-conf"`
	User     map[string]*NokiaConf_Configure_System_Security_UserParams_LocalUser_User `path:"user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// NokiaConf_Configure_System_Security_UserParams_LocalUser struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser) NewUser(UserName string) (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*NokiaConf_Configure_System_Security_UserParams_LocalUser_User)
	}

	key := UserName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &NokiaConf_Configure_System_Security_UserParams_LocalUser_User{
		UserName: &UserName,
	}

	return t.User[key], nil
}

// RenameUser renames an entry in the list User within
// the NokiaConf_Configure_System_Security_UserParams_LocalUser struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser) RenameUser(oldK, newK string) error {
	if _, ok := t.User[newK]; ok {
		return fmt.Errorf("key %v already exists in User", newK)
	}

	e, ok := t.User[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in User", oldK)
	}
	e.UserName = &newK

	t.User[newK] = e
	delete(t.User, oldK)
	return nil
}

// GetOrCreateUser retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_UserParams_LocalUser. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser) GetOrCreateUser(UserName string) *NokiaConf_Configure_System_Security_UserParams_LocalUser_User {

	key := UserName

	if v, ok := t.User[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUser(UserName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUser got unexpected error: %v", err))
	}
	return v
}

// GetUser retrieves the value with the specified key from
// the User map field of NokiaConf_Configure_System_Security_UserParams_LocalUser. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser) GetUser(UserName string) *NokiaConf_Configure_System_Security_UserParams_LocalUser_User {

	if t == nil {
		return nil
	}

	key := UserName

	if lm, ok := t.User[key]; ok {
		return lm
	}
	return nil
}

// DeleteUser deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_UserParams_LocalUser. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser) DeleteUser(UserName string) {
	key := UserName

	delete(t.User, key)
}

// AppendUser appends the supplied NokiaConf_Configure_System_Security_UserParams_LocalUser_User struct to the
// list User of NokiaConf_Configure_System_Security_UserParams_LocalUser. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_UserParams_LocalUser_User already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser) AppendUser(v *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) error {
	if v.UserName == nil {
		return fmt.Errorf("invalid nil key received for UserName")
	}

	key := *v.UserName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*NokiaConf_Configure_System_Security_UserParams_LocalUser_User)
	}

	if _, ok := t.User[key]; ok {
		return fmt.Errorf("duplicate key for list User %v", key)
	}

	t.User[key] = v
	return nil
}

// GetOrCreatePassword retrieves the value of the Password field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser) GetOrCreatePassword() *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password {
	if t.Password != nil {
		return t.Password
	}
	t.Password = &NokiaConf_Configure_System_Security_UserParams_LocalUser_Password{}
	return t.Password
}

// GetPassword returns the value of the Password struct pointer
// from NokiaConf_Configure_System_Security_UserParams_LocalUser. If the receiver or the field Password is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser) GetPassword() *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password {
	if t != nil && t.Password != nil {
		return t.Password
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Password.PopulateDefaults()
	for _, e := range t.User {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_Password represents the /nokia-conf/configure/system/security/user-params/local-user/password YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_Password struct {
	Aging              *uint32                                                                            `path:"aging" module:"nokia-conf"`
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	ComplexityRules    *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules `path:"complexity-rules" module:"nokia-conf"`
	Hashing            E_NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_Hashing        `path:"hashing" module:"nokia-conf"`
	HistorySize        *uint32                                                                            `path:"history-size" module:"nokia-conf"`
	MinimumAge         *uint32                                                                            `path:"minimum-age" module:"nokia-conf"`
	MinimumChange      *uint32                                                                            `path:"minimum-change" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_Password implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) IsYANGGoStruct() {}

// GetOrCreateComplexityRules retrieves the value of the ComplexityRules field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) GetOrCreateComplexityRules() *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules {
	if t.ComplexityRules != nil {
		return t.ComplexityRules
	}
	t.ComplexityRules = &NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules{}
	return t.ComplexityRules
}

// GetComplexityRules returns the value of the ComplexityRules struct pointer
// from NokiaConf_Configure_System_Security_UserParams_LocalUser_Password. If the receiver or the field ComplexityRules is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) GetComplexityRules() *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules {
	if t != nil && t.ComplexityRules != nil {
		return t.ComplexityRules
	}
	return nil
}

// GetAging retrieves the value of the leaf Aging from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aging is set, it can
// safely use t.GetAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) GetAging() uint32 {
	if t == nil || t.Aging == nil {
		return 0
	}
	return *t.Aging
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHashing retrieves the value of the leaf Hashing from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hashing is set, it can
// safely use t.GetHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hashing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) GetHashing() E_NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_Hashing {
	if t == nil || t.Hashing == 0 {
		return NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_Hashing_bcrypt
	}
	return t.Hashing
}

// GetHistorySize retrieves the value of the leaf HistorySize from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HistorySize is set, it can
// safely use t.GetHistorySize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HistorySize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) GetHistorySize() uint32 {
	if t == nil || t.HistorySize == nil {
		return 0
	}
	return *t.HistorySize
}

// GetMinimumAge retrieves the value of the leaf MinimumAge from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumAge is set, it can
// safely use t.GetMinimumAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumAge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) GetMinimumAge() uint32 {
	if t == nil || t.MinimumAge == nil {
		return 600
	}
	return *t.MinimumAge
}

// GetMinimumChange retrieves the value of the leaf MinimumChange from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumChange is set, it can
// safely use t.GetMinimumChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) GetMinimumChange() uint32 {
	if t == nil || t.MinimumChange == nil {
		return 5
	}
	return *t.MinimumChange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Hashing == 0 {
		t.Hashing = NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_Hashing_bcrypt
	}
	if t.MinimumAge == nil {
		var v uint32 = 600
		t.MinimumAge = &v
	}
	if t.MinimumChange == nil {
		var v uint32 = 5
		t.MinimumChange = &v
	}
	t.ComplexityRules.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_Password"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_Password.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_Password) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules represents the /nokia-conf/configure/system/security/user-params/local-user/password/complexity-rules YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules struct {
	AllowUserName      *bool                                                                                       `path:"allow-user-name" module:"nokia-conf"`
	Credits            *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits  `path:"credits" module:"nokia-conf"`
	MinimumClasses     *uint32                                                                                     `path:"minimum-classes" module:"nokia-conf"`
	MinimumLength      *uint32                                                                                     `path:"minimum-length" module:"nokia-conf"`
	RepeatedCharacters *uint32                                                                                     `path:"repeated-characters" module:"nokia-conf"`
	Required           *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required `path:"required" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) IsYANGGoStruct() {
}

// GetOrCreateCredits retrieves the value of the Credits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetOrCreateCredits() *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits {
	if t.Credits != nil {
		return t.Credits
	}
	t.Credits = &NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits{}
	return t.Credits
}

// GetOrCreateRequired retrieves the value of the Required field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetOrCreateRequired() *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required {
	if t.Required != nil {
		return t.Required
	}
	t.Required = &NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required{}
	return t.Required
}

// GetCredits returns the value of the Credits struct pointer
// from NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules. If the receiver or the field Credits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetCredits() *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits {
	if t != nil && t.Credits != nil {
		return t.Credits
	}
	return nil
}

// GetRequired returns the value of the Required struct pointer
// from NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules. If the receiver or the field Required is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetRequired() *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required {
	if t != nil && t.Required != nil {
		return t.Required
	}
	return nil
}

// GetAllowUserName retrieves the value of the leaf AllowUserName from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUserName is set, it can
// safely use t.GetAllowUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetAllowUserName() bool {
	if t == nil || t.AllowUserName == nil {
		return false
	}
	return *t.AllowUserName
}

// GetMinimumClasses retrieves the value of the leaf MinimumClasses from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumClasses is set, it can
// safely use t.GetMinimumClasses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumClasses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetMinimumClasses() uint32 {
	if t == nil || t.MinimumClasses == nil {
		return 0
	}
	return *t.MinimumClasses
}

// GetMinimumLength retrieves the value of the leaf MinimumLength from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumLength is set, it can
// safely use t.GetMinimumLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetMinimumLength() uint32 {
	if t == nil || t.MinimumLength == nil {
		return 6
	}
	return *t.MinimumLength
}

// GetRepeatedCharacters retrieves the value of the leaf RepeatedCharacters from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatedCharacters is set, it can
// safely use t.GetRepeatedCharacters() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatedCharacters == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetRepeatedCharacters() uint32 {
	if t == nil || t.RepeatedCharacters == nil {
		return 0
	}
	return *t.RepeatedCharacters
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowUserName == nil {
		var v bool = false
		t.AllowUserName = &v
	}
	if t.MinimumLength == nil {
		var v uint32 = 6
		t.MinimumLength = &v
	}
	t.Credits.PopulateDefaults()
	t.Required.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits represents the /nokia-conf/configure/system/security/user-params/local-user/password/complexity-rules/credits YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits struct {
	Lowercase        *uint32 `path:"lowercase" module:"nokia-conf"`
	Numeric          *uint32 `path:"numeric" module:"nokia-conf"`
	SpecialCharacter *uint32 `path:"special-character" module:"nokia-conf"`
	Uppercase        *uint32 `path:"uppercase" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) IsYANGGoStruct() {
}

// GetLowercase retrieves the value of the leaf Lowercase from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lowercase is set, it can
// safely use t.GetLowercase() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lowercase == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) GetLowercase() uint32 {
	if t == nil || t.Lowercase == nil {
		return 0
	}
	return *t.Lowercase
}

// GetNumeric retrieves the value of the leaf Numeric from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Numeric is set, it can
// safely use t.GetNumeric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Numeric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) GetNumeric() uint32 {
	if t == nil || t.Numeric == nil {
		return 0
	}
	return *t.Numeric
}

// GetSpecialCharacter retrieves the value of the leaf SpecialCharacter from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpecialCharacter is set, it can
// safely use t.GetSpecialCharacter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpecialCharacter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) GetSpecialCharacter() uint32 {
	if t == nil || t.SpecialCharacter == nil {
		return 0
	}
	return *t.SpecialCharacter
}

// GetUppercase retrieves the value of the leaf Uppercase from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Uppercase is set, it can
// safely use t.GetUppercase() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Uppercase == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) GetUppercase() uint32 {
	if t == nil || t.Uppercase == nil {
		return 0
	}
	return *t.Uppercase
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required represents the /nokia-conf/configure/system/security/user-params/local-user/password/complexity-rules/required YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required struct {
	Lowercase        *uint32 `path:"lowercase" module:"nokia-conf"`
	Numeric          *uint32 `path:"numeric" module:"nokia-conf"`
	SpecialCharacter *uint32 `path:"special-character" module:"nokia-conf"`
	Uppercase        *uint32 `path:"uppercase" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) IsYANGGoStruct() {
}

// GetLowercase retrieves the value of the leaf Lowercase from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lowercase is set, it can
// safely use t.GetLowercase() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lowercase == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) GetLowercase() uint32 {
	if t == nil || t.Lowercase == nil {
		return 0
	}
	return *t.Lowercase
}

// GetNumeric retrieves the value of the leaf Numeric from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Numeric is set, it can
// safely use t.GetNumeric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Numeric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) GetNumeric() uint32 {
	if t == nil || t.Numeric == nil {
		return 0
	}
	return *t.Numeric
}

// GetSpecialCharacter retrieves the value of the leaf SpecialCharacter from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpecialCharacter is set, it can
// safely use t.GetSpecialCharacter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpecialCharacter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) GetSpecialCharacter() uint32 {
	if t == nil || t.SpecialCharacter == nil {
		return 0
	}
	return *t.SpecialCharacter
}

// GetUppercase retrieves the value of the leaf Uppercase from the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Uppercase is set, it can
// safely use t.GetUppercase() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Uppercase == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) GetUppercase() uint32 {
	if t == nil || t.Uppercase == nil {
		return 0
	}
	return *t.Uppercase
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_User represents the /nokia-conf/configure/system/security/user-params/local-user/user YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_User struct {
	Access             *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access     `path:"access" module:"nokia-conf"`
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	CliEngine          []E_NokiaTypesSystem_CliEngineType                                        `path:"cli-engine" module:"nokia-conf"`
	Console            *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console    `path:"console" module:"nokia-conf"`
	HomeDirectory      *string                                                                   `path:"home-directory" module:"nokia-conf"`
	Password           *string                                                                   `path:"password" module:"nokia-conf"`
	PublicKeys         *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys `path:"public-keys" module:"nokia-conf"`
	RestrictedToHome   *bool                                                                     `path:"restricted-to-home" module:"nokia-conf"`
	Snmp               *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp       `path:"snmp" module:"nokia-conf"`
	UserName           *string                                                                   `path:"user-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User) IsYANGGoStruct() {}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetOrCreateAccess() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access{}
	return t.Access
}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetOrCreateConsole() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console{}
	return t.Console
}

// GetOrCreatePublicKeys retrieves the value of the PublicKeys field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetOrCreatePublicKeys() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys {
	if t.PublicKeys != nil {
		return t.PublicKeys
	}
	t.PublicKeys = &NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys{}
	return t.PublicKeys
}

// GetOrCreateSnmp retrieves the value of the Snmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetOrCreateSnmp() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp {
	if t.Snmp != nil {
		return t.Snmp
	}
	t.Snmp = &NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp{}
	return t.Snmp
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_System_Security_UserParams_LocalUser_User. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetAccess() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetConsole returns the value of the Console struct pointer
// from NokiaConf_Configure_System_Security_UserParams_LocalUser_User. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetConsole() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetPublicKeys returns the value of the PublicKeys struct pointer
// from NokiaConf_Configure_System_Security_UserParams_LocalUser_User. If the receiver or the field PublicKeys is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetPublicKeys() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys {
	if t != nil && t.PublicKeys != nil {
		return t.PublicKeys
	}
	return nil
}

// GetSnmp returns the value of the Snmp struct pointer
// from NokiaConf_Configure_System_Security_UserParams_LocalUser_User. If the receiver or the field Snmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetSnmp() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp {
	if t != nil && t.Snmp != nil {
		return t.Snmp
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCliEngine retrieves the value of the leaf CliEngine from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliEngine is set, it can
// safely use t.GetCliEngine() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliEngine == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetCliEngine() []E_NokiaTypesSystem_CliEngineType {
	if t == nil || t.CliEngine == nil {
		return []E_NokiaTypesSystem_CliEngineType{NokiaTypesSystem_CliEngineType_md_cli}
	}
	return t.CliEngine
}

// GetHomeDirectory retrieves the value of the leaf HomeDirectory from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HomeDirectory is set, it can
// safely use t.GetHomeDirectory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HomeDirectory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetHomeDirectory() string {
	if t == nil || t.HomeDirectory == nil {
		return ""
	}
	return *t.HomeDirectory
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetRestrictedToHome retrieves the value of the leaf RestrictedToHome from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestrictedToHome is set, it can
// safely use t.GetRestrictedToHome() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestrictedToHome == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetRestrictedToHome() bool {
	if t == nil || t.RestrictedToHome == nil {
		return false
	}
	return *t.RestrictedToHome
}

// GetUserName retrieves the value of the leaf UserName from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserName is set, it can
// safely use t.GetUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) GetUserName() string {
	if t == nil || t.UserName == nil {
		return ""
	}
	return *t.UserName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_User
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CliEngine == nil {
		t.CliEngine = []E_NokiaTypesSystem_CliEngineType{NokiaTypesSystem_CliEngineType_md_cli}
	}
	if t.RestrictedToHome == nil {
		var v bool = false
		t.RestrictedToHome = &v
	}
	t.Access.PopulateDefaults()
	t.Console.PopulateDefaults()
	t.PublicKeys.PopulateDefaults()
	t.Snmp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_UserParams_LocalUser_User struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UserName == nil {
		return nil, fmt.Errorf("nil value for key UserName")
	}

	return map[string]interface{}{
		"user-name": *t.UserName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_User.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access represents the /nokia-conf/configure/system/security/user-params/local-user/user/access YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access struct {
	Console *bool `path:"console" module:"nokia-conf"`
	Ftp     *bool `path:"ftp" module:"nokia-conf"`
	Grpc    *bool `path:"grpc" module:"nokia-conf"`
	Li      *bool `path:"li" module:"nokia-conf"`
	Netconf *bool `path:"netconf" module:"nokia-conf"`
	Snmp    *bool `path:"snmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access) IsYANGGoStruct() {}

// GetConsole retrieves the value of the leaf Console from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Console is set, it can
// safely use t.GetConsole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Console == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access) GetConsole() bool {
	if t == nil || t.Console == nil {
		return false
	}
	return *t.Console
}

// GetFtp retrieves the value of the leaf Ftp from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ftp is set, it can
// safely use t.GetFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ftp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access) GetFtp() bool {
	if t == nil || t.Ftp == nil {
		return false
	}
	return *t.Ftp
}

// GetGrpc retrieves the value of the leaf Grpc from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Grpc is set, it can
// safely use t.GetGrpc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Grpc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access) GetGrpc() bool {
	if t == nil || t.Grpc == nil {
		return false
	}
	return *t.Grpc
}

// GetLi retrieves the value of the leaf Li from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Li is set, it can
// safely use t.GetLi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Li == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access) GetLi() bool {
	if t == nil || t.Li == nil {
		return false
	}
	return *t.Li
}

// GetNetconf retrieves the value of the leaf Netconf from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Netconf is set, it can
// safely use t.GetNetconf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Netconf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access) GetNetconf() bool {
	if t == nil || t.Netconf == nil {
		return false
	}
	return *t.Netconf
}

// GetSnmp retrieves the value of the leaf Snmp from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Snmp is set, it can
// safely use t.GetSnmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Snmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access) GetSnmp() bool {
	if t == nil || t.Snmp == nil {
		return false
	}
	return *t.Snmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Console == nil {
		var v bool = false
		t.Console = &v
	}
	if t.Ftp == nil {
		var v bool = false
		t.Ftp = &v
	}
	if t.Grpc == nil {
		var v bool = false
		t.Grpc = &v
	}
	if t.Li == nil {
		var v bool = false
		t.Li = &v
	}
	if t.Netconf == nil {
		var v bool = false
		t.Netconf = &v
	}
	if t.Snmp == nil {
		var v bool = false
		t.Snmp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console represents the /nokia-conf/configure/system/security/user-params/local-user/user/console YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console struct {
	CannotChangePassword *bool    `path:"cannot-change-password" module:"nokia-conf"`
	LoginExec            *string  `path:"login-exec" module:"nokia-conf"`
	Member               []string `path:"member" module:"nokia-conf"`
	NewPasswordAtLogin   *bool    `path:"new-password-at-login" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console) IsYANGGoStruct() {}

// GetCannotChangePassword retrieves the value of the leaf CannotChangePassword from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CannotChangePassword is set, it can
// safely use t.GetCannotChangePassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CannotChangePassword == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console) GetCannotChangePassword() bool {
	if t == nil || t.CannotChangePassword == nil {
		return false
	}
	return *t.CannotChangePassword
}

// GetLoginExec retrieves the value of the leaf LoginExec from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoginExec is set, it can
// safely use t.GetLoginExec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoginExec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console) GetLoginExec() string {
	if t == nil || t.LoginExec == nil {
		return ""
	}
	return *t.LoginExec
}

// GetMember retrieves the value of the leaf Member from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Member is set, it can
// safely use t.GetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Member == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console) GetMember() []string {
	if t == nil || t.Member == nil {
		return nil
	}
	return t.Member
}

// GetNewPasswordAtLogin retrieves the value of the leaf NewPasswordAtLogin from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NewPasswordAtLogin is set, it can
// safely use t.GetNewPasswordAtLogin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NewPasswordAtLogin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console) GetNewPasswordAtLogin() bool {
	if t == nil || t.NewPasswordAtLogin == nil {
		return false
	}
	return *t.NewPasswordAtLogin
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CannotChangePassword == nil {
		var v bool = false
		t.CannotChangePassword = &v
	}
	if t.NewPasswordAtLogin == nil {
		var v bool = false
		t.NewPasswordAtLogin = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Console) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys represents the /nokia-conf/configure/system/security/user-params/local-user/user/public-keys YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys struct {
	Ecdsa *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa `path:"ecdsa" module:"nokia-conf"`
	Rsa   *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa   `path:"rsa" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys) IsYANGGoStruct() {}

// GetOrCreateEcdsa retrieves the value of the Ecdsa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys) GetOrCreateEcdsa() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa {
	if t.Ecdsa != nil {
		return t.Ecdsa
	}
	t.Ecdsa = &NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa{}
	return t.Ecdsa
}

// GetOrCreateRsa retrieves the value of the Rsa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys) GetOrCreateRsa() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa {
	if t.Rsa != nil {
		return t.Rsa
	}
	t.Rsa = &NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa{}
	return t.Rsa
}

// GetEcdsa returns the value of the Ecdsa struct pointer
// from NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys. If the receiver or the field Ecdsa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys) GetEcdsa() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa {
	if t != nil && t.Ecdsa != nil {
		return t.Ecdsa
	}
	return nil
}

// GetRsa returns the value of the Rsa struct pointer
// from NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys. If the receiver or the field Rsa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys) GetRsa() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa {
	if t != nil && t.Rsa != nil {
		return t.Rsa
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ecdsa.PopulateDefaults()
	t.Rsa.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa represents the /nokia-conf/configure/system/security/user-params/local-user/user/public-keys/ecdsa YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa struct {
	EcdsaKey map[uint32]*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey `path:"ecdsa-key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) IsYANGGoStruct() {
}

// NewEcdsaKey creates a new entry in the EcdsaKey list of the
// NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) NewEcdsaKey(EcdsaPublicKeyId uint32) (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EcdsaKey == nil {
		t.EcdsaKey = make(map[uint32]*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey)
	}

	key := EcdsaPublicKeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EcdsaKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EcdsaKey", key)
	}

	t.EcdsaKey[key] = &NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey{
		EcdsaPublicKeyId: &EcdsaPublicKeyId,
	}

	return t.EcdsaKey[key], nil
}

// RenameEcdsaKey renames an entry in the list EcdsaKey within
// the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) RenameEcdsaKey(oldK, newK uint32) error {
	if _, ok := t.EcdsaKey[newK]; ok {
		return fmt.Errorf("key %v already exists in EcdsaKey", newK)
	}

	e, ok := t.EcdsaKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EcdsaKey", oldK)
	}
	e.EcdsaPublicKeyId = &newK

	t.EcdsaKey[newK] = e
	delete(t.EcdsaKey, oldK)
	return nil
}

// GetOrCreateEcdsaKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) GetOrCreateEcdsaKey(EcdsaPublicKeyId uint32) *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey {

	key := EcdsaPublicKeyId

	if v, ok := t.EcdsaKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEcdsaKey(EcdsaPublicKeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEcdsaKey got unexpected error: %v", err))
	}
	return v
}

// GetEcdsaKey retrieves the value with the specified key from
// the EcdsaKey map field of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) GetEcdsaKey(EcdsaPublicKeyId uint32) *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey {

	if t == nil {
		return nil
	}

	key := EcdsaPublicKeyId

	if lm, ok := t.EcdsaKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteEcdsaKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) DeleteEcdsaKey(EcdsaPublicKeyId uint32) {
	key := EcdsaPublicKeyId

	delete(t.EcdsaKey, key)
}

// AppendEcdsaKey appends the supplied NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey struct to the
// list EcdsaKey of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) AppendEcdsaKey(v *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) error {
	if v.EcdsaPublicKeyId == nil {
		return fmt.Errorf("invalid nil key received for EcdsaPublicKeyId")
	}

	key := *v.EcdsaPublicKeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EcdsaKey == nil {
		t.EcdsaKey = make(map[uint32]*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey)
	}

	if _, ok := t.EcdsaKey[key]; ok {
		return fmt.Errorf("duplicate key for list EcdsaKey %v", key)
	}

	t.EcdsaKey[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.EcdsaKey {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey represents the /nokia-conf/configure/system/security/user-params/local-user/user/public-keys/ecdsa/ecdsa-key YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	EcdsaPublicKeyId   *uint32  `path:"ecdsa-public-key-id" module:"nokia-conf"`
	KeyValue           *string  `path:"key-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEcdsaPublicKeyId retrieves the value of the leaf EcdsaPublicKeyId from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcdsaPublicKeyId is set, it can
// safely use t.GetEcdsaPublicKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcdsaPublicKeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) GetEcdsaPublicKeyId() uint32 {
	if t == nil || t.EcdsaPublicKeyId == nil {
		return 0
	}
	return *t.EcdsaPublicKeyId
}

// GetKeyValue retrieves the value of the leaf KeyValue from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyValue is set, it can
// safely use t.GetKeyValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EcdsaPublicKeyId == nil {
		return nil, fmt.Errorf("nil value for key EcdsaPublicKeyId")
	}

	return map[string]interface{}{
		"ecdsa-public-key-id": *t.EcdsaPublicKeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa represents the /nokia-conf/configure/system/security/user-params/local-user/user/public-keys/rsa YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa struct {
	RsaKey map[uint32]*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey `path:"rsa-key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) IsYANGGoStruct() {
}

// NewRsaKey creates a new entry in the RsaKey list of the
// NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) NewRsaKey(RsaPublicKeyId uint32) (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsaKey == nil {
		t.RsaKey = make(map[uint32]*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey)
	}

	key := RsaPublicKeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RsaKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RsaKey", key)
	}

	t.RsaKey[key] = &NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey{
		RsaPublicKeyId: &RsaPublicKeyId,
	}

	return t.RsaKey[key], nil
}

// RenameRsaKey renames an entry in the list RsaKey within
// the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) RenameRsaKey(oldK, newK uint32) error {
	if _, ok := t.RsaKey[newK]; ok {
		return fmt.Errorf("key %v already exists in RsaKey", newK)
	}

	e, ok := t.RsaKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RsaKey", oldK)
	}
	e.RsaPublicKeyId = &newK

	t.RsaKey[newK] = e
	delete(t.RsaKey, oldK)
	return nil
}

// GetOrCreateRsaKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) GetOrCreateRsaKey(RsaPublicKeyId uint32) *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey {

	key := RsaPublicKeyId

	if v, ok := t.RsaKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRsaKey(RsaPublicKeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRsaKey got unexpected error: %v", err))
	}
	return v
}

// GetRsaKey retrieves the value with the specified key from
// the RsaKey map field of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) GetRsaKey(RsaPublicKeyId uint32) *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey {

	if t == nil {
		return nil
	}

	key := RsaPublicKeyId

	if lm, ok := t.RsaKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteRsaKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) DeleteRsaKey(RsaPublicKeyId uint32) {
	key := RsaPublicKeyId

	delete(t.RsaKey, key)
}

// AppendRsaKey appends the supplied NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey struct to the
// list RsaKey of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) AppendRsaKey(v *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) error {
	if v.RsaPublicKeyId == nil {
		return fmt.Errorf("invalid nil key received for RsaPublicKeyId")
	}

	key := *v.RsaPublicKeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsaKey == nil {
		t.RsaKey = make(map[uint32]*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey)
	}

	if _, ok := t.RsaKey[key]; ok {
		return fmt.Errorf("duplicate key for list RsaKey %v", key)
	}

	t.RsaKey[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RsaKey {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey represents the /nokia-conf/configure/system/security/user-params/local-user/user/public-keys/rsa/rsa-key YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	KeyValue           *string  `path:"key-value" module:"nokia-conf"`
	RsaPublicKeyId     *uint32  `path:"rsa-public-key-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetKeyValue retrieves the value of the leaf KeyValue from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyValue is set, it can
// safely use t.GetKeyValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// GetRsaPublicKeyId retrieves the value of the leaf RsaPublicKeyId from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsaPublicKeyId is set, it can
// safely use t.GetRsaPublicKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsaPublicKeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) GetRsaPublicKeyId() uint32 {
	if t == nil || t.RsaPublicKeyId == nil {
		return 0
	}
	return *t.RsaPublicKeyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RsaPublicKeyId == nil {
		return nil, fmt.Errorf("nil value for key RsaPublicKeyId")
	}

	return map[string]interface{}{
		"rsa-public-key-id": *t.RsaPublicKeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp represents the /nokia-conf/configure/system/security/user-params/local-user/user/snmp YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp struct {
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Authentication     *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication `path:"authentication" module:"nokia-conf" yangPresence:"true"`
	Group              *string                                                                            `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp) IsYANGGoStruct() {}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp) GetOrCreateAuthentication() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication{}
	return t.Authentication
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp) GetAuthentication() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Authentication.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication represents the /nokia-conf/configure/system/security/user-params/local-user/user/snmp/authentication YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication struct {
	AuthenticationKey      *string                                                                                                    `path:"authentication-key" module:"nokia-conf"`
	AuthenticationProtocol E_NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_AuthenticationProtocol `path:"authentication-protocol" module:"nokia-conf"`
	Privacy                *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy                 `path:"privacy" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication) IsYANGGoStruct() {
}

// GetOrCreatePrivacy retrieves the value of the Privacy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication) GetOrCreatePrivacy() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy {
	if t.Privacy != nil {
		return t.Privacy
	}
	t.Privacy = &NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy{}
	return t.Privacy
}

// GetPrivacy returns the value of the Privacy struct pointer
// from NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication. If the receiver or the field Privacy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication) GetPrivacy() *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy {
	if t != nil && t.Privacy != nil {
		return t.Privacy
	}
	return nil
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationProtocol retrieves the value of the leaf AuthenticationProtocol from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationProtocol is set, it can
// safely use t.GetAuthenticationProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationProtocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication) GetAuthenticationProtocol() E_NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_AuthenticationProtocol {
	if t == nil || t.AuthenticationProtocol == 0 {
		return 0
	}
	return t.AuthenticationProtocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Privacy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy represents the /nokia-conf/configure/system/security/user-params/local-user/user/snmp/authentication/privacy YANG schema element.
type NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy struct {
	PrivacyKey      *string                                                                                                     `path:"privacy-key" module:"nokia-conf"`
	PrivacyProtocol E_NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy_PrivacyProtocol `path:"privacy-protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) IsYANGGoStruct() {
}

// GetPrivacyKey retrieves the value of the leaf PrivacyKey from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivacyKey is set, it can
// safely use t.GetPrivacyKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivacyKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) GetPrivacyKey() string {
	if t == nil || t.PrivacyKey == nil {
		return ""
	}
	return *t.PrivacyKey
}

// GetPrivacyProtocol retrieves the value of the leaf PrivacyProtocol from the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivacyProtocol is set, it can
// safely use t.GetPrivacyProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivacyProtocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) GetPrivacyProtocol() E_NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy_PrivacyProtocol {
	if t == nil || t.PrivacyProtocol == 0 {
		return 0
	}
	return t.PrivacyProtocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy.
func (*NokiaConf_Configure_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Security_VprnNetworkExceptions represents the /nokia-conf/configure/system/security/vprn-network-exceptions YANG schema element.
type NokiaConf_Configure_System_Security_VprnNetworkExceptions struct {
	Count  *uint32 `path:"count" module:"nokia-conf"`
	Window *uint32 `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Security_VprnNetworkExceptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Security_VprnNetworkExceptions) IsYANGGoStruct() {}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_System_Security_VprnNetworkExceptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_VprnNetworkExceptions) GetCount() uint32 {
	if t == nil || t.Count == nil {
		return 100
	}
	return *t.Count
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_System_Security_VprnNetworkExceptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Security_VprnNetworkExceptions) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 10
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Security_VprnNetworkExceptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Security_VprnNetworkExceptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Count == nil {
		var v uint32 = 100
		t.Count = &v
	}
	if t.Window == nil {
		var v uint32 = 10
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_VprnNetworkExceptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Security_VprnNetworkExceptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Security_VprnNetworkExceptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Security_VprnNetworkExceptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Security_VprnNetworkExceptions.
func (*NokiaConf_Configure_System_Security_VprnNetworkExceptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_SoftwareRepository represents the /nokia-conf/configure/system/software-repository YANG schema element.
type NokiaConf_Configure_System_SoftwareRepository struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	PrimaryLocation    *string  `path:"primary-location" module:"nokia-conf"`
	RepositoryName     *string  `path:"repository-name" module:"nokia-conf"`
	SecondaryLocation  *string  `path:"secondary-location" module:"nokia-conf"`
	TertiaryLocation   *string  `path:"tertiary-location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_SoftwareRepository implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_SoftwareRepository) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_SoftwareRepository
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_SoftwareRepository) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_SoftwareRepository
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_SoftwareRepository) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_SoftwareRepository
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_SoftwareRepository) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrimaryLocation retrieves the value of the leaf PrimaryLocation from the NokiaConf_Configure_System_SoftwareRepository
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryLocation is set, it can
// safely use t.GetPrimaryLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_SoftwareRepository) GetPrimaryLocation() string {
	if t == nil || t.PrimaryLocation == nil {
		return ""
	}
	return *t.PrimaryLocation
}

// GetRepositoryName retrieves the value of the leaf RepositoryName from the NokiaConf_Configure_System_SoftwareRepository
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepositoryName is set, it can
// safely use t.GetRepositoryName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepositoryName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_SoftwareRepository) GetRepositoryName() string {
	if t == nil || t.RepositoryName == nil {
		return ""
	}
	return *t.RepositoryName
}

// GetSecondaryLocation retrieves the value of the leaf SecondaryLocation from the NokiaConf_Configure_System_SoftwareRepository
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryLocation is set, it can
// safely use t.GetSecondaryLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_SoftwareRepository) GetSecondaryLocation() string {
	if t == nil || t.SecondaryLocation == nil {
		return ""
	}
	return *t.SecondaryLocation
}

// GetTertiaryLocation retrieves the value of the leaf TertiaryLocation from the NokiaConf_Configure_System_SoftwareRepository
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TertiaryLocation is set, it can
// safely use t.GetTertiaryLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TertiaryLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_SoftwareRepository) GetTertiaryLocation() string {
	if t == nil || t.TertiaryLocation == nil {
		return ""
	}
	return *t.TertiaryLocation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_SoftwareRepository
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_SoftwareRepository) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_SoftwareRepository struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_SoftwareRepository) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RepositoryName == nil {
		return nil, fmt.Errorf("nil value for key RepositoryName")
	}

	return map[string]interface{}{
		"repository-name": *t.RepositoryName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_SoftwareRepository) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_SoftwareRepository"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_SoftwareRepository) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_SoftwareRepository) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_SoftwareRepository.
func (*NokiaConf_Configure_System_SoftwareRepository) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_SwitchFabric represents the /nokia-conf/configure/system/switch-fabric YANG schema element.
type NokiaConf_Configure_System_SwitchFabric struct {
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	FailureRecovery    *NokiaConf_Configure_System_SwitchFabric_FailureRecovery `path:"failure-recovery" module:"nokia-conf"`
	SfmLossThreshold   *uint32                                                  `path:"sfm-loss-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_SwitchFabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_SwitchFabric) IsYANGGoStruct() {}

// GetOrCreateFailureRecovery retrieves the value of the FailureRecovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_SwitchFabric) GetOrCreateFailureRecovery() *NokiaConf_Configure_System_SwitchFabric_FailureRecovery {
	if t.FailureRecovery != nil {
		return t.FailureRecovery
	}
	t.FailureRecovery = &NokiaConf_Configure_System_SwitchFabric_FailureRecovery{}
	return t.FailureRecovery
}

// GetFailureRecovery returns the value of the FailureRecovery struct pointer
// from NokiaConf_Configure_System_SwitchFabric. If the receiver or the field FailureRecovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_SwitchFabric) GetFailureRecovery() *NokiaConf_Configure_System_SwitchFabric_FailureRecovery {
	if t != nil && t.FailureRecovery != nil {
		return t.FailureRecovery
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_SwitchFabric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_SwitchFabric) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_SwitchFabric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_SwitchFabric) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSfmLossThreshold retrieves the value of the leaf SfmLossThreshold from the NokiaConf_Configure_System_SwitchFabric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfmLossThreshold is set, it can
// safely use t.GetSfmLossThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfmLossThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_SwitchFabric) GetSfmLossThreshold() uint32 {
	if t == nil || t.SfmLossThreshold == nil {
		return 0
	}
	return *t.SfmLossThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_SwitchFabric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_SwitchFabric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FailureRecovery.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_SwitchFabric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_SwitchFabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_SwitchFabric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_SwitchFabric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_SwitchFabric.
func (*NokiaConf_Configure_System_SwitchFabric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_SwitchFabric_FailureRecovery represents the /nokia-conf/configure/system/switch-fabric/failure-recovery YANG schema element.
type NokiaConf_Configure_System_SwitchFabric_FailureRecovery struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_SwitchFabric_FailureRecovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_SwitchFabric_FailureRecovery) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_SwitchFabric_FailureRecovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_SwitchFabric_FailureRecovery) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_SwitchFabric_FailureRecovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_SwitchFabric_FailureRecovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_SwitchFabric_FailureRecovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_SwitchFabric_FailureRecovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_SwitchFabric_FailureRecovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_SwitchFabric_FailureRecovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_SwitchFabric_FailureRecovery.
func (*NokiaConf_Configure_System_SwitchFabric_FailureRecovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Telemetry represents the /nokia-conf/configure/system/telemetry YANG schema element.
type NokiaConf_Configure_System_Telemetry struct {
	ApplyGroups             []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	DestinationGroup        map[string]*NokiaConf_Configure_System_Telemetry_DestinationGroup `path:"destination-group" module:"nokia-conf"`
	NotificationBundling    *NokiaConf_Configure_System_Telemetry_NotificationBundling        `path:"notification-bundling" module:"nokia-conf"`
	PersistentSubscriptions *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions     `path:"persistent-subscriptions" module:"nokia-conf"`
	SensorGroups            *NokiaConf_Configure_System_Telemetry_SensorGroups                `path:"sensor-groups" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Telemetry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Telemetry) IsYANGGoStruct() {}

// NewDestinationGroup creates a new entry in the DestinationGroup list of the
// NokiaConf_Configure_System_Telemetry struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Telemetry) NewDestinationGroup(Name string) (*NokiaConf_Configure_System_Telemetry_DestinationGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*NokiaConf_Configure_System_Telemetry_DestinationGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationGroup", key)
	}

	t.DestinationGroup[key] = &NokiaConf_Configure_System_Telemetry_DestinationGroup{
		Name: &Name,
	}

	return t.DestinationGroup[key], nil
}

// RenameDestinationGroup renames an entry in the list DestinationGroup within
// the NokiaConf_Configure_System_Telemetry struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Telemetry) RenameDestinationGroup(oldK, newK string) error {
	if _, ok := t.DestinationGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in DestinationGroup", newK)
	}

	e, ok := t.DestinationGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestinationGroup", oldK)
	}
	e.Name = &newK

	t.DestinationGroup[newK] = e
	delete(t.DestinationGroup, oldK)
	return nil
}

// GetOrCreateDestinationGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Telemetry. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Telemetry) GetOrCreateDestinationGroup(Name string) *NokiaConf_Configure_System_Telemetry_DestinationGroup {

	key := Name

	if v, ok := t.DestinationGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestinationGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestinationGroup got unexpected error: %v", err))
	}
	return v
}

// GetDestinationGroup retrieves the value with the specified key from
// the DestinationGroup map field of NokiaConf_Configure_System_Telemetry. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Telemetry) GetDestinationGroup(Name string) *NokiaConf_Configure_System_Telemetry_DestinationGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.DestinationGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestinationGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Telemetry. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Telemetry) DeleteDestinationGroup(Name string) {
	key := Name

	delete(t.DestinationGroup, key)
}

// AppendDestinationGroup appends the supplied NokiaConf_Configure_System_Telemetry_DestinationGroup struct to the
// list DestinationGroup of NokiaConf_Configure_System_Telemetry. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Telemetry_DestinationGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Telemetry) AppendDestinationGroup(v *NokiaConf_Configure_System_Telemetry_DestinationGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*NokiaConf_Configure_System_Telemetry_DestinationGroup)
	}

	if _, ok := t.DestinationGroup[key]; ok {
		return fmt.Errorf("duplicate key for list DestinationGroup %v", key)
	}

	t.DestinationGroup[key] = v
	return nil
}

// GetOrCreateNotificationBundling retrieves the value of the NotificationBundling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Telemetry) GetOrCreateNotificationBundling() *NokiaConf_Configure_System_Telemetry_NotificationBundling {
	if t.NotificationBundling != nil {
		return t.NotificationBundling
	}
	t.NotificationBundling = &NokiaConf_Configure_System_Telemetry_NotificationBundling{}
	return t.NotificationBundling
}

// GetOrCreatePersistentSubscriptions retrieves the value of the PersistentSubscriptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Telemetry) GetOrCreatePersistentSubscriptions() *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions {
	if t.PersistentSubscriptions != nil {
		return t.PersistentSubscriptions
	}
	t.PersistentSubscriptions = &NokiaConf_Configure_System_Telemetry_PersistentSubscriptions{}
	return t.PersistentSubscriptions
}

// GetOrCreateSensorGroups retrieves the value of the SensorGroups field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Telemetry) GetOrCreateSensorGroups() *NokiaConf_Configure_System_Telemetry_SensorGroups {
	if t.SensorGroups != nil {
		return t.SensorGroups
	}
	t.SensorGroups = &NokiaConf_Configure_System_Telemetry_SensorGroups{}
	return t.SensorGroups
}

// GetNotificationBundling returns the value of the NotificationBundling struct pointer
// from NokiaConf_Configure_System_Telemetry. If the receiver or the field NotificationBundling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Telemetry) GetNotificationBundling() *NokiaConf_Configure_System_Telemetry_NotificationBundling {
	if t != nil && t.NotificationBundling != nil {
		return t.NotificationBundling
	}
	return nil
}

// GetPersistentSubscriptions returns the value of the PersistentSubscriptions struct pointer
// from NokiaConf_Configure_System_Telemetry. If the receiver or the field PersistentSubscriptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Telemetry) GetPersistentSubscriptions() *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions {
	if t != nil && t.PersistentSubscriptions != nil {
		return t.PersistentSubscriptions
	}
	return nil
}

// GetSensorGroups returns the value of the SensorGroups struct pointer
// from NokiaConf_Configure_System_Telemetry. If the receiver or the field SensorGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Telemetry) GetSensorGroups() *NokiaConf_Configure_System_Telemetry_SensorGroups {
	if t != nil && t.SensorGroups != nil {
		return t.SensorGroups
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Telemetry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Telemetry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Telemetry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Telemetry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NotificationBundling.PopulateDefaults()
	t.PersistentSubscriptions.PopulateDefaults()
	t.SensorGroups.PopulateDefaults()
	for _, e := range t.DestinationGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Telemetry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Telemetry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Telemetry.
func (*NokiaConf_Configure_System_Telemetry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Telemetry_DestinationGroup represents the /nokia-conf/configure/system/telemetry/destination-group YANG schema element.
type NokiaConf_Configure_System_Telemetry_DestinationGroup struct {
	AllowUnsecureConnection YANGEmpty                                                                                                                                    `path:"allow-unsecure-connection" module:"nokia-conf"`
	ApplyGroups             []string                                                                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Description             *string                                                                                                                                      `path:"description" module:"nokia-conf"`
	Destination             map[NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination_Key]*NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination `path:"destination" module:"nokia-conf"`
	Name                    *string                                                                                                                                      `path:"name" module:"nokia-conf"`
	TcpKeepalive            *NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive                                                                          `path:"tcp-keepalive" module:"nokia-conf"`
	TlsClientProfile        *string                                                                                                                                      `path:"tls-client-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Telemetry_DestinationGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Telemetry_DestinationGroup) IsYANGGoStruct() {}

// NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination_Key represents the key for list Destination of element /nokia-conf/configure/system/telemetry/destination-group.
type NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination_Key struct {
	Address string `path:"address"`
	Port    int32  `path:"port"`
}

// NewDestination creates a new entry in the Destination list of the
// NokiaConf_Configure_System_Telemetry_DestinationGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) NewDestination(Address string, Port int32) (*NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination_Key]*NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination)
	}

	key := NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination_Key{
		Address: Address,
		Port:    Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Destination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Destination", key)
	}

	t.Destination[key] = &NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination{
		Address: &Address,
		Port:    &Port,
	}

	return t.Destination[key], nil
}

// RenameDestination renames an entry in the list Destination within
// the NokiaConf_Configure_System_Telemetry_DestinationGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) RenameDestination(oldK, newK NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination_Key) error {
	if _, ok := t.Destination[newK]; ok {
		return fmt.Errorf("key %v already exists in Destination", newK)
	}

	e, ok := t.Destination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Destination", oldK)
	}
	e.Address = &newK.Address
	e.Port = &newK.Port

	t.Destination[newK] = e
	delete(t.Destination, oldK)
	return nil
}

// GetOrCreateDestination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Telemetry_DestinationGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) GetOrCreateDestination(Address string, Port int32) *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination {

	key := NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination_Key{
		Address: Address,
		Port:    Port,
	}

	if v, ok := t.Destination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestination(Address, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestination got unexpected error: %v", err))
	}
	return v
}

// GetDestination retrieves the value with the specified key from
// the Destination map field of NokiaConf_Configure_System_Telemetry_DestinationGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) GetDestination(Address string, Port int32) *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination_Key{
		Address: Address,
		Port:    Port,
	}

	if lm, ok := t.Destination[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Telemetry_DestinationGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) DeleteDestination(Address string, Port int32) {
	key := NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination_Key{
		Address: Address,
		Port:    Port,
	}

	delete(t.Destination, key)
}

// AppendDestination appends the supplied NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination struct to the
// list Destination of NokiaConf_Configure_System_Telemetry_DestinationGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) AppendDestination(v *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	if v.Port == nil {
		return fmt.Errorf("invalid nil key for Port")
	}

	key := NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination_Key{
		Address: *v.Address,
		Port:    *v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination_Key]*NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination)
	}

	if _, ok := t.Destination[key]; ok {
		return fmt.Errorf("duplicate key for list Destination %v", key)
	}

	t.Destination[key] = v
	return nil
}

// GetOrCreateTcpKeepalive retrieves the value of the TcpKeepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) GetOrCreateTcpKeepalive() *NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive {
	if t.TcpKeepalive != nil {
		return t.TcpKeepalive
	}
	t.TcpKeepalive = &NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive{}
	return t.TcpKeepalive
}

// GetTcpKeepalive returns the value of the TcpKeepalive struct pointer
// from NokiaConf_Configure_System_Telemetry_DestinationGroup. If the receiver or the field TcpKeepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) GetTcpKeepalive() *NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive {
	if t != nil && t.TcpKeepalive != nil {
		return t.TcpKeepalive
	}
	return nil
}

// GetAllowUnsecureConnection retrieves the value of the leaf AllowUnsecureConnection from the NokiaConf_Configure_System_Telemetry_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnsecureConnection is set, it can
// safely use t.GetAllowUnsecureConnection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnsecureConnection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) GetAllowUnsecureConnection() YANGEmpty {
	if t == nil || t.AllowUnsecureConnection == false {
		return false
	}
	return t.AllowUnsecureConnection
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Telemetry_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Telemetry_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Telemetry_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Telemetry_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the NokiaConf_Configure_System_Telemetry_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Telemetry_DestinationGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TcpKeepalive.PopulateDefaults()
	for _, e := range t.Destination {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Telemetry_DestinationGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Telemetry_DestinationGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Telemetry_DestinationGroup.
func (*NokiaConf_Configure_System_Telemetry_DestinationGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination represents the /nokia-conf/configure/system/telemetry/destination-group/destination YANG schema element.
type NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Port               *int32   `path:"port" module:"nokia-conf"`
	RouterInstance     *string  `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"address": *t.Address,
		"port":    *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination.
func (*NokiaConf_Configure_System_Telemetry_DestinationGroup_Destination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive represents the /nokia-conf/configure/system/telemetry/destination-group/tcp-keepalive YANG schema element.
type NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	IdleTime   *uint32                     `path:"idle-time" module:"nokia-conf"`
	Interval   *uint32                     `path:"interval" module:"nokia-conf"`
	Retries    *uint32                     `path:"retries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIdleTime retrieves the value of the leaf IdleTime from the NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTime is set, it can
// safely use t.GetIdleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive) GetIdleTime() uint32 {
	if t == nil || t.IdleTime == nil {
		return 600
	}
	return *t.IdleTime
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 15
	}
	return *t.Interval
}

// GetRetries retrieves the value of the leaf Retries from the NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retries is set, it can
// safely use t.GetRetries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive) GetRetries() uint32 {
	if t == nil || t.Retries == nil {
		return 4
	}
	return *t.Retries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IdleTime == nil {
		var v uint32 = 600
		t.IdleTime = &v
	}
	if t.Interval == nil {
		var v uint32 = 15
		t.Interval = &v
	}
	if t.Retries == nil {
		var v uint32 = 4
		t.Retries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive.
func (*NokiaConf_Configure_System_Telemetry_DestinationGroup_TcpKeepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Telemetry_NotificationBundling represents the /nokia-conf/configure/system/telemetry/notification-bundling YANG schema element.
type NokiaConf_Configure_System_Telemetry_NotificationBundling struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	MaxMsgCount        *uint32                     `path:"max-msg-count" module:"nokia-conf"`
	MaxTimeGranularity *uint32                     `path:"max-time-granularity" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Telemetry_NotificationBundling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Telemetry_NotificationBundling) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Telemetry_NotificationBundling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_NotificationBundling) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Telemetry_NotificationBundling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_NotificationBundling) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Telemetry_NotificationBundling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_NotificationBundling) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaxMsgCount retrieves the value of the leaf MaxMsgCount from the NokiaConf_Configure_System_Telemetry_NotificationBundling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMsgCount is set, it can
// safely use t.GetMaxMsgCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMsgCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_NotificationBundling) GetMaxMsgCount() uint32 {
	if t == nil || t.MaxMsgCount == nil {
		return 100
	}
	return *t.MaxMsgCount
}

// GetMaxTimeGranularity retrieves the value of the leaf MaxTimeGranularity from the NokiaConf_Configure_System_Telemetry_NotificationBundling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTimeGranularity is set, it can
// safely use t.GetMaxTimeGranularity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTimeGranularity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_NotificationBundling) GetMaxTimeGranularity() uint32 {
	if t == nil || t.MaxTimeGranularity == nil {
		return 100
	}
	return *t.MaxTimeGranularity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Telemetry_NotificationBundling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Telemetry_NotificationBundling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxMsgCount == nil {
		var v uint32 = 100
		t.MaxMsgCount = &v
	}
	if t.MaxTimeGranularity == nil {
		var v uint32 = 100
		t.MaxTimeGranularity = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_NotificationBundling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Telemetry_NotificationBundling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_NotificationBundling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Telemetry_NotificationBundling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Telemetry_NotificationBundling.
func (*NokiaConf_Configure_System_Telemetry_NotificationBundling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Telemetry_PersistentSubscriptions represents the /nokia-conf/configure/system/telemetry/persistent-subscriptions YANG schema element.
type NokiaConf_Configure_System_Telemetry_PersistentSubscriptions struct {
	Subscription map[string]*NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription `path:"subscription" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Telemetry_PersistentSubscriptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Telemetry_PersistentSubscriptions) IsYANGGoStruct() {}

// NewSubscription creates a new entry in the Subscription list of the
// NokiaConf_Configure_System_Telemetry_PersistentSubscriptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions) NewSubscription(Name string) (*NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subscription == nil {
		t.Subscription = make(map[string]*NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subscription[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subscription", key)
	}

	t.Subscription[key] = &NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription{
		Name: &Name,
	}

	return t.Subscription[key], nil
}

// RenameSubscription renames an entry in the list Subscription within
// the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions) RenameSubscription(oldK, newK string) error {
	if _, ok := t.Subscription[newK]; ok {
		return fmt.Errorf("key %v already exists in Subscription", newK)
	}

	e, ok := t.Subscription[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subscription", oldK)
	}
	e.Name = &newK

	t.Subscription[newK] = e
	delete(t.Subscription, oldK)
	return nil
}

// GetOrCreateSubscription retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Telemetry_PersistentSubscriptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions) GetOrCreateSubscription(Name string) *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription {

	key := Name

	if v, ok := t.Subscription[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubscription(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubscription got unexpected error: %v", err))
	}
	return v
}

// GetSubscription retrieves the value with the specified key from
// the Subscription map field of NokiaConf_Configure_System_Telemetry_PersistentSubscriptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions) GetSubscription(Name string) *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Subscription[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubscription deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Telemetry_PersistentSubscriptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions) DeleteSubscription(Name string) {
	key := Name

	delete(t.Subscription, key)
}

// AppendSubscription appends the supplied NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription struct to the
// list Subscription of NokiaConf_Configure_System_Telemetry_PersistentSubscriptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions) AppendSubscription(v *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subscription == nil {
		t.Subscription = make(map[string]*NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription)
	}

	if _, ok := t.Subscription[key]; ok {
		return fmt.Errorf("duplicate key for list Subscription %v", key)
	}

	t.Subscription[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Subscription {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Telemetry_PersistentSubscriptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Telemetry_PersistentSubscriptions.
func (*NokiaConf_Configure_System_Telemetry_PersistentSubscriptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription represents the /nokia-conf/configure/system/telemetry/persistent-subscriptions/subscription YANG schema element.
type NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription struct {
	AdminState           E_NokiaTypesSros_AdminState               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups          []string                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                   `path:"description" module:"nokia-conf"`
	DestinationGroup     *string                                   `path:"destination-group" module:"nokia-conf"`
	Encoding             E_NokiaTypesSystem_TelemetryValueEncoding `path:"encoding" module:"nokia-conf"`
	LocalSourceAddress   *string                                   `path:"local-source-address" module:"nokia-conf"`
	Mode                 E_NokiaTypesSystem_TelemetryPathMode      `path:"mode" module:"nokia-conf"`
	Name                 *string                                   `path:"name" module:"nokia-conf"`
	OriginatedQosMarking E_NokiaTypesQos_DscpName                  `path:"originated-qos-marking" module:"nokia-conf"`
	SampleInterval       *uint64                                   `path:"sample-interval" module:"nokia-conf"`
	SensorGroup          *string                                   `path:"sensor-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestinationGroup retrieves the value of the leaf DestinationGroup from the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationGroup is set, it can
// safely use t.GetDestinationGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) GetDestinationGroup() string {
	if t == nil || t.DestinationGroup == nil {
		return ""
	}
	return *t.DestinationGroup
}

// GetEncoding retrieves the value of the leaf Encoding from the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encoding is set, it can
// safely use t.GetEncoding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encoding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) GetEncoding() E_NokiaTypesSystem_TelemetryValueEncoding {
	if t == nil || t.Encoding == 0 {
		return NokiaTypesSystem_TelemetryValueEncoding_json
	}
	return t.Encoding
}

// GetLocalSourceAddress retrieves the value of the leaf LocalSourceAddress from the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalSourceAddress is set, it can
// safely use t.GetLocalSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalSourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) GetLocalSourceAddress() string {
	if t == nil || t.LocalSourceAddress == nil {
		return ""
	}
	return *t.LocalSourceAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) GetMode() E_NokiaTypesSystem_TelemetryPathMode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOriginatedQosMarking retrieves the value of the leaf OriginatedQosMarking from the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatedQosMarking is set, it can
// safely use t.GetOriginatedQosMarking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatedQosMarking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) GetOriginatedQosMarking() E_NokiaTypesQos_DscpName {
	if t == nil || t.OriginatedQosMarking == 0 {
		return 0
	}
	return t.OriginatedQosMarking
}

// GetSampleInterval retrieves the value of the leaf SampleInterval from the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleInterval is set, it can
// safely use t.GetSampleInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) GetSampleInterval() uint64 {
	if t == nil || t.SampleInterval == nil {
		return 10000
	}
	return *t.SampleInterval
}

// GetSensorGroup retrieves the value of the leaf SensorGroup from the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SensorGroup is set, it can
// safely use t.GetSensorGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SensorGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) GetSensorGroup() string {
	if t == nil || t.SensorGroup == nil {
		return ""
	}
	return *t.SensorGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Encoding == 0 {
		t.Encoding = NokiaTypesSystem_TelemetryValueEncoding_json
	}
	if t.SampleInterval == nil {
		var v uint64 = 10000
		t.SampleInterval = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription.
func (*NokiaConf_Configure_System_Telemetry_PersistentSubscriptions_Subscription) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Telemetry_SensorGroups represents the /nokia-conf/configure/system/telemetry/sensor-groups YANG schema element.
type NokiaConf_Configure_System_Telemetry_SensorGroups struct {
	SensorGroup map[string]*NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup `path:"sensor-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Telemetry_SensorGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Telemetry_SensorGroups) IsYANGGoStruct() {}

// NewSensorGroup creates a new entry in the SensorGroup list of the
// NokiaConf_Configure_System_Telemetry_SensorGroups struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups) NewSensorGroup(Name string) (*NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorGroup == nil {
		t.SensorGroup = make(map[string]*NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorGroup", key)
	}

	t.SensorGroup[key] = &NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup{
		Name: &Name,
	}

	return t.SensorGroup[key], nil
}

// RenameSensorGroup renames an entry in the list SensorGroup within
// the NokiaConf_Configure_System_Telemetry_SensorGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups) RenameSensorGroup(oldK, newK string) error {
	if _, ok := t.SensorGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SensorGroup", newK)
	}

	e, ok := t.SensorGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SensorGroup", oldK)
	}
	e.Name = &newK

	t.SensorGroup[newK] = e
	delete(t.SensorGroup, oldK)
	return nil
}

// GetOrCreateSensorGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Telemetry_SensorGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups) GetOrCreateSensorGroup(Name string) *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup {

	key := Name

	if v, ok := t.SensorGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSensorGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSensorGroup got unexpected error: %v", err))
	}
	return v
}

// GetSensorGroup retrieves the value with the specified key from
// the SensorGroup map field of NokiaConf_Configure_System_Telemetry_SensorGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups) GetSensorGroup(Name string) *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SensorGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSensorGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Telemetry_SensorGroups. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups) DeleteSensorGroup(Name string) {
	key := Name

	delete(t.SensorGroup, key)
}

// AppendSensorGroup appends the supplied NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup struct to the
// list SensorGroup of NokiaConf_Configure_System_Telemetry_SensorGroups. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups) AppendSensorGroup(v *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorGroup == nil {
		t.SensorGroup = make(map[string]*NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup)
	}

	if _, ok := t.SensorGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SensorGroup %v", key)
	}

	t.SensorGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Telemetry_SensorGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SensorGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Telemetry_SensorGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Telemetry_SensorGroups.
func (*NokiaConf_Configure_System_Telemetry_SensorGroups) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup represents the /nokia-conf/configure/system/telemetry/sensor-groups/sensor-group YANG schema element.
type NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                        `path:"description" module:"nokia-conf"`
	Name               *string                                                                        `path:"name" module:"nokia-conf"`
	Path               map[string]*NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path `path:"path" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) IsYANGGoStruct() {}

// NewPath creates a new entry in the Path list of the
// NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) NewPath(Xpath string) (*NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path)
	}

	key := Xpath

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path{
		Xpath: &Xpath,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) RenamePath(oldK, newK string) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.Xpath = &newK

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) GetOrCreatePath(Xpath string) *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path {

	key := Xpath

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(Xpath)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) GetPath(Xpath string) *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path {

	if t == nil {
		return nil
	}

	key := Xpath

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) DeletePath(Xpath string) {
	key := Xpath

	delete(t.Path, key)
}

// AppendPath appends the supplied NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path struct to the
// list Path of NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) AppendPath(v *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path) error {
	if v.Xpath == nil {
		return fmt.Errorf("invalid nil key received for Xpath")
	}

	key := *v.Xpath

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup.
func (*NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path represents the /nokia-conf/configure/system/telemetry/sensor-groups/sensor-group/path YANG schema element.
type NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path struct {
	Xpath *string `path:"xpath" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path) IsYANGGoStruct() {}

// GetXpath retrieves the value of the leaf Xpath from the NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Xpath is set, it can
// safely use t.GetXpath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Xpath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path) GetXpath() string {
	if t == nil || t.Xpath == nil {
		return ""
	}
	return *t.Xpath
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Xpath == nil {
		return nil, fmt.Errorf("nil value for key Xpath")
	}

	return map[string]interface{}{
		"xpath": *t.Xpath,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path.
func (*NokiaConf_Configure_System_Telemetry_SensorGroups_SensorGroup_Path) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Thresholds represents the /nokia-conf/configure/system/thresholds YANG schema element.
type NokiaConf_Configure_System_Thresholds struct {
	CflashCapAlarmPercent map[string]*NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent `path:"cflash-cap-alarm-percent" module:"nokia-conf"`
	CflashCapWarnPercent  map[string]*NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent  `path:"cflash-cap-warn-percent" module:"nokia-conf"`
	KbMemoryUseAlarm      *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm                 `path:"kb-memory-use-alarm" module:"nokia-conf" yangPresence:"true"`
	KbMemoryUseWarn       *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn                  `path:"kb-memory-use-warn" module:"nokia-conf" yangPresence:"true"`
	Rmon                  *NokiaConf_Configure_System_Thresholds_Rmon                             `path:"rmon" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Thresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Thresholds) IsYANGGoStruct() {}

// NewCflashCapAlarmPercent creates a new entry in the CflashCapAlarmPercent list of the
// NokiaConf_Configure_System_Thresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Thresholds) NewCflashCapAlarmPercent(CflashId string) (*NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CflashCapAlarmPercent == nil {
		t.CflashCapAlarmPercent = make(map[string]*NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent)
	}

	key := CflashId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CflashCapAlarmPercent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CflashCapAlarmPercent", key)
	}

	t.CflashCapAlarmPercent[key] = &NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent{
		CflashId: &CflashId,
	}

	return t.CflashCapAlarmPercent[key], nil
}

// RenameCflashCapAlarmPercent renames an entry in the list CflashCapAlarmPercent within
// the NokiaConf_Configure_System_Thresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Thresholds) RenameCflashCapAlarmPercent(oldK, newK string) error {
	if _, ok := t.CflashCapAlarmPercent[newK]; ok {
		return fmt.Errorf("key %v already exists in CflashCapAlarmPercent", newK)
	}

	e, ok := t.CflashCapAlarmPercent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CflashCapAlarmPercent", oldK)
	}
	e.CflashId = &newK

	t.CflashCapAlarmPercent[newK] = e
	delete(t.CflashCapAlarmPercent, oldK)
	return nil
}

// GetOrCreateCflashCapAlarmPercent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Thresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Thresholds) GetOrCreateCflashCapAlarmPercent(CflashId string) *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent {

	key := CflashId

	if v, ok := t.CflashCapAlarmPercent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCflashCapAlarmPercent(CflashId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCflashCapAlarmPercent got unexpected error: %v", err))
	}
	return v
}

// GetCflashCapAlarmPercent retrieves the value with the specified key from
// the CflashCapAlarmPercent map field of NokiaConf_Configure_System_Thresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Thresholds) GetCflashCapAlarmPercent(CflashId string) *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent {

	if t == nil {
		return nil
	}

	key := CflashId

	if lm, ok := t.CflashCapAlarmPercent[key]; ok {
		return lm
	}
	return nil
}

// DeleteCflashCapAlarmPercent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Thresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Thresholds) DeleteCflashCapAlarmPercent(CflashId string) {
	key := CflashId

	delete(t.CflashCapAlarmPercent, key)
}

// AppendCflashCapAlarmPercent appends the supplied NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent struct to the
// list CflashCapAlarmPercent of NokiaConf_Configure_System_Thresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Thresholds) AppendCflashCapAlarmPercent(v *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) error {
	if v.CflashId == nil {
		return fmt.Errorf("invalid nil key received for CflashId")
	}

	key := *v.CflashId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CflashCapAlarmPercent == nil {
		t.CflashCapAlarmPercent = make(map[string]*NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent)
	}

	if _, ok := t.CflashCapAlarmPercent[key]; ok {
		return fmt.Errorf("duplicate key for list CflashCapAlarmPercent %v", key)
	}

	t.CflashCapAlarmPercent[key] = v
	return nil
}

// NewCflashCapWarnPercent creates a new entry in the CflashCapWarnPercent list of the
// NokiaConf_Configure_System_Thresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Thresholds) NewCflashCapWarnPercent(CflashId string) (*NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CflashCapWarnPercent == nil {
		t.CflashCapWarnPercent = make(map[string]*NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent)
	}

	key := CflashId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CflashCapWarnPercent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CflashCapWarnPercent", key)
	}

	t.CflashCapWarnPercent[key] = &NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent{
		CflashId: &CflashId,
	}

	return t.CflashCapWarnPercent[key], nil
}

// RenameCflashCapWarnPercent renames an entry in the list CflashCapWarnPercent within
// the NokiaConf_Configure_System_Thresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Thresholds) RenameCflashCapWarnPercent(oldK, newK string) error {
	if _, ok := t.CflashCapWarnPercent[newK]; ok {
		return fmt.Errorf("key %v already exists in CflashCapWarnPercent", newK)
	}

	e, ok := t.CflashCapWarnPercent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CflashCapWarnPercent", oldK)
	}
	e.CflashId = &newK

	t.CflashCapWarnPercent[newK] = e
	delete(t.CflashCapWarnPercent, oldK)
	return nil
}

// GetOrCreateCflashCapWarnPercent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Thresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Thresholds) GetOrCreateCflashCapWarnPercent(CflashId string) *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent {

	key := CflashId

	if v, ok := t.CflashCapWarnPercent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCflashCapWarnPercent(CflashId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCflashCapWarnPercent got unexpected error: %v", err))
	}
	return v
}

// GetCflashCapWarnPercent retrieves the value with the specified key from
// the CflashCapWarnPercent map field of NokiaConf_Configure_System_Thresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Thresholds) GetCflashCapWarnPercent(CflashId string) *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent {

	if t == nil {
		return nil
	}

	key := CflashId

	if lm, ok := t.CflashCapWarnPercent[key]; ok {
		return lm
	}
	return nil
}

// DeleteCflashCapWarnPercent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Thresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Thresholds) DeleteCflashCapWarnPercent(CflashId string) {
	key := CflashId

	delete(t.CflashCapWarnPercent, key)
}

// AppendCflashCapWarnPercent appends the supplied NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent struct to the
// list CflashCapWarnPercent of NokiaConf_Configure_System_Thresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Thresholds) AppendCflashCapWarnPercent(v *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) error {
	if v.CflashId == nil {
		return fmt.Errorf("invalid nil key received for CflashId")
	}

	key := *v.CflashId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CflashCapWarnPercent == nil {
		t.CflashCapWarnPercent = make(map[string]*NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent)
	}

	if _, ok := t.CflashCapWarnPercent[key]; ok {
		return fmt.Errorf("duplicate key for list CflashCapWarnPercent %v", key)
	}

	t.CflashCapWarnPercent[key] = v
	return nil
}

// GetOrCreateKbMemoryUseAlarm retrieves the value of the KbMemoryUseAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Thresholds) GetOrCreateKbMemoryUseAlarm() *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm {
	if t.KbMemoryUseAlarm != nil {
		return t.KbMemoryUseAlarm
	}
	t.KbMemoryUseAlarm = &NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm{}
	return t.KbMemoryUseAlarm
}

// GetOrCreateKbMemoryUseWarn retrieves the value of the KbMemoryUseWarn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Thresholds) GetOrCreateKbMemoryUseWarn() *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn {
	if t.KbMemoryUseWarn != nil {
		return t.KbMemoryUseWarn
	}
	t.KbMemoryUseWarn = &NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn{}
	return t.KbMemoryUseWarn
}

// GetOrCreateRmon retrieves the value of the Rmon field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Thresholds) GetOrCreateRmon() *NokiaConf_Configure_System_Thresholds_Rmon {
	if t.Rmon != nil {
		return t.Rmon
	}
	t.Rmon = &NokiaConf_Configure_System_Thresholds_Rmon{}
	return t.Rmon
}

// GetKbMemoryUseAlarm returns the value of the KbMemoryUseAlarm struct pointer
// from NokiaConf_Configure_System_Thresholds. If the receiver or the field KbMemoryUseAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Thresholds) GetKbMemoryUseAlarm() *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm {
	if t != nil && t.KbMemoryUseAlarm != nil {
		return t.KbMemoryUseAlarm
	}
	return nil
}

// GetKbMemoryUseWarn returns the value of the KbMemoryUseWarn struct pointer
// from NokiaConf_Configure_System_Thresholds. If the receiver or the field KbMemoryUseWarn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Thresholds) GetKbMemoryUseWarn() *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn {
	if t != nil && t.KbMemoryUseWarn != nil {
		return t.KbMemoryUseWarn
	}
	return nil
}

// GetRmon returns the value of the Rmon struct pointer
// from NokiaConf_Configure_System_Thresholds. If the receiver or the field Rmon is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Thresholds) GetRmon() *NokiaConf_Configure_System_Thresholds_Rmon {
	if t != nil && t.Rmon != nil {
		return t.Rmon
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Thresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Thresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.KbMemoryUseAlarm.PopulateDefaults()
	t.KbMemoryUseWarn.PopulateDefaults()
	t.Rmon.PopulateDefaults()
	for _, e := range t.CflashCapAlarmPercent {
		e.PopulateDefaults()
	}
	for _, e := range t.CflashCapWarnPercent {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Thresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Thresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Thresholds.
func (*NokiaConf_Configure_System_Thresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent represents the /nokia-conf/configure/system/thresholds/cflash-cap-alarm-percent YANG schema element.
type NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent struct {
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	CflashId           *string                                  `path:"cflash-id" module:"nokia-conf"`
	FallingThreshold   *int32                                   `path:"falling-threshold" module:"nokia-conf"`
	Interval           *int32                                   `path:"interval" module:"nokia-conf"`
	RisingThreshold    *int32                                   `path:"rising-threshold" module:"nokia-conf"`
	RmonEventType      E_NokiaTypesSystem_ThresholdEventType    `path:"rmon-event-type" module:"nokia-conf"`
	StartupAlarm       E_NokiaTypesSystem_ThresholdStartupAlarm `path:"startup-alarm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCflashId retrieves the value of the leaf CflashId from the NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CflashId is set, it can
// safely use t.GetCflashId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CflashId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) GetCflashId() string {
	if t == nil || t.CflashId == nil {
		return ""
	}
	return *t.CflashId
}

// GetFallingThreshold retrieves the value of the leaf FallingThreshold from the NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThreshold is set, it can
// safely use t.GetFallingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) GetFallingThreshold() int32 {
	if t == nil || t.FallingThreshold == nil {
		return 0
	}
	return *t.FallingThreshold
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) GetInterval() int32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetRisingThreshold retrieves the value of the leaf RisingThreshold from the NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThreshold is set, it can
// safely use t.GetRisingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) GetRisingThreshold() int32 {
	if t == nil || t.RisingThreshold == nil {
		return 0
	}
	return *t.RisingThreshold
}

// GetRmonEventType retrieves the value of the leaf RmonEventType from the NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RmonEventType is set, it can
// safely use t.GetRmonEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RmonEventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) GetRmonEventType() E_NokiaTypesSystem_ThresholdEventType {
	if t == nil || t.RmonEventType == 0 {
		return NokiaTypesSystem_ThresholdEventType_both
	}
	return t.RmonEventType
}

// GetStartupAlarm retrieves the value of the leaf StartupAlarm from the NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupAlarm is set, it can
// safely use t.GetStartupAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupAlarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) GetStartupAlarm() E_NokiaTypesSystem_ThresholdStartupAlarm {
	if t == nil || t.StartupAlarm == 0 {
		return NokiaTypesSystem_ThresholdStartupAlarm_either
	}
	return t.StartupAlarm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RmonEventType == 0 {
		t.RmonEventType = NokiaTypesSystem_ThresholdEventType_both
	}
	if t.StartupAlarm == 0 {
		t.StartupAlarm = NokiaTypesSystem_ThresholdStartupAlarm_either
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CflashId == nil {
		return nil, fmt.Errorf("nil value for key CflashId")
	}

	return map[string]interface{}{
		"cflash-id": *t.CflashId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent.
func (*NokiaConf_Configure_System_Thresholds_CflashCapAlarmPercent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent represents the /nokia-conf/configure/system/thresholds/cflash-cap-warn-percent YANG schema element.
type NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent struct {
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	CflashId           *string                                  `path:"cflash-id" module:"nokia-conf"`
	FallingThreshold   *int32                                   `path:"falling-threshold" module:"nokia-conf"`
	Interval           *int32                                   `path:"interval" module:"nokia-conf"`
	RisingThreshold    *int32                                   `path:"rising-threshold" module:"nokia-conf"`
	RmonEventType      E_NokiaTypesSystem_ThresholdEventType    `path:"rmon-event-type" module:"nokia-conf"`
	StartupAlarm       E_NokiaTypesSystem_ThresholdStartupAlarm `path:"startup-alarm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCflashId retrieves the value of the leaf CflashId from the NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CflashId is set, it can
// safely use t.GetCflashId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CflashId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) GetCflashId() string {
	if t == nil || t.CflashId == nil {
		return ""
	}
	return *t.CflashId
}

// GetFallingThreshold retrieves the value of the leaf FallingThreshold from the NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThreshold is set, it can
// safely use t.GetFallingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) GetFallingThreshold() int32 {
	if t == nil || t.FallingThreshold == nil {
		return 0
	}
	return *t.FallingThreshold
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) GetInterval() int32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetRisingThreshold retrieves the value of the leaf RisingThreshold from the NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThreshold is set, it can
// safely use t.GetRisingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) GetRisingThreshold() int32 {
	if t == nil || t.RisingThreshold == nil {
		return 0
	}
	return *t.RisingThreshold
}

// GetRmonEventType retrieves the value of the leaf RmonEventType from the NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RmonEventType is set, it can
// safely use t.GetRmonEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RmonEventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) GetRmonEventType() E_NokiaTypesSystem_ThresholdEventType {
	if t == nil || t.RmonEventType == 0 {
		return NokiaTypesSystem_ThresholdEventType_both
	}
	return t.RmonEventType
}

// GetStartupAlarm retrieves the value of the leaf StartupAlarm from the NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupAlarm is set, it can
// safely use t.GetStartupAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupAlarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) GetStartupAlarm() E_NokiaTypesSystem_ThresholdStartupAlarm {
	if t == nil || t.StartupAlarm == 0 {
		return NokiaTypesSystem_ThresholdStartupAlarm_either
	}
	return t.StartupAlarm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RmonEventType == 0 {
		t.RmonEventType = NokiaTypesSystem_ThresholdEventType_both
	}
	if t.StartupAlarm == 0 {
		t.StartupAlarm = NokiaTypesSystem_ThresholdStartupAlarm_either
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CflashId == nil {
		return nil, fmt.Errorf("nil value for key CflashId")
	}

	return map[string]interface{}{
		"cflash-id": *t.CflashId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent.
func (*NokiaConf_Configure_System_Thresholds_CflashCapWarnPercent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm represents the /nokia-conf/configure/system/thresholds/kb-memory-use-alarm YANG schema element.
type NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm struct {
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	FallingThreshold   *int64                                   `path:"falling-threshold" module:"nokia-conf"`
	Interval           *int32                                   `path:"interval" module:"nokia-conf"`
	RisingThreshold    *int64                                   `path:"rising-threshold" module:"nokia-conf"`
	RmonEventType      E_NokiaTypesSystem_ThresholdEventType    `path:"rmon-event-type" module:"nokia-conf"`
	StartupAlarm       E_NokiaTypesSystem_ThresholdStartupAlarm `path:"startup-alarm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFallingThreshold retrieves the value of the leaf FallingThreshold from the NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThreshold is set, it can
// safely use t.GetFallingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) GetFallingThreshold() int64 {
	if t == nil || t.FallingThreshold == nil {
		return 0
	}
	return *t.FallingThreshold
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) GetInterval() int32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetRisingThreshold retrieves the value of the leaf RisingThreshold from the NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThreshold is set, it can
// safely use t.GetRisingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) GetRisingThreshold() int64 {
	if t == nil || t.RisingThreshold == nil {
		return 0
	}
	return *t.RisingThreshold
}

// GetRmonEventType retrieves the value of the leaf RmonEventType from the NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RmonEventType is set, it can
// safely use t.GetRmonEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RmonEventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) GetRmonEventType() E_NokiaTypesSystem_ThresholdEventType {
	if t == nil || t.RmonEventType == 0 {
		return NokiaTypesSystem_ThresholdEventType_both
	}
	return t.RmonEventType
}

// GetStartupAlarm retrieves the value of the leaf StartupAlarm from the NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupAlarm is set, it can
// safely use t.GetStartupAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupAlarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) GetStartupAlarm() E_NokiaTypesSystem_ThresholdStartupAlarm {
	if t == nil || t.StartupAlarm == 0 {
		return NokiaTypesSystem_ThresholdStartupAlarm_either
	}
	return t.StartupAlarm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RmonEventType == 0 {
		t.RmonEventType = NokiaTypesSystem_ThresholdEventType_both
	}
	if t.StartupAlarm == 0 {
		t.StartupAlarm = NokiaTypesSystem_ThresholdStartupAlarm_either
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm.
func (*NokiaConf_Configure_System_Thresholds_KbMemoryUseAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn represents the /nokia-conf/configure/system/thresholds/kb-memory-use-warn YANG schema element.
type NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn struct {
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	FallingThreshold   *int64                                   `path:"falling-threshold" module:"nokia-conf"`
	Interval           *int32                                   `path:"interval" module:"nokia-conf"`
	RisingThreshold    *int64                                   `path:"rising-threshold" module:"nokia-conf"`
	RmonEventType      E_NokiaTypesSystem_ThresholdEventType    `path:"rmon-event-type" module:"nokia-conf"`
	StartupAlarm       E_NokiaTypesSystem_ThresholdStartupAlarm `path:"startup-alarm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFallingThreshold retrieves the value of the leaf FallingThreshold from the NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThreshold is set, it can
// safely use t.GetFallingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) GetFallingThreshold() int64 {
	if t == nil || t.FallingThreshold == nil {
		return 0
	}
	return *t.FallingThreshold
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) GetInterval() int32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetRisingThreshold retrieves the value of the leaf RisingThreshold from the NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThreshold is set, it can
// safely use t.GetRisingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) GetRisingThreshold() int64 {
	if t == nil || t.RisingThreshold == nil {
		return 0
	}
	return *t.RisingThreshold
}

// GetRmonEventType retrieves the value of the leaf RmonEventType from the NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RmonEventType is set, it can
// safely use t.GetRmonEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RmonEventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) GetRmonEventType() E_NokiaTypesSystem_ThresholdEventType {
	if t == nil || t.RmonEventType == 0 {
		return NokiaTypesSystem_ThresholdEventType_both
	}
	return t.RmonEventType
}

// GetStartupAlarm retrieves the value of the leaf StartupAlarm from the NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupAlarm is set, it can
// safely use t.GetStartupAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupAlarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) GetStartupAlarm() E_NokiaTypesSystem_ThresholdStartupAlarm {
	if t == nil || t.StartupAlarm == 0 {
		return NokiaTypesSystem_ThresholdStartupAlarm_either
	}
	return t.StartupAlarm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RmonEventType == 0 {
		t.RmonEventType = NokiaTypesSystem_ThresholdEventType_both
	}
	if t.StartupAlarm == 0 {
		t.StartupAlarm = NokiaTypesSystem_ThresholdStartupAlarm_either
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn.
func (*NokiaConf_Configure_System_Thresholds_KbMemoryUseWarn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Thresholds_Rmon represents the /nokia-conf/configure/system/thresholds/rmon YANG schema element.
type NokiaConf_Configure_System_Thresholds_Rmon struct {
	Alarm map[uint32]*NokiaConf_Configure_System_Thresholds_Rmon_Alarm `path:"alarm" module:"nokia-conf"`
	Event map[uint32]*NokiaConf_Configure_System_Thresholds_Rmon_Event `path:"event" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Thresholds_Rmon implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Thresholds_Rmon) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// NokiaConf_Configure_System_Thresholds_Rmon struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) NewAlarm(RmonAlarmId uint32) (*NokiaConf_Configure_System_Thresholds_Rmon_Alarm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[uint32]*NokiaConf_Configure_System_Thresholds_Rmon_Alarm)
	}

	key := RmonAlarmId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &NokiaConf_Configure_System_Thresholds_Rmon_Alarm{
		RmonAlarmId: &RmonAlarmId,
	}

	return t.Alarm[key], nil
}

// RenameAlarm renames an entry in the list Alarm within
// the NokiaConf_Configure_System_Thresholds_Rmon struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) RenameAlarm(oldK, newK uint32) error {
	if _, ok := t.Alarm[newK]; ok {
		return fmt.Errorf("key %v already exists in Alarm", newK)
	}

	e, ok := t.Alarm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Alarm", oldK)
	}
	e.RmonAlarmId = &newK

	t.Alarm[newK] = e
	delete(t.Alarm, oldK)
	return nil
}

// GetOrCreateAlarm retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Thresholds_Rmon. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) GetOrCreateAlarm(RmonAlarmId uint32) *NokiaConf_Configure_System_Thresholds_Rmon_Alarm {

	key := RmonAlarmId

	if v, ok := t.Alarm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlarm(RmonAlarmId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlarm got unexpected error: %v", err))
	}
	return v
}

// GetAlarm retrieves the value with the specified key from
// the Alarm map field of NokiaConf_Configure_System_Thresholds_Rmon. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) GetAlarm(RmonAlarmId uint32) *NokiaConf_Configure_System_Thresholds_Rmon_Alarm {

	if t == nil {
		return nil
	}

	key := RmonAlarmId

	if lm, ok := t.Alarm[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlarm deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Thresholds_Rmon. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) DeleteAlarm(RmonAlarmId uint32) {
	key := RmonAlarmId

	delete(t.Alarm, key)
}

// AppendAlarm appends the supplied NokiaConf_Configure_System_Thresholds_Rmon_Alarm struct to the
// list Alarm of NokiaConf_Configure_System_Thresholds_Rmon. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Thresholds_Rmon_Alarm already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) AppendAlarm(v *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) error {
	if v.RmonAlarmId == nil {
		return fmt.Errorf("invalid nil key received for RmonAlarmId")
	}

	key := *v.RmonAlarmId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[uint32]*NokiaConf_Configure_System_Thresholds_Rmon_Alarm)
	}

	if _, ok := t.Alarm[key]; ok {
		return fmt.Errorf("duplicate key for list Alarm %v", key)
	}

	t.Alarm[key] = v
	return nil
}

// NewEvent creates a new entry in the Event list of the
// NokiaConf_Configure_System_Thresholds_Rmon struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) NewEvent(RmonEventId uint32) (*NokiaConf_Configure_System_Thresholds_Rmon_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[uint32]*NokiaConf_Configure_System_Thresholds_Rmon_Event)
	}

	key := RmonEventId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &NokiaConf_Configure_System_Thresholds_Rmon_Event{
		RmonEventId: &RmonEventId,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the NokiaConf_Configure_System_Thresholds_Rmon struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) RenameEvent(oldK, newK uint32) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.RmonEventId = &newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Thresholds_Rmon. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) GetOrCreateEvent(RmonEventId uint32) *NokiaConf_Configure_System_Thresholds_Rmon_Event {

	key := RmonEventId

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(RmonEventId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of NokiaConf_Configure_System_Thresholds_Rmon. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) GetEvent(RmonEventId uint32) *NokiaConf_Configure_System_Thresholds_Rmon_Event {

	if t == nil {
		return nil
	}

	key := RmonEventId

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Thresholds_Rmon. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) DeleteEvent(RmonEventId uint32) {
	key := RmonEventId

	delete(t.Event, key)
}

// AppendEvent appends the supplied NokiaConf_Configure_System_Thresholds_Rmon_Event struct to the
// list Event of NokiaConf_Configure_System_Thresholds_Rmon. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Thresholds_Rmon_Event already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) AppendEvent(v *NokiaConf_Configure_System_Thresholds_Rmon_Event) error {
	if v.RmonEventId == nil {
		return fmt.Errorf("invalid nil key received for RmonEventId")
	}

	key := *v.RmonEventId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[uint32]*NokiaConf_Configure_System_Thresholds_Rmon_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Thresholds_Rmon
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Alarm {
		e.PopulateDefaults()
	}
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Thresholds_Rmon"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Thresholds_Rmon) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Thresholds_Rmon.
func (*NokiaConf_Configure_System_Thresholds_Rmon) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Thresholds_Rmon_Alarm represents the /nokia-conf/configure/system/thresholds/rmon/alarm YANG schema element.
type NokiaConf_Configure_System_Thresholds_Rmon_Alarm struct {
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	FallingEvent       *uint32                                  `path:"falling-event" module:"nokia-conf"`
	FallingThreshold   *int64                                   `path:"falling-threshold" module:"nokia-conf"`
	Interval           *int32                                   `path:"interval" module:"nokia-conf"`
	Owner              *string                                  `path:"owner" module:"nokia-conf"`
	RisingEvent        *uint32                                  `path:"rising-event" module:"nokia-conf"`
	RisingThreshold    *int64                                   `path:"rising-threshold" module:"nokia-conf"`
	RmonAlarmId        *uint32                                  `path:"rmon-alarm-id" module:"nokia-conf"`
	SampleType         E_NokiaTypesSystem_ThresholdSample       `path:"sample-type" module:"nokia-conf"`
	StartupAlarm       E_NokiaTypesSystem_ThresholdStartupAlarm `path:"startup-alarm" module:"nokia-conf"`
	VariableOid        *string                                  `path:"variable-oid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Thresholds_Rmon_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Thresholds_Rmon_Alarm) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFallingEvent retrieves the value of the leaf FallingEvent from the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingEvent is set, it can
// safely use t.GetFallingEvent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingEvent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) GetFallingEvent() uint32 {
	if t == nil || t.FallingEvent == nil {
		return 0
	}
	return *t.FallingEvent
}

// GetFallingThreshold retrieves the value of the leaf FallingThreshold from the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThreshold is set, it can
// safely use t.GetFallingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) GetFallingThreshold() int64 {
	if t == nil || t.FallingThreshold == nil {
		return 0
	}
	return *t.FallingThreshold
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) GetInterval() int32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) GetOwner() string {
	if t == nil || t.Owner == nil {
		return "TiMOS CLI"
	}
	return *t.Owner
}

// GetRisingEvent retrieves the value of the leaf RisingEvent from the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingEvent is set, it can
// safely use t.GetRisingEvent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingEvent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) GetRisingEvent() uint32 {
	if t == nil || t.RisingEvent == nil {
		return 0
	}
	return *t.RisingEvent
}

// GetRisingThreshold retrieves the value of the leaf RisingThreshold from the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThreshold is set, it can
// safely use t.GetRisingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) GetRisingThreshold() int64 {
	if t == nil || t.RisingThreshold == nil {
		return 0
	}
	return *t.RisingThreshold
}

// GetRmonAlarmId retrieves the value of the leaf RmonAlarmId from the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RmonAlarmId is set, it can
// safely use t.GetRmonAlarmId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RmonAlarmId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) GetRmonAlarmId() uint32 {
	if t == nil || t.RmonAlarmId == nil {
		return 0
	}
	return *t.RmonAlarmId
}

// GetSampleType retrieves the value of the leaf SampleType from the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleType is set, it can
// safely use t.GetSampleType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) GetSampleType() E_NokiaTypesSystem_ThresholdSample {
	if t == nil || t.SampleType == 0 {
		return NokiaTypesSystem_ThresholdSample_absolute
	}
	return t.SampleType
}

// GetStartupAlarm retrieves the value of the leaf StartupAlarm from the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupAlarm is set, it can
// safely use t.GetStartupAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupAlarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) GetStartupAlarm() E_NokiaTypesSystem_ThresholdStartupAlarm {
	if t == nil || t.StartupAlarm == 0 {
		return NokiaTypesSystem_ThresholdStartupAlarm_either
	}
	return t.StartupAlarm
}

// GetVariableOid retrieves the value of the leaf VariableOid from the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VariableOid is set, it can
// safely use t.GetVariableOid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VariableOid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) GetVariableOid() string {
	if t == nil || t.VariableOid == nil {
		return ""
	}
	return *t.VariableOid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Thresholds_Rmon_Alarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Owner == nil {
		var v string = "TiMOS CLI"
		t.Owner = &v
	}
	if t.SampleType == 0 {
		t.SampleType = NokiaTypesSystem_ThresholdSample_absolute
	}
	if t.StartupAlarm == 0 {
		t.StartupAlarm = NokiaTypesSystem_ThresholdStartupAlarm_either
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Thresholds_Rmon_Alarm struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RmonAlarmId == nil {
		return nil, fmt.Errorf("nil value for key RmonAlarmId")
	}

	return map[string]interface{}{
		"rmon-alarm-id": *t.RmonAlarmId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Thresholds_Rmon_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Alarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Thresholds_Rmon_Alarm.
func (*NokiaConf_Configure_System_Thresholds_Rmon_Alarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Thresholds_Rmon_Event represents the /nokia-conf/configure/system/thresholds/rmon/event YANG schema element.
type NokiaConf_Configure_System_Thresholds_Rmon_Event struct {
	ApplyGroups        []string                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                   `path:"description" module:"nokia-conf"`
	EventType          E_NokiaTypesSystem_ThresholdRmonEventType `path:"event-type" module:"nokia-conf"`
	Owner              *string                                   `path:"owner" module:"nokia-conf"`
	RmonEventId        *uint32                                   `path:"rmon-event-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Thresholds_Rmon_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Thresholds_Rmon_Event) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Thresholds_Rmon_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Event) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Thresholds_Rmon_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Event) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_System_Thresholds_Rmon_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Event) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_System_Thresholds_Rmon_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Event) GetEventType() E_NokiaTypesSystem_ThresholdRmonEventType {
	if t == nil || t.EventType == 0 {
		return NokiaTypesSystem_ThresholdRmonEventType_both
	}
	return t.EventType
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_System_Thresholds_Rmon_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Event) GetOwner() string {
	if t == nil || t.Owner == nil {
		return "TiMOS CLI"
	}
	return *t.Owner
}

// GetRmonEventId retrieves the value of the leaf RmonEventId from the NokiaConf_Configure_System_Thresholds_Rmon_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RmonEventId is set, it can
// safely use t.GetRmonEventId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RmonEventId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Event) GetRmonEventId() uint32 {
	if t == nil || t.RmonEventId == nil {
		return 0
	}
	return *t.RmonEventId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Thresholds_Rmon_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaTypesSystem_ThresholdRmonEventType_both
	}
	if t.Owner == nil {
		var v string = "TiMOS CLI"
		t.Owner = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Thresholds_Rmon_Event struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Event) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RmonEventId == nil {
		return nil, fmt.Errorf("nil value for key RmonEventId")
	}

	return map[string]interface{}{
		"rmon-event-id": *t.RmonEventId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Thresholds_Rmon_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Event) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Thresholds_Rmon_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Thresholds_Rmon_Event.
func (*NokiaConf_Configure_System_Thresholds_Rmon_Event) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time represents the /nokia-conf/configure/system/time YANG schema element.
type NokiaConf_Configure_System_Time struct {
	ApplyGroups        []string                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	DstZone            map[string]*NokiaConf_Configure_System_Time_DstZone `path:"dst-zone" module:"nokia-conf"`
	Ntp                *NokiaConf_Configure_System_Time_Ntp                `path:"ntp" module:"nokia-conf" yangPresence:"true"`
	PreferLocalTime    *bool                                               `path:"prefer-local-time" module:"nokia-conf"`
	Sntp               *NokiaConf_Configure_System_Time_Sntp               `path:"sntp" module:"nokia-conf"`
	Zone               *NokiaConf_Configure_System_Time_Zone               `path:"zone" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time) IsYANGGoStruct() {}

// NewDstZone creates a new entry in the DstZone list of the
// NokiaConf_Configure_System_Time struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Time) NewDstZone(SummerTimeZone string) (*NokiaConf_Configure_System_Time_DstZone, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DstZone == nil {
		t.DstZone = make(map[string]*NokiaConf_Configure_System_Time_DstZone)
	}

	key := SummerTimeZone

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DstZone[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DstZone", key)
	}

	t.DstZone[key] = &NokiaConf_Configure_System_Time_DstZone{
		SummerTimeZone: &SummerTimeZone,
	}

	return t.DstZone[key], nil
}

// RenameDstZone renames an entry in the list DstZone within
// the NokiaConf_Configure_System_Time struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Time) RenameDstZone(oldK, newK string) error {
	if _, ok := t.DstZone[newK]; ok {
		return fmt.Errorf("key %v already exists in DstZone", newK)
	}

	e, ok := t.DstZone[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DstZone", oldK)
	}
	e.SummerTimeZone = &newK

	t.DstZone[newK] = e
	delete(t.DstZone, oldK)
	return nil
}

// GetOrCreateDstZone retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Time) GetOrCreateDstZone(SummerTimeZone string) *NokiaConf_Configure_System_Time_DstZone {

	key := SummerTimeZone

	if v, ok := t.DstZone[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDstZone(SummerTimeZone)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDstZone got unexpected error: %v", err))
	}
	return v
}

// GetDstZone retrieves the value with the specified key from
// the DstZone map field of NokiaConf_Configure_System_Time. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Time) GetDstZone(SummerTimeZone string) *NokiaConf_Configure_System_Time_DstZone {

	if t == nil {
		return nil
	}

	key := SummerTimeZone

	if lm, ok := t.DstZone[key]; ok {
		return lm
	}
	return nil
}

// DeleteDstZone deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Time) DeleteDstZone(SummerTimeZone string) {
	key := SummerTimeZone

	delete(t.DstZone, key)
}

// AppendDstZone appends the supplied NokiaConf_Configure_System_Time_DstZone struct to the
// list DstZone of NokiaConf_Configure_System_Time. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Time_DstZone already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Time) AppendDstZone(v *NokiaConf_Configure_System_Time_DstZone) error {
	if v.SummerTimeZone == nil {
		return fmt.Errorf("invalid nil key received for SummerTimeZone")
	}

	key := *v.SummerTimeZone

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DstZone == nil {
		t.DstZone = make(map[string]*NokiaConf_Configure_System_Time_DstZone)
	}

	if _, ok := t.DstZone[key]; ok {
		return fmt.Errorf("duplicate key for list DstZone %v", key)
	}

	t.DstZone[key] = v
	return nil
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Time) GetOrCreateNtp() *NokiaConf_Configure_System_Time_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &NokiaConf_Configure_System_Time_Ntp{}
	return t.Ntp
}

// GetOrCreateSntp retrieves the value of the Sntp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Time) GetOrCreateSntp() *NokiaConf_Configure_System_Time_Sntp {
	if t.Sntp != nil {
		return t.Sntp
	}
	t.Sntp = &NokiaConf_Configure_System_Time_Sntp{}
	return t.Sntp
}

// GetOrCreateZone retrieves the value of the Zone field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Time) GetOrCreateZone() *NokiaConf_Configure_System_Time_Zone {
	if t.Zone != nil {
		return t.Zone
	}
	t.Zone = &NokiaConf_Configure_System_Time_Zone{}
	return t.Zone
}

// GetNtp returns the value of the Ntp struct pointer
// from NokiaConf_Configure_System_Time. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Time) GetNtp() *NokiaConf_Configure_System_Time_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetSntp returns the value of the Sntp struct pointer
// from NokiaConf_Configure_System_Time. If the receiver or the field Sntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Time) GetSntp() *NokiaConf_Configure_System_Time_Sntp {
	if t != nil && t.Sntp != nil {
		return t.Sntp
	}
	return nil
}

// GetZone returns the value of the Zone struct pointer
// from NokiaConf_Configure_System_Time. If the receiver or the field Zone is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Time) GetZone() *NokiaConf_Configure_System_Time_Zone {
	if t != nil && t.Zone != nil {
		return t.Zone
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Time
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Time
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPreferLocalTime retrieves the value of the leaf PreferLocalTime from the NokiaConf_Configure_System_Time
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferLocalTime is set, it can
// safely use t.GetPreferLocalTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferLocalTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time) GetPreferLocalTime() bool {
	if t == nil || t.PreferLocalTime == nil {
		return false
	}
	return *t.PreferLocalTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferLocalTime == nil {
		var v bool = false
		t.PreferLocalTime = &v
	}
	t.Ntp.PopulateDefaults()
	t.Sntp.PopulateDefaults()
	t.Zone.PopulateDefaults()
	for _, e := range t.DstZone {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time.
func (*NokiaConf_Configure_System_Time) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_DstZone represents the /nokia-conf/configure/system/time/dst-zone YANG schema element.
type NokiaConf_Configure_System_Time_DstZone struct {
	ApplyGroups        []string                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *NokiaConf_Configure_System_Time_DstZone_End   `path:"end" module:"nokia-conf"`
	Offset             *uint32                                        `path:"offset" module:"nokia-conf"`
	Start              *NokiaConf_Configure_System_Time_DstZone_Start `path:"start" module:"nokia-conf"`
	SummerTimeZone     *string                                        `path:"summer-time-zone" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_DstZone implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_DstZone) IsYANGGoStruct() {}

// GetOrCreateEnd retrieves the value of the End field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Time_DstZone) GetOrCreateEnd() *NokiaConf_Configure_System_Time_DstZone_End {
	if t.End != nil {
		return t.End
	}
	t.End = &NokiaConf_Configure_System_Time_DstZone_End{}
	return t.End
}

// GetOrCreateStart retrieves the value of the Start field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Time_DstZone) GetOrCreateStart() *NokiaConf_Configure_System_Time_DstZone_Start {
	if t.Start != nil {
		return t.Start
	}
	t.Start = &NokiaConf_Configure_System_Time_DstZone_Start{}
	return t.Start
}

// GetEnd returns the value of the End struct pointer
// from NokiaConf_Configure_System_Time_DstZone. If the receiver or the field End is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Time_DstZone) GetEnd() *NokiaConf_Configure_System_Time_DstZone_End {
	if t != nil && t.End != nil {
		return t.End
	}
	return nil
}

// GetStart returns the value of the Start struct pointer
// from NokiaConf_Configure_System_Time_DstZone. If the receiver or the field Start is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Time_DstZone) GetStart() *NokiaConf_Configure_System_Time_DstZone_Start {
	if t != nil && t.Start != nil {
		return t.Start
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Time_DstZone
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_DstZone) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Time_DstZone
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_DstZone) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_System_Time_DstZone
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_DstZone) GetOffset() uint32 {
	if t == nil || t.Offset == nil {
		return 60
	}
	return *t.Offset
}

// GetSummerTimeZone retrieves the value of the leaf SummerTimeZone from the NokiaConf_Configure_System_Time_DstZone
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SummerTimeZone is set, it can
// safely use t.GetSummerTimeZone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SummerTimeZone == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_DstZone) GetSummerTimeZone() string {
	if t == nil || t.SummerTimeZone == nil {
		return ""
	}
	return *t.SummerTimeZone
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_DstZone
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_DstZone) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Offset == nil {
		var v uint32 = 60
		t.Offset = &v
	}
	t.End.PopulateDefaults()
	t.Start.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Time_DstZone struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Time_DstZone) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SummerTimeZone == nil {
		return nil, fmt.Errorf("nil value for key SummerTimeZone")
	}

	return map[string]interface{}{
		"summer-time-zone": *t.SummerTimeZone,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_DstZone) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_DstZone"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_DstZone) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_DstZone) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_DstZone.
func (*NokiaConf_Configure_System_Time_DstZone) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_DstZone_End represents the /nokia-conf/configure/system/time/dst-zone/end YANG schema element.
type NokiaConf_Configure_System_Time_DstZone_End struct {
	Day          E_NokiaTypesSystem_DayOfWeekNameLong `path:"day" module:"nokia-conf"`
	HoursMinutes *string                              `path:"hours-minutes" module:"nokia-conf"`
	Month        E_NokiaTypesSystem_MonthNameLong     `path:"month" module:"nokia-conf"`
	Week         E_NokiaTypesSystem_Week              `path:"week" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_DstZone_End implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_DstZone_End) IsYANGGoStruct() {}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_System_Time_DstZone_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_DstZone_End) GetDay() E_NokiaTypesSystem_DayOfWeekNameLong {
	if t == nil || t.Day == 0 {
		return NokiaTypesSystem_DayOfWeekNameLong_sunday
	}
	return t.Day
}

// GetHoursMinutes retrieves the value of the leaf HoursMinutes from the NokiaConf_Configure_System_Time_DstZone_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoursMinutes is set, it can
// safely use t.GetHoursMinutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoursMinutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_DstZone_End) GetHoursMinutes() string {
	if t == nil || t.HoursMinutes == nil {
		return "00:00"
	}
	return *t.HoursMinutes
}

// GetMonth retrieves the value of the leaf Month from the NokiaConf_Configure_System_Time_DstZone_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Month is set, it can
// safely use t.GetMonth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Month == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_DstZone_End) GetMonth() E_NokiaTypesSystem_MonthNameLong {
	if t == nil || t.Month == 0 {
		return NokiaTypesSystem_MonthNameLong_january
	}
	return t.Month
}

// GetWeek retrieves the value of the leaf Week from the NokiaConf_Configure_System_Time_DstZone_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Week is set, it can
// safely use t.GetWeek() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Week == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_DstZone_End) GetWeek() E_NokiaTypesSystem_Week {
	if t == nil || t.Week == 0 {
		return NokiaTypesSystem_Week_first
	}
	return t.Week
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_DstZone_End
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_DstZone_End) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Day == 0 {
		t.Day = NokiaTypesSystem_DayOfWeekNameLong_sunday
	}
	if t.HoursMinutes == nil {
		var v string = "00:00"
		t.HoursMinutes = &v
	}
	if t.Month == 0 {
		t.Month = NokiaTypesSystem_MonthNameLong_january
	}
	if t.Week == 0 {
		t.Week = NokiaTypesSystem_Week_first
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_DstZone_End) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_DstZone_End"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_DstZone_End) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_DstZone_End) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_DstZone_End.
func (*NokiaConf_Configure_System_Time_DstZone_End) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_DstZone_Start represents the /nokia-conf/configure/system/time/dst-zone/start YANG schema element.
type NokiaConf_Configure_System_Time_DstZone_Start struct {
	Day          E_NokiaTypesSystem_DayOfWeekNameLong `path:"day" module:"nokia-conf"`
	HoursMinutes *string                              `path:"hours-minutes" module:"nokia-conf"`
	Month        E_NokiaTypesSystem_MonthNameLong     `path:"month" module:"nokia-conf"`
	Week         E_NokiaTypesSystem_Week              `path:"week" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_DstZone_Start implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_DstZone_Start) IsYANGGoStruct() {}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_System_Time_DstZone_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_DstZone_Start) GetDay() E_NokiaTypesSystem_DayOfWeekNameLong {
	if t == nil || t.Day == 0 {
		return NokiaTypesSystem_DayOfWeekNameLong_sunday
	}
	return t.Day
}

// GetHoursMinutes retrieves the value of the leaf HoursMinutes from the NokiaConf_Configure_System_Time_DstZone_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoursMinutes is set, it can
// safely use t.GetHoursMinutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoursMinutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_DstZone_Start) GetHoursMinutes() string {
	if t == nil || t.HoursMinutes == nil {
		return "00:00"
	}
	return *t.HoursMinutes
}

// GetMonth retrieves the value of the leaf Month from the NokiaConf_Configure_System_Time_DstZone_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Month is set, it can
// safely use t.GetMonth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Month == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_DstZone_Start) GetMonth() E_NokiaTypesSystem_MonthNameLong {
	if t == nil || t.Month == 0 {
		return NokiaTypesSystem_MonthNameLong_january
	}
	return t.Month
}

// GetWeek retrieves the value of the leaf Week from the NokiaConf_Configure_System_Time_DstZone_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Week is set, it can
// safely use t.GetWeek() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Week == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_DstZone_Start) GetWeek() E_NokiaTypesSystem_Week {
	if t == nil || t.Week == 0 {
		return NokiaTypesSystem_Week_first
	}
	return t.Week
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_DstZone_Start
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_DstZone_Start) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Day == 0 {
		t.Day = NokiaTypesSystem_DayOfWeekNameLong_sunday
	}
	if t.HoursMinutes == nil {
		var v string = "00:00"
		t.HoursMinutes = &v
	}
	if t.Month == 0 {
		t.Month = NokiaTypesSystem_MonthNameLong_january
	}
	if t.Week == 0 {
		t.Week = NokiaTypesSystem_Week_first
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_DstZone_Start) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_DstZone_Start"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_DstZone_Start) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_DstZone_Start) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_DstZone_Start.
func (*NokiaConf_Configure_System_Time_DstZone_Start) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Ntp represents the /nokia-conf/configure/system/time/ntp YANG schema element.
type NokiaConf_Configure_System_Time_Ntp struct {
	AdminState          E_NokiaTypesSros_AdminState                                                                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationCheck *bool                                                                                                            `path:"authentication-check" module:"nokia-conf"`
	AuthenticationKey   map[uint32]*NokiaConf_Configure_System_Time_Ntp_AuthenticationKey                                                `path:"authentication-key" module:"nokia-conf"`
	Broadcast           map[NokiaConf_Configure_System_Time_Ntp_Broadcast_Key]*NokiaConf_Configure_System_Time_Ntp_Broadcast             `path:"broadcast" module:"nokia-conf"`
	BroadcastClient     map[NokiaConf_Configure_System_Time_Ntp_BroadcastClient_Key]*NokiaConf_Configure_System_Time_Ntp_BroadcastClient `path:"broadcast-client" module:"nokia-conf"`
	Multicast           *NokiaConf_Configure_System_Time_Ntp_Multicast                                                                   `path:"multicast" module:"nokia-conf" yangPresence:"true"`
	MulticastClient     *NokiaConf_Configure_System_Time_Ntp_MulticastClient                                                             `path:"multicast-client" module:"nokia-conf" yangPresence:"true"`
	NtpServer           *NokiaConf_Configure_System_Time_Ntp_NtpServer                                                                   `path:"ntp-server" module:"nokia-conf" yangPresence:"true"`
	Peer                map[NokiaConf_Configure_System_Time_Ntp_Peer_Key]*NokiaConf_Configure_System_Time_Ntp_Peer                       `path:"peer" module:"nokia-conf"`
	Server              map[NokiaConf_Configure_System_Time_Ntp_Server_Key]*NokiaConf_Configure_System_Time_Ntp_Server                   `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Ntp) IsYANGGoStruct() {}

// NokiaConf_Configure_System_Time_Ntp_Broadcast_Key represents the key for list Broadcast of element /nokia-conf/configure/system/time/ntp.
type NokiaConf_Configure_System_Time_Ntp_Broadcast_Key struct {
	RouterInstance string `path:"router-instance"`
	InterfaceName  string `path:"interface-name"`
}

// NokiaConf_Configure_System_Time_Ntp_BroadcastClient_Key represents the key for list BroadcastClient of element /nokia-conf/configure/system/time/ntp.
type NokiaConf_Configure_System_Time_Ntp_BroadcastClient_Key struct {
	RouterInstance string `path:"router-instance"`
	InterfaceName  string `path:"interface-name"`
}

// NokiaConf_Configure_System_Time_Ntp_Peer_Key represents the key for list Peer of element /nokia-conf/configure/system/time/ntp.
type NokiaConf_Configure_System_Time_Ntp_Peer_Key struct {
	IpAddress      string `path:"ip-address"`
	RouterInstance string `path:"router-instance"`
}

// NokiaConf_Configure_System_Time_Ntp_Server_Key represents the key for list Server of element /nokia-conf/configure/system/time/ntp.
type NokiaConf_Configure_System_Time_Ntp_Server_Key struct {
	IpAddress      NokiaConf_Configure_System_Time_Ntp_Server_IpAddress_Union `path:"ip-address"`
	RouterInstance string                                                     `path:"router-instance"`
}

// NewAuthenticationKey creates a new entry in the AuthenticationKey list of the
// NokiaConf_Configure_System_Time_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Time_Ntp) NewAuthenticationKey(KeyId uint32) (*NokiaConf_Configure_System_Time_Ntp_AuthenticationKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AuthenticationKey == nil {
		t.AuthenticationKey = make(map[uint32]*NokiaConf_Configure_System_Time_Ntp_AuthenticationKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AuthenticationKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AuthenticationKey", key)
	}

	t.AuthenticationKey[key] = &NokiaConf_Configure_System_Time_Ntp_AuthenticationKey{
		KeyId: &KeyId,
	}

	return t.AuthenticationKey[key], nil
}

// RenameAuthenticationKey renames an entry in the list AuthenticationKey within
// the NokiaConf_Configure_System_Time_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Time_Ntp) RenameAuthenticationKey(oldK, newK uint32) error {
	if _, ok := t.AuthenticationKey[newK]; ok {
		return fmt.Errorf("key %v already exists in AuthenticationKey", newK)
	}

	e, ok := t.AuthenticationKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AuthenticationKey", oldK)
	}
	e.KeyId = &newK

	t.AuthenticationKey[newK] = e
	delete(t.AuthenticationKey, oldK)
	return nil
}

// GetOrCreateAuthenticationKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Time_Ntp) GetOrCreateAuthenticationKey(KeyId uint32) *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey {

	key := KeyId

	if v, ok := t.AuthenticationKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAuthenticationKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAuthenticationKey got unexpected error: %v", err))
	}
	return v
}

// GetAuthenticationKey retrieves the value with the specified key from
// the AuthenticationKey map field of NokiaConf_Configure_System_Time_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Time_Ntp) GetAuthenticationKey(KeyId uint32) *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.AuthenticationKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteAuthenticationKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time_Ntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Time_Ntp) DeleteAuthenticationKey(KeyId uint32) {
	key := KeyId

	delete(t.AuthenticationKey, key)
}

// AppendAuthenticationKey appends the supplied NokiaConf_Configure_System_Time_Ntp_AuthenticationKey struct to the
// list AuthenticationKey of NokiaConf_Configure_System_Time_Ntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Time_Ntp_AuthenticationKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Time_Ntp) AppendAuthenticationKey(v *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AuthenticationKey == nil {
		t.AuthenticationKey = make(map[uint32]*NokiaConf_Configure_System_Time_Ntp_AuthenticationKey)
	}

	if _, ok := t.AuthenticationKey[key]; ok {
		return fmt.Errorf("duplicate key for list AuthenticationKey %v", key)
	}

	t.AuthenticationKey[key] = v
	return nil
}

// NewBroadcast creates a new entry in the Broadcast list of the
// NokiaConf_Configure_System_Time_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Time_Ntp) NewBroadcast(RouterInstance string, InterfaceName string) (*NokiaConf_Configure_System_Time_Ntp_Broadcast, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Broadcast == nil {
		t.Broadcast = make(map[NokiaConf_Configure_System_Time_Ntp_Broadcast_Key]*NokiaConf_Configure_System_Time_Ntp_Broadcast)
	}

	key := NokiaConf_Configure_System_Time_Ntp_Broadcast_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Broadcast[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Broadcast", key)
	}

	t.Broadcast[key] = &NokiaConf_Configure_System_Time_Ntp_Broadcast{
		RouterInstance: &RouterInstance,
		InterfaceName:  &InterfaceName,
	}

	return t.Broadcast[key], nil
}

// RenameBroadcast renames an entry in the list Broadcast within
// the NokiaConf_Configure_System_Time_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Time_Ntp) RenameBroadcast(oldK, newK NokiaConf_Configure_System_Time_Ntp_Broadcast_Key) error {
	if _, ok := t.Broadcast[newK]; ok {
		return fmt.Errorf("key %v already exists in Broadcast", newK)
	}

	e, ok := t.Broadcast[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Broadcast", oldK)
	}
	e.RouterInstance = &newK.RouterInstance
	e.InterfaceName = &newK.InterfaceName

	t.Broadcast[newK] = e
	delete(t.Broadcast, oldK)
	return nil
}

// GetOrCreateBroadcast retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Time_Ntp) GetOrCreateBroadcast(RouterInstance string, InterfaceName string) *NokiaConf_Configure_System_Time_Ntp_Broadcast {

	key := NokiaConf_Configure_System_Time_Ntp_Broadcast_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	if v, ok := t.Broadcast[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBroadcast(RouterInstance, InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBroadcast got unexpected error: %v", err))
	}
	return v
}

// GetBroadcast retrieves the value with the specified key from
// the Broadcast map field of NokiaConf_Configure_System_Time_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Time_Ntp) GetBroadcast(RouterInstance string, InterfaceName string) *NokiaConf_Configure_System_Time_Ntp_Broadcast {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_System_Time_Ntp_Broadcast_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	if lm, ok := t.Broadcast[key]; ok {
		return lm
	}
	return nil
}

// DeleteBroadcast deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time_Ntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Time_Ntp) DeleteBroadcast(RouterInstance string, InterfaceName string) {
	key := NokiaConf_Configure_System_Time_Ntp_Broadcast_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	delete(t.Broadcast, key)
}

// AppendBroadcast appends the supplied NokiaConf_Configure_System_Time_Ntp_Broadcast struct to the
// list Broadcast of NokiaConf_Configure_System_Time_Ntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Time_Ntp_Broadcast already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Time_Ntp) AppendBroadcast(v *NokiaConf_Configure_System_Time_Ntp_Broadcast) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key for InterfaceName")
	}

	key := NokiaConf_Configure_System_Time_Ntp_Broadcast_Key{
		RouterInstance: *v.RouterInstance,
		InterfaceName:  *v.InterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Broadcast == nil {
		t.Broadcast = make(map[NokiaConf_Configure_System_Time_Ntp_Broadcast_Key]*NokiaConf_Configure_System_Time_Ntp_Broadcast)
	}

	if _, ok := t.Broadcast[key]; ok {
		return fmt.Errorf("duplicate key for list Broadcast %v", key)
	}

	t.Broadcast[key] = v
	return nil
}

// NewBroadcastClient creates a new entry in the BroadcastClient list of the
// NokiaConf_Configure_System_Time_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Time_Ntp) NewBroadcastClient(RouterInstance string, InterfaceName string) (*NokiaConf_Configure_System_Time_Ntp_BroadcastClient, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BroadcastClient == nil {
		t.BroadcastClient = make(map[NokiaConf_Configure_System_Time_Ntp_BroadcastClient_Key]*NokiaConf_Configure_System_Time_Ntp_BroadcastClient)
	}

	key := NokiaConf_Configure_System_Time_Ntp_BroadcastClient_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BroadcastClient[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BroadcastClient", key)
	}

	t.BroadcastClient[key] = &NokiaConf_Configure_System_Time_Ntp_BroadcastClient{
		RouterInstance: &RouterInstance,
		InterfaceName:  &InterfaceName,
	}

	return t.BroadcastClient[key], nil
}

// RenameBroadcastClient renames an entry in the list BroadcastClient within
// the NokiaConf_Configure_System_Time_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Time_Ntp) RenameBroadcastClient(oldK, newK NokiaConf_Configure_System_Time_Ntp_BroadcastClient_Key) error {
	if _, ok := t.BroadcastClient[newK]; ok {
		return fmt.Errorf("key %v already exists in BroadcastClient", newK)
	}

	e, ok := t.BroadcastClient[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BroadcastClient", oldK)
	}
	e.RouterInstance = &newK.RouterInstance
	e.InterfaceName = &newK.InterfaceName

	t.BroadcastClient[newK] = e
	delete(t.BroadcastClient, oldK)
	return nil
}

// GetOrCreateBroadcastClient retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Time_Ntp) GetOrCreateBroadcastClient(RouterInstance string, InterfaceName string) *NokiaConf_Configure_System_Time_Ntp_BroadcastClient {

	key := NokiaConf_Configure_System_Time_Ntp_BroadcastClient_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	if v, ok := t.BroadcastClient[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBroadcastClient(RouterInstance, InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBroadcastClient got unexpected error: %v", err))
	}
	return v
}

// GetBroadcastClient retrieves the value with the specified key from
// the BroadcastClient map field of NokiaConf_Configure_System_Time_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Time_Ntp) GetBroadcastClient(RouterInstance string, InterfaceName string) *NokiaConf_Configure_System_Time_Ntp_BroadcastClient {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_System_Time_Ntp_BroadcastClient_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	if lm, ok := t.BroadcastClient[key]; ok {
		return lm
	}
	return nil
}

// DeleteBroadcastClient deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time_Ntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Time_Ntp) DeleteBroadcastClient(RouterInstance string, InterfaceName string) {
	key := NokiaConf_Configure_System_Time_Ntp_BroadcastClient_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	delete(t.BroadcastClient, key)
}

// AppendBroadcastClient appends the supplied NokiaConf_Configure_System_Time_Ntp_BroadcastClient struct to the
// list BroadcastClient of NokiaConf_Configure_System_Time_Ntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Time_Ntp_BroadcastClient already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Time_Ntp) AppendBroadcastClient(v *NokiaConf_Configure_System_Time_Ntp_BroadcastClient) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key for InterfaceName")
	}

	key := NokiaConf_Configure_System_Time_Ntp_BroadcastClient_Key{
		RouterInstance: *v.RouterInstance,
		InterfaceName:  *v.InterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BroadcastClient == nil {
		t.BroadcastClient = make(map[NokiaConf_Configure_System_Time_Ntp_BroadcastClient_Key]*NokiaConf_Configure_System_Time_Ntp_BroadcastClient)
	}

	if _, ok := t.BroadcastClient[key]; ok {
		return fmt.Errorf("duplicate key for list BroadcastClient %v", key)
	}

	t.BroadcastClient[key] = v
	return nil
}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_System_Time_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Time_Ntp) NewPeer(IpAddress string, RouterInstance string) (*NokiaConf_Configure_System_Time_Ntp_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[NokiaConf_Configure_System_Time_Ntp_Peer_Key]*NokiaConf_Configure_System_Time_Ntp_Peer)
	}

	key := NokiaConf_Configure_System_Time_Ntp_Peer_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_System_Time_Ntp_Peer{
		IpAddress:      &IpAddress,
		RouterInstance: &RouterInstance,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_System_Time_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Time_Ntp) RenamePeer(oldK, newK NokiaConf_Configure_System_Time_Ntp_Peer_Key) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK.IpAddress
	e.RouterInstance = &newK.RouterInstance

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Time_Ntp) GetOrCreatePeer(IpAddress string, RouterInstance string) *NokiaConf_Configure_System_Time_Ntp_Peer {

	key := NokiaConf_Configure_System_Time_Ntp_Peer_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress, RouterInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_System_Time_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Time_Ntp) GetPeer(IpAddress string, RouterInstance string) *NokiaConf_Configure_System_Time_Ntp_Peer {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_System_Time_Ntp_Peer_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time_Ntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Time_Ntp) DeletePeer(IpAddress string, RouterInstance string) {
	key := NokiaConf_Configure_System_Time_Ntp_Peer_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_System_Time_Ntp_Peer struct to the
// list Peer of NokiaConf_Configure_System_Time_Ntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Time_Ntp_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Time_Ntp) AppendPeer(v *NokiaConf_Configure_System_Time_Ntp_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	key := NokiaConf_Configure_System_Time_Ntp_Peer_Key{
		IpAddress:      *v.IpAddress,
		RouterInstance: *v.RouterInstance,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[NokiaConf_Configure_System_Time_Ntp_Peer_Key]*NokiaConf_Configure_System_Time_Ntp_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_System_Time_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Time_Ntp) NewServer(IpAddress NokiaConf_Configure_System_Time_Ntp_Server_IpAddress_Union, RouterInstance string) (*NokiaConf_Configure_System_Time_Ntp_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_System_Time_Ntp_Server_Key]*NokiaConf_Configure_System_Time_Ntp_Server)
	}

	key := NokiaConf_Configure_System_Time_Ntp_Server_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_System_Time_Ntp_Server{
		IpAddress:      IpAddress,
		RouterInstance: &RouterInstance,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_System_Time_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Time_Ntp) RenameServer(oldK, newK NokiaConf_Configure_System_Time_Ntp_Server_Key) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.IpAddress = newK.IpAddress
	e.RouterInstance = &newK.RouterInstance

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Time_Ntp) GetOrCreateServer(IpAddress NokiaConf_Configure_System_Time_Ntp_Server_IpAddress_Union, RouterInstance string) *NokiaConf_Configure_System_Time_Ntp_Server {

	key := NokiaConf_Configure_System_Time_Ntp_Server_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(IpAddress, RouterInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_System_Time_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Time_Ntp) GetServer(IpAddress NokiaConf_Configure_System_Time_Ntp_Server_IpAddress_Union, RouterInstance string) *NokiaConf_Configure_System_Time_Ntp_Server {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_System_Time_Ntp_Server_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time_Ntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Time_Ntp) DeleteServer(IpAddress NokiaConf_Configure_System_Time_Ntp_Server_IpAddress_Union, RouterInstance string) {
	key := NokiaConf_Configure_System_Time_Ntp_Server_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_System_Time_Ntp_Server struct to the
// list Server of NokiaConf_Configure_System_Time_Ntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Time_Ntp_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Time_Ntp) AppendServer(v *NokiaConf_Configure_System_Time_Ntp_Server) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	key := NokiaConf_Configure_System_Time_Ntp_Server_Key{
		IpAddress:      v.IpAddress,
		RouterInstance: *v.RouterInstance,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_System_Time_Ntp_Server_Key]*NokiaConf_Configure_System_Time_Ntp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateMulticast retrieves the value of the Multicast field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Time_Ntp) GetOrCreateMulticast() *NokiaConf_Configure_System_Time_Ntp_Multicast {
	if t.Multicast != nil {
		return t.Multicast
	}
	t.Multicast = &NokiaConf_Configure_System_Time_Ntp_Multicast{}
	return t.Multicast
}

// GetOrCreateMulticastClient retrieves the value of the MulticastClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Time_Ntp) GetOrCreateMulticastClient() *NokiaConf_Configure_System_Time_Ntp_MulticastClient {
	if t.MulticastClient != nil {
		return t.MulticastClient
	}
	t.MulticastClient = &NokiaConf_Configure_System_Time_Ntp_MulticastClient{}
	return t.MulticastClient
}

// GetOrCreateNtpServer retrieves the value of the NtpServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Time_Ntp) GetOrCreateNtpServer() *NokiaConf_Configure_System_Time_Ntp_NtpServer {
	if t.NtpServer != nil {
		return t.NtpServer
	}
	t.NtpServer = &NokiaConf_Configure_System_Time_Ntp_NtpServer{}
	return t.NtpServer
}

// GetMulticast returns the value of the Multicast struct pointer
// from NokiaConf_Configure_System_Time_Ntp. If the receiver or the field Multicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Time_Ntp) GetMulticast() *NokiaConf_Configure_System_Time_Ntp_Multicast {
	if t != nil && t.Multicast != nil {
		return t.Multicast
	}
	return nil
}

// GetMulticastClient returns the value of the MulticastClient struct pointer
// from NokiaConf_Configure_System_Time_Ntp. If the receiver or the field MulticastClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Time_Ntp) GetMulticastClient() *NokiaConf_Configure_System_Time_Ntp_MulticastClient {
	if t != nil && t.MulticastClient != nil {
		return t.MulticastClient
	}
	return nil
}

// GetNtpServer returns the value of the NtpServer struct pointer
// from NokiaConf_Configure_System_Time_Ntp. If the receiver or the field NtpServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Time_Ntp) GetNtpServer() *NokiaConf_Configure_System_Time_Ntp_NtpServer {
	if t != nil && t.NtpServer != nil {
		return t.NtpServer
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Time_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Time_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Time_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationCheck retrieves the value of the leaf AuthenticationCheck from the NokiaConf_Configure_System_Time_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationCheck is set, it can
// safely use t.GetAuthenticationCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp) GetAuthenticationCheck() bool {
	if t == nil || t.AuthenticationCheck == nil {
		return true
	}
	return *t.AuthenticationCheck
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Ntp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Ntp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AuthenticationCheck == nil {
		var v bool = true
		t.AuthenticationCheck = &v
	}
	t.Multicast.PopulateDefaults()
	t.MulticastClient.PopulateDefaults()
	t.NtpServer.PopulateDefaults()
	for _, e := range t.AuthenticationKey {
		e.PopulateDefaults()
	}
	for _, e := range t.Broadcast {
		e.PopulateDefaults()
	}
	for _, e := range t.BroadcastClient {
		e.PopulateDefaults()
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Ntp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Ntp.
func (*NokiaConf_Configure_System_Time_Ntp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Ntp_AuthenticationKey represents the /nokia-conf/configure/system/time/ntp/authentication-key YANG schema element.
type NokiaConf_Configure_System_Time_Ntp_AuthenticationKey struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Key                *string                                                      `path:"key" module:"nokia-conf"`
	KeyId              *uint32                                                      `path:"key-id" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_System_Time_Ntp_AuthenticationKey_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Ntp_AuthenticationKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Time_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Time_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetKey retrieves the value of the leaf Key from the NokiaConf_Configure_System_Time_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_System_Time_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) GetKeyId() uint32 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_System_Time_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) GetType() E_NokiaConf_Configure_System_Time_Ntp_AuthenticationKey_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Ntp_AuthenticationKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Time_Ntp_AuthenticationKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Ntp_AuthenticationKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Ntp_AuthenticationKey.
func (*NokiaConf_Configure_System_Time_Ntp_AuthenticationKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Ntp_Broadcast represents the /nokia-conf/configure/system/time/ntp/broadcast YANG schema element.
type NokiaConf_Configure_System_Time_Ntp_Broadcast struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	InterfaceName      *string  `path:"interface-name" module:"nokia-conf"`
	KeyId              *uint32  `path:"key-id" module:"nokia-conf"`
	RouterInstance     *string  `path:"router-instance" module:"nokia-conf"`
	Ttl                *uint32  `path:"ttl" module:"nokia-conf"`
	Version            *uint32  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Ntp_Broadcast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Ntp_Broadcast) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Time_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Broadcast) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Time_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Broadcast) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_System_Time_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Broadcast) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_System_Time_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Broadcast) GetKeyId() uint32 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_Time_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Broadcast) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_System_Time_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Broadcast) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 127
	}
	return *t.Ttl
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_System_Time_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Broadcast) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Ntp_Broadcast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Ntp_Broadcast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ttl == nil {
		var v uint32 = 127
		t.Ttl = &v
	}
	if t.Version == nil {
		var v uint32 = 4
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Time_Ntp_Broadcast struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Time_Ntp_Broadcast) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"interface-name":  *t.InterfaceName,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_Broadcast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Ntp_Broadcast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_Broadcast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Ntp_Broadcast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Ntp_Broadcast.
func (*NokiaConf_Configure_System_Time_Ntp_Broadcast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Ntp_BroadcastClient represents the /nokia-conf/configure/system/time/ntp/broadcast-client YANG schema element.
type NokiaConf_Configure_System_Time_Ntp_BroadcastClient struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Authenticate       *bool    `path:"authenticate" module:"nokia-conf"`
	InterfaceName      *string  `path:"interface-name" module:"nokia-conf"`
	RouterInstance     *string  `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Ntp_BroadcastClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Ntp_BroadcastClient) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Time_Ntp_BroadcastClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_BroadcastClient) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Time_Ntp_BroadcastClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_BroadcastClient) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticate retrieves the value of the leaf Authenticate from the NokiaConf_Configure_System_Time_Ntp_BroadcastClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authenticate is set, it can
// safely use t.GetAuthenticate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authenticate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_BroadcastClient) GetAuthenticate() bool {
	if t == nil || t.Authenticate == nil {
		return false
	}
	return *t.Authenticate
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_System_Time_Ntp_BroadcastClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_BroadcastClient) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_Time_Ntp_BroadcastClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_BroadcastClient) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Ntp_BroadcastClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Ntp_BroadcastClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Authenticate == nil {
		var v bool = false
		t.Authenticate = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Time_Ntp_BroadcastClient struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Time_Ntp_BroadcastClient) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"interface-name":  *t.InterfaceName,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_BroadcastClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Ntp_BroadcastClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_BroadcastClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Ntp_BroadcastClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Ntp_BroadcastClient.
func (*NokiaConf_Configure_System_Time_Ntp_BroadcastClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Ntp_Multicast represents the /nokia-conf/configure/system/time/ntp/multicast YANG schema element.
type NokiaConf_Configure_System_Time_Ntp_Multicast struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	KeyId              *uint32  `path:"key-id" module:"nokia-conf"`
	Version            *uint32  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Ntp_Multicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Ntp_Multicast) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Time_Ntp_Multicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Multicast) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Time_Ntp_Multicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Multicast) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_System_Time_Ntp_Multicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Multicast) GetKeyId() uint32 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_System_Time_Ntp_Multicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Multicast) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Ntp_Multicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Ntp_Multicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Version == nil {
		var v uint32 = 4
		t.Version = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_Multicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Ntp_Multicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_Multicast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Ntp_Multicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Ntp_Multicast.
func (*NokiaConf_Configure_System_Time_Ntp_Multicast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Ntp_MulticastClient represents the /nokia-conf/configure/system/time/ntp/multicast-client YANG schema element.
type NokiaConf_Configure_System_Time_Ntp_MulticastClient struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Authenticate       *bool    `path:"authenticate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Ntp_MulticastClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Ntp_MulticastClient) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Time_Ntp_MulticastClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_MulticastClient) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Time_Ntp_MulticastClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_MulticastClient) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticate retrieves the value of the leaf Authenticate from the NokiaConf_Configure_System_Time_Ntp_MulticastClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authenticate is set, it can
// safely use t.GetAuthenticate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authenticate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_MulticastClient) GetAuthenticate() bool {
	if t == nil || t.Authenticate == nil {
		return false
	}
	return *t.Authenticate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Ntp_MulticastClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Ntp_MulticastClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Authenticate == nil {
		var v bool = false
		t.Authenticate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_MulticastClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Ntp_MulticastClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_MulticastClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Ntp_MulticastClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Ntp_MulticastClient.
func (*NokiaConf_Configure_System_Time_Ntp_MulticastClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Ntp_NtpServer represents the /nokia-conf/configure/system/time/ntp/ntp-server YANG schema element.
type NokiaConf_Configure_System_Time_Ntp_NtpServer struct {
	Authenticate *bool `path:"authenticate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Ntp_NtpServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Ntp_NtpServer) IsYANGGoStruct() {}

// GetAuthenticate retrieves the value of the leaf Authenticate from the NokiaConf_Configure_System_Time_Ntp_NtpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authenticate is set, it can
// safely use t.GetAuthenticate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authenticate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_NtpServer) GetAuthenticate() bool {
	if t == nil || t.Authenticate == nil {
		return false
	}
	return *t.Authenticate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Ntp_NtpServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Ntp_NtpServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Authenticate == nil {
		var v bool = false
		t.Authenticate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_NtpServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Ntp_NtpServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_NtpServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Ntp_NtpServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Ntp_NtpServer.
func (*NokiaConf_Configure_System_Time_Ntp_NtpServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Ntp_Peer represents the /nokia-conf/configure/system/time/ntp/peer YANG schema element.
type NokiaConf_Configure_System_Time_Ntp_Peer struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpAddress          *string  `path:"ip-address" module:"nokia-conf"`
	KeyId              *uint32  `path:"key-id" module:"nokia-conf"`
	Prefer             *bool    `path:"prefer" module:"nokia-conf"`
	RouterInstance     *string  `path:"router-instance" module:"nokia-conf"`
	Version            *uint32  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Ntp_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Ntp_Peer) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Time_Ntp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Time_Ntp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_System_Time_Ntp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_System_Time_Ntp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Peer) GetKeyId() uint32 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetPrefer retrieves the value of the leaf Prefer from the NokiaConf_Configure_System_Time_Ntp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefer is set, it can
// safely use t.GetPrefer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Peer) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_Time_Ntp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Peer) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_System_Time_Ntp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Peer) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Ntp_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Ntp_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Prefer == nil {
		var v bool = false
		t.Prefer = &v
	}
	if t.Version == nil {
		var v uint32 = 4
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Time_Ntp_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Time_Ntp_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"ip-address":      *t.IpAddress,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Ntp_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Ntp_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Ntp_Peer.
func (*NokiaConf_Configure_System_Time_Ntp_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Ntp_Server represents the /nokia-conf/configure/system/time/ntp/server YANG schema element.
type NokiaConf_Configure_System_Time_Ntp_Server struct {
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	IpAddress          NokiaConf_Configure_System_Time_Ntp_Server_IpAddress_Union `path:"ip-address" module:"nokia-conf"`
	KeyId              *uint32                                                    `path:"key-id" module:"nokia-conf"`
	Prefer             *bool                                                      `path:"prefer" module:"nokia-conf"`
	RouterInstance     *string                                                    `path:"router-instance" module:"nokia-conf"`
	Version            *uint32                                                    `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Ntp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Ntp_Server) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Time_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Time_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_System_Time_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Server) GetIpAddress() NokiaConf_Configure_System_Time_Ntp_Server_IpAddress_Union {
	if t == nil || t.IpAddress == nil {
		return nil
	}
	return t.IpAddress
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_System_Time_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Server) GetKeyId() uint32 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetPrefer retrieves the value of the leaf Prefer from the NokiaConf_Configure_System_Time_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefer is set, it can
// safely use t.GetPrefer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Server) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_Time_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Server) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_System_Time_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Ntp_Server) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Ntp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Ntp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Prefer == nil {
		var v bool = false
		t.Prefer = &v
	}
	if t.Version == nil {
		var v uint32 = 4
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Time_Ntp_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Time_Ntp_Server) ΛListKeyMap() (map[string]interface{}, error) {

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"ip-address":      t.IpAddress,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Ntp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Ntp_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Ntp_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Ntp_Server.
func (*NokiaConf_Configure_System_Time_Ntp_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Sntp represents the /nokia-conf/configure/system/time/sntp YANG schema element.
type NokiaConf_Configure_System_Time_Sntp struct {
	AdminState         E_NokiaTypesSros_AdminState                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Server             map[string]*NokiaConf_Configure_System_Time_Sntp_Server `path:"server" module:"nokia-conf"`
	SntpState          E_NokiaTypesRouter_UnicastBroadcast                     `path:"sntp-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Sntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Sntp) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_System_Time_Sntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_System_Time_Sntp) NewServer(IpAddress string) (*NokiaConf_Configure_System_Time_Sntp_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_System_Time_Sntp_Server)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_System_Time_Sntp_Server{
		IpAddress: &IpAddress,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_System_Time_Sntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_System_Time_Sntp) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.IpAddress = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time_Sntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_System_Time_Sntp) GetOrCreateServer(IpAddress string) *NokiaConf_Configure_System_Time_Sntp_Server {

	key := IpAddress

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_System_Time_Sntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_System_Time_Sntp) GetServer(IpAddress string) *NokiaConf_Configure_System_Time_Sntp_Server {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_System_Time_Sntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_System_Time_Sntp) DeleteServer(IpAddress string) {
	key := IpAddress

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_System_Time_Sntp_Server struct to the
// list Server of NokiaConf_Configure_System_Time_Sntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_System_Time_Sntp_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_System_Time_Sntp) AppendServer(v *NokiaConf_Configure_System_Time_Sntp_Server) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_System_Time_Sntp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Time_Sntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Sntp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Time_Sntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Sntp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Time_Sntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Sntp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSntpState retrieves the value of the leaf SntpState from the NokiaConf_Configure_System_Time_Sntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SntpState is set, it can
// safely use t.GetSntpState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SntpState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Sntp) GetSntpState() E_NokiaTypesRouter_UnicastBroadcast {
	if t == nil || t.SntpState == 0 {
		return NokiaTypesRouter_UnicastBroadcast_unicast
	}
	return t.SntpState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Sntp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Sntp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SntpState == 0 {
		t.SntpState = NokiaTypesRouter_UnicastBroadcast_unicast
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Sntp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Sntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Sntp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Sntp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Sntp.
func (*NokiaConf_Configure_System_Time_Sntp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Sntp_Server represents the /nokia-conf/configure/system/time/sntp/server YANG schema element.
type NokiaConf_Configure_System_Time_Sntp_Server struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Interval           *uint32  `path:"interval" module:"nokia-conf"`
	IpAddress          *string  `path:"ip-address" module:"nokia-conf"`
	Prefer             *bool    `path:"prefer" module:"nokia-conf"`
	Version            *int32   `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Sntp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Sntp_Server) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Time_Sntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Sntp_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Time_Sntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Sntp_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_System_Time_Sntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Sntp_Server) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 64
	}
	return *t.Interval
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_System_Time_Sntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Sntp_Server) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefer retrieves the value of the leaf Prefer from the NokiaConf_Configure_System_Time_Sntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefer is set, it can
// safely use t.GetPrefer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Sntp_Server) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_System_Time_Sntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Sntp_Server) GetVersion() int32 {
	if t == nil || t.Version == nil {
		return 3
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Sntp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Sntp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 64
		t.Interval = &v
	}
	if t.Prefer == nil {
		var v bool = false
		t.Prefer = &v
	}
	if t.Version == nil {
		var v int32 = 3
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Time_Sntp_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Time_Sntp_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Sntp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Sntp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Sntp_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Sntp_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Sntp_Server.
func (*NokiaConf_Configure_System_Time_Sntp_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Zone represents the /nokia-conf/configure/system/time/zone YANG schema element.
type NokiaConf_Configure_System_Time_Zone struct {
	NonStandard *NokiaConf_Configure_System_Time_Zone_NonStandard `path:"non-standard" module:"nokia-conf"`
	Standard    *NokiaConf_Configure_System_Time_Zone_Standard    `path:"standard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Zone implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Zone) IsYANGGoStruct() {}

// GetOrCreateNonStandard retrieves the value of the NonStandard field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Time_Zone) GetOrCreateNonStandard() *NokiaConf_Configure_System_Time_Zone_NonStandard {
	if t.NonStandard != nil {
		return t.NonStandard
	}
	t.NonStandard = &NokiaConf_Configure_System_Time_Zone_NonStandard{}
	return t.NonStandard
}

// GetOrCreateStandard retrieves the value of the Standard field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_System_Time_Zone) GetOrCreateStandard() *NokiaConf_Configure_System_Time_Zone_Standard {
	if t.Standard != nil {
		return t.Standard
	}
	t.Standard = &NokiaConf_Configure_System_Time_Zone_Standard{}
	return t.Standard
}

// GetNonStandard returns the value of the NonStandard struct pointer
// from NokiaConf_Configure_System_Time_Zone. If the receiver or the field NonStandard is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Time_Zone) GetNonStandard() *NokiaConf_Configure_System_Time_Zone_NonStandard {
	if t != nil && t.NonStandard != nil {
		return t.NonStandard
	}
	return nil
}

// GetStandard returns the value of the Standard struct pointer
// from NokiaConf_Configure_System_Time_Zone. If the receiver or the field Standard is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_System_Time_Zone) GetStandard() *NokiaConf_Configure_System_Time_Zone_Standard {
	if t != nil && t.Standard != nil {
		return t.Standard
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Zone
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Zone) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NonStandard.PopulateDefaults()
	t.Standard.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Zone) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Zone"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Zone) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Zone) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Zone.
func (*NokiaConf_Configure_System_Time_Zone) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Zone_NonStandard represents the /nokia-conf/configure/system/time/zone/non-standard YANG schema element.
type NokiaConf_Configure_System_Time_Zone_NonStandard struct {
	Name   *string `path:"name" module:"nokia-conf"`
	Offset *string `path:"offset" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Zone_NonStandard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Zone_NonStandard) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Time_Zone_NonStandard
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Zone_NonStandard) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_System_Time_Zone_NonStandard
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Zone_NonStandard) GetOffset() string {
	if t == nil || t.Offset == nil {
		return ""
	}
	return *t.Offset
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Zone_NonStandard
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Zone_NonStandard) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Zone_NonStandard) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Zone_NonStandard"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Zone_NonStandard) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Zone_NonStandard) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Zone_NonStandard.
func (*NokiaConf_Configure_System_Time_Zone_NonStandard) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Time_Zone_Standard represents the /nokia-conf/configure/system/time/zone/standard YANG schema element.
type NokiaConf_Configure_System_Time_Zone_Standard struct {
	Name E_NokiaConf_Configure_System_Time_Zone_Standard_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Time_Zone_Standard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Time_Zone_Standard) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_Time_Zone_Standard
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Time_Zone_Standard) GetName() E_NokiaConf_Configure_System_Time_Zone_Standard_Name {
	if t == nil || t.Name == 0 {
		return NokiaConf_Configure_System_Time_Zone_Standard_Name_utc
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Time_Zone_Standard
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Time_Zone_Standard) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Name == 0 {
		t.Name = NokiaConf_Configure_System_Time_Zone_Standard_Name_utc
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Zone_Standard) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Time_Zone_Standard"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Time_Zone_Standard) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Time_Zone_Standard) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Time_Zone_Standard.
func (*NokiaConf_Configure_System_Time_Zone_Standard) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_TransmissionProfile represents the /nokia-conf/configure/system/transmission-profile YANG schema element.
type NokiaConf_Configure_System_TransmissionProfile struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4SourceAddress  *string  `path:"ipv4-source-address" module:"nokia-conf"`
	Ipv6SourceAddress  *string  `path:"ipv6-source-address" module:"nokia-conf"`
	Name               *string  `path:"name" module:"nokia-conf"`
	Redirection        *uint32  `path:"redirection" module:"nokia-conf"`
	Retry              *uint32  `path:"retry" module:"nokia-conf"`
	RouterInstance     *string  `path:"router-instance" module:"nokia-conf"`
	Timeout            *uint32  `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_TransmissionProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_TransmissionProfile) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_TransmissionProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_TransmissionProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4SourceAddress retrieves the value of the leaf Ipv4SourceAddress from the NokiaConf_Configure_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4SourceAddress is set, it can
// safely use t.GetIpv4SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_TransmissionProfile) GetIpv4SourceAddress() string {
	if t == nil || t.Ipv4SourceAddress == nil {
		return ""
	}
	return *t.Ipv4SourceAddress
}

// GetIpv6SourceAddress retrieves the value of the leaf Ipv6SourceAddress from the NokiaConf_Configure_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6SourceAddress is set, it can
// safely use t.GetIpv6SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_TransmissionProfile) GetIpv6SourceAddress() string {
	if t == nil || t.Ipv6SourceAddress == nil {
		return ""
	}
	return *t.Ipv6SourceAddress
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_TransmissionProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedirection retrieves the value of the leaf Redirection from the NokiaConf_Configure_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Redirection is set, it can
// safely use t.GetRedirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Redirection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_TransmissionProfile) GetRedirection() uint32 {
	if t == nil || t.Redirection == nil {
		return 0
	}
	return *t.Redirection
}

// GetRetry retrieves the value of the leaf Retry from the NokiaConf_Configure_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retry is set, it can
// safely use t.GetRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_TransmissionProfile) GetRetry() uint32 {
	if t == nil || t.Retry == nil {
		return 0
	}
	return *t.Retry
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_TransmissionProfile) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_TransmissionProfile) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 60
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_TransmissionProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_TransmissionProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
	if t.Timeout == nil {
		var v uint32 = 60
		t.Timeout = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_TransmissionProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_TransmissionProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_TransmissionProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_TransmissionProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_TransmissionProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_TransmissionProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_TransmissionProfile.
func (*NokiaConf_Configure_System_TransmissionProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_System_Usb represents the /nokia-conf/configure/system/usb YANG schema element.
type NokiaConf_Configure_System_Usb struct {
	AdminState         E_NokiaTypesSros_AdminState                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	UsbCflash          E_NokiaConf_Configure_System_Usb_UsbCflash `path:"usb-cflash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_System_Usb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_System_Usb) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_System_Usb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Usb) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_System_Usb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Usb) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_System_Usb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Usb) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetUsbCflash retrieves the value of the leaf UsbCflash from the NokiaConf_Configure_System_Usb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsbCflash is set, it can
// safely use t.GetUsbCflash() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsbCflash == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_System_Usb) GetUsbCflash() E_NokiaConf_Configure_System_Usb_UsbCflash {
	if t == nil || t.UsbCflash == 0 {
		return 0
	}
	return t.UsbCflash
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_System_Usb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_System_Usb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_System_Usb struct, which is a YANG list entry.
func (t *NokiaConf_Configure_System_Usb) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"usb-cflash": t.UsbCflash,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Usb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_System_Usb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_System_Usb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_System_Usb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_System_Usb.
func (*NokiaConf_Configure_System_Usb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam represents the /nokia-conf/configure/test-oam YANG schema element.
type NokiaConf_Configure_TestOam struct {
	ApplyGroups               []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Icmp                      *NokiaConf_Configure_TestOam_Icmp                      `path:"icmp" module:"nokia-conf"`
	LinkMeasurement           *NokiaConf_Configure_TestOam_LinkMeasurement           `path:"link-measurement" module:"nokia-conf"`
	MplsDm                    *NokiaConf_Configure_TestOam_MplsDm                    `path:"mpls-dm" module:"nokia-conf"`
	ServiceActivationTesthead *NokiaConf_Configure_TestOam_ServiceActivationTesthead `path:"service-activation-testhead" module:"nokia-conf"`
	Twamp                     *NokiaConf_Configure_TestOam_Twamp                     `path:"twamp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam) IsYANGGoStruct() {}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam) GetOrCreateIcmp() *NokiaConf_Configure_TestOam_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_TestOam_Icmp{}
	return t.Icmp
}

// GetOrCreateLinkMeasurement retrieves the value of the LinkMeasurement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam) GetOrCreateLinkMeasurement() *NokiaConf_Configure_TestOam_LinkMeasurement {
	if t.LinkMeasurement != nil {
		return t.LinkMeasurement
	}
	t.LinkMeasurement = &NokiaConf_Configure_TestOam_LinkMeasurement{}
	return t.LinkMeasurement
}

// GetOrCreateMplsDm retrieves the value of the MplsDm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam) GetOrCreateMplsDm() *NokiaConf_Configure_TestOam_MplsDm {
	if t.MplsDm != nil {
		return t.MplsDm
	}
	t.MplsDm = &NokiaConf_Configure_TestOam_MplsDm{}
	return t.MplsDm
}

// GetOrCreateServiceActivationTesthead retrieves the value of the ServiceActivationTesthead field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam) GetOrCreateServiceActivationTesthead() *NokiaConf_Configure_TestOam_ServiceActivationTesthead {
	if t.ServiceActivationTesthead != nil {
		return t.ServiceActivationTesthead
	}
	t.ServiceActivationTesthead = &NokiaConf_Configure_TestOam_ServiceActivationTesthead{}
	return t.ServiceActivationTesthead
}

// GetOrCreateTwamp retrieves the value of the Twamp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam) GetOrCreateTwamp() *NokiaConf_Configure_TestOam_Twamp {
	if t.Twamp != nil {
		return t.Twamp
	}
	t.Twamp = &NokiaConf_Configure_TestOam_Twamp{}
	return t.Twamp
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_TestOam. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam) GetIcmp() *NokiaConf_Configure_TestOam_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetLinkMeasurement returns the value of the LinkMeasurement struct pointer
// from NokiaConf_Configure_TestOam. If the receiver or the field LinkMeasurement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam) GetLinkMeasurement() *NokiaConf_Configure_TestOam_LinkMeasurement {
	if t != nil && t.LinkMeasurement != nil {
		return t.LinkMeasurement
	}
	return nil
}

// GetMplsDm returns the value of the MplsDm struct pointer
// from NokiaConf_Configure_TestOam. If the receiver or the field MplsDm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam) GetMplsDm() *NokiaConf_Configure_TestOam_MplsDm {
	if t != nil && t.MplsDm != nil {
		return t.MplsDm
	}
	return nil
}

// GetServiceActivationTesthead returns the value of the ServiceActivationTesthead struct pointer
// from NokiaConf_Configure_TestOam. If the receiver or the field ServiceActivationTesthead is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam) GetServiceActivationTesthead() *NokiaConf_Configure_TestOam_ServiceActivationTesthead {
	if t != nil && t.ServiceActivationTesthead != nil {
		return t.ServiceActivationTesthead
	}
	return nil
}

// GetTwamp returns the value of the Twamp struct pointer
// from NokiaConf_Configure_TestOam. If the receiver or the field Twamp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam) GetTwamp() *NokiaConf_Configure_TestOam_Twamp {
	if t != nil && t.Twamp != nil {
		return t.Twamp
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmp.PopulateDefaults()
	t.LinkMeasurement.PopulateDefaults()
	t.MplsDm.PopulateDefaults()
	t.ServiceActivationTesthead.PopulateDefaults()
	t.Twamp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam.
func (*NokiaConf_Configure_TestOam) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_Icmp represents the /nokia-conf/configure/test-oam/icmp YANG schema element.
type NokiaConf_Configure_TestOam_Icmp struct {
	PingTemplate map[string]*NokiaConf_Configure_TestOam_Icmp_PingTemplate `path:"ping-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_Icmp) IsYANGGoStruct() {}

// NewPingTemplate creates a new entry in the PingTemplate list of the
// NokiaConf_Configure_TestOam_Icmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_TestOam_Icmp) NewPingTemplate(Name string) (*NokiaConf_Configure_TestOam_Icmp_PingTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PingTemplate == nil {
		t.PingTemplate = make(map[string]*NokiaConf_Configure_TestOam_Icmp_PingTemplate)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PingTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PingTemplate", key)
	}

	t.PingTemplate[key] = &NokiaConf_Configure_TestOam_Icmp_PingTemplate{
		Name: &Name,
	}

	return t.PingTemplate[key], nil
}

// RenamePingTemplate renames an entry in the list PingTemplate within
// the NokiaConf_Configure_TestOam_Icmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_TestOam_Icmp) RenamePingTemplate(oldK, newK string) error {
	if _, ok := t.PingTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in PingTemplate", newK)
	}

	e, ok := t.PingTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PingTemplate", oldK)
	}
	e.Name = &newK

	t.PingTemplate[newK] = e
	delete(t.PingTemplate, oldK)
	return nil
}

// GetOrCreatePingTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_Icmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_TestOam_Icmp) GetOrCreatePingTemplate(Name string) *NokiaConf_Configure_TestOam_Icmp_PingTemplate {

	key := Name

	if v, ok := t.PingTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPingTemplate(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePingTemplate got unexpected error: %v", err))
	}
	return v
}

// GetPingTemplate retrieves the value with the specified key from
// the PingTemplate map field of NokiaConf_Configure_TestOam_Icmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_TestOam_Icmp) GetPingTemplate(Name string) *NokiaConf_Configure_TestOam_Icmp_PingTemplate {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PingTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeletePingTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_Icmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_TestOam_Icmp) DeletePingTemplate(Name string) {
	key := Name

	delete(t.PingTemplate, key)
}

// AppendPingTemplate appends the supplied NokiaConf_Configure_TestOam_Icmp_PingTemplate struct to the
// list PingTemplate of NokiaConf_Configure_TestOam_Icmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_TestOam_Icmp_PingTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_TestOam_Icmp) AppendPingTemplate(v *NokiaConf_Configure_TestOam_Icmp_PingTemplate) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PingTemplate == nil {
		t.PingTemplate = make(map[string]*NokiaConf_Configure_TestOam_Icmp_PingTemplate)
	}

	if _, ok := t.PingTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list PingTemplate %v", key)
	}

	t.PingTemplate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PingTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_Icmp.
func (*NokiaConf_Configure_TestOam_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_Icmp_PingTemplate represents the /nokia-conf/configure/test-oam/icmp/ping-template YANG schema element.
type NokiaConf_Configure_TestOam_Icmp_PingTemplate struct {
	ApplyGroups                  []string                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude           []string                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description                  *string                  `path:"description" module:"nokia-conf"`
	Dot1P                        *int32                   `path:"dot1p" module:"nokia-conf"`
	Dscp                         E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
	FailureThreshold             *uint32                  `path:"failure-threshold" module:"nokia-conf"`
	Interval                     *uint32                  `path:"interval" module:"nokia-conf"`
	Name                         *string                  `path:"name" module:"nokia-conf"`
	ReactivationFailureThreshold *uint32                  `path:"reactivation-failure-threshold" module:"nokia-conf"`
	ReactivationInterval         *uint32                  `path:"reactivation-interval" module:"nokia-conf"`
	ReactivationThreshold        *uint32                  `path:"reactivation-threshold" module:"nokia-conf"`
	ReactivationTimeout          *uint32                  `path:"reactivation-timeout" module:"nokia-conf"`
	Size                         *uint32                  `path:"size" module:"nokia-conf"`
	Timeout                      *uint32                  `path:"timeout" module:"nokia-conf"`
	Ttl                          *uint32                  `path:"ttl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_Icmp_PingTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_Icmp_PingTemplate) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDot1P retrieves the value of the leaf Dot1P from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1P is set, it can
// safely use t.GetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetDot1P() int32 {
	if t == nil || t.Dot1P == nil {
		return 7
	}
	return *t.Dot1P
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return NokiaTypesQos_DscpName_nc1
	}
	return t.Dscp
}

// GetFailureThreshold retrieves the value of the leaf FailureThreshold from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureThreshold is set, it can
// safely use t.GetFailureThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetFailureThreshold() uint32 {
	if t == nil || t.FailureThreshold == nil {
		return 3
	}
	return *t.FailureThreshold
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 60
	}
	return *t.Interval
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetReactivationFailureThreshold retrieves the value of the leaf ReactivationFailureThreshold from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReactivationFailureThreshold is set, it can
// safely use t.GetReactivationFailureThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReactivationFailureThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetReactivationFailureThreshold() uint32 {
	if t == nil || t.ReactivationFailureThreshold == nil {
		return 4
	}
	return *t.ReactivationFailureThreshold
}

// GetReactivationInterval retrieves the value of the leaf ReactivationInterval from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReactivationInterval is set, it can
// safely use t.GetReactivationInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReactivationInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetReactivationInterval() uint32 {
	if t == nil || t.ReactivationInterval == nil {
		return 1
	}
	return *t.ReactivationInterval
}

// GetReactivationThreshold retrieves the value of the leaf ReactivationThreshold from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReactivationThreshold is set, it can
// safely use t.GetReactivationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReactivationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetReactivationThreshold() uint32 {
	if t == nil || t.ReactivationThreshold == nil {
		return 3
	}
	return *t.ReactivationThreshold
}

// GetReactivationTimeout retrieves the value of the leaf ReactivationTimeout from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReactivationTimeout is set, it can
// safely use t.GetReactivationTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReactivationTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetReactivationTimeout() uint32 {
	if t == nil || t.ReactivationTimeout == nil {
		return 1
	}
	return *t.ReactivationTimeout
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetSize() uint32 {
	if t == nil || t.Size == nil {
		return 56
	}
	return *t.Size
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 1
	}
	return *t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_Icmp_PingTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dot1P == nil {
		var v int32 = 7
		t.Dot1P = &v
	}
	if t.Dscp == 0 {
		t.Dscp = NokiaTypesQos_DscpName_nc1
	}
	if t.FailureThreshold == nil {
		var v uint32 = 3
		t.FailureThreshold = &v
	}
	if t.Interval == nil {
		var v uint32 = 60
		t.Interval = &v
	}
	if t.ReactivationFailureThreshold == nil {
		var v uint32 = 4
		t.ReactivationFailureThreshold = &v
	}
	if t.ReactivationInterval == nil {
		var v uint32 = 1
		t.ReactivationInterval = &v
	}
	if t.ReactivationThreshold == nil {
		var v uint32 = 3
		t.ReactivationThreshold = &v
	}
	if t.ReactivationTimeout == nil {
		var v uint32 = 1
		t.ReactivationTimeout = &v
	}
	if t.Size == nil {
		var v uint32 = 56
		t.Size = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	if t.Ttl == nil {
		var v uint32 = 1
		t.Ttl = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_TestOam_Icmp_PingTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_Icmp_PingTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_Icmp_PingTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_Icmp_PingTemplate.
func (*NokiaConf_Configure_TestOam_Icmp_PingTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_LinkMeasurement represents the /nokia-conf/configure/test-oam/link-measurement YANG schema element.
type NokiaConf_Configure_TestOam_LinkMeasurement struct {
	MeasurementTemplate map[string]*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate `path:"measurement-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_LinkMeasurement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_LinkMeasurement) IsYANGGoStruct() {}

// NewMeasurementTemplate creates a new entry in the MeasurementTemplate list of the
// NokiaConf_Configure_TestOam_LinkMeasurement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement) NewMeasurementTemplate(TemplateName string) (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeasurementTemplate == nil {
		t.MeasurementTemplate = make(map[string]*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate)
	}

	key := TemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MeasurementTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MeasurementTemplate", key)
	}

	t.MeasurementTemplate[key] = &NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate{
		TemplateName: &TemplateName,
	}

	return t.MeasurementTemplate[key], nil
}

// RenameMeasurementTemplate renames an entry in the list MeasurementTemplate within
// the NokiaConf_Configure_TestOam_LinkMeasurement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement) RenameMeasurementTemplate(oldK, newK string) error {
	if _, ok := t.MeasurementTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in MeasurementTemplate", newK)
	}

	e, ok := t.MeasurementTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MeasurementTemplate", oldK)
	}
	e.TemplateName = &newK

	t.MeasurementTemplate[newK] = e
	delete(t.MeasurementTemplate, oldK)
	return nil
}

// GetOrCreateMeasurementTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_LinkMeasurement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement) GetOrCreateMeasurementTemplate(TemplateName string) *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate {

	key := TemplateName

	if v, ok := t.MeasurementTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMeasurementTemplate(TemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMeasurementTemplate got unexpected error: %v", err))
	}
	return v
}

// GetMeasurementTemplate retrieves the value with the specified key from
// the MeasurementTemplate map field of NokiaConf_Configure_TestOam_LinkMeasurement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement) GetMeasurementTemplate(TemplateName string) *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate {

	if t == nil {
		return nil
	}

	key := TemplateName

	if lm, ok := t.MeasurementTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteMeasurementTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_LinkMeasurement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement) DeleteMeasurementTemplate(TemplateName string) {
	key := TemplateName

	delete(t.MeasurementTemplate, key)
}

// AppendMeasurementTemplate appends the supplied NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate struct to the
// list MeasurementTemplate of NokiaConf_Configure_TestOam_LinkMeasurement. If the key value(s) specified in
// the supplied NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement) AppendMeasurementTemplate(v *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) error {
	if v.TemplateName == nil {
		return fmt.Errorf("invalid nil key received for TemplateName")
	}

	key := *v.TemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeasurementTemplate == nil {
		t.MeasurementTemplate = make(map[string]*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate)
	}

	if _, ok := t.MeasurementTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list MeasurementTemplate %v", key)
	}

	t.MeasurementTemplate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_LinkMeasurement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MeasurementTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_LinkMeasurement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_LinkMeasurement.
func (*NokiaConf_Configure_TestOam_LinkMeasurement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate represents the /nokia-conf/configure/test-oam/link-measurement/measurement-template YANG schema element.
type NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate struct {
	AdminState                E_NokiaTypesSros_AdminState                                                                 `path:"admin-state" module:"nokia-conf"`
	AggregateSampleWindow     *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow      `path:"aggregate-sample-window" module:"nokia-conf"`
	ApplyGroups               []string                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Delay                     E_NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_Delay                     `path:"delay" module:"nokia-conf"`
	Description               *string                                                                                     `path:"description" module:"nokia-conf"`
	Interval                  *uint32                                                                                     `path:"interval" module:"nokia-conf"`
	LastReportedDelayHold     *uint32                                                                                     `path:"last-reported-delay-hold" module:"nokia-conf"`
	SampleWindow              *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow               `path:"sample-window" module:"nokia-conf"`
	TemplateName              *string                                                                                     `path:"template-name" module:"nokia-conf"`
	TwampLight                *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight                 `path:"twamp-light" module:"nokia-conf"`
	UnidirectionalMeasurement E_NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_UnidirectionalMeasurement `path:"unidirectional-measurement" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) IsYANGGoStruct() {}

// GetOrCreateAggregateSampleWindow retrieves the value of the AggregateSampleWindow field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetOrCreateAggregateSampleWindow() *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow {
	if t.AggregateSampleWindow != nil {
		return t.AggregateSampleWindow
	}
	t.AggregateSampleWindow = &NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow{}
	return t.AggregateSampleWindow
}

// GetOrCreateSampleWindow retrieves the value of the SampleWindow field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetOrCreateSampleWindow() *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow {
	if t.SampleWindow != nil {
		return t.SampleWindow
	}
	t.SampleWindow = &NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow{}
	return t.SampleWindow
}

// GetOrCreateTwampLight retrieves the value of the TwampLight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetOrCreateTwampLight() *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight {
	if t.TwampLight != nil {
		return t.TwampLight
	}
	t.TwampLight = &NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight{}
	return t.TwampLight
}

// GetAggregateSampleWindow returns the value of the AggregateSampleWindow struct pointer
// from NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate. If the receiver or the field AggregateSampleWindow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetAggregateSampleWindow() *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow {
	if t != nil && t.AggregateSampleWindow != nil {
		return t.AggregateSampleWindow
	}
	return nil
}

// GetSampleWindow returns the value of the SampleWindow struct pointer
// from NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate. If the receiver or the field SampleWindow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetSampleWindow() *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow {
	if t != nil && t.SampleWindow != nil {
		return t.SampleWindow
	}
	return nil
}

// GetTwampLight returns the value of the TwampLight struct pointer
// from NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate. If the receiver or the field TwampLight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetTwampLight() *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight {
	if t != nil && t.TwampLight != nil {
		return t.TwampLight
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDelay retrieves the value of the leaf Delay from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delay is set, it can
// safely use t.GetDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetDelay() E_NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_Delay {
	if t == nil || t.Delay == 0 {
		return NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_Delay_min
	}
	return t.Delay
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLastReportedDelayHold retrieves the value of the leaf LastReportedDelayHold from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastReportedDelayHold is set, it can
// safely use t.GetLastReportedDelayHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastReportedDelayHold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetLastReportedDelayHold() uint32 {
	if t == nil || t.LastReportedDelayHold == nil {
		return 86400
	}
	return *t.LastReportedDelayHold
}

// GetTemplateName retrieves the value of the leaf TemplateName from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateName is set, it can
// safely use t.GetTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetTemplateName() string {
	if t == nil || t.TemplateName == nil {
		return ""
	}
	return *t.TemplateName
}

// GetUnidirectionalMeasurement retrieves the value of the leaf UnidirectionalMeasurement from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnidirectionalMeasurement is set, it can
// safely use t.GetUnidirectionalMeasurement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnidirectionalMeasurement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) GetUnidirectionalMeasurement() E_NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_UnidirectionalMeasurement {
	if t == nil || t.UnidirectionalMeasurement == 0 {
		return NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_UnidirectionalMeasurement_derived
	}
	return t.UnidirectionalMeasurement
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Delay == 0 {
		t.Delay = NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_Delay_min
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LastReportedDelayHold == nil {
		var v uint32 = 86400
		t.LastReportedDelayHold = &v
	}
	if t.UnidirectionalMeasurement == 0 {
		t.UnidirectionalMeasurement = NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_UnidirectionalMeasurement_derived
	}
	t.AggregateSampleWindow.PopulateDefaults()
	t.SampleWindow.PopulateDefaults()
	t.TwampLight.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TemplateName == nil {
		return nil, fmt.Errorf("nil value for key TemplateName")
	}

	return map[string]interface{}{
		"template-name": *t.TemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate.
func (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow represents the /nokia-conf/configure/test-oam/link-measurement/measurement-template/aggregate-sample-window YANG schema element.
type NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow struct {
	Multiplier      *uint32                                                                                          `path:"multiplier" module:"nokia-conf"`
	Threshold       *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold `path:"threshold" module:"nokia-conf"`
	WindowIntegrity *uint32                                                                                          `path:"window-integrity" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) IsYANGGoStruct() {
}

// GetOrCreateThreshold retrieves the value of the Threshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) GetOrCreateThreshold() *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold {
	if t.Threshold != nil {
		return t.Threshold
	}
	t.Threshold = &NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold{}
	return t.Threshold
}

// GetThreshold returns the value of the Threshold struct pointer
// from NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow. If the receiver or the field Threshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) GetThreshold() *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold {
	if t != nil && t.Threshold != nil {
		return t.Threshold
	}
	return nil
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 12
	}
	return *t.Multiplier
}

// GetWindowIntegrity retrieves the value of the leaf WindowIntegrity from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WindowIntegrity is set, it can
// safely use t.GetWindowIntegrity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WindowIntegrity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) GetWindowIntegrity() uint32 {
	if t == nil || t.WindowIntegrity == nil {
		return 0
	}
	return *t.WindowIntegrity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 12
		t.Multiplier = &v
	}
	t.Threshold.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow.
func (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold represents the /nokia-conf/configure/test-oam/link-measurement/measurement-template/aggregate-sample-window/threshold YANG schema element.
type NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold struct {
	Absolute *uint32 `path:"absolute" module:"nokia-conf"`
	Relative *uint32 `path:"relative" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) IsYANGGoStruct() {
}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 0
	}
	return *t.Absolute
}

// GetRelative retrieves the value of the leaf Relative from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Relative is set, it can
// safely use t.GetRelative() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Relative == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) GetRelative() uint32 {
	if t == nil || t.Relative == nil {
		return 0
	}
	return *t.Relative
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold.
func (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow represents the /nokia-conf/configure/test-oam/link-measurement/measurement-template/sample-window YANG schema element.
type NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow struct {
	Multiplier      *uint32                                                                                 `path:"multiplier" module:"nokia-conf"`
	Threshold       *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold `path:"threshold" module:"nokia-conf"`
	WindowIntegrity *uint32                                                                                 `path:"window-integrity" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) IsYANGGoStruct() {
}

// GetOrCreateThreshold retrieves the value of the Threshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) GetOrCreateThreshold() *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold {
	if t.Threshold != nil {
		return t.Threshold
	}
	t.Threshold = &NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold{}
	return t.Threshold
}

// GetThreshold returns the value of the Threshold struct pointer
// from NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow. If the receiver or the field Threshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) GetThreshold() *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold {
	if t != nil && t.Threshold != nil {
		return t.Threshold
	}
	return nil
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 10
	}
	return *t.Multiplier
}

// GetWindowIntegrity retrieves the value of the leaf WindowIntegrity from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WindowIntegrity is set, it can
// safely use t.GetWindowIntegrity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WindowIntegrity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) GetWindowIntegrity() uint32 {
	if t == nil || t.WindowIntegrity == nil {
		return 0
	}
	return *t.WindowIntegrity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 10
		t.Multiplier = &v
	}
	t.Threshold.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow.
func (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold represents the /nokia-conf/configure/test-oam/link-measurement/measurement-template/sample-window/threshold YANG schema element.
type NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold struct {
	Absolute *uint32 `path:"absolute" module:"nokia-conf"`
	Relative *uint32 `path:"relative" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) IsYANGGoStruct() {
}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 0
	}
	return *t.Absolute
}

// GetRelative retrieves the value of the leaf Relative from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Relative is set, it can
// safely use t.GetRelative() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Relative == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) GetRelative() uint32 {
	if t == nil || t.Relative == nil {
		return 0
	}
	return *t.Relative
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold.
func (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight represents the /nokia-conf/configure/test-oam/link-measurement/measurement-template/twamp-light YANG schema element.
type NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight struct {
	AllowEgressRemarkDscp    *bool                                                                                        `path:"allow-egress-remark-dscp" module:"nokia-conf"`
	AllowIpv6UdpChecksumZero *bool                                                                                        `path:"allow-ipv6-udp-checksum-zero" module:"nokia-conf"`
	DestUdpPort              *int32                                                                                       `path:"dest-udp-port" module:"nokia-conf"`
	Dscp                     E_NokiaTypesQos_DscpName                                                                     `path:"dscp" module:"nokia-conf"`
	Fc                       E_NokiaTypesSros_FcName                                                                      `path:"fc" module:"nokia-conf"`
	Profile                  E_NokiaTypesQos_ProfileInOut                                                                 `path:"profile" module:"nokia-conf"`
	TimestampFormat          E_NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight_TimestampFormat `path:"timestamp-format" module:"nokia-conf"`
	Ttl                      *uint32                                                                                      `path:"ttl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) IsYANGGoStruct() {}

// GetAllowEgressRemarkDscp retrieves the value of the leaf AllowEgressRemarkDscp from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowEgressRemarkDscp is set, it can
// safely use t.GetAllowEgressRemarkDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowEgressRemarkDscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetAllowEgressRemarkDscp() bool {
	if t == nil || t.AllowEgressRemarkDscp == nil {
		return false
	}
	return *t.AllowEgressRemarkDscp
}

// GetAllowIpv6UdpChecksumZero retrieves the value of the leaf AllowIpv6UdpChecksumZero from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIpv6UdpChecksumZero is set, it can
// safely use t.GetAllowIpv6UdpChecksumZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIpv6UdpChecksumZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetAllowIpv6UdpChecksumZero() bool {
	if t == nil || t.AllowIpv6UdpChecksumZero == nil {
		return false
	}
	return *t.AllowIpv6UdpChecksumZero
}

// GetDestUdpPort retrieves the value of the leaf DestUdpPort from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestUdpPort is set, it can
// safely use t.GetDestUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestUdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetDestUdpPort() int32 {
	if t == nil || t.DestUdpPort == nil {
		return 862
	}
	return *t.DestUdpPort
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return NokiaTypesQos_DscpName_nc1
	}
	return t.Dscp
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_h1
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetProfile() E_NokiaTypesQos_ProfileInOut {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_ProfileInOut_in
	}
	return t.Profile
}

// GetTimestampFormat retrieves the value of the leaf TimestampFormat from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimestampFormat is set, it can
// safely use t.GetTimestampFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimestampFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetTimestampFormat() E_NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight_TimestampFormat {
	if t == nil || t.TimestampFormat == 0 {
		return NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight_TimestampFormat_ntp
	}
	return t.TimestampFormat
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 1
	}
	return *t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowEgressRemarkDscp == nil {
		var v bool = false
		t.AllowEgressRemarkDscp = &v
	}
	if t.AllowIpv6UdpChecksumZero == nil {
		var v bool = false
		t.AllowIpv6UdpChecksumZero = &v
	}
	if t.DestUdpPort == nil {
		var v int32 = 862
		t.DestUdpPort = &v
	}
	if t.Dscp == 0 {
		t.Dscp = NokiaTypesQos_DscpName_nc1
	}
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_h1
	}
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_ProfileInOut_in
	}
	if t.TimestampFormat == 0 {
		t.TimestampFormat = NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight_TimestampFormat_ntp
	}
	if t.Ttl == nil {
		var v uint32 = 1
		t.Ttl = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight.
func (*NokiaConf_Configure_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_MplsDm represents the /nokia-conf/configure/test-oam/mpls-dm YANG schema element.
type NokiaConf_Configure_TestOam_MplsDm struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_MplsDm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_MplsDm) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_TestOam_MplsDm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_MplsDm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_MplsDm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_MplsDm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_MplsDm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_MplsDm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_MplsDm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_MplsDm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_MplsDm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_MplsDm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_MplsDm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_MplsDm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_MplsDm.
func (*NokiaConf_Configure_TestOam_MplsDm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead represents the /nokia-conf/configure/test-oam/service-activation-testhead YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead struct {
	AcceptanceCriteriaTemplate map[string]*NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate `path:"acceptance-criteria-template" module:"nokia-conf"`
	ApplyGroups                []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	FrameSizeTemplate          map[string]*NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate          `path:"frame-size-template" module:"nokia-conf"`
	ServiceTest                map[string]*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest                `path:"service-test" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead) IsYANGGoStruct() {}

// NewAcceptanceCriteriaTemplate creates a new entry in the AcceptanceCriteriaTemplate list of the
// NokiaConf_Configure_TestOam_ServiceActivationTesthead struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) NewAcceptanceCriteriaTemplate(AcTemplateName string) (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AcceptanceCriteriaTemplate == nil {
		t.AcceptanceCriteriaTemplate = make(map[string]*NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate)
	}

	key := AcTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AcceptanceCriteriaTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AcceptanceCriteriaTemplate", key)
	}

	t.AcceptanceCriteriaTemplate[key] = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate{
		AcTemplateName: &AcTemplateName,
	}

	return t.AcceptanceCriteriaTemplate[key], nil
}

// RenameAcceptanceCriteriaTemplate renames an entry in the list AcceptanceCriteriaTemplate within
// the NokiaConf_Configure_TestOam_ServiceActivationTesthead struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) RenameAcceptanceCriteriaTemplate(oldK, newK string) error {
	if _, ok := t.AcceptanceCriteriaTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in AcceptanceCriteriaTemplate", newK)
	}

	e, ok := t.AcceptanceCriteriaTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AcceptanceCriteriaTemplate", oldK)
	}
	e.AcTemplateName = &newK

	t.AcceptanceCriteriaTemplate[newK] = e
	delete(t.AcceptanceCriteriaTemplate, oldK)
	return nil
}

// GetOrCreateAcceptanceCriteriaTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_ServiceActivationTesthead. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) GetOrCreateAcceptanceCriteriaTemplate(AcTemplateName string) *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate {

	key := AcTemplateName

	if v, ok := t.AcceptanceCriteriaTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAcceptanceCriteriaTemplate(AcTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAcceptanceCriteriaTemplate got unexpected error: %v", err))
	}
	return v
}

// GetAcceptanceCriteriaTemplate retrieves the value with the specified key from
// the AcceptanceCriteriaTemplate map field of NokiaConf_Configure_TestOam_ServiceActivationTesthead. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) GetAcceptanceCriteriaTemplate(AcTemplateName string) *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate {

	if t == nil {
		return nil
	}

	key := AcTemplateName

	if lm, ok := t.AcceptanceCriteriaTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteAcceptanceCriteriaTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_ServiceActivationTesthead. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) DeleteAcceptanceCriteriaTemplate(AcTemplateName string) {
	key := AcTemplateName

	delete(t.AcceptanceCriteriaTemplate, key)
}

// AppendAcceptanceCriteriaTemplate appends the supplied NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate struct to the
// list AcceptanceCriteriaTemplate of NokiaConf_Configure_TestOam_ServiceActivationTesthead. If the key value(s) specified in
// the supplied NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) AppendAcceptanceCriteriaTemplate(v *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) error {
	if v.AcTemplateName == nil {
		return fmt.Errorf("invalid nil key received for AcTemplateName")
	}

	key := *v.AcTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AcceptanceCriteriaTemplate == nil {
		t.AcceptanceCriteriaTemplate = make(map[string]*NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate)
	}

	if _, ok := t.AcceptanceCriteriaTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list AcceptanceCriteriaTemplate %v", key)
	}

	t.AcceptanceCriteriaTemplate[key] = v
	return nil
}

// NewFrameSizeTemplate creates a new entry in the FrameSizeTemplate list of the
// NokiaConf_Configure_TestOam_ServiceActivationTesthead struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) NewFrameSizeTemplate(FsTemplateName string) (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FrameSizeTemplate == nil {
		t.FrameSizeTemplate = make(map[string]*NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate)
	}

	key := FsTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FrameSizeTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FrameSizeTemplate", key)
	}

	t.FrameSizeTemplate[key] = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate{
		FsTemplateName: &FsTemplateName,
	}

	return t.FrameSizeTemplate[key], nil
}

// RenameFrameSizeTemplate renames an entry in the list FrameSizeTemplate within
// the NokiaConf_Configure_TestOam_ServiceActivationTesthead struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) RenameFrameSizeTemplate(oldK, newK string) error {
	if _, ok := t.FrameSizeTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in FrameSizeTemplate", newK)
	}

	e, ok := t.FrameSizeTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FrameSizeTemplate", oldK)
	}
	e.FsTemplateName = &newK

	t.FrameSizeTemplate[newK] = e
	delete(t.FrameSizeTemplate, oldK)
	return nil
}

// GetOrCreateFrameSizeTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_ServiceActivationTesthead. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) GetOrCreateFrameSizeTemplate(FsTemplateName string) *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate {

	key := FsTemplateName

	if v, ok := t.FrameSizeTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFrameSizeTemplate(FsTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFrameSizeTemplate got unexpected error: %v", err))
	}
	return v
}

// GetFrameSizeTemplate retrieves the value with the specified key from
// the FrameSizeTemplate map field of NokiaConf_Configure_TestOam_ServiceActivationTesthead. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) GetFrameSizeTemplate(FsTemplateName string) *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate {

	if t == nil {
		return nil
	}

	key := FsTemplateName

	if lm, ok := t.FrameSizeTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteFrameSizeTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_ServiceActivationTesthead. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) DeleteFrameSizeTemplate(FsTemplateName string) {
	key := FsTemplateName

	delete(t.FrameSizeTemplate, key)
}

// AppendFrameSizeTemplate appends the supplied NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate struct to the
// list FrameSizeTemplate of NokiaConf_Configure_TestOam_ServiceActivationTesthead. If the key value(s) specified in
// the supplied NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) AppendFrameSizeTemplate(v *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) error {
	if v.FsTemplateName == nil {
		return fmt.Errorf("invalid nil key received for FsTemplateName")
	}

	key := *v.FsTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FrameSizeTemplate == nil {
		t.FrameSizeTemplate = make(map[string]*NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate)
	}

	if _, ok := t.FrameSizeTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list FrameSizeTemplate %v", key)
	}

	t.FrameSizeTemplate[key] = v
	return nil
}

// NewServiceTest creates a new entry in the ServiceTest list of the
// NokiaConf_Configure_TestOam_ServiceActivationTesthead struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) NewServiceTest(TestName string) (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceTest == nil {
		t.ServiceTest = make(map[string]*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest)
	}

	key := TestName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServiceTest[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServiceTest", key)
	}

	t.ServiceTest[key] = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest{
		TestName: &TestName,
	}

	return t.ServiceTest[key], nil
}

// RenameServiceTest renames an entry in the list ServiceTest within
// the NokiaConf_Configure_TestOam_ServiceActivationTesthead struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) RenameServiceTest(oldK, newK string) error {
	if _, ok := t.ServiceTest[newK]; ok {
		return fmt.Errorf("key %v already exists in ServiceTest", newK)
	}

	e, ok := t.ServiceTest[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServiceTest", oldK)
	}
	e.TestName = &newK

	t.ServiceTest[newK] = e
	delete(t.ServiceTest, oldK)
	return nil
}

// GetOrCreateServiceTest retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_ServiceActivationTesthead. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) GetOrCreateServiceTest(TestName string) *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest {

	key := TestName

	if v, ok := t.ServiceTest[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServiceTest(TestName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServiceTest got unexpected error: %v", err))
	}
	return v
}

// GetServiceTest retrieves the value with the specified key from
// the ServiceTest map field of NokiaConf_Configure_TestOam_ServiceActivationTesthead. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) GetServiceTest(TestName string) *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest {

	if t == nil {
		return nil
	}

	key := TestName

	if lm, ok := t.ServiceTest[key]; ok {
		return lm
	}
	return nil
}

// DeleteServiceTest deletes the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_ServiceActivationTesthead. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) DeleteServiceTest(TestName string) {
	key := TestName

	delete(t.ServiceTest, key)
}

// AppendServiceTest appends the supplied NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest struct to the
// list ServiceTest of NokiaConf_Configure_TestOam_ServiceActivationTesthead. If the key value(s) specified in
// the supplied NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) AppendServiceTest(v *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) error {
	if v.TestName == nil {
		return fmt.Errorf("invalid nil key received for TestName")
	}

	key := *v.TestName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceTest == nil {
		t.ServiceTest = make(map[string]*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest)
	}

	if _, ok := t.ServiceTest[key]; ok {
		return fmt.Errorf("duplicate key for list ServiceTest %v", key)
	}

	t.ServiceTest[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_ServiceActivationTesthead
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_ServiceActivationTesthead
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AcceptanceCriteriaTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.FrameSizeTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.ServiceTest {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate represents the /nokia-conf/configure/test-oam/service-activation-testhead/acceptance-criteria-template YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate struct {
	AcTemplateName        *string  `path:"ac-template-name" module:"nokia-conf"`
	ApplyGroups           []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string `path:"apply-groups-exclude" module:"nokia-conf"`
	CirThreshold          *uint32  `path:"cir-threshold" module:"nokia-conf"`
	DelayThreshold        *uint32  `path:"delay-threshold" module:"nokia-conf"`
	DelayVarThreshold     *uint32  `path:"delay-var-threshold" module:"nokia-conf"`
	Description           *string  `path:"description" module:"nokia-conf"`
	LossThreshold         *float64 `path:"loss-threshold" module:"nokia-conf"`
	LossThresholdPolicing *float64 `path:"loss-threshold-policing" module:"nokia-conf"`
	MFactor               *uint32  `path:"m-factor" module:"nokia-conf"`
	PirThreshold          *uint32  `path:"pir-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) IsYANGGoStruct() {
}

// GetAcTemplateName retrieves the value of the leaf AcTemplateName from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcTemplateName is set, it can
// safely use t.GetAcTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetAcTemplateName() string {
	if t == nil || t.AcTemplateName == nil {
		return ""
	}
	return *t.AcTemplateName
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCirThreshold retrieves the value of the leaf CirThreshold from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirThreshold is set, it can
// safely use t.GetCirThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetCirThreshold() uint32 {
	if t == nil || t.CirThreshold == nil {
		return 0
	}
	return *t.CirThreshold
}

// GetDelayThreshold retrieves the value of the leaf DelayThreshold from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayThreshold is set, it can
// safely use t.GetDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetDelayThreshold() uint32 {
	if t == nil || t.DelayThreshold == nil {
		return 0
	}
	return *t.DelayThreshold
}

// GetDelayVarThreshold retrieves the value of the leaf DelayVarThreshold from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayVarThreshold is set, it can
// safely use t.GetDelayVarThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayVarThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetDelayVarThreshold() uint32 {
	if t == nil || t.DelayVarThreshold == nil {
		return 0
	}
	return *t.DelayVarThreshold
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLossThreshold retrieves the value of the leaf LossThreshold from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LossThreshold is set, it can
// safely use t.GetLossThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LossThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetLossThreshold() float64 {
	if t == nil || t.LossThreshold == nil {
		return 0.0
	}
	return *t.LossThreshold
}

// GetLossThresholdPolicing retrieves the value of the leaf LossThresholdPolicing from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LossThresholdPolicing is set, it can
// safely use t.GetLossThresholdPolicing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LossThresholdPolicing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetLossThresholdPolicing() float64 {
	if t == nil || t.LossThresholdPolicing == nil {
		return 0.0
	}
	return *t.LossThresholdPolicing
}

// GetMFactor retrieves the value of the leaf MFactor from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MFactor is set, it can
// safely use t.GetMFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetMFactor() uint32 {
	if t == nil || t.MFactor == nil {
		return 0
	}
	return *t.MFactor
}

// GetPirThreshold retrieves the value of the leaf PirThreshold from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirThreshold is set, it can
// safely use t.GetPirThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetPirThreshold() uint32 {
	if t == nil || t.PirThreshold == nil {
		return 0
	}
	return *t.PirThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AcTemplateName == nil {
		return nil, fmt.Errorf("nil value for key AcTemplateName")
	}

	return map[string]interface{}{
		"ac-template-name": *t.AcTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate represents the /nokia-conf/configure/test-oam/service-activation-testhead/frame-size-template YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	FsTemplateName     *string  `path:"fs-template-name" module:"nokia-conf"`
	SizeA              *uint32  `path:"size-a" module:"nokia-conf"`
	SizeB              *uint32  `path:"size-b" module:"nokia-conf"`
	SizeC              *uint32  `path:"size-c" module:"nokia-conf"`
	SizeD              *uint32  `path:"size-d" module:"nokia-conf"`
	SizeE              *uint32  `path:"size-e" module:"nokia-conf"`
	SizeF              *uint32  `path:"size-f" module:"nokia-conf"`
	SizeG              *uint32  `path:"size-g" module:"nokia-conf"`
	SizeH              *uint32  `path:"size-h" module:"nokia-conf"`
	SizeU              *uint32  `path:"size-u" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFsTemplateName retrieves the value of the leaf FsTemplateName from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FsTemplateName is set, it can
// safely use t.GetFsTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FsTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetFsTemplateName() string {
	if t == nil || t.FsTemplateName == nil {
		return ""
	}
	return *t.FsTemplateName
}

// GetSizeA retrieves the value of the leaf SizeA from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeA is set, it can
// safely use t.GetSizeA() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeA == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeA() uint32 {
	if t == nil || t.SizeA == nil {
		return 64
	}
	return *t.SizeA
}

// GetSizeB retrieves the value of the leaf SizeB from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeB is set, it can
// safely use t.GetSizeB() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeB == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeB() uint32 {
	if t == nil || t.SizeB == nil {
		return 128
	}
	return *t.SizeB
}

// GetSizeC retrieves the value of the leaf SizeC from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeC is set, it can
// safely use t.GetSizeC() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeC == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeC() uint32 {
	if t == nil || t.SizeC == nil {
		return 256
	}
	return *t.SizeC
}

// GetSizeD retrieves the value of the leaf SizeD from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeD is set, it can
// safely use t.GetSizeD() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeD == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeD() uint32 {
	if t == nil || t.SizeD == nil {
		return 512
	}
	return *t.SizeD
}

// GetSizeE retrieves the value of the leaf SizeE from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeE is set, it can
// safely use t.GetSizeE() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeE == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeE() uint32 {
	if t == nil || t.SizeE == nil {
		return 1024
	}
	return *t.SizeE
}

// GetSizeF retrieves the value of the leaf SizeF from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeF is set, it can
// safely use t.GetSizeF() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeF == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeF() uint32 {
	if t == nil || t.SizeF == nil {
		return 1280
	}
	return *t.SizeF
}

// GetSizeG retrieves the value of the leaf SizeG from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeG is set, it can
// safely use t.GetSizeG() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeG == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeG() uint32 {
	if t == nil || t.SizeG == nil {
		return 1518
	}
	return *t.SizeG
}

// GetSizeH retrieves the value of the leaf SizeH from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeH is set, it can
// safely use t.GetSizeH() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeH == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeH() uint32 {
	if t == nil || t.SizeH == nil {
		return 9212
	}
	return *t.SizeH
}

// GetSizeU retrieves the value of the leaf SizeU from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeU is set, it can
// safely use t.GetSizeU() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeU == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeU() uint32 {
	if t == nil || t.SizeU == nil {
		return 2000
	}
	return *t.SizeU
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SizeA == nil {
		var v uint32 = 64
		t.SizeA = &v
	}
	if t.SizeB == nil {
		var v uint32 = 128
		t.SizeB = &v
	}
	if t.SizeC == nil {
		var v uint32 = 256
		t.SizeC = &v
	}
	if t.SizeD == nil {
		var v uint32 = 512
		t.SizeD = &v
	}
	if t.SizeE == nil {
		var v uint32 = 1024
		t.SizeE = &v
	}
	if t.SizeF == nil {
		var v uint32 = 1280
		t.SizeF = &v
	}
	if t.SizeG == nil {
		var v uint32 = 1518
		t.SizeG = &v
	}
	if t.SizeH == nil {
		var v uint32 = 9212
		t.SizeH = &v
	}
	if t.SizeU == nil {
		var v uint32 = 2000
		t.SizeU = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FsTemplateName == nil {
		return nil, fmt.Errorf("nil value for key FsTemplateName")
	}

	return map[string]interface{}{
		"fs-template-name": *t.FsTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_FrameSizeTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest struct {
	AccountingPolicy                  *uint32                                                                                     `path:"accounting-policy" module:"nokia-conf"`
	AdminState                        E_NokiaTypesSros_AdminState                                                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                       []string                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude                []string                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description                       *string                                                                                     `path:"description" module:"nokia-conf"`
	ServiceStream                     map[uint32]*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream `path:"service-stream" module:"nokia-conf"`
	ServiceTestCompletionNotification *bool                                                                                       `path:"service-test-completion-notification" module:"nokia-conf"`
	StreamRunType                     E_NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_StreamRunType           `path:"stream-run-type" module:"nokia-conf"`
	TestDuration                      *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration             `path:"test-duration" module:"nokia-conf"`
	TestName                          *string                                                                                     `path:"test-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) IsYANGGoStruct() {}

// NewServiceStream creates a new entry in the ServiceStream list of the
// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) NewServiceStream(StreamId uint32) (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceStream == nil {
		t.ServiceStream = make(map[uint32]*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream)
	}

	key := StreamId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServiceStream[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServiceStream", key)
	}

	t.ServiceStream[key] = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream{
		StreamId: &StreamId,
	}

	return t.ServiceStream[key], nil
}

// RenameServiceStream renames an entry in the list ServiceStream within
// the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) RenameServiceStream(oldK, newK uint32) error {
	if _, ok := t.ServiceStream[newK]; ok {
		return fmt.Errorf("key %v already exists in ServiceStream", newK)
	}

	e, ok := t.ServiceStream[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServiceStream", oldK)
	}
	e.StreamId = &newK

	t.ServiceStream[newK] = e
	delete(t.ServiceStream, oldK)
	return nil
}

// GetOrCreateServiceStream retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) GetOrCreateServiceStream(StreamId uint32) *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream {

	key := StreamId

	if v, ok := t.ServiceStream[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServiceStream(StreamId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServiceStream got unexpected error: %v", err))
	}
	return v
}

// GetServiceStream retrieves the value with the specified key from
// the ServiceStream map field of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) GetServiceStream(StreamId uint32) *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream {

	if t == nil {
		return nil
	}

	key := StreamId

	if lm, ok := t.ServiceStream[key]; ok {
		return lm
	}
	return nil
}

// DeleteServiceStream deletes the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) DeleteServiceStream(StreamId uint32) {
	key := StreamId

	delete(t.ServiceStream, key)
}

// AppendServiceStream appends the supplied NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream struct to the
// list ServiceStream of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest. If the key value(s) specified in
// the supplied NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) AppendServiceStream(v *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) error {
	if v.StreamId == nil {
		return fmt.Errorf("invalid nil key received for StreamId")
	}

	key := *v.StreamId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceStream == nil {
		t.ServiceStream = make(map[uint32]*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream)
	}

	if _, ok := t.ServiceStream[key]; ok {
		return fmt.Errorf("duplicate key for list ServiceStream %v", key)
	}

	t.ServiceStream[key] = v
	return nil
}

// GetOrCreateTestDuration retrieves the value of the TestDuration field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) GetOrCreateTestDuration() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration {
	if t.TestDuration != nil {
		return t.TestDuration
	}
	t.TestDuration = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration{}
	return t.TestDuration
}

// GetTestDuration returns the value of the TestDuration struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest. If the receiver or the field TestDuration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) GetTestDuration() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration {
	if t != nil && t.TestDuration != nil {
		return t.TestDuration
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetServiceTestCompletionNotification retrieves the value of the leaf ServiceTestCompletionNotification from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceTestCompletionNotification is set, it can
// safely use t.GetServiceTestCompletionNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceTestCompletionNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) GetServiceTestCompletionNotification() bool {
	if t == nil || t.ServiceTestCompletionNotification == nil {
		return false
	}
	return *t.ServiceTestCompletionNotification
}

// GetStreamRunType retrieves the value of the leaf StreamRunType from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StreamRunType is set, it can
// safely use t.GetStreamRunType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StreamRunType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) GetStreamRunType() E_NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_StreamRunType {
	if t == nil || t.StreamRunType == 0 {
		return NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_StreamRunType_parallel
	}
	return t.StreamRunType
}

// GetTestName retrieves the value of the leaf TestName from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestName is set, it can
// safely use t.GetTestName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) GetTestName() string {
	if t == nil || t.TestName == nil {
		return ""
	}
	return *t.TestName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ServiceTestCompletionNotification == nil {
		var v bool = false
		t.ServiceTestCompletionNotification = &v
	}
	if t.StreamRunType == 0 {
		t.StreamRunType = NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_StreamRunType_parallel
	}
	t.TestDuration.PopulateDefaults()
	for _, e := range t.ServiceStream {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest struct, which is a YANG list entry.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TestName == nil {
		return nil, fmt.Errorf("nil value for key TestName")
	}

	return map[string]interface{}{
		"test-name": *t.TestName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/service-stream YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream struct {
	AcceptanceCriteriaTemplate          *string                                                                                       `path:"acceptance-criteria-template" module:"nokia-conf"`
	AdminState                          E_NokiaTypesSros_AdminState                                                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                         []string                                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude                  []string                                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Description                         *string                                                                                       `path:"description" module:"nokia-conf"`
	FrameMix                            *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix     `path:"frame-mix" module:"nokia-conf"`
	FramePayload                        *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload `path:"frame-payload" module:"nokia-conf"`
	RateCir                             *uint32                                                                                       `path:"rate-cir" module:"nokia-conf"`
	RatePir                             *uint32                                                                                       `path:"rate-pir" module:"nokia-conf"`
	ServiceStreamCompletionNotification *bool                                                                                         `path:"service-stream-completion-notification" module:"nokia-conf"`
	StreamId                            *uint32                                                                                       `path:"stream-id" module:"nokia-conf"`
	TestTypes                           *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes    `path:"test-types" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) IsYANGGoStruct() {
}

// GetOrCreateFrameMix retrieves the value of the FrameMix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetOrCreateFrameMix() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix {
	if t.FrameMix != nil {
		return t.FrameMix
	}
	t.FrameMix = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix{}
	return t.FrameMix
}

// GetOrCreateFramePayload retrieves the value of the FramePayload field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetOrCreateFramePayload() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload {
	if t.FramePayload != nil {
		return t.FramePayload
	}
	t.FramePayload = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload{}
	return t.FramePayload
}

// GetOrCreateTestTypes retrieves the value of the TestTypes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetOrCreateTestTypes() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes {
	if t.TestTypes != nil {
		return t.TestTypes
	}
	t.TestTypes = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes{}
	return t.TestTypes
}

// GetFrameMix returns the value of the FrameMix struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream. If the receiver or the field FrameMix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetFrameMix() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix {
	if t != nil && t.FrameMix != nil {
		return t.FrameMix
	}
	return nil
}

// GetFramePayload returns the value of the FramePayload struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream. If the receiver or the field FramePayload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetFramePayload() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload {
	if t != nil && t.FramePayload != nil {
		return t.FramePayload
	}
	return nil
}

// GetTestTypes returns the value of the TestTypes struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream. If the receiver or the field TestTypes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetTestTypes() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes {
	if t != nil && t.TestTypes != nil {
		return t.TestTypes
	}
	return nil
}

// GetAcceptanceCriteriaTemplate retrieves the value of the leaf AcceptanceCriteriaTemplate from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptanceCriteriaTemplate is set, it can
// safely use t.GetAcceptanceCriteriaTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptanceCriteriaTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetAcceptanceCriteriaTemplate() string {
	if t == nil || t.AcceptanceCriteriaTemplate == nil {
		return ""
	}
	return *t.AcceptanceCriteriaTemplate
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetRateCir retrieves the value of the leaf RateCir from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateCir is set, it can
// safely use t.GetRateCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateCir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetRateCir() uint32 {
	if t == nil || t.RateCir == nil {
		return 0
	}
	return *t.RateCir
}

// GetRatePir retrieves the value of the leaf RatePir from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatePir is set, it can
// safely use t.GetRatePir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatePir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetRatePir() uint32 {
	if t == nil || t.RatePir == nil {
		return 0
	}
	return *t.RatePir
}

// GetServiceStreamCompletionNotification retrieves the value of the leaf ServiceStreamCompletionNotification from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceStreamCompletionNotification is set, it can
// safely use t.GetServiceStreamCompletionNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceStreamCompletionNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetServiceStreamCompletionNotification() bool {
	if t == nil || t.ServiceStreamCompletionNotification == nil {
		return false
	}
	return *t.ServiceStreamCompletionNotification
}

// GetStreamId retrieves the value of the leaf StreamId from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StreamId is set, it can
// safely use t.GetStreamId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StreamId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetStreamId() uint32 {
	if t == nil || t.StreamId == nil {
		return 0
	}
	return *t.StreamId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RateCir == nil {
		var v uint32 = 0
		t.RateCir = &v
	}
	if t.RatePir == nil {
		var v uint32 = 0
		t.RatePir = &v
	}
	if t.ServiceStreamCompletionNotification == nil {
		var v bool = false
		t.ServiceStreamCompletionNotification = &v
	}
	t.FrameMix.PopulateDefaults()
	t.FramePayload.PopulateDefaults()
	t.TestTypes.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream struct, which is a YANG list entry.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StreamId == nil {
		return nil, fmt.Errorf("nil value for key StreamId")
	}

	return map[string]interface{}{
		"stream-id": *t.StreamId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/service-stream/frame-mix YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix struct {
	FrameSizeTemplate *string `path:"frame-size-template" module:"nokia-conf"`
	Sequence          *string `path:"sequence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) IsYANGGoStruct() {
}

// GetFrameSizeTemplate retrieves the value of the leaf FrameSizeTemplate from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameSizeTemplate is set, it can
// safely use t.GetFrameSizeTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameSizeTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) GetFrameSizeTemplate() string {
	if t == nil || t.FrameSizeTemplate == nil {
		return ""
	}
	return *t.FrameSizeTemplate
}

// GetSequence retrieves the value of the leaf Sequence from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sequence is set, it can
// safely use t.GetSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sequence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) GetSequence() string {
	if t == nil || t.Sequence == nil {
		return "a"
	}
	return *t.Sequence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Sequence == nil {
		var v string = "a"
		t.Sequence = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/service-stream/frame-payload YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload struct {
	DataPattern *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern `path:"data-pattern" module:"nokia-conf"`
	Ethernet    *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet    `path:"ethernet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) IsYANGGoStruct() {
}

// GetOrCreateDataPattern retrieves the value of the DataPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) GetOrCreateDataPattern() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern {
	if t.DataPattern != nil {
		return t.DataPattern
	}
	t.DataPattern = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern{}
	return t.DataPattern
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) GetOrCreateEthernet() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet{}
	return t.Ethernet
}

// GetDataPattern returns the value of the DataPattern struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload. If the receiver or the field DataPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) GetDataPattern() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern {
	if t != nil && t.DataPattern != nil {
		return t.DataPattern
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) GetEthernet() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DataPattern.PopulateDefaults()
	t.Ethernet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/service-stream/frame-payload/data-pattern YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern struct {
	Repeat NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern_Repeat_Union `path:"repeat" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) IsYANGGoStruct() {
}

// GetRepeat retrieves the value of the leaf Repeat from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Repeat is set, it can
// safely use t.GetRepeat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Repeat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) GetRepeat() NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern_Repeat_Union {
	if t == nil || t.Repeat == nil {
		return UnionString("0x00000000")
	}
	return t.Repeat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Repeat == nil {
		t.Repeat = UnionString("0x00000000")
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/service-stream/frame-payload/ethernet YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet struct {
	CTag   *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag   `path:"c-tag" module:"nokia-conf"`
	DstMac *string                                                                                                       `path:"dst-mac" module:"nokia-conf"`
	EthCfm *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm `path:"eth-cfm" module:"nokia-conf"`
	STag   *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag   `path:"s-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) IsYANGGoStruct() {
}

// GetOrCreateCTag retrieves the value of the CTag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetOrCreateCTag() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag {
	if t.CTag != nil {
		return t.CTag
	}
	t.CTag = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag{}
	return t.CTag
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetOrCreateEthCfm() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm{}
	return t.EthCfm
}

// GetOrCreateSTag retrieves the value of the STag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetOrCreateSTag() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag {
	if t.STag != nil {
		return t.STag
	}
	t.STag = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag{}
	return t.STag
}

// GetCTag returns the value of the CTag struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet. If the receiver or the field CTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetCTag() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag {
	if t != nil && t.CTag != nil {
		return t.CTag
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetEthCfm() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetSTag returns the value of the STag struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet. If the receiver or the field STag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetSTag() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag {
	if t != nil && t.STag != nil {
		return t.STag
	}
	return nil
}

// GetDstMac retrieves the value of the leaf DstMac from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstMac is set, it can
// safely use t.GetDstMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetDstMac() string {
	if t == nil || t.DstMac == nil {
		return ""
	}
	return *t.DstMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CTag.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.STag.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/service-stream/frame-payload/ethernet/c-tag YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag struct {
	DiscardEligible *bool   `path:"discard-eligible" module:"nokia-conf"`
	Dot1P           *uint32 `path:"dot1p" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) IsYANGGoStruct() {
}

// GetDiscardEligible retrieves the value of the leaf DiscardEligible from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardEligible is set, it can
// safely use t.GetDiscardEligible() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardEligible == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) GetDiscardEligible() bool {
	if t == nil || t.DiscardEligible == nil {
		return false
	}
	return *t.DiscardEligible
}

// GetDot1P retrieves the value of the leaf Dot1P from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1P is set, it can
// safely use t.GetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) GetDot1P() uint32 {
	if t == nil || t.Dot1P == nil {
		return 7
	}
	return *t.Dot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DiscardEligible == nil {
		var v bool = false
		t.DiscardEligible = &v
	}
	if t.Dot1P == nil {
		var v uint32 = 7
		t.Dot1P = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/service-stream/frame-payload/ethernet/eth-cfm YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm struct {
	Source *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) IsYANGGoStruct() {
}

// GetOrCreateSource retrieves the value of the Source field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) GetOrCreateSource() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source {
	if t.Source != nil {
		return t.Source
	}
	t.Source = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source{}
	return t.Source
}

// GetSource returns the value of the Source struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm. If the receiver or the field Source is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) GetSource() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source {
	if t != nil && t.Source != nil {
		return t.Source
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Source.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/service-stream/frame-payload/ethernet/eth-cfm/source YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source struct {
	MaAdminName *string `path:"ma-admin-name" module:"nokia-conf"`
	MdAdminName *string `path:"md-admin-name" module:"nokia-conf"`
	MepId       *uint16 `path:"mep-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) IsYANGGoStruct() {
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/service-stream/frame-payload/ethernet/s-tag YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag struct {
	DiscardEligible *bool   `path:"discard-eligible" module:"nokia-conf"`
	Dot1P           *uint32 `path:"dot1p" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) IsYANGGoStruct() {
}

// GetDiscardEligible retrieves the value of the leaf DiscardEligible from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardEligible is set, it can
// safely use t.GetDiscardEligible() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardEligible == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) GetDiscardEligible() bool {
	if t == nil || t.DiscardEligible == nil {
		return false
	}
	return *t.DiscardEligible
}

// GetDot1P retrieves the value of the leaf Dot1P from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1P is set, it can
// safely use t.GetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) GetDot1P() uint32 {
	if t == nil || t.Dot1P == nil {
		return 7
	}
	return *t.Dot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DiscardEligible == nil {
		var v bool = false
		t.DiscardEligible = &v
	}
	if t.Dot1P == nil {
		var v uint32 = 7
		t.Dot1P = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/service-stream/test-types YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes struct {
	Cir         *bool `path:"cir" module:"nokia-conf"`
	CirPir      *bool `path:"cir-pir" module:"nokia-conf"`
	Performance *bool `path:"performance" module:"nokia-conf"`
	Policing    *bool `path:"policing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) GetCir() bool {
	if t == nil || t.Cir == nil {
		return false
	}
	return *t.Cir
}

// GetCirPir retrieves the value of the leaf CirPir from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPir is set, it can
// safely use t.GetCirPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) GetCirPir() bool {
	if t == nil || t.CirPir == nil {
		return false
	}
	return *t.CirPir
}

// GetPerformance retrieves the value of the leaf Performance from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Performance is set, it can
// safely use t.GetPerformance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Performance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) GetPerformance() bool {
	if t == nil || t.Performance == nil {
		return false
	}
	return *t.Performance
}

// GetPolicing retrieves the value of the leaf Policing from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policing is set, it can
// safely use t.GetPolicing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) GetPolicing() bool {
	if t == nil || t.Policing == nil {
		return false
	}
	return *t.Policing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v bool = false
		t.Cir = &v
	}
	if t.CirPir == nil {
		var v bool = false
		t.CirPir = &v
	}
	if t.Performance == nil {
		var v bool = false
		t.Performance = &v
	}
	if t.Policing == nil {
		var v bool = false
		t.Policing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/test-duration YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration struct {
	Cir         *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir         `path:"cir" module:"nokia-conf"`
	CirPir      *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir      `path:"cir-pir" module:"nokia-conf"`
	Performance *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance `path:"performance" module:"nokia-conf"`
	Policing    *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing    `path:"policing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) IsYANGGoStruct() {
}

// GetOrCreateCir retrieves the value of the Cir field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetOrCreateCir() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir {
	if t.Cir != nil {
		return t.Cir
	}
	t.Cir = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir{}
	return t.Cir
}

// GetOrCreateCirPir retrieves the value of the CirPir field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetOrCreateCirPir() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir {
	if t.CirPir != nil {
		return t.CirPir
	}
	t.CirPir = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir{}
	return t.CirPir
}

// GetOrCreatePerformance retrieves the value of the Performance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetOrCreatePerformance() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance {
	if t.Performance != nil {
		return t.Performance
	}
	t.Performance = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance{}
	return t.Performance
}

// GetOrCreatePolicing retrieves the value of the Policing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetOrCreatePolicing() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing {
	if t.Policing != nil {
		return t.Policing
	}
	t.Policing = &NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing{}
	return t.Policing
}

// GetCir returns the value of the Cir struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration. If the receiver or the field Cir is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetCir() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir {
	if t != nil && t.Cir != nil {
		return t.Cir
	}
	return nil
}

// GetCirPir returns the value of the CirPir struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration. If the receiver or the field CirPir is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetCirPir() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir {
	if t != nil && t.CirPir != nil {
		return t.CirPir
	}
	return nil
}

// GetPerformance returns the value of the Performance struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration. If the receiver or the field Performance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetPerformance() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance {
	if t != nil && t.Performance != nil {
		return t.Performance
	}
	return nil
}

// GetPolicing returns the value of the Policing struct pointer
// from NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration. If the receiver or the field Policing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetPolicing() *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing {
	if t != nil && t.Policing != nil {
		return t.Policing
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cir.PopulateDefaults()
	t.CirPir.PopulateDefaults()
	t.Performance.PopulateDefaults()
	t.Policing.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/test-duration/cir YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir struct {
	MinutesSeconds *string `path:"minutes-seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) IsYANGGoStruct() {
}

// GetMinutesSeconds retrieves the value of the leaf MinutesSeconds from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinutesSeconds is set, it can
// safely use t.GetMinutesSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinutesSeconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) GetMinutesSeconds() string {
	if t == nil || t.MinutesSeconds == nil {
		return "05:00"
	}
	return *t.MinutesSeconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinutesSeconds == nil {
		var v string = "05:00"
		t.MinutesSeconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/test-duration/cir-pir YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir struct {
	MinutesSeconds *string `path:"minutes-seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) IsYANGGoStruct() {
}

// GetMinutesSeconds retrieves the value of the leaf MinutesSeconds from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinutesSeconds is set, it can
// safely use t.GetMinutesSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinutesSeconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) GetMinutesSeconds() string {
	if t == nil || t.MinutesSeconds == nil {
		return "10:00"
	}
	return *t.MinutesSeconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinutesSeconds == nil {
		var v string = "10:00"
		t.MinutesSeconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/test-duration/performance YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance struct {
	HoursMinutesSeconds *string `path:"hours-minutes-seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) IsYANGGoStruct() {
}

// GetHoursMinutesSeconds retrieves the value of the leaf HoursMinutesSeconds from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoursMinutesSeconds is set, it can
// safely use t.GetHoursMinutesSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoursMinutesSeconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) GetHoursMinutesSeconds() string {
	if t == nil || t.HoursMinutesSeconds == nil {
		return "00:15:00"
	}
	return *t.HoursMinutesSeconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoursMinutesSeconds == nil {
		var v string = "00:15:00"
		t.HoursMinutesSeconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing represents the /nokia-conf/configure/test-oam/service-activation-testhead/service-test/test-duration/policing YANG schema element.
type NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing struct {
	MinutesSeconds *string `path:"minutes-seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) IsYANGGoStruct() {
}

// GetMinutesSeconds retrieves the value of the leaf MinutesSeconds from the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinutesSeconds is set, it can
// safely use t.GetMinutesSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinutesSeconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) GetMinutesSeconds() string {
	if t == nil || t.MinutesSeconds == nil {
		return "10:00"
	}
	return *t.MinutesSeconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinutesSeconds == nil {
		var v string = "10:00"
		t.MinutesSeconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing.
func (*NokiaConf_Configure_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_Twamp represents the /nokia-conf/configure/test-oam/twamp YANG schema element.
type NokiaConf_Configure_TestOam_Twamp struct {
	ApplyGroups        []string                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Server             *NokiaConf_Configure_TestOam_Twamp_Server       `path:"server" module:"nokia-conf"`
	TwampLight         *NokiaConf_Configure_TestOam_Twamp_TwampLight   `path:"twamp-light" module:"nokia-conf"`
	TwampTestPdu       *NokiaConf_Configure_TestOam_Twamp_TwampTestPdu `path:"twamp-test-pdu" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_Twamp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_Twamp) IsYANGGoStruct() {}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_Twamp) GetOrCreateServer() *NokiaConf_Configure_TestOam_Twamp_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_TestOam_Twamp_Server{}
	return t.Server
}

// GetOrCreateTwampLight retrieves the value of the TwampLight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_Twamp) GetOrCreateTwampLight() *NokiaConf_Configure_TestOam_Twamp_TwampLight {
	if t.TwampLight != nil {
		return t.TwampLight
	}
	t.TwampLight = &NokiaConf_Configure_TestOam_Twamp_TwampLight{}
	return t.TwampLight
}

// GetOrCreateTwampTestPdu retrieves the value of the TwampTestPdu field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_TestOam_Twamp) GetOrCreateTwampTestPdu() *NokiaConf_Configure_TestOam_Twamp_TwampTestPdu {
	if t.TwampTestPdu != nil {
		return t.TwampTestPdu
	}
	t.TwampTestPdu = &NokiaConf_Configure_TestOam_Twamp_TwampTestPdu{}
	return t.TwampTestPdu
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_TestOam_Twamp. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_Twamp) GetServer() *NokiaConf_Configure_TestOam_Twamp_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetTwampLight returns the value of the TwampLight struct pointer
// from NokiaConf_Configure_TestOam_Twamp. If the receiver or the field TwampLight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_Twamp) GetTwampLight() *NokiaConf_Configure_TestOam_Twamp_TwampLight {
	if t != nil && t.TwampLight != nil {
		return t.TwampLight
	}
	return nil
}

// GetTwampTestPdu returns the value of the TwampTestPdu struct pointer
// from NokiaConf_Configure_TestOam_Twamp. If the receiver or the field TwampTestPdu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_TestOam_Twamp) GetTwampTestPdu() *NokiaConf_Configure_TestOam_Twamp_TwampTestPdu {
	if t != nil && t.TwampTestPdu != nil {
		return t.TwampTestPdu
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_Twamp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_Twamp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_Twamp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_Twamp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Server.PopulateDefaults()
	t.TwampLight.PopulateDefaults()
	t.TwampTestPdu.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Twamp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_Twamp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Twamp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_Twamp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_Twamp.
func (*NokiaConf_Configure_TestOam_Twamp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_Twamp_Server represents the /nokia-conf/configure/test-oam/twamp/server YANG schema element.
type NokiaConf_Configure_TestOam_Twamp_Server struct {
	AdminState               E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	AllowIpv6UdpChecksumZero *bool                                                       `path:"allow-ipv6-udp-checksum-zero" module:"nokia-conf"`
	ApplyGroups              []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	InactivityTimeout        *uint32                                                     `path:"inactivity-timeout" module:"nokia-conf"`
	MaxConnections           *uint32                                                     `path:"max-connections" module:"nokia-conf"`
	MaxSessions              *uint32                                                     `path:"max-sessions" module:"nokia-conf"`
	Prefix                   map[string]*NokiaConf_Configure_TestOam_Twamp_Server_Prefix `path:"prefix" module:"nokia-conf"`
	RefInactivityTimeout     *uint32                                                     `path:"ref-inactivity-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_Twamp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_Twamp_Server) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_TestOam_Twamp_Server struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) NewPrefix(IpPrefix string) (*NokiaConf_Configure_TestOam_Twamp_Server_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_TestOam_Twamp_Server_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_TestOam_Twamp_Server_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_TestOam_Twamp_Server struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_Twamp_Server. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_TestOam_Twamp_Server_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_TestOam_Twamp_Server. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) GetPrefix(IpPrefix string) *NokiaConf_Configure_TestOam_Twamp_Server_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_TestOam_Twamp_Server. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_TestOam_Twamp_Server_Prefix struct to the
// list Prefix of NokiaConf_Configure_TestOam_Twamp_Server. If the key value(s) specified in
// the supplied NokiaConf_Configure_TestOam_Twamp_Server_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) AppendPrefix(v *NokiaConf_Configure_TestOam_Twamp_Server_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_TestOam_Twamp_Server_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowIpv6UdpChecksumZero retrieves the value of the leaf AllowIpv6UdpChecksumZero from the NokiaConf_Configure_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIpv6UdpChecksumZero is set, it can
// safely use t.GetAllowIpv6UdpChecksumZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIpv6UdpChecksumZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) GetAllowIpv6UdpChecksumZero() bool {
	if t == nil || t.AllowIpv6UdpChecksumZero == nil {
		return false
	}
	return *t.AllowIpv6UdpChecksumZero
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInactivityTimeout retrieves the value of the leaf InactivityTimeout from the NokiaConf_Configure_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactivityTimeout is set, it can
// safely use t.GetInactivityTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactivityTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) GetInactivityTimeout() uint32 {
	if t == nil || t.InactivityTimeout == nil {
		return 900
	}
	return *t.InactivityTimeout
}

// GetMaxConnections retrieves the value of the leaf MaxConnections from the NokiaConf_Configure_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxConnections is set, it can
// safely use t.GetMaxConnections() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxConnections == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) GetMaxConnections() uint32 {
	if t == nil || t.MaxConnections == nil {
		return 32
	}
	return *t.MaxConnections
}

// GetMaxSessions retrieves the value of the leaf MaxSessions from the NokiaConf_Configure_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSessions is set, it can
// safely use t.GetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) GetMaxSessions() uint32 {
	if t == nil || t.MaxSessions == nil {
		return 32
	}
	return *t.MaxSessions
}

// GetRefInactivityTimeout retrieves the value of the leaf RefInactivityTimeout from the NokiaConf_Configure_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RefInactivityTimeout is set, it can
// safely use t.GetRefInactivityTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RefInactivityTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) GetRefInactivityTimeout() uint32 {
	if t == nil || t.RefInactivityTimeout == nil {
		return 900
	}
	return *t.RefInactivityTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_Twamp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllowIpv6UdpChecksumZero == nil {
		var v bool = false
		t.AllowIpv6UdpChecksumZero = &v
	}
	if t.InactivityTimeout == nil {
		var v uint32 = 900
		t.InactivityTimeout = &v
	}
	if t.MaxConnections == nil {
		var v uint32 = 32
		t.MaxConnections = &v
	}
	if t.MaxSessions == nil {
		var v uint32 = 32
		t.MaxSessions = &v
	}
	if t.RefInactivityTimeout == nil {
		var v uint32 = 900
		t.RefInactivityTimeout = &v
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_Twamp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_Twamp_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_Twamp_Server.
func (*NokiaConf_Configure_TestOam_Twamp_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_Twamp_Server_Prefix represents the /nokia-conf/configure/test-oam/twamp/server/prefix YANG schema element.
type NokiaConf_Configure_TestOam_Twamp_Server_Prefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	IpPrefix           *string  `path:"ip-prefix" module:"nokia-conf"`
	MaxConnections     *uint32  `path:"max-connections" module:"nokia-conf"`
	MaxSessions        *uint32  `path:"max-sessions" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_Twamp_Server_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_Twamp_Server_Prefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_Twamp_Server_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_Twamp_Server_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_TestOam_Twamp_Server_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server_Prefix) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_TestOam_Twamp_Server_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetMaxConnections retrieves the value of the leaf MaxConnections from the NokiaConf_Configure_TestOam_Twamp_Server_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxConnections is set, it can
// safely use t.GetMaxConnections() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxConnections == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server_Prefix) GetMaxConnections() uint32 {
	if t == nil || t.MaxConnections == nil {
		return 32
	}
	return *t.MaxConnections
}

// GetMaxSessions retrieves the value of the leaf MaxSessions from the NokiaConf_Configure_TestOam_Twamp_Server_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSessions is set, it can
// safely use t.GetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_Server_Prefix) GetMaxSessions() uint32 {
	if t == nil || t.MaxSessions == nil {
		return 32
	}
	return *t.MaxSessions
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_Twamp_Server_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_Twamp_Server_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxConnections == nil {
		var v uint32 = 32
		t.MaxConnections = &v
	}
	if t.MaxSessions == nil {
		var v uint32 = 32
		t.MaxSessions = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_TestOam_Twamp_Server_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_TestOam_Twamp_Server_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Twamp_Server_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_Twamp_Server_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Twamp_Server_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_Twamp_Server_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_Twamp_Server_Prefix.
func (*NokiaConf_Configure_TestOam_Twamp_Server_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_Twamp_TwampLight represents the /nokia-conf/configure/test-oam/twamp/twamp-light YANG schema element.
type NokiaConf_Configure_TestOam_Twamp_TwampLight struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	InactivityTimeout  *uint32  `path:"inactivity-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_Twamp_TwampLight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_Twamp_TwampLight) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_Twamp_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampLight) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_Twamp_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampLight) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInactivityTimeout retrieves the value of the leaf InactivityTimeout from the NokiaConf_Configure_TestOam_Twamp_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactivityTimeout is set, it can
// safely use t.GetInactivityTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactivityTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampLight) GetInactivityTimeout() uint32 {
	if t == nil || t.InactivityTimeout == nil {
		return 100
	}
	return *t.InactivityTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_Twamp_TwampLight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampLight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InactivityTimeout == nil {
		var v uint32 = 100
		t.InactivityTimeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampLight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_Twamp_TwampLight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampLight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampLight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_Twamp_TwampLight.
func (*NokiaConf_Configure_TestOam_Twamp_TwampLight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_TestOam_Twamp_TwampTestPdu represents the /nokia-conf/configure/test-oam/twamp/twamp-test-pdu YANG schema element.
type NokiaConf_Configure_TestOam_Twamp_TwampTestPdu struct {
	ApplyGroups        []string                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4Timestamping   E_NokiaTypesOam_TwampTimestampAuthor `path:"ipv4-timestamping" module:"nokia-conf"`
	Ipv6Timestamping   E_NokiaTypesOam_TwampTimestampAuthor `path:"ipv6-timestamping" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_TestOam_Twamp_TwampTestPdu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_TestOam_Twamp_TwampTestPdu) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_TestOam_Twamp_TwampTestPdu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampTestPdu) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_TestOam_Twamp_TwampTestPdu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampTestPdu) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4Timestamping retrieves the value of the leaf Ipv4Timestamping from the NokiaConf_Configure_TestOam_Twamp_TwampTestPdu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Timestamping is set, it can
// safely use t.GetIpv4Timestamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Timestamping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampTestPdu) GetIpv4Timestamping() E_NokiaTypesOam_TwampTimestampAuthor {
	if t == nil || t.Ipv4Timestamping == 0 {
		return NokiaTypesOam_TwampTimestampAuthor_central
	}
	return t.Ipv4Timestamping
}

// GetIpv6Timestamping retrieves the value of the leaf Ipv6Timestamping from the NokiaConf_Configure_TestOam_Twamp_TwampTestPdu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Timestamping is set, it can
// safely use t.GetIpv6Timestamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Timestamping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampTestPdu) GetIpv6Timestamping() E_NokiaTypesOam_TwampTimestampAuthor {
	if t == nil || t.Ipv6Timestamping == 0 {
		return NokiaTypesOam_TwampTimestampAuthor_central
	}
	return t.Ipv6Timestamping
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_TestOam_Twamp_TwampTestPdu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampTestPdu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4Timestamping == 0 {
		t.Ipv4Timestamping = NokiaTypesOam_TwampTimestampAuthor_central
	}
	if t.Ipv6Timestamping == 0 {
		t.Ipv6Timestamping = NokiaTypesOam_TwampTimestampAuthor_central
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampTestPdu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_TestOam_Twamp_TwampTestPdu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampTestPdu) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_TestOam_Twamp_TwampTestPdu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_TestOam_Twamp_TwampTestPdu.
func (*NokiaConf_Configure_TestOam_Twamp_TwampTestPdu) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp represents the /nokia-conf/configure/vrrp YANG schema element.
type NokiaConf_Configure_Vrrp struct {
	ApplyGroups        []string                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             map[uint32]*NokiaConf_Configure_Vrrp_Policy `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// NokiaConf_Configure_Vrrp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Vrrp) NewPolicy(PolicyId uint32) (*NokiaConf_Configure_Vrrp_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[uint32]*NokiaConf_Configure_Vrrp_Policy)
	}

	key := PolicyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &NokiaConf_Configure_Vrrp_Policy{
		PolicyId: &PolicyId,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the NokiaConf_Configure_Vrrp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Vrrp) RenamePolicy(oldK, newK uint32) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.PolicyId = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Vrrp) GetOrCreatePolicy(PolicyId uint32) *NokiaConf_Configure_Vrrp_Policy {

	key := PolicyId

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(PolicyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of NokiaConf_Configure_Vrrp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Vrrp) GetPolicy(PolicyId uint32) *NokiaConf_Configure_Vrrp_Policy {

	if t == nil {
		return nil
	}

	key := PolicyId

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Vrrp) DeletePolicy(PolicyId uint32) {
	key := PolicyId

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied NokiaConf_Configure_Vrrp_Policy struct to the
// list Policy of NokiaConf_Configure_Vrrp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Vrrp_Policy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Vrrp) AppendPolicy(v *NokiaConf_Configure_Vrrp_Policy) error {
	if v.PolicyId == nil {
		return fmt.Errorf("invalid nil key received for PolicyId")
	}

	key := *v.PolicyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[uint32]*NokiaConf_Configure_Vrrp_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp.
func (*NokiaConf_Configure_Vrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy represents the /nokia-conf/configure/vrrp/policy YANG schema element.
type NokiaConf_Configure_Vrrp_Policy struct {
	AdminState         E_NokiaTypesSros_AdminState                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Context            *string                                        `path:"context" module:"nokia-conf"`
	DeltaInUseLimit    *uint8                                         `path:"delta-in-use-limit" module:"nokia-conf"`
	Description        *string                                        `path:"description" module:"nokia-conf"`
	PolicyId           *uint32                                        `path:"policy-id" module:"nokia-conf"`
	PriorityEvent      *NokiaConf_Configure_Vrrp_Policy_PriorityEvent `path:"priority-event" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy) IsYANGGoStruct() {}

// GetOrCreatePriorityEvent retrieves the value of the PriorityEvent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Vrrp_Policy) GetOrCreatePriorityEvent() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent {
	if t.PriorityEvent != nil {
		return t.PriorityEvent
	}
	t.PriorityEvent = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent{}
	return t.PriorityEvent
}

// GetPriorityEvent returns the value of the PriorityEvent struct pointer
// from NokiaConf_Configure_Vrrp_Policy. If the receiver or the field PriorityEvent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy) GetPriorityEvent() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent {
	if t != nil && t.PriorityEvent != nil {
		return t.PriorityEvent
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Vrrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Vrrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Vrrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetContext retrieves the value of the leaf Context from the NokiaConf_Configure_Vrrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Context is set, it can
// safely use t.GetContext() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Context == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy) GetContext() string {
	if t == nil || t.Context == nil {
		return ""
	}
	return *t.Context
}

// GetDeltaInUseLimit retrieves the value of the leaf DeltaInUseLimit from the NokiaConf_Configure_Vrrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeltaInUseLimit is set, it can
// safely use t.GetDeltaInUseLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeltaInUseLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy) GetDeltaInUseLimit() uint8 {
	if t == nil || t.DeltaInUseLimit == nil {
		return 1
	}
	return *t.DeltaInUseLimit
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Vrrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Vrrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DeltaInUseLimit == nil {
		var v uint8 = 1
		t.DeltaInUseLimit = &v
	}
	t.PriorityEvent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Vrrp_Policy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Vrrp_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyId == nil {
		return nil, fmt.Errorf("nil value for key PolicyId")
	}

	return map[string]interface{}{
		"policy-id": *t.PolicyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy.
func (*NokiaConf_Configure_Vrrp_Policy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent represents the /nokia-conf/configure/vrrp/policy/priority-event YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent struct {
	HostUnreachable      map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable      `path:"host-unreachable" module:"nokia-conf"`
	LagPortDown          map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown          `path:"lag-port-down" module:"nokia-conf"`
	McIpsecNonForwarding map[uint32]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding `path:"mc-ipsec-non-forwarding" module:"nokia-conf"`
	PortDown             map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown             `path:"port-down" module:"nokia-conf"`
	RouteUnknown         map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown         `path:"route-unknown" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent) IsYANGGoStruct() {}

// NewHostUnreachable creates a new entry in the HostUnreachable list of the
// NokiaConf_Configure_Vrrp_Policy_PriorityEvent struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) NewHostUnreachable(IpAddress string) (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostUnreachable == nil {
		t.HostUnreachable = make(map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostUnreachable[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostUnreachable", key)
	}

	t.HostUnreachable[key] = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable{
		IpAddress: &IpAddress,
	}

	return t.HostUnreachable[key], nil
}

// RenameHostUnreachable renames an entry in the list HostUnreachable within
// the NokiaConf_Configure_Vrrp_Policy_PriorityEvent struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) RenameHostUnreachable(oldK, newK string) error {
	if _, ok := t.HostUnreachable[newK]; ok {
		return fmt.Errorf("key %v already exists in HostUnreachable", newK)
	}

	e, ok := t.HostUnreachable[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostUnreachable", oldK)
	}
	e.IpAddress = &newK

	t.HostUnreachable[newK] = e
	delete(t.HostUnreachable, oldK)
	return nil
}

// GetOrCreateHostUnreachable retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) GetOrCreateHostUnreachable(IpAddress string) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable {

	key := IpAddress

	if v, ok := t.HostUnreachable[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostUnreachable(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostUnreachable got unexpected error: %v", err))
	}
	return v
}

// GetHostUnreachable retrieves the value with the specified key from
// the HostUnreachable map field of NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) GetHostUnreachable(IpAddress string) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.HostUnreachable[key]; ok {
		return lm
	}
	return nil
}

// DeleteHostUnreachable deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) DeleteHostUnreachable(IpAddress string) {
	key := IpAddress

	delete(t.HostUnreachable, key)
}

// AppendHostUnreachable appends the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable struct to the
// list HostUnreachable of NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the key value(s) specified in
// the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) AppendHostUnreachable(v *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostUnreachable == nil {
		t.HostUnreachable = make(map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable)
	}

	if _, ok := t.HostUnreachable[key]; ok {
		return fmt.Errorf("duplicate key for list HostUnreachable %v", key)
	}

	t.HostUnreachable[key] = v
	return nil
}

// NewLagPortDown creates a new entry in the LagPortDown list of the
// NokiaConf_Configure_Vrrp_Policy_PriorityEvent struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) NewLagPortDown(LagName string) (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LagPortDown == nil {
		t.LagPortDown = make(map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown)
	}

	key := LagName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LagPortDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LagPortDown", key)
	}

	t.LagPortDown[key] = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown{
		LagName: &LagName,
	}

	return t.LagPortDown[key], nil
}

// RenameLagPortDown renames an entry in the list LagPortDown within
// the NokiaConf_Configure_Vrrp_Policy_PriorityEvent struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) RenameLagPortDown(oldK, newK string) error {
	if _, ok := t.LagPortDown[newK]; ok {
		return fmt.Errorf("key %v already exists in LagPortDown", newK)
	}

	e, ok := t.LagPortDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LagPortDown", oldK)
	}
	e.LagName = &newK

	t.LagPortDown[newK] = e
	delete(t.LagPortDown, oldK)
	return nil
}

// GetOrCreateLagPortDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) GetOrCreateLagPortDown(LagName string) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown {

	key := LagName

	if v, ok := t.LagPortDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLagPortDown(LagName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLagPortDown got unexpected error: %v", err))
	}
	return v
}

// GetLagPortDown retrieves the value with the specified key from
// the LagPortDown map field of NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) GetLagPortDown(LagName string) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown {

	if t == nil {
		return nil
	}

	key := LagName

	if lm, ok := t.LagPortDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteLagPortDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) DeleteLagPortDown(LagName string) {
	key := LagName

	delete(t.LagPortDown, key)
}

// AppendLagPortDown appends the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown struct to the
// list LagPortDown of NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the key value(s) specified in
// the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) AppendLagPortDown(v *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) error {
	if v.LagName == nil {
		return fmt.Errorf("invalid nil key received for LagName")
	}

	key := *v.LagName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LagPortDown == nil {
		t.LagPortDown = make(map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown)
	}

	if _, ok := t.LagPortDown[key]; ok {
		return fmt.Errorf("duplicate key for list LagPortDown %v", key)
	}

	t.LagPortDown[key] = v
	return nil
}

// NewMcIpsecNonForwarding creates a new entry in the McIpsecNonForwarding list of the
// NokiaConf_Configure_Vrrp_Policy_PriorityEvent struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) NewMcIpsecNonForwarding(TunnelGroupId uint32) (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.McIpsecNonForwarding == nil {
		t.McIpsecNonForwarding = make(map[uint32]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding)
	}

	key := TunnelGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.McIpsecNonForwarding[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list McIpsecNonForwarding", key)
	}

	t.McIpsecNonForwarding[key] = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding{
		TunnelGroupId: &TunnelGroupId,
	}

	return t.McIpsecNonForwarding[key], nil
}

// RenameMcIpsecNonForwarding renames an entry in the list McIpsecNonForwarding within
// the NokiaConf_Configure_Vrrp_Policy_PriorityEvent struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) RenameMcIpsecNonForwarding(oldK, newK uint32) error {
	if _, ok := t.McIpsecNonForwarding[newK]; ok {
		return fmt.Errorf("key %v already exists in McIpsecNonForwarding", newK)
	}

	e, ok := t.McIpsecNonForwarding[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in McIpsecNonForwarding", oldK)
	}
	e.TunnelGroupId = &newK

	t.McIpsecNonForwarding[newK] = e
	delete(t.McIpsecNonForwarding, oldK)
	return nil
}

// GetOrCreateMcIpsecNonForwarding retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) GetOrCreateMcIpsecNonForwarding(TunnelGroupId uint32) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding {

	key := TunnelGroupId

	if v, ok := t.McIpsecNonForwarding[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMcIpsecNonForwarding(TunnelGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMcIpsecNonForwarding got unexpected error: %v", err))
	}
	return v
}

// GetMcIpsecNonForwarding retrieves the value with the specified key from
// the McIpsecNonForwarding map field of NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) GetMcIpsecNonForwarding(TunnelGroupId uint32) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding {

	if t == nil {
		return nil
	}

	key := TunnelGroupId

	if lm, ok := t.McIpsecNonForwarding[key]; ok {
		return lm
	}
	return nil
}

// DeleteMcIpsecNonForwarding deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) DeleteMcIpsecNonForwarding(TunnelGroupId uint32) {
	key := TunnelGroupId

	delete(t.McIpsecNonForwarding, key)
}

// AppendMcIpsecNonForwarding appends the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding struct to the
// list McIpsecNonForwarding of NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the key value(s) specified in
// the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) AppendMcIpsecNonForwarding(v *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) error {
	if v.TunnelGroupId == nil {
		return fmt.Errorf("invalid nil key received for TunnelGroupId")
	}

	key := *v.TunnelGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.McIpsecNonForwarding == nil {
		t.McIpsecNonForwarding = make(map[uint32]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding)
	}

	if _, ok := t.McIpsecNonForwarding[key]; ok {
		return fmt.Errorf("duplicate key for list McIpsecNonForwarding %v", key)
	}

	t.McIpsecNonForwarding[key] = v
	return nil
}

// NewPortDown creates a new entry in the PortDown list of the
// NokiaConf_Configure_Vrrp_Policy_PriorityEvent struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) NewPortDown(PortId string) (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortDown == nil {
		t.PortDown = make(map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortDown", key)
	}

	t.PortDown[key] = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown{
		PortId: &PortId,
	}

	return t.PortDown[key], nil
}

// RenamePortDown renames an entry in the list PortDown within
// the NokiaConf_Configure_Vrrp_Policy_PriorityEvent struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) RenamePortDown(oldK, newK string) error {
	if _, ok := t.PortDown[newK]; ok {
		return fmt.Errorf("key %v already exists in PortDown", newK)
	}

	e, ok := t.PortDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortDown", oldK)
	}
	e.PortId = &newK

	t.PortDown[newK] = e
	delete(t.PortDown, oldK)
	return nil
}

// GetOrCreatePortDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) GetOrCreatePortDown(PortId string) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown {

	key := PortId

	if v, ok := t.PortDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortDown(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortDown got unexpected error: %v", err))
	}
	return v
}

// GetPortDown retrieves the value with the specified key from
// the PortDown map field of NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) GetPortDown(PortId string) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.PortDown[key]; ok {
		return lm
	}
	return nil
}

// DeletePortDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) DeletePortDown(PortId string) {
	key := PortId

	delete(t.PortDown, key)
}

// AppendPortDown appends the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown struct to the
// list PortDown of NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the key value(s) specified in
// the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) AppendPortDown(v *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortDown == nil {
		t.PortDown = make(map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown)
	}

	if _, ok := t.PortDown[key]; ok {
		return fmt.Errorf("duplicate key for list PortDown %v", key)
	}

	t.PortDown[key] = v
	return nil
}

// NewRouteUnknown creates a new entry in the RouteUnknown list of the
// NokiaConf_Configure_Vrrp_Policy_PriorityEvent struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) NewRouteUnknown(IpPrefix string) (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteUnknown == nil {
		t.RouteUnknown = make(map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteUnknown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteUnknown", key)
	}

	t.RouteUnknown[key] = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown{
		IpPrefix: &IpPrefix,
	}

	return t.RouteUnknown[key], nil
}

// RenameRouteUnknown renames an entry in the list RouteUnknown within
// the NokiaConf_Configure_Vrrp_Policy_PriorityEvent struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) RenameRouteUnknown(oldK, newK string) error {
	if _, ok := t.RouteUnknown[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteUnknown", newK)
	}

	e, ok := t.RouteUnknown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteUnknown", oldK)
	}
	e.IpPrefix = &newK

	t.RouteUnknown[newK] = e
	delete(t.RouteUnknown, oldK)
	return nil
}

// GetOrCreateRouteUnknown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) GetOrCreateRouteUnknown(IpPrefix string) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown {

	key := IpPrefix

	if v, ok := t.RouteUnknown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteUnknown(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteUnknown got unexpected error: %v", err))
	}
	return v
}

// GetRouteUnknown retrieves the value with the specified key from
// the RouteUnknown map field of NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) GetRouteUnknown(IpPrefix string) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.RouteUnknown[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteUnknown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) DeleteRouteUnknown(IpPrefix string) {
	key := IpPrefix

	delete(t.RouteUnknown, key)
}

// AppendRouteUnknown appends the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown struct to the
// list RouteUnknown of NokiaConf_Configure_Vrrp_Policy_PriorityEvent. If the key value(s) specified in
// the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) AppendRouteUnknown(v *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteUnknown == nil {
		t.RouteUnknown = make(map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown)
	}

	if _, ok := t.RouteUnknown[key]; ok {
		return fmt.Errorf("duplicate key for list RouteUnknown %v", key)
	}

	t.RouteUnknown[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.HostUnreachable {
		e.PopulateDefaults()
	}
	for _, e := range t.LagPortDown {
		e.PopulateDefaults()
	}
	for _, e := range t.McIpsecNonForwarding {
		e.PopulateDefaults()
	}
	for _, e := range t.PortDown {
		e.PopulateDefaults()
	}
	for _, e := range t.RouteUnknown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable represents the /nokia-conf/configure/vrrp/policy/priority-event/host-unreachable YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable struct {
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	DropCount          *uint32                                                                 `path:"drop-count" module:"nokia-conf"`
	HoldClear          *uint32                                                                 `path:"hold-clear" module:"nokia-conf"`
	HoldSet            *uint32                                                                 `path:"hold-set" module:"nokia-conf"`
	IpAddress          *string                                                                 `path:"ip-address" module:"nokia-conf"`
	PaddingSize        *uint32                                                                 `path:"padding-size" module:"nokia-conf"`
	Priority           *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority `path:"priority" module:"nokia-conf"`
	RequestInterval    *uint32                                                                 `path:"request-interval" module:"nokia-conf"`
	Timeout            *uint32                                                                 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) IsYANGGoStruct() {}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) GetOrCreatePriority() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority{}
	return t.Priority
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) GetPriority() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetHoldClear retrieves the value of the leaf HoldClear from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldClear is set, it can
// safely use t.GetHoldClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldClear == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) GetHoldClear() uint32 {
	if t == nil || t.HoldClear == nil {
		return 0
	}
	return *t.HoldClear
}

// GetHoldSet retrieves the value of the leaf HoldSet from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldSet is set, it can
// safely use t.GetHoldSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) GetHoldSet() uint32 {
	if t == nil || t.HoldSet == nil {
		return 0
	}
	return *t.HoldSet
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPaddingSize retrieves the value of the leaf PaddingSize from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PaddingSize is set, it can
// safely use t.GetPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) GetPaddingSize() uint32 {
	if t == nil || t.PaddingSize == nil {
		return 56
	}
	return *t.PaddingSize
}

// GetRequestInterval retrieves the value of the leaf RequestInterval from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequestInterval is set, it can
// safely use t.GetRequestInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequestInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) GetRequestInterval() uint32 {
	if t == nil || t.RequestInterval == nil {
		return 1
	}
	return *t.RequestInterval
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 1
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.PaddingSize == nil {
		var v uint32 = 56
		t.PaddingSize = &v
	}
	if t.RequestInterval == nil {
		var v uint32 = 1
		t.RequestInterval = &v
	}
	if t.Timeout == nil {
		var v uint32 = 1
		t.Timeout = &v
	}
	t.Priority.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority represents the /nokia-conf/configure/vrrp/policy/priority-event/host-unreachable/priority YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority struct {
	EventType     E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority_EventType `path:"event-type" module:"nokia-conf"`
	PriorityLevel *uint8                                                                             `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) GetEventType() E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority_EventType {
	if t == nil || t.EventType == 0 {
		return NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority_EventType_delta
	}
	return t.EventType
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority_EventType_delta
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown represents the /nokia-conf/configure/vrrp/policy/priority-event/lag-port-down YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown struct {
	ApplyGroups        []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	HoldClear          *uint32                                                                         `path:"hold-clear" module:"nokia-conf"`
	HoldSet            *uint32                                                                         `path:"hold-set" module:"nokia-conf"`
	LagName            *string                                                                         `path:"lag-name" module:"nokia-conf"`
	NumberDown         map[uint8]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown `path:"number-down" module:"nokia-conf"`
	WeightDown         map[uint8]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown `path:"weight-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) IsYANGGoStruct() {}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) NewNumberDown(NumberOfLagPortsDown uint8) (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint8]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown)
	}

	key := NumberOfLagPortsDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown{
		NumberOfLagPortsDown: &NumberOfLagPortsDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) RenameNumberDown(oldK, newK uint8) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberOfLagPortsDown = &newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) GetOrCreateNumberDown(NumberOfLagPortsDown uint8) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown {

	key := NumberOfLagPortsDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberOfLagPortsDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) GetNumberDown(NumberOfLagPortsDown uint8) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberOfLagPortsDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) DeleteNumberDown(NumberOfLagPortsDown uint8) {
	key := NumberOfLagPortsDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown. If the key value(s) specified in
// the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) AppendNumberDown(v *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) error {
	if v.NumberOfLagPortsDown == nil {
		return fmt.Errorf("invalid nil key received for NumberOfLagPortsDown")
	}

	key := *v.NumberOfLagPortsDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint8]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// NewWeightDown creates a new entry in the WeightDown list of the
// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) NewWeightDown(LagPortsDownWeight uint8) (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WeightDown == nil {
		t.WeightDown = make(map[uint8]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown)
	}

	key := LagPortsDownWeight

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.WeightDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list WeightDown", key)
	}

	t.WeightDown[key] = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown{
		LagPortsDownWeight: &LagPortsDownWeight,
	}

	return t.WeightDown[key], nil
}

// RenameWeightDown renames an entry in the list WeightDown within
// the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) RenameWeightDown(oldK, newK uint8) error {
	if _, ok := t.WeightDown[newK]; ok {
		return fmt.Errorf("key %v already exists in WeightDown", newK)
	}

	e, ok := t.WeightDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in WeightDown", oldK)
	}
	e.LagPortsDownWeight = &newK

	t.WeightDown[newK] = e
	delete(t.WeightDown, oldK)
	return nil
}

// GetOrCreateWeightDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) GetOrCreateWeightDown(LagPortsDownWeight uint8) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown {

	key := LagPortsDownWeight

	if v, ok := t.WeightDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewWeightDown(LagPortsDownWeight)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateWeightDown got unexpected error: %v", err))
	}
	return v
}

// GetWeightDown retrieves the value with the specified key from
// the WeightDown map field of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) GetWeightDown(LagPortsDownWeight uint8) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown {

	if t == nil {
		return nil
	}

	key := LagPortsDownWeight

	if lm, ok := t.WeightDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteWeightDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) DeleteWeightDown(LagPortsDownWeight uint8) {
	key := LagPortsDownWeight

	delete(t.WeightDown, key)
}

// AppendWeightDown appends the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown struct to the
// list WeightDown of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown. If the key value(s) specified in
// the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) AppendWeightDown(v *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) error {
	if v.LagPortsDownWeight == nil {
		return fmt.Errorf("invalid nil key received for LagPortsDownWeight")
	}

	key := *v.LagPortsDownWeight

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WeightDown == nil {
		t.WeightDown = make(map[uint8]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown)
	}

	if _, ok := t.WeightDown[key]; ok {
		return fmt.Errorf("duplicate key for list WeightDown %v", key)
	}

	t.WeightDown[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHoldClear retrieves the value of the leaf HoldClear from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldClear is set, it can
// safely use t.GetHoldClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldClear == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) GetHoldClear() uint32 {
	if t == nil || t.HoldClear == nil {
		return 0
	}
	return *t.HoldClear
}

// GetHoldSet retrieves the value of the leaf HoldSet from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldSet is set, it can
// safely use t.GetHoldSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) GetHoldSet() uint32 {
	if t == nil || t.HoldSet == nil {
		return 0
	}
	return *t.HoldSet
}

// GetLagName retrieves the value of the leaf LagName from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagName is set, it can
// safely use t.GetLagName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) GetLagName() string {
	if t == nil || t.LagName == nil {
		return ""
	}
	return *t.LagName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
	for _, e := range t.WeightDown {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LagName == nil {
		return nil, fmt.Errorf("nil value for key LagName")
	}

	return map[string]interface{}{
		"lag-name": *t.LagName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown represents the /nokia-conf/configure/vrrp/policy/priority-event/lag-port-down/number-down YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown struct {
	ApplyGroups          []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	NumberOfLagPortsDown *uint8                                                                         `path:"number-of-lag-ports-down" module:"nokia-conf"`
	Priority             *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) IsYANGGoStruct() {}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) GetOrCreatePriority() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority{}
	return t.Priority
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) GetPriority() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetNumberOfLagPortsDown retrieves the value of the leaf NumberOfLagPortsDown from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberOfLagPortsDown is set, it can
// safely use t.GetNumberOfLagPortsDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberOfLagPortsDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) GetNumberOfLagPortsDown() uint8 {
	if t == nil || t.NumberOfLagPortsDown == nil {
		return 0
	}
	return *t.NumberOfLagPortsDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Priority.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NumberOfLagPortsDown == nil {
		return nil, fmt.Errorf("nil value for key NumberOfLagPortsDown")
	}

	return map[string]interface{}{
		"number-of-lag-ports-down": *t.NumberOfLagPortsDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority represents the /nokia-conf/configure/vrrp/policy/priority-event/lag-port-down/number-down/priority YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority struct {
	EventType     E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority_EventType `path:"event-type" module:"nokia-conf"`
	PriorityLevel *uint8                                                                                    `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) IsYANGGoStruct() {
}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) GetEventType() E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority_EventType {
	if t == nil || t.EventType == 0 {
		return NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority_EventType_delta
	}
	return t.EventType
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority_EventType_delta
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown represents the /nokia-conf/configure/vrrp/policy/priority-event/lag-port-down/weight-down YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	LagPortsDownWeight *uint8                                                                         `path:"lag-ports-down-weight" module:"nokia-conf"`
	Priority           *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) IsYANGGoStruct() {}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) GetOrCreatePriority() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority{}
	return t.Priority
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) GetPriority() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLagPortsDownWeight retrieves the value of the leaf LagPortsDownWeight from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagPortsDownWeight is set, it can
// safely use t.GetLagPortsDownWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagPortsDownWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) GetLagPortsDownWeight() uint8 {
	if t == nil || t.LagPortsDownWeight == nil {
		return 0
	}
	return *t.LagPortsDownWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Priority.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LagPortsDownWeight == nil {
		return nil, fmt.Errorf("nil value for key LagPortsDownWeight")
	}

	return map[string]interface{}{
		"lag-ports-down-weight": *t.LagPortsDownWeight,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority represents the /nokia-conf/configure/vrrp/policy/priority-event/lag-port-down/weight-down/priority YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority struct {
	EventType     E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority_EventType `path:"event-type" module:"nokia-conf"`
	PriorityLevel *uint8                                                                                    `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) IsYANGGoStruct() {
}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) GetEventType() E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority_EventType {
	if t == nil || t.EventType == 0 {
		return NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority_EventType_delta
	}
	return t.EventType
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority_EventType_delta
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding represents the /nokia-conf/configure/vrrp/policy/priority-event/mc-ipsec-non-forwarding YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding struct {
	ApplyGroups        []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	HoldClear          *uint32                                                                      `path:"hold-clear" module:"nokia-conf"`
	HoldSet            *uint32                                                                      `path:"hold-set" module:"nokia-conf"`
	Priority           *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority `path:"priority" module:"nokia-conf"`
	TunnelGroupId      *uint32                                                                      `path:"tunnel-group-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) IsYANGGoStruct() {}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) GetOrCreatePriority() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority{}
	return t.Priority
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) GetPriority() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHoldClear retrieves the value of the leaf HoldClear from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldClear is set, it can
// safely use t.GetHoldClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldClear == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) GetHoldClear() uint32 {
	if t == nil || t.HoldClear == nil {
		return 0
	}
	return *t.HoldClear
}

// GetHoldSet retrieves the value of the leaf HoldSet from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldSet is set, it can
// safely use t.GetHoldSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) GetHoldSet() uint32 {
	if t == nil || t.HoldSet == nil {
		return 0
	}
	return *t.HoldSet
}

// GetTunnelGroupId retrieves the value of the leaf TunnelGroupId from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelGroupId is set, it can
// safely use t.GetTunnelGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) GetTunnelGroupId() uint32 {
	if t == nil || t.TunnelGroupId == nil {
		return 0
	}
	return *t.TunnelGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Priority.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelGroupId == nil {
		return nil, fmt.Errorf("nil value for key TunnelGroupId")
	}

	return map[string]interface{}{
		"tunnel-group-id": *t.TunnelGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority represents the /nokia-conf/configure/vrrp/policy/priority-event/mc-ipsec-non-forwarding/priority YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority struct {
	EventType     E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority_EventType `path:"event-type" module:"nokia-conf"`
	PriorityLevel *uint8                                                                                  `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) IsYANGGoStruct() {
}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) GetEventType() E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority_EventType {
	if t == nil || t.EventType == 0 {
		return NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority_EventType_delta
	}
	return t.EventType
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority_EventType_delta
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown represents the /nokia-conf/configure/vrrp/policy/priority-event/port-down YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown struct {
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	HoldClear          *uint32                                                          `path:"hold-clear" module:"nokia-conf"`
	HoldSet            *uint32                                                          `path:"hold-set" module:"nokia-conf"`
	PortId             *string                                                          `path:"port-id" module:"nokia-conf"`
	Priority           *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) IsYANGGoStruct() {}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) GetOrCreatePriority() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority{}
	return t.Priority
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) GetPriority() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHoldClear retrieves the value of the leaf HoldClear from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldClear is set, it can
// safely use t.GetHoldClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldClear == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) GetHoldClear() uint32 {
	if t == nil || t.HoldClear == nil {
		return 0
	}
	return *t.HoldClear
}

// GetHoldSet retrieves the value of the leaf HoldSet from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldSet is set, it can
// safely use t.GetHoldSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) GetHoldSet() uint32 {
	if t == nil || t.HoldSet == nil {
		return 0
	}
	return *t.HoldSet
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Priority.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority represents the /nokia-conf/configure/vrrp/policy/priority-event/port-down/priority YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority struct {
	EventType     E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority_EventType `path:"event-type" module:"nokia-conf"`
	PriorityLevel *uint8                                                                      `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority) GetEventType() E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority_EventType {
	if t == nil || t.EventType == 0 {
		return NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority_EventType_delta
	}
	return t.EventType
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority_EventType_delta
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_PortDown_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown represents the /nokia-conf/configure/vrrp/policy/priority-event/route-unknown YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	HoldClear          *uint32                                                                        `path:"hold-clear" module:"nokia-conf"`
	HoldSet            *uint32                                                                        `path:"hold-set" module:"nokia-conf"`
	IpPrefix           *string                                                                        `path:"ip-prefix" module:"nokia-conf"`
	LessSpecific       *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific       `path:"less-specific" module:"nokia-conf" yangPresence:"true"`
	NextHop            map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop `path:"next-hop" module:"nokia-conf"`
	Priority           *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority           `path:"priority" module:"nokia-conf"`
	Protocol           []E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Protocol        `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) NewNextHop(IpAddress string) (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop{
		IpAddress: &IpAddress,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) RenameNextHop(oldK, newK string) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.IpAddress = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) GetOrCreateNextHop(IpAddress string) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop {

	key := IpAddress

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) GetNextHop(IpAddress string) *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) DeleteNextHop(IpAddress string) {
	key := IpAddress

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop struct to the
// list NextHop of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown. If the key value(s) specified in
// the supplied NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) AppendNextHop(v *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// GetOrCreateLessSpecific retrieves the value of the LessSpecific field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) GetOrCreateLessSpecific() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific {
	if t.LessSpecific != nil {
		return t.LessSpecific
	}
	t.LessSpecific = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific{}
	return t.LessSpecific
}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) GetOrCreatePriority() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority{}
	return t.Priority
}

// GetLessSpecific returns the value of the LessSpecific struct pointer
// from NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown. If the receiver or the field LessSpecific is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) GetLessSpecific() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific {
	if t != nil && t.LessSpecific != nil {
		return t.LessSpecific
	}
	return nil
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) GetPriority() *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHoldClear retrieves the value of the leaf HoldClear from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldClear is set, it can
// safely use t.GetHoldClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldClear == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) GetHoldClear() uint32 {
	if t == nil || t.HoldClear == nil {
		return 0
	}
	return *t.HoldClear
}

// GetHoldSet retrieves the value of the leaf HoldSet from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldSet is set, it can
// safely use t.GetHoldSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) GetHoldSet() uint32 {
	if t == nil || t.HoldSet == nil {
		return 0
	}
	return *t.HoldSet
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) GetProtocol() []E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Protocol {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LessSpecific.PopulateDefaults()
	t.Priority.PopulateDefaults()
	for _, e := range t.NextHop {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific represents the /nokia-conf/configure/vrrp/policy/priority-event/route-unknown/less-specific YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific struct {
	AllowDefault *bool `path:"allow-default" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) IsYANGGoStruct() {}

// GetAllowDefault retrieves the value of the leaf AllowDefault from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowDefault is set, it can
// safely use t.GetAllowDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) GetAllowDefault() bool {
	if t == nil || t.AllowDefault == nil {
		return false
	}
	return *t.AllowDefault
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowDefault == nil {
		var v bool = false
		t.AllowDefault = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop represents the /nokia-conf/configure/vrrp/policy/priority-event/route-unknown/next-hop YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority represents the /nokia-conf/configure/vrrp/policy/priority-event/route-unknown/priority YANG schema element.
type NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority struct {
	EventType     E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority_EventType `path:"event-type" module:"nokia-conf"`
	PriorityLevel *uint8                                                                          `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) GetEventType() E_NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority_EventType {
	if t == nil || t.EventType == 0 {
		return NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority_EventType_delta
	}
	return t.EventType
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority_EventType_delta
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority.
func (*NokiaConf_Configure_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}
