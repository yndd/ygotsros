/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget represents the /nokia-conf/configure/service/vprn/bgp-ipvpn/segment-routing-v6/vrf-target YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget struct {
	Community       *string `path:"community" module:"nokia-conf"`
	ExportCommunity *string `path:"export-community" module:"nokia-conf"`
	ImportCommunity *string `path:"import-community" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget) IsYANGGoStruct() {}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetExportCommunity retrieves the value of the leaf ExportCommunity from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportCommunity is set, it can
// safely use t.GetExportCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportCommunity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget) GetExportCommunity() string {
	if t == nil || t.ExportCommunity == nil {
		return ""
	}
	return *t.ExportCommunity
}

// GetImportCommunity retrieves the value of the leaf ImportCommunity from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportCommunity is set, it can
// safely use t.GetImportCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportCommunity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget) GetImportCommunity() string {
	if t == nil || t.ImportCommunity == nil {
		return ""
	}
	return *t.ImportCommunity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpSharedQueue represents the /nokia-conf/configure/service/vprn/bgp-shared-queue YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpSharedQueue struct {
	Cir NokiaConf_Configure_Service_Vprn_BgpSharedQueue_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vprn_BgpSharedQueue_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpSharedQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpSharedQueue) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_BgpSharedQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpSharedQueue) GetCir() NokiaConf_Configure_Service_Vprn_BgpSharedQueue_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(4000)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_BgpSharedQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpSharedQueue) GetPir() NokiaConf_Configure_Service_Vprn_BgpSharedQueue_Pir_Union {
	if t == nil || t.Pir == nil {
		return UnionInt32(4000)
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpSharedQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpSharedQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(4000)
	}
	if t.Pir == nil {
		t.Pir = UnionInt32(4000)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpSharedQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpSharedQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpSharedQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpSharedQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpSharedQueue.
func (*NokiaConf_Configure_Service_Vprn_BgpSharedQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpVpnBackup represents the /nokia-conf/configure/service/vprn/bgp-vpn-backup YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpVpnBackup struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpVpnBackup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpVpnBackup) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_BgpVpnBackup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpVpnBackup) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_BgpVpnBackup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpVpnBackup) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpVpnBackup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpVpnBackup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpVpnBackup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpVpnBackup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpVpnBackup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpVpnBackup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpVpnBackup.
func (*NokiaConf_Configure_Service_Vprn_BgpVpnBackup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops represents the /nokia-conf/configure/service/vprn/bgp/advertise-ipv6-next-hops YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops.
func (*NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_BackupPath represents the /nokia-conf/configure/service/vprn/bgp/backup-path YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_BackupPath struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_BackupPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_BackupPath) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_BackupPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BackupPath) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_BackupPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BackupPath) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_BackupPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BackupPath) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Service_Vprn_Bgp_BackupPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BackupPath) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_BackupPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BackupPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BackupPath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_BackupPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BackupPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BackupPath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_BackupPath.
func (*NokiaConf_Configure_Service_Vprn_Bgp_BackupPath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection represents the /nokia-conf/configure/service/vprn/bgp/best-path-selection YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection struct {
	AlwaysCompareMed             *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed `path:"always-compare-med" module:"nokia-conf"`
	AsPathIgnore                 *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore     `path:"as-path-ignore" module:"nokia-conf"`
	CompareOriginValidationState *bool                                                                    `path:"compare-origin-validation-state" module:"nokia-conf"`
	DPathLengthIgnore            *bool                                                                    `path:"d-path-length-ignore" module:"nokia-conf"`
	DeterministicMed             *bool                                                                    `path:"deterministic-med" module:"nokia-conf"`
	EbgpIbgpEqual                *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual    `path:"ebgp-ibgp-equal" module:"nokia-conf"`
	IgnoreNhMetric               *bool                                                                    `path:"ignore-nh-metric" module:"nokia-conf"`
	IgnoreRouterId               *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId   `path:"ignore-router-id" module:"nokia-conf" yangPresence:"true"`
	OriginInvalidUnusable        *bool                                                                    `path:"origin-invalid-unusable" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) IsYANGGoStruct() {}

// GetOrCreateAlwaysCompareMed retrieves the value of the AlwaysCompareMed field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetOrCreateAlwaysCompareMed() *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed {
	if t.AlwaysCompareMed != nil {
		return t.AlwaysCompareMed
	}
	t.AlwaysCompareMed = &NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed{}
	return t.AlwaysCompareMed
}

// GetOrCreateAsPathIgnore retrieves the value of the AsPathIgnore field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetOrCreateAsPathIgnore() *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore {
	if t.AsPathIgnore != nil {
		return t.AsPathIgnore
	}
	t.AsPathIgnore = &NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore{}
	return t.AsPathIgnore
}

// GetOrCreateEbgpIbgpEqual retrieves the value of the EbgpIbgpEqual field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetOrCreateEbgpIbgpEqual() *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual {
	if t.EbgpIbgpEqual != nil {
		return t.EbgpIbgpEqual
	}
	t.EbgpIbgpEqual = &NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual{}
	return t.EbgpIbgpEqual
}

// GetOrCreateIgnoreRouterId retrieves the value of the IgnoreRouterId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetOrCreateIgnoreRouterId() *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId {
	if t.IgnoreRouterId != nil {
		return t.IgnoreRouterId
	}
	t.IgnoreRouterId = &NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId{}
	return t.IgnoreRouterId
}

// GetAlwaysCompareMed returns the value of the AlwaysCompareMed struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection. If the receiver or the field AlwaysCompareMed is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetAlwaysCompareMed() *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed {
	if t != nil && t.AlwaysCompareMed != nil {
		return t.AlwaysCompareMed
	}
	return nil
}

// GetAsPathIgnore returns the value of the AsPathIgnore struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection. If the receiver or the field AsPathIgnore is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetAsPathIgnore() *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore {
	if t != nil && t.AsPathIgnore != nil {
		return t.AsPathIgnore
	}
	return nil
}

// GetEbgpIbgpEqual returns the value of the EbgpIbgpEqual struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection. If the receiver or the field EbgpIbgpEqual is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetEbgpIbgpEqual() *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual {
	if t != nil && t.EbgpIbgpEqual != nil {
		return t.EbgpIbgpEqual
	}
	return nil
}

// GetIgnoreRouterId returns the value of the IgnoreRouterId struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection. If the receiver or the field IgnoreRouterId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetIgnoreRouterId() *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId {
	if t != nil && t.IgnoreRouterId != nil {
		return t.IgnoreRouterId
	}
	return nil
}

// GetCompareOriginValidationState retrieves the value of the leaf CompareOriginValidationState from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompareOriginValidationState is set, it can
// safely use t.GetCompareOriginValidationState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompareOriginValidationState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetCompareOriginValidationState() bool {
	if t == nil || t.CompareOriginValidationState == nil {
		return false
	}
	return *t.CompareOriginValidationState
}

// GetDPathLengthIgnore retrieves the value of the leaf DPathLengthIgnore from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DPathLengthIgnore is set, it can
// safely use t.GetDPathLengthIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DPathLengthIgnore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetDPathLengthIgnore() bool {
	if t == nil || t.DPathLengthIgnore == nil {
		return false
	}
	return *t.DPathLengthIgnore
}

// GetDeterministicMed retrieves the value of the leaf DeterministicMed from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeterministicMed is set, it can
// safely use t.GetDeterministicMed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeterministicMed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetDeterministicMed() bool {
	if t == nil || t.DeterministicMed == nil {
		return false
	}
	return *t.DeterministicMed
}

// GetIgnoreNhMetric retrieves the value of the leaf IgnoreNhMetric from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreNhMetric is set, it can
// safely use t.GetIgnoreNhMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreNhMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetIgnoreNhMetric() bool {
	if t == nil || t.IgnoreNhMetric == nil {
		return false
	}
	return *t.IgnoreNhMetric
}

// GetOriginInvalidUnusable retrieves the value of the leaf OriginInvalidUnusable from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginInvalidUnusable is set, it can
// safely use t.GetOriginInvalidUnusable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginInvalidUnusable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) GetOriginInvalidUnusable() bool {
	if t == nil || t.OriginInvalidUnusable == nil {
		return false
	}
	return *t.OriginInvalidUnusable
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CompareOriginValidationState == nil {
		var v bool = false
		t.CompareOriginValidationState = &v
	}
	if t.DPathLengthIgnore == nil {
		var v bool = false
		t.DPathLengthIgnore = &v
	}
	if t.DeterministicMed == nil {
		var v bool = false
		t.DeterministicMed = &v
	}
	if t.IgnoreNhMetric == nil {
		var v bool = false
		t.IgnoreNhMetric = &v
	}
	if t.OriginInvalidUnusable == nil {
		var v bool = false
		t.OriginInvalidUnusable = &v
	}
	t.AlwaysCompareMed.PopulateDefaults()
	t.AsPathIgnore.PopulateDefaults()
	t.EbgpIbgpEqual.PopulateDefaults()
	t.IgnoreRouterId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection.
func (*NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed represents the /nokia-conf/configure/service/vprn/bgp/best-path-selection/always-compare-med YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed struct {
	MedValue E_NokiaTypesBgp_MedValue `path:"med-value" module:"nokia-conf"`
	StrictAs *bool                    `path:"strict-as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed) IsYANGGoStruct() {}

// GetMedValue retrieves the value of the leaf MedValue from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedValue is set, it can
// safely use t.GetMedValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed) GetMedValue() E_NokiaTypesBgp_MedValue {
	if t == nil || t.MedValue == 0 {
		return NokiaTypesBgp_MedValue_off
	}
	return t.MedValue
}

// GetStrictAs retrieves the value of the leaf StrictAs from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictAs is set, it can
// safely use t.GetStrictAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed) GetStrictAs() bool {
	if t == nil || t.StrictAs == nil {
		return true
	}
	return *t.StrictAs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MedValue == 0 {
		t.MedValue = NokiaTypesBgp_MedValue_off
	}
	if t.StrictAs == nil {
		var v bool = true
		t.StrictAs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed.
func (*NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AlwaysCompareMed) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore represents the /nokia-conf/configure/service/vprn/bgp/best-path-selection/as-path-ignore YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore.
func (*NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_AsPathIgnore) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual represents the /nokia-conf/configure/service/vprn/bgp/best-path-selection/ebgp-ibgp-equal YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual.
func (*NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_EbgpIbgpEqual) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId represents the /nokia-conf/configure/service/vprn/bgp/best-path-selection/ignore-router-id YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId.
func (*NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection_IgnoreRouterId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Cluster represents the /nokia-conf/configure/service/vprn/bgp/cluster YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Cluster struct {
	ClusterId *string `path:"cluster-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Cluster implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Cluster) IsYANGGoStruct() {}

// GetClusterId retrieves the value of the leaf ClusterId from the NokiaConf_Configure_Service_Vprn_Bgp_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Cluster) GetClusterId() string {
	if t == nil || t.ClusterId == nil {
		return ""
	}
	return *t.ClusterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Cluster
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Cluster) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Cluster) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Cluster"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Cluster) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Cluster) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Cluster.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Cluster) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Convergence represents the /nokia-conf/configure/service/vprn/bgp/convergence YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Convergence struct {
	Family             map[E_NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family_FamilyType]*NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family `path:"family" module:"nokia-conf"`
	MinWaitToAdvertise *uint32                                                                                                                           `path:"min-wait-to-advertise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Convergence) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Service_Vprn_Bgp_Convergence struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence) NewFamily(FamilyType E_NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family_FamilyType) (*NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family_FamilyType]*NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Service_Vprn_Bgp_Convergence struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence) RenameFamily(oldK, newK E_NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family_FamilyType) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Convergence. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence) GetOrCreateFamily(FamilyType E_NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family_FamilyType) *NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Service_Vprn_Bgp_Convergence. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence) GetFamily(FamilyType E_NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family_FamilyType) *NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Convergence. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence) DeleteFamily(FamilyType E_NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family_FamilyType) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family struct to the
// list Family of NokiaConf_Configure_Service_Vprn_Bgp_Convergence. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence) AppendFamily(v *NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family_FamilyType]*NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetMinWaitToAdvertise retrieves the value of the leaf MinWaitToAdvertise from the NokiaConf_Configure_Service_Vprn_Bgp_Convergence
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinWaitToAdvertise is set, it can
// safely use t.GetMinWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence) GetMinWaitToAdvertise() uint32 {
	if t == nil || t.MinWaitToAdvertise == nil {
		return 0
	}
	return *t.MinWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Convergence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinWaitToAdvertise == nil {
		var v uint32 = 0
		t.MinWaitToAdvertise = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Convergence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Convergence.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Convergence) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family represents the /nokia-conf/configure/service/vprn/bgp/convergence/family YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	FamilyType         E_NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family_FamilyType `path:"family-type" module:"nokia-conf"`
	MaxWaitToAdvertise *uint32                                                              `path:"max-wait-to-advertise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family) GetFamilyType() E_NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family_FamilyType {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetMaxWaitToAdvertise retrieves the value of the leaf MaxWaitToAdvertise from the NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWaitToAdvertise is set, it can
// safely use t.GetMaxWaitToAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWaitToAdvertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family) GetMaxWaitToAdvertise() uint32 {
	if t == nil || t.MaxWaitToAdvertise == nil {
		return 0
	}
	return *t.MaxWaitToAdvertise
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxWaitToAdvertise == nil {
		var v uint32 = 0
		t.MaxWaitToAdvertise = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Convergence_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations represents the /nokia-conf/configure/service/vprn/bgp/damp-peer-oscillations YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations struct {
	ErrorInterval *uint32                                                                 `path:"error-interval" module:"nokia-conf"`
	IdleHoldTime  *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime `path:"idle-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations) IsYANGGoStruct() {}

// GetOrCreateIdleHoldTime retrieves the value of the IdleHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations) GetOrCreateIdleHoldTime() *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime {
	if t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	t.IdleHoldTime = &NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime{}
	return t.IdleHoldTime
}

// GetIdleHoldTime returns the value of the IdleHoldTime struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations. If the receiver or the field IdleHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations) GetIdleHoldTime() *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime {
	if t != nil && t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	return nil
}

// GetErrorInterval retrieves the value of the leaf ErrorInterval from the NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorInterval is set, it can
// safely use t.GetErrorInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations) GetErrorInterval() uint32 {
	if t == nil || t.ErrorInterval == nil {
		return 30
	}
	return *t.ErrorInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ErrorInterval == nil {
		var v uint32 = 30
		t.ErrorInterval = &v
	}
	t.IdleHoldTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations.
func (*NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime represents the /nokia-conf/configure/service/vprn/bgp/damp-peer-oscillations/idle-hold-time YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime) IsYANGGoStruct() {}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 0
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 60
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 5
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 0
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 60
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 5
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime.
func (*NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations_IdleHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference represents the /nokia-conf/configure/service/vprn/bgp/default-label-preference YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ebgp == nil {
		var v uint32 = 0
		t.Ebgp = &v
	}
	if t.Ibgp == nil {
		var v uint32 = 0
		t.Ibgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference.
func (*NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference represents the /nokia-conf/configure/service/vprn/bgp/default-preference YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ebgp == nil {
		var v uint32 = 0
		t.Ebgp = &v
	}
	if t.Ibgp == nil {
		var v uint32 = 0
		t.Ibgp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference.
func (*NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy represents the /nokia-conf/configure/service/vprn/bgp/ebgp-default-reject-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy struct {
	Export *bool `path:"export" module:"nokia-conf"`
	Import *bool `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy) GetExport() bool {
	if t == nil || t.Export == nil {
		return true
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy) GetImport() bool {
	if t == nil || t.Import == nil {
		return true
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Export == nil {
		var v bool = true
		t.Export = &v
	}
	if t.Import == nil {
		var v bool = true
		t.Import = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy.
func (*NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling represents the /nokia-conf/configure/service/vprn/bgp/error-handling YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling struct {
	UpdateFaultTolerance *bool `path:"update-fault-tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling) IsYANGGoStruct() {}

// GetUpdateFaultTolerance retrieves the value of the leaf UpdateFaultTolerance from the NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateFaultTolerance is set, it can
// safely use t.GetUpdateFaultTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateFaultTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling) GetUpdateFaultTolerance() bool {
	if t == nil || t.UpdateFaultTolerance == nil {
		return false
	}
	return *t.UpdateFaultTolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UpdateFaultTolerance == nil {
		var v bool = false
		t.UpdateFaultTolerance = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling.
func (*NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Export represents the /nokia-conf/configure/service/vprn/bgp/export YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Export struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Export implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Export) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Export) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Export) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Bgp_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Export) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Export
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Export) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Export) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Export"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Export) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Export) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Export.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Export) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding represents the /nokia-conf/configure/service/vprn/bgp/extended-nh-encoding YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding.
func (*NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Family represents the /nokia-conf/configure/service/vprn/bgp/family YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Family struct {
	FlowIpv4  *bool `path:"flow-ipv4" module:"nokia-conf"`
	FlowIpv6  *bool `path:"flow-ipv6" module:"nokia-conf"`
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	McastIpv4 *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6 *bool `path:"mcast-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Family) IsYANGGoStruct() {}

// GetFlowIpv4 retrieves the value of the leaf FlowIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv4 is set, it can
// safely use t.GetFlowIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Family) GetFlowIpv4() bool {
	if t == nil || t.FlowIpv4 == nil {
		return false
	}
	return *t.FlowIpv4
}

// GetFlowIpv6 retrieves the value of the leaf FlowIpv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv6 is set, it can
// safely use t.GetFlowIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Family) GetFlowIpv6() bool {
	if t == nil || t.FlowIpv6 == nil {
		return false
	}
	return *t.FlowIpv6
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Family) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FlowIpv4 == nil {
		var v bool = false
		t.FlowIpv4 = &v
	}
	if t.FlowIpv6 == nil {
		var v bool = false
		t.FlowIpv6 = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Family.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Flowspec represents the /nokia-conf/configure/service/vprn/bgp/flowspec YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Flowspec struct {
	ValidateDestPrefix *bool `path:"validate-dest-prefix" module:"nokia-conf"`
	ValidateRedirectIp *bool `path:"validate-redirect-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Flowspec) IsYANGGoStruct() {}

// GetValidateDestPrefix retrieves the value of the leaf ValidateDestPrefix from the NokiaConf_Configure_Service_Vprn_Bgp_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateDestPrefix is set, it can
// safely use t.GetValidateDestPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateDestPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Flowspec) GetValidateDestPrefix() bool {
	if t == nil || t.ValidateDestPrefix == nil {
		return false
	}
	return *t.ValidateDestPrefix
}

// GetValidateRedirectIp retrieves the value of the leaf ValidateRedirectIp from the NokiaConf_Configure_Service_Vprn_Bgp_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateRedirectIp is set, it can
// safely use t.GetValidateRedirectIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateRedirectIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Flowspec) GetValidateRedirectIp() bool {
	if t == nil || t.ValidateRedirectIp == nil {
		return false
	}
	return *t.ValidateRedirectIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ValidateDestPrefix == nil {
		var v bool = false
		t.ValidateDestPrefix = &v
	}
	if t.ValidateRedirectIp == nil {
		var v bool = false
		t.ValidateRedirectIp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Flowspec.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart represents the /nokia-conf/configure/service/vprn/bgp/graceful-restart YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart struct {
	GrNotification  *bool                                                           `path:"gr-notification" module:"nokia-conf"`
	LongLived       *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived `path:"long-lived" module:"nokia-conf" yangPresence:"true"`
	RestartTime     *uint32                                                         `path:"restart-time" module:"nokia-conf"`
	StaleRoutesTime *uint32                                                         `path:"stale-routes-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart) IsYANGGoStruct() {}

// GetOrCreateLongLived retrieves the value of the LongLived field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart) GetOrCreateLongLived() *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived {
	if t.LongLived != nil {
		return t.LongLived
	}
	t.LongLived = &NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived{}
	return t.LongLived
}

// GetLongLived returns the value of the LongLived struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart. If the receiver or the field LongLived is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart) GetLongLived() *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived {
	if t != nil && t.LongLived != nil {
		return t.LongLived
	}
	return nil
}

// GetGrNotification retrieves the value of the leaf GrNotification from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrNotification is set, it can
// safely use t.GetGrNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart) GetGrNotification() bool {
	if t == nil || t.GrNotification == nil {
		return false
	}
	return *t.GrNotification
}

// GetRestartTime retrieves the value of the leaf RestartTime from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTime is set, it can
// safely use t.GetRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart) GetRestartTime() uint32 {
	if t == nil || t.RestartTime == nil {
		return 120
	}
	return *t.RestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart) GetStaleRoutesTime() uint32 {
	if t == nil || t.StaleRoutesTime == nil {
		return 360
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GrNotification == nil {
		var v bool = false
		t.GrNotification = &v
	}
	if t.RestartTime == nil {
		var v uint32 = 120
		t.RestartTime = &v
	}
	if t.StaleRoutesTime == nil {
		var v uint32 = 360
		t.StaleRoutesTime = &v
	}
	t.LongLived.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart.
func (*NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived represents the /nokia-conf/configure/service/vprn/bgp/graceful-restart/long-lived YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived struct {
	AdvertiseStaleToAllNeighbors *bool                                                                                                                   `path:"advertise-stale-to-all-neighbors" module:"nokia-conf"`
	AdvertisedStaleTime          *uint32                                                                                                                 `path:"advertised-stale-time" module:"nokia-conf"`
	Family                       map[E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers]*NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family `path:"family" module:"nokia-conf"`
	ForwardingBitsSet            E_NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_ForwardingBitsSet                                      `path:"forwarding-bits-set" module:"nokia-conf"`
	HelperOverrideRestartTime    *uint32                                                                                                                 `path:"helper-override-restart-time" module:"nokia-conf"`
	HelperOverrideStaleTime      *uint32                                                                                                                 `path:"helper-override-stale-time" module:"nokia-conf"`
	WithoutNoExport              *bool                                                                                                                   `path:"without-no-export" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) NewFamily(FamilyType E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) (*NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers]*NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) RenameFamily(oldK, newK E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) GetOrCreateFamily(FamilyType E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) GetFamily(FamilyType E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) DeleteFamily(FamilyType E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family struct to the
// list Family of NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) AppendFamily(v *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers]*NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetAdvertiseStaleToAllNeighbors retrieves the value of the leaf AdvertiseStaleToAllNeighbors from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseStaleToAllNeighbors is set, it can
// safely use t.GetAdvertiseStaleToAllNeighbors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseStaleToAllNeighbors == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) GetAdvertiseStaleToAllNeighbors() bool {
	if t == nil || t.AdvertiseStaleToAllNeighbors == nil {
		return false
	}
	return *t.AdvertiseStaleToAllNeighbors
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetForwardingBitsSet retrieves the value of the leaf ForwardingBitsSet from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingBitsSet is set, it can
// safely use t.GetForwardingBitsSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingBitsSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) GetForwardingBitsSet() E_NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_ForwardingBitsSet {
	if t == nil || t.ForwardingBitsSet == 0 {
		return NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	return t.ForwardingBitsSet
}

// GetHelperOverrideRestartTime retrieves the value of the leaf HelperOverrideRestartTime from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideRestartTime is set, it can
// safely use t.GetHelperOverrideRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideRestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) GetHelperOverrideRestartTime() uint32 {
	if t == nil || t.HelperOverrideRestartTime == nil {
		return 0
	}
	return *t.HelperOverrideRestartTime
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 0
	}
	return *t.HelperOverrideStaleTime
}

// GetWithoutNoExport retrieves the value of the leaf WithoutNoExport from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WithoutNoExport is set, it can
// safely use t.GetWithoutNoExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WithoutNoExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) GetWithoutNoExport() bool {
	if t == nil || t.WithoutNoExport == nil {
		return false
	}
	return *t.WithoutNoExport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseStaleToAllNeighbors == nil {
		var v bool = false
		t.AdvertiseStaleToAllNeighbors = &v
	}
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.ForwardingBitsSet == 0 {
		t.ForwardingBitsSet = NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	if t.WithoutNoExport == nil {
		var v bool = false
		t.WithoutNoExport = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived.
func (*NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family represents the /nokia-conf/configure/service/vprn/bgp/graceful-restart/long-lived/family YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family struct {
	AdvertisedStaleTime     *uint32                                      `path:"advertised-stale-time" module:"nokia-conf"`
	ApplyGroups             []string                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	FamilyType              E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers `path:"family-type" module:"nokia-conf"`
	HelperOverrideStaleTime *uint32                                      `path:"helper-override-stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) IsYANGGoStruct() {}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) GetFamilyType() E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 0
	}
	return *t.HelperOverrideStaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family.
func (*NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart_LongLived_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group represents the /nokia-conf/configure/service/vprn/bgp/group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group struct {
	AdminState              E_NokiaTypesSros_AdminState                                                                                                 `path:"admin-state" module:"nokia-conf"`
	AdvertiseInactive       *bool                                                                                                                       `path:"advertise-inactive" module:"nokia-conf"`
	AdvertiseIpv6NextHops   *NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops                                                           `path:"advertise-ipv6-next-hops" module:"nokia-conf" yangPresence:"true"`
	AggregatorIdZero        *bool                                                                                                                       `path:"aggregator-id-zero" module:"nokia-conf"`
	ApplyGroups             []string                                                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	AsOverride              *bool                                                                                                                       `path:"as-override" module:"nokia-conf"`
	Asn_4Byte               *bool                                                                                                                       `path:"asn-4-byte" module:"nokia-conf"`
	AuthenticationKey       *string                                                                                                                     `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain  *string                                                                                                                     `path:"authentication-keychain" module:"nokia-conf"`
	BfdLiveness             *bool                                                                                                                       `path:"bfd-liveness" module:"nokia-conf"`
	CapabilityNegotiation   *bool                                                                                                                       `path:"capability-negotiation" module:"nokia-conf"`
	ClientReflect           *bool                                                                                                                       `path:"client-reflect" module:"nokia-conf"`
	Cluster                 *NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster                                                                         `path:"cluster" module:"nokia-conf"`
	ConnectRetry            *int32                                                                                                                      `path:"connect-retry" module:"nokia-conf"`
	DampPeerOscillations    *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations                                                            `path:"damp-peer-oscillations" module:"nokia-conf" yangPresence:"true"`
	Damping                 *bool                                                                                                                       `path:"damping" module:"nokia-conf"`
	DefaultLabelPreference  *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference                                                          `path:"default-label-preference" module:"nokia-conf"`
	DefaultPreference       *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference                                                               `path:"default-preference" module:"nokia-conf"`
	Description             *string                                                                                                                     `path:"description" module:"nokia-conf"`
	DynamicNeighbor         *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor                                                                 `path:"dynamic-neighbor" module:"nokia-conf"`
	DynamicNeighborLimit    *uint32                                                                                                                     `path:"dynamic-neighbor-limit" module:"nokia-conf"`
	EbgpDefaultRejectPolicy *NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy                                                         `path:"ebgp-default-reject-policy" module:"nokia-conf" yangPresence:"true"`
	EnforceFirstAs          *bool                                                                                                                       `path:"enforce-first-as" module:"nokia-conf"`
	ErrorHandling           *NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling                                                                   `path:"error-handling" module:"nokia-conf"`
	Export                  *NokiaConf_Configure_Service_Vprn_Bgp_Group_Export                                                                          `path:"export" module:"nokia-conf" yangPresence:"true"`
	ExtendedNhEncoding      *NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding                                                              `path:"extended-nh-encoding" module:"nokia-conf" yangPresence:"true"`
	Family                  *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family                                                                          `path:"family" module:"nokia-conf" yangPresence:"true"`
	FastExternalFailover    *bool                                                                                                                       `path:"fast-external-failover" module:"nokia-conf"`
	GracefulRestart         *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart                                                                 `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	GroupName               *string                                                                                                                     `path:"group-name" module:"nokia-conf"`
	HoldTime                *NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime                                                                        `path:"hold-time" module:"nokia-conf"`
	Import                  *NokiaConf_Configure_Service_Vprn_Bgp_Group_Import                                                                          `path:"import" module:"nokia-conf" yangPresence:"true"`
	InitialSendDelayZero    *bool                                                                                                                       `path:"initial-send-delay-zero" module:"nokia-conf"`
	Keepalive               *int32                                                                                                                      `path:"keepalive" module:"nokia-conf"`
	LabelPreference         *uint32                                                                                                                     `path:"label-preference" module:"nokia-conf"`
	LinkBandwidth           *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth                                                                   `path:"link-bandwidth" module:"nokia-conf"`
	LocalAddress            *string                                                                                                                     `path:"local-address" module:"nokia-conf"`
	LocalAs                 *NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs                                                                         `path:"local-as" module:"nokia-conf"`
	LocalPreference         *int64                                                                                                                      `path:"local-preference" module:"nokia-conf"`
	LoopDetect              E_NokiaTypesBgp_LoopDetect                                                                                                  `path:"loop-detect" module:"nokia-conf"`
	LoopDetectThreshold     *uint32                                                                                                                     `path:"loop-detect-threshold" module:"nokia-conf"`
	MedOut                  NokiaConf_Configure_Service_Vprn_Bgp_Group_MedOut_Union                                                                     `path:"med-out" module:"nokia-conf"`
	MinRouteAdvertisement   *int16                                                                                                                      `path:"min-route-advertisement" module:"nokia-conf"`
	Monitor                 *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor                                                                         `path:"monitor" module:"nokia-conf" yangPresence:"true"`
	Multihop                *int32                                                                                                                      `path:"multihop" module:"nokia-conf"`
	MultipathEligible       *bool                                                                                                                       `path:"multipath-eligible" module:"nokia-conf"`
	NextHopSelf             *bool                                                                                                                       `path:"next-hop-self" module:"nokia-conf"`
	OriginValidation        *NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation                                                                `path:"origin-validation" module:"nokia-conf"`
	Passive                 *bool                                                                                                                       `path:"passive" module:"nokia-conf"`
	PathMtuDiscovery        *bool                                                                                                                       `path:"path-mtu-discovery" module:"nokia-conf"`
	PeerAs                  *uint32                                                                                                                     `path:"peer-as" module:"nokia-conf"`
	PeerIpTracking          *bool                                                                                                                       `path:"peer-ip-tracking" module:"nokia-conf"`
	Preference              *uint32                                                                                                                     `path:"preference" module:"nokia-conf"`
	PrefixLimit             map[E_NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit_Family]*NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit `path:"prefix-limit" module:"nokia-conf"`
	RemovePrivate           *NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate                                                                   `path:"remove-private" module:"nokia-conf" yangPresence:"true"`
	SendCommunities         *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities                                                                 `path:"send-communities" module:"nokia-conf"`
	SendDefault             *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault                                                                     `path:"send-default" module:"nokia-conf" yangPresence:"true"`
	SplitHorizon            *bool                                                                                                                       `path:"split-horizon" module:"nokia-conf"`
	StaticGroup             *bool                                                                                                                       `path:"static-group" module:"nokia-conf"`
	TcpMss                  NokiaConf_Configure_Service_Vprn_Bgp_Group_TcpMss_Union                                                                     `path:"tcp-mss" module:"nokia-conf"`
	ThirdPartyNexthop       *bool                                                                                                                       `path:"third-party-nexthop" module:"nokia-conf"`
	TtlSecurity             *uint32                                                                                                                     `path:"ttl-security" module:"nokia-conf"`
	Type                    E_NokiaTypesBgp_PeerType                                                                                                    `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group) IsYANGGoStruct() {}

// NewPrefixLimit creates a new entry in the PrefixLimit list of the
// NokiaConf_Configure_Service_Vprn_Bgp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) NewPrefixLimit(Family E_NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit_Family) (*NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLimit == nil {
		t.PrefixLimit = make(map[E_NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit_Family]*NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit)
	}

	key := Family

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLimit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLimit", key)
	}

	t.PrefixLimit[key] = &NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit{
		Family: Family,
	}

	return t.PrefixLimit[key], nil
}

// RenamePrefixLimit renames an entry in the list PrefixLimit within
// the NokiaConf_Configure_Service_Vprn_Bgp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) RenamePrefixLimit(oldK, newK E_NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit_Family) error {
	if _, ok := t.PrefixLimit[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLimit", newK)
	}

	e, ok := t.PrefixLimit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLimit", oldK)
	}
	e.Family = newK

	t.PrefixLimit[newK] = e
	delete(t.PrefixLimit, oldK)
	return nil
}

// GetOrCreatePrefixLimit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreatePrefixLimit(Family E_NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit_Family) *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit {

	key := Family

	if v, ok := t.PrefixLimit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLimit(Family)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLimit got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLimit retrieves the value with the specified key from
// the PrefixLimit map field of NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetPrefixLimit(Family E_NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit_Family) *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit {

	if t == nil {
		return nil
	}

	key := Family

	if lm, ok := t.PrefixLimit[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLimit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) DeletePrefixLimit(Family E_NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit_Family) {
	key := Family

	delete(t.PrefixLimit, key)
}

// AppendPrefixLimit appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit struct to the
// list PrefixLimit of NokiaConf_Configure_Service_Vprn_Bgp_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) AppendPrefixLimit(v *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) error {
	key := v.Family

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLimit == nil {
		t.PrefixLimit = make(map[E_NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit_Family]*NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit)
	}

	if _, ok := t.PrefixLimit[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLimit %v", key)
	}

	t.PrefixLimit[key] = v
	return nil
}

// GetOrCreateAdvertiseIpv6NextHops retrieves the value of the AdvertiseIpv6NextHops field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateAdvertiseIpv6NextHops() *NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops {
	if t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	t.AdvertiseIpv6NextHops = &NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops{}
	return t.AdvertiseIpv6NextHops
}

// GetOrCreateCluster retrieves the value of the Cluster field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateCluster() *NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster {
	if t.Cluster != nil {
		return t.Cluster
	}
	t.Cluster = &NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster{}
	return t.Cluster
}

// GetOrCreateDampPeerOscillations retrieves the value of the DampPeerOscillations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateDampPeerOscillations() *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations {
	if t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	t.DampPeerOscillations = &NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations{}
	return t.DampPeerOscillations
}

// GetOrCreateDefaultLabelPreference retrieves the value of the DefaultLabelPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateDefaultLabelPreference() *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference {
	if t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	t.DefaultLabelPreference = &NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference{}
	return t.DefaultLabelPreference
}

// GetOrCreateDefaultPreference retrieves the value of the DefaultPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateDefaultPreference() *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference {
	if t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	t.DefaultPreference = &NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference{}
	return t.DefaultPreference
}

// GetOrCreateDynamicNeighbor retrieves the value of the DynamicNeighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateDynamicNeighbor() *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor {
	if t.DynamicNeighbor != nil {
		return t.DynamicNeighbor
	}
	t.DynamicNeighbor = &NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor{}
	return t.DynamicNeighbor
}

// GetOrCreateEbgpDefaultRejectPolicy retrieves the value of the EbgpDefaultRejectPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateEbgpDefaultRejectPolicy() *NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy {
	if t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	t.EbgpDefaultRejectPolicy = &NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy{}
	return t.EbgpDefaultRejectPolicy
}

// GetOrCreateErrorHandling retrieves the value of the ErrorHandling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateErrorHandling() *NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling {
	if t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	t.ErrorHandling = &NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling{}
	return t.ErrorHandling
}

// GetOrCreateExport retrieves the value of the Export field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateExport() *NokiaConf_Configure_Service_Vprn_Bgp_Group_Export {
	if t.Export != nil {
		return t.Export
	}
	t.Export = &NokiaConf_Configure_Service_Vprn_Bgp_Group_Export{}
	return t.Export
}

// GetOrCreateExtendedNhEncoding retrieves the value of the ExtendedNhEncoding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateExtendedNhEncoding() *NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding {
	if t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	t.ExtendedNhEncoding = &NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding{}
	return t.ExtendedNhEncoding
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateFamily() *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Service_Vprn_Bgp_Group_Family{}
	return t.Family
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateGracefulRestart() *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateHoldTime() *NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime{}
	return t.HoldTime
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateImport() *NokiaConf_Configure_Service_Vprn_Bgp_Group_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Service_Vprn_Bgp_Group_Import{}
	return t.Import
}

// GetOrCreateLinkBandwidth retrieves the value of the LinkBandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateLinkBandwidth() *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth {
	if t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	t.LinkBandwidth = &NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth{}
	return t.LinkBandwidth
}

// GetOrCreateLocalAs retrieves the value of the LocalAs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateLocalAs() *NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs {
	if t.LocalAs != nil {
		return t.LocalAs
	}
	t.LocalAs = &NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs{}
	return t.LocalAs
}

// GetOrCreateMonitor retrieves the value of the Monitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateMonitor() *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor {
	if t.Monitor != nil {
		return t.Monitor
	}
	t.Monitor = &NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor{}
	return t.Monitor
}

// GetOrCreateOriginValidation retrieves the value of the OriginValidation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateOriginValidation() *NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation {
	if t.OriginValidation != nil {
		return t.OriginValidation
	}
	t.OriginValidation = &NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation{}
	return t.OriginValidation
}

// GetOrCreateRemovePrivate retrieves the value of the RemovePrivate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateRemovePrivate() *NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate {
	if t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	t.RemovePrivate = &NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate{}
	return t.RemovePrivate
}

// GetOrCreateSendCommunities retrieves the value of the SendCommunities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateSendCommunities() *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities {
	if t.SendCommunities != nil {
		return t.SendCommunities
	}
	t.SendCommunities = &NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities{}
	return t.SendCommunities
}

// GetOrCreateSendDefault retrieves the value of the SendDefault field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOrCreateSendDefault() *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault {
	if t.SendDefault != nil {
		return t.SendDefault
	}
	t.SendDefault = &NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault{}
	return t.SendDefault
}

// GetAdvertiseIpv6NextHops returns the value of the AdvertiseIpv6NextHops struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field AdvertiseIpv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetAdvertiseIpv6NextHops() *NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops {
	if t != nil && t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	return nil
}

// GetCluster returns the value of the Cluster struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field Cluster is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetCluster() *NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster {
	if t != nil && t.Cluster != nil {
		return t.Cluster
	}
	return nil
}

// GetDampPeerOscillations returns the value of the DampPeerOscillations struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field DampPeerOscillations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetDampPeerOscillations() *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations {
	if t != nil && t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	return nil
}

// GetDefaultLabelPreference returns the value of the DefaultLabelPreference struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field DefaultLabelPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetDefaultLabelPreference() *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference {
	if t != nil && t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	return nil
}

// GetDefaultPreference returns the value of the DefaultPreference struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field DefaultPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetDefaultPreference() *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference {
	if t != nil && t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	return nil
}

// GetDynamicNeighbor returns the value of the DynamicNeighbor struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field DynamicNeighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetDynamicNeighbor() *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor {
	if t != nil && t.DynamicNeighbor != nil {
		return t.DynamicNeighbor
	}
	return nil
}

// GetEbgpDefaultRejectPolicy returns the value of the EbgpDefaultRejectPolicy struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field EbgpDefaultRejectPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetEbgpDefaultRejectPolicy() *NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy {
	if t != nil && t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	return nil
}

// GetErrorHandling returns the value of the ErrorHandling struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field ErrorHandling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetErrorHandling() *NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling {
	if t != nil && t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	return nil
}

// GetExport returns the value of the Export struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field Export is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetExport() *NokiaConf_Configure_Service_Vprn_Bgp_Group_Export {
	if t != nil && t.Export != nil {
		return t.Export
	}
	return nil
}

// GetExtendedNhEncoding returns the value of the ExtendedNhEncoding struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field ExtendedNhEncoding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetExtendedNhEncoding() *NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding {
	if t != nil && t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	return nil
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetFamily() *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetGracefulRestart() *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetHoldTime() *NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetImport() *NokiaConf_Configure_Service_Vprn_Bgp_Group_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetLinkBandwidth returns the value of the LinkBandwidth struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field LinkBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetLinkBandwidth() *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth {
	if t != nil && t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	return nil
}

// GetLocalAs returns the value of the LocalAs struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field LocalAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetLocalAs() *NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs {
	if t != nil && t.LocalAs != nil {
		return t.LocalAs
	}
	return nil
}

// GetMonitor returns the value of the Monitor struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field Monitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetMonitor() *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor {
	if t != nil && t.Monitor != nil {
		return t.Monitor
	}
	return nil
}

// GetOriginValidation returns the value of the OriginValidation struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field OriginValidation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetOriginValidation() *NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation {
	if t != nil && t.OriginValidation != nil {
		return t.OriginValidation
	}
	return nil
}

// GetRemovePrivate returns the value of the RemovePrivate struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field RemovePrivate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetRemovePrivate() *NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate {
	if t != nil && t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	return nil
}

// GetSendCommunities returns the value of the SendCommunities struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field SendCommunities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetSendCommunities() *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities {
	if t != nil && t.SendCommunities != nil {
		return t.SendCommunities
	}
	return nil
}

// GetSendDefault returns the value of the SendDefault struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group. If the receiver or the field SendDefault is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetSendDefault() *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault {
	if t != nil && t.SendDefault != nil {
		return t.SendDefault
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseInactive retrieves the value of the leaf AdvertiseInactive from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInactive is set, it can
// safely use t.GetAdvertiseInactive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInactive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetAdvertiseInactive() bool {
	if t == nil || t.AdvertiseInactive == nil {
		return false
	}
	return *t.AdvertiseInactive
}

// GetAggregatorIdZero retrieves the value of the leaf AggregatorIdZero from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregatorIdZero is set, it can
// safely use t.GetAggregatorIdZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregatorIdZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetAggregatorIdZero() bool {
	if t == nil || t.AggregatorIdZero == nil {
		return false
	}
	return *t.AggregatorIdZero
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsOverride retrieves the value of the leaf AsOverride from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsOverride is set, it can
// safely use t.GetAsOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetAsOverride() bool {
	if t == nil || t.AsOverride == nil {
		return false
	}
	return *t.AsOverride
}

// GetAsn_4Byte retrieves the value of the leaf Asn_4Byte from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn_4Byte is set, it can
// safely use t.GetAsn_4Byte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn_4Byte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetAsn_4Byte() bool {
	if t == nil || t.Asn_4Byte == nil {
		return false
	}
	return *t.Asn_4Byte
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCapabilityNegotiation retrieves the value of the leaf CapabilityNegotiation from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CapabilityNegotiation is set, it can
// safely use t.GetCapabilityNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CapabilityNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetCapabilityNegotiation() bool {
	if t == nil || t.CapabilityNegotiation == nil {
		return true
	}
	return *t.CapabilityNegotiation
}

// GetClientReflect retrieves the value of the leaf ClientReflect from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientReflect is set, it can
// safely use t.GetClientReflect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientReflect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetClientReflect() bool {
	if t == nil || t.ClientReflect == nil {
		return false
	}
	return *t.ClientReflect
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetConnectRetry() int32 {
	if t == nil || t.ConnectRetry == nil {
		return 0
	}
	return *t.ConnectRetry
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetDamping() bool {
	if t == nil || t.Damping == nil {
		return false
	}
	return *t.Damping
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicNeighborLimit retrieves the value of the leaf DynamicNeighborLimit from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicNeighborLimit is set, it can
// safely use t.GetDynamicNeighborLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicNeighborLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetDynamicNeighborLimit() uint32 {
	if t == nil || t.DynamicNeighborLimit == nil {
		return 0
	}
	return *t.DynamicNeighborLimit
}

// GetEnforceFirstAs retrieves the value of the leaf EnforceFirstAs from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceFirstAs is set, it can
// safely use t.GetEnforceFirstAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceFirstAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetEnforceFirstAs() bool {
	if t == nil || t.EnforceFirstAs == nil {
		return false
	}
	return *t.EnforceFirstAs
}

// GetFastExternalFailover retrieves the value of the leaf FastExternalFailover from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastExternalFailover is set, it can
// safely use t.GetFastExternalFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastExternalFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetFastExternalFailover() bool {
	if t == nil || t.FastExternalFailover == nil {
		return false
	}
	return *t.FastExternalFailover
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInitialSendDelayZero retrieves the value of the leaf InitialSendDelayZero from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialSendDelayZero is set, it can
// safely use t.GetInitialSendDelayZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialSendDelayZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetInitialSendDelayZero() bool {
	if t == nil || t.InitialSendDelayZero == nil {
		return false
	}
	return *t.InitialSendDelayZero
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetKeepalive() int32 {
	if t == nil || t.Keepalive == nil {
		return 0
	}
	return *t.Keepalive
}

// GetLabelPreference retrieves the value of the leaf LabelPreference from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelPreference is set, it can
// safely use t.GetLabelPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetLabelPreference() uint32 {
	if t == nil || t.LabelPreference == nil {
		return 0
	}
	return *t.LabelPreference
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetLocalPreference() int64 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetLoopDetect retrieves the value of the leaf LoopDetect from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetect is set, it can
// safely use t.GetLoopDetect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetLoopDetect() E_NokiaTypesBgp_LoopDetect {
	if t == nil || t.LoopDetect == 0 {
		return 0
	}
	return t.LoopDetect
}

// GetLoopDetectThreshold retrieves the value of the leaf LoopDetectThreshold from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetectThreshold is set, it can
// safely use t.GetLoopDetectThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetectThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetLoopDetectThreshold() uint32 {
	if t == nil || t.LoopDetectThreshold == nil {
		return 0
	}
	return *t.LoopDetectThreshold
}

// GetMedOut retrieves the value of the leaf MedOut from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedOut is set, it can
// safely use t.GetMedOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetMedOut() NokiaConf_Configure_Service_Vprn_Bgp_Group_MedOut_Union {
	if t == nil || t.MedOut == nil {
		return nil
	}
	return t.MedOut
}

// GetMinRouteAdvertisement retrieves the value of the leaf MinRouteAdvertisement from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinRouteAdvertisement is set, it can
// safely use t.GetMinRouteAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinRouteAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetMinRouteAdvertisement() int16 {
	if t == nil || t.MinRouteAdvertisement == nil {
		return 0
	}
	return *t.MinRouteAdvertisement
}

// GetMultihop retrieves the value of the leaf Multihop from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multihop is set, it can
// safely use t.GetMultihop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multihop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetMultihop() int32 {
	if t == nil || t.Multihop == nil {
		return 0
	}
	return *t.Multihop
}

// GetMultipathEligible retrieves the value of the leaf MultipathEligible from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultipathEligible is set, it can
// safely use t.GetMultipathEligible() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultipathEligible == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetMultipathEligible() bool {
	if t == nil || t.MultipathEligible == nil {
		return false
	}
	return *t.MultipathEligible
}

// GetNextHopSelf retrieves the value of the leaf NextHopSelf from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelf is set, it can
// safely use t.GetNextHopSelf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetNextHopSelf() bool {
	if t == nil || t.NextHopSelf == nil {
		return false
	}
	return *t.NextHopSelf
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPathMtuDiscovery retrieves the value of the leaf PathMtuDiscovery from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtuDiscovery is set, it can
// safely use t.GetPathMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtuDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetPathMtuDiscovery() bool {
	if t == nil || t.PathMtuDiscovery == nil {
		return false
	}
	return *t.PathMtuDiscovery
}

// GetPeerAs retrieves the value of the leaf PeerAs from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAs is set, it can
// safely use t.GetPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// GetPeerIpTracking retrieves the value of the leaf PeerIpTracking from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIpTracking is set, it can
// safely use t.GetPeerIpTracking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIpTracking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetPeerIpTracking() bool {
	if t == nil || t.PeerIpTracking == nil {
		return false
	}
	return *t.PeerIpTracking
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// GetStaticGroup retrieves the value of the leaf StaticGroup from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticGroup is set, it can
// safely use t.GetStaticGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetStaticGroup() bool {
	if t == nil || t.StaticGroup == nil {
		return true
	}
	return *t.StaticGroup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetTcpMss() NokiaConf_Configure_Service_Vprn_Bgp_Group_TcpMss_Union {
	if t == nil || t.TcpMss == nil {
		return nil
	}
	return t.TcpMss
}

// GetThirdPartyNexthop retrieves the value of the leaf ThirdPartyNexthop from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThirdPartyNexthop is set, it can
// safely use t.GetThirdPartyNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThirdPartyNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetThirdPartyNexthop() bool {
	if t == nil || t.ThirdPartyNexthop == nil {
		return false
	}
	return *t.ThirdPartyNexthop
}

// GetTtlSecurity retrieves the value of the leaf TtlSecurity from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlSecurity is set, it can
// safely use t.GetTtlSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetTtlSecurity() uint32 {
	if t == nil || t.TtlSecurity == nil {
		return 0
	}
	return *t.TtlSecurity
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) GetType() E_NokiaTypesBgp_PeerType {
	if t == nil || t.Type == 0 {
		return NokiaTypesBgp_PeerType_no_type
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AsOverride == nil {
		var v bool = false
		t.AsOverride = &v
	}
	if t.CapabilityNegotiation == nil {
		var v bool = true
		t.CapabilityNegotiation = &v
	}
	if t.MultipathEligible == nil {
		var v bool = false
		t.MultipathEligible = &v
	}
	if t.NextHopSelf == nil {
		var v bool = false
		t.NextHopSelf = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.StaticGroup == nil {
		var v bool = true
		t.StaticGroup = &v
	}
	if t.Type == 0 {
		t.Type = NokiaTypesBgp_PeerType_no_type
	}
	t.AdvertiseIpv6NextHops.PopulateDefaults()
	t.Cluster.PopulateDefaults()
	t.DampPeerOscillations.PopulateDefaults()
	t.DefaultLabelPreference.PopulateDefaults()
	t.DefaultPreference.PopulateDefaults()
	t.DynamicNeighbor.PopulateDefaults()
	t.EbgpDefaultRejectPolicy.PopulateDefaults()
	t.ErrorHandling.PopulateDefaults()
	t.Export.PopulateDefaults()
	t.ExtendedNhEncoding.PopulateDefaults()
	t.Family.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.Import.PopulateDefaults()
	t.LinkBandwidth.PopulateDefaults()
	t.LocalAs.PopulateDefaults()
	t.Monitor.PopulateDefaults()
	t.OriginValidation.PopulateDefaults()
	t.RemovePrivate.PopulateDefaults()
	t.SendCommunities.PopulateDefaults()
	t.SendDefault.PopulateDefaults()
	for _, e := range t.PrefixLimit {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops represents the /nokia-conf/configure/service/vprn/bgp/group/advertise-ipv6-next-hops YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_AdvertiseIpv6NextHops) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster represents the /nokia-conf/configure/service/vprn/bgp/group/cluster YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster struct {
	ClusterId *string `path:"cluster-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster) IsYANGGoStruct() {}

// GetClusterId retrieves the value of the leaf ClusterId from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster) GetClusterId() string {
	if t == nil || t.ClusterId == nil {
		return ""
	}
	return *t.ClusterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Cluster) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations represents the /nokia-conf/configure/service/vprn/bgp/group/damp-peer-oscillations YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations struct {
	ErrorInterval *uint32                                                                       `path:"error-interval" module:"nokia-conf"`
	IdleHoldTime  *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime `path:"idle-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations) IsYANGGoStruct() {}

// GetOrCreateIdleHoldTime retrieves the value of the IdleHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations) GetOrCreateIdleHoldTime() *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime {
	if t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	t.IdleHoldTime = &NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime{}
	return t.IdleHoldTime
}

// GetIdleHoldTime returns the value of the IdleHoldTime struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations. If the receiver or the field IdleHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations) GetIdleHoldTime() *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime {
	if t != nil && t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	return nil
}

// GetErrorInterval retrieves the value of the leaf ErrorInterval from the NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorInterval is set, it can
// safely use t.GetErrorInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations) GetErrorInterval() uint32 {
	if t == nil || t.ErrorInterval == nil {
		return 30
	}
	return *t.ErrorInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ErrorInterval == nil {
		var v uint32 = 30
		t.ErrorInterval = &v
	}
	t.IdleHoldTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime represents the /nokia-conf/configure/service/vprn/bgp/group/damp-peer-oscillations/idle-hold-time YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime) IsYANGGoStruct() {
}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 0
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 60
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 5
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 0
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 60
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 5
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DampPeerOscillations_IdleHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference represents the /nokia-conf/configure/service/vprn/bgp/group/default-label-preference YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultLabelPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference represents the /nokia-conf/configure/service/vprn/bgp/group/default-preference YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DefaultPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor represents the /nokia-conf/configure/service/vprn/bgp/group/dynamic-neighbor YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor struct {
	Match *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor) GetOrCreateMatch() *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor) GetMatch() *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match represents the /nokia-conf/configure/service/vprn/bgp/group/dynamic-neighbor/match YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match struct {
	Prefix map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match) GetPrefix(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix struct to the
// list Prefix of NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match) AppendPrefix(v *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix represents the /nokia-conf/configure/service/vprn/bgp/group/dynamic-neighbor/match/prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix struct {
	AllowedPeerAs      []string `path:"allowed-peer-as" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	IpPrefix           *string  `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix) IsYANGGoStruct() {}

// GetAllowedPeerAs retrieves the value of the leaf AllowedPeerAs from the NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedPeerAs is set, it can
// safely use t.GetAllowedPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedPeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix) GetAllowedPeerAs() []string {
	if t == nil || t.AllowedPeerAs == nil {
		return nil
	}
	return t.AllowedPeerAs
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_DynamicNeighbor_Match_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy represents the /nokia-conf/configure/service/vprn/bgp/group/ebgp-default-reject-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy struct {
	Export *bool `path:"export" module:"nokia-conf"`
	Import *bool `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy) GetExport() bool {
	if t == nil || t.Export == nil {
		return true
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy) GetImport() bool {
	if t == nil || t.Import == nil {
		return true
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Export == nil {
		var v bool = true
		t.Export = &v
	}
	if t.Import == nil {
		var v bool = true
		t.Import = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_EbgpDefaultRejectPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling represents the /nokia-conf/configure/service/vprn/bgp/group/error-handling YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling struct {
	UpdateFaultTolerance *bool `path:"update-fault-tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling) IsYANGGoStruct() {}

// GetUpdateFaultTolerance retrieves the value of the leaf UpdateFaultTolerance from the NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateFaultTolerance is set, it can
// safely use t.GetUpdateFaultTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateFaultTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling) GetUpdateFaultTolerance() bool {
	if t == nil || t.UpdateFaultTolerance == nil {
		return false
	}
	return *t.UpdateFaultTolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_ErrorHandling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_Export represents the /nokia-conf/configure/service/vprn/bgp/group/export YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_Export struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_Export implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Export) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Export) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Export) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Export) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_Export
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Export) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Export) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_Export"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Export) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Export) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_Export.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Export) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding represents the /nokia-conf/configure/service/vprn/bgp/group/extended-nh-encoding YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_ExtendedNhEncoding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_Family represents the /nokia-conf/configure/service/vprn/bgp/group/family YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_Family struct {
	FlowIpv4  *bool `path:"flow-ipv4" module:"nokia-conf"`
	FlowIpv6  *bool `path:"flow-ipv6" module:"nokia-conf"`
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	McastIpv4 *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6 *bool `path:"mcast-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) IsYANGGoStruct() {}

// GetFlowIpv4 retrieves the value of the leaf FlowIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv4 is set, it can
// safely use t.GetFlowIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) GetFlowIpv4() bool {
	if t == nil || t.FlowIpv4 == nil {
		return false
	}
	return *t.FlowIpv4
}

// GetFlowIpv6 retrieves the value of the leaf FlowIpv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv6 is set, it can
// safely use t.GetFlowIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) GetFlowIpv6() bool {
	if t == nil || t.FlowIpv6 == nil {
		return false
	}
	return *t.FlowIpv6
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FlowIpv4 == nil {
		var v bool = false
		t.FlowIpv4 = &v
	}
	if t.FlowIpv6 == nil {
		var v bool = false
		t.FlowIpv6 = &v
	}
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_Family.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart represents the /nokia-conf/configure/service/vprn/bgp/group/graceful-restart YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart struct {
	GrNotification  *bool                                                                 `path:"gr-notification" module:"nokia-conf"`
	LongLived       *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived `path:"long-lived" module:"nokia-conf" yangPresence:"true"`
	RestartTime     *uint32                                                               `path:"restart-time" module:"nokia-conf"`
	StaleRoutesTime *uint32                                                               `path:"stale-routes-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart) IsYANGGoStruct() {}

// GetOrCreateLongLived retrieves the value of the LongLived field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart) GetOrCreateLongLived() *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived {
	if t.LongLived != nil {
		return t.LongLived
	}
	t.LongLived = &NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived{}
	return t.LongLived
}

// GetLongLived returns the value of the LongLived struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart. If the receiver or the field LongLived is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart) GetLongLived() *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived {
	if t != nil && t.LongLived != nil {
		return t.LongLived
	}
	return nil
}

// GetGrNotification retrieves the value of the leaf GrNotification from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrNotification is set, it can
// safely use t.GetGrNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart) GetGrNotification() bool {
	if t == nil || t.GrNotification == nil {
		return false
	}
	return *t.GrNotification
}

// GetRestartTime retrieves the value of the leaf RestartTime from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTime is set, it can
// safely use t.GetRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart) GetRestartTime() uint32 {
	if t == nil || t.RestartTime == nil {
		return 300
	}
	return *t.RestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart) GetStaleRoutesTime() uint32 {
	if t == nil || t.StaleRoutesTime == nil {
		return 360
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GrNotification == nil {
		var v bool = false
		t.GrNotification = &v
	}
	if t.RestartTime == nil {
		var v uint32 = 300
		t.RestartTime = &v
	}
	if t.StaleRoutesTime == nil {
		var v uint32 = 360
		t.StaleRoutesTime = &v
	}
	t.LongLived.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived represents the /nokia-conf/configure/service/vprn/bgp/group/graceful-restart/long-lived YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived struct {
	AdvertiseStaleToAllNeighbors *bool                                                                                                                         `path:"advertise-stale-to-all-neighbors" module:"nokia-conf"`
	AdvertisedStaleTime          *uint32                                                                                                                       `path:"advertised-stale-time" module:"nokia-conf"`
	Family                       map[E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers]*NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family `path:"family" module:"nokia-conf"`
	ForwardingBitsSet            E_NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_ForwardingBitsSet                                      `path:"forwarding-bits-set" module:"nokia-conf"`
	HelperOverrideRestartTime    *uint32                                                                                                                       `path:"helper-override-restart-time" module:"nokia-conf"`
	HelperOverrideStaleTime      *uint32                                                                                                                       `path:"helper-override-stale-time" module:"nokia-conf"`
	WithoutNoExport              *bool                                                                                                                         `path:"without-no-export" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) NewFamily(FamilyType E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) (*NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers]*NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) RenameFamily(oldK, newK E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) GetOrCreateFamily(FamilyType E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) GetFamily(FamilyType E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) DeleteFamily(FamilyType E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family struct to the
// list Family of NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) AppendFamily(v *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers]*NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetAdvertiseStaleToAllNeighbors retrieves the value of the leaf AdvertiseStaleToAllNeighbors from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseStaleToAllNeighbors is set, it can
// safely use t.GetAdvertiseStaleToAllNeighbors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseStaleToAllNeighbors == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) GetAdvertiseStaleToAllNeighbors() bool {
	if t == nil || t.AdvertiseStaleToAllNeighbors == nil {
		return false
	}
	return *t.AdvertiseStaleToAllNeighbors
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetForwardingBitsSet retrieves the value of the leaf ForwardingBitsSet from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingBitsSet is set, it can
// safely use t.GetForwardingBitsSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingBitsSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) GetForwardingBitsSet() E_NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_ForwardingBitsSet {
	if t == nil || t.ForwardingBitsSet == 0 {
		return NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	return t.ForwardingBitsSet
}

// GetHelperOverrideRestartTime retrieves the value of the leaf HelperOverrideRestartTime from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideRestartTime is set, it can
// safely use t.GetHelperOverrideRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideRestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) GetHelperOverrideRestartTime() uint32 {
	if t == nil || t.HelperOverrideRestartTime == nil {
		return 0
	}
	return *t.HelperOverrideRestartTime
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 0
	}
	return *t.HelperOverrideStaleTime
}

// GetWithoutNoExport retrieves the value of the leaf WithoutNoExport from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WithoutNoExport is set, it can
// safely use t.GetWithoutNoExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WithoutNoExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) GetWithoutNoExport() bool {
	if t == nil || t.WithoutNoExport == nil {
		return false
	}
	return *t.WithoutNoExport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseStaleToAllNeighbors == nil {
		var v bool = false
		t.AdvertiseStaleToAllNeighbors = &v
	}
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.ForwardingBitsSet == 0 {
		t.ForwardingBitsSet = NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	if t.WithoutNoExport == nil {
		var v bool = false
		t.WithoutNoExport = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family represents the /nokia-conf/configure/service/vprn/bgp/group/graceful-restart/long-lived/family YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family struct {
	AdvertisedStaleTime     *uint32                                      `path:"advertised-stale-time" module:"nokia-conf"`
	ApplyGroups             []string                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	FamilyType              E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers `path:"family-type" module:"nokia-conf"`
	HelperOverrideStaleTime *uint32                                      `path:"helper-override-stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) IsYANGGoStruct() {
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) GetFamilyType() E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 16777216
	}
	return *t.HelperOverrideStaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.HelperOverrideStaleTime == nil {
		var v uint32 = 16777216
		t.HelperOverrideStaleTime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_GracefulRestart_LongLived_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime represents the /nokia-conf/configure/service/vprn/bgp/group/hold-time YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime struct {
	MinimumHoldTime *int32 `path:"minimum-hold-time" module:"nokia-conf"`
	Seconds         *int32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime) IsYANGGoStruct() {}

// GetMinimumHoldTime retrieves the value of the leaf MinimumHoldTime from the NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumHoldTime is set, it can
// safely use t.GetMinimumHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime) GetMinimumHoldTime() int32 {
	if t == nil || t.MinimumHoldTime == nil {
		return 0
	}
	return *t.MinimumHoldTime
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime) GetSeconds() int32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinimumHoldTime == nil {
		var v int32 = 0
		t.MinimumHoldTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_Import represents the /nokia-conf/configure/service/vprn/bgp/group/import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_Import struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Import) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Import) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Import) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Import) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Import) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Import) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_Import.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Import) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth represents the /nokia-conf/configure/service/vprn/bgp/group/link-bandwidth YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth struct {
	AcceptFromEbgp     *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp     `path:"accept-from-ebgp" module:"nokia-conf"`
	AddToReceivedEbgp  *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp  `path:"add-to-received-ebgp" module:"nokia-conf"`
	AggregateUsedPaths *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths `path:"aggregate-used-paths" module:"nokia-conf"`
	SendToEbgp         *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp         `path:"send-to-ebgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) IsYANGGoStruct() {}

// GetOrCreateAcceptFromEbgp retrieves the value of the AcceptFromEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) GetOrCreateAcceptFromEbgp() *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp {
	if t.AcceptFromEbgp != nil {
		return t.AcceptFromEbgp
	}
	t.AcceptFromEbgp = &NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp{}
	return t.AcceptFromEbgp
}

// GetOrCreateAddToReceivedEbgp retrieves the value of the AddToReceivedEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) GetOrCreateAddToReceivedEbgp() *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp {
	if t.AddToReceivedEbgp != nil {
		return t.AddToReceivedEbgp
	}
	t.AddToReceivedEbgp = &NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp{}
	return t.AddToReceivedEbgp
}

// GetOrCreateAggregateUsedPaths retrieves the value of the AggregateUsedPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) GetOrCreateAggregateUsedPaths() *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths {
	if t.AggregateUsedPaths != nil {
		return t.AggregateUsedPaths
	}
	t.AggregateUsedPaths = &NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths{}
	return t.AggregateUsedPaths
}

// GetOrCreateSendToEbgp retrieves the value of the SendToEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) GetOrCreateSendToEbgp() *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp {
	if t.SendToEbgp != nil {
		return t.SendToEbgp
	}
	t.SendToEbgp = &NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp{}
	return t.SendToEbgp
}

// GetAcceptFromEbgp returns the value of the AcceptFromEbgp struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth. If the receiver or the field AcceptFromEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) GetAcceptFromEbgp() *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp {
	if t != nil && t.AcceptFromEbgp != nil {
		return t.AcceptFromEbgp
	}
	return nil
}

// GetAddToReceivedEbgp returns the value of the AddToReceivedEbgp struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth. If the receiver or the field AddToReceivedEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) GetAddToReceivedEbgp() *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp {
	if t != nil && t.AddToReceivedEbgp != nil {
		return t.AddToReceivedEbgp
	}
	return nil
}

// GetAggregateUsedPaths returns the value of the AggregateUsedPaths struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth. If the receiver or the field AggregateUsedPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) GetAggregateUsedPaths() *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths {
	if t != nil && t.AggregateUsedPaths != nil {
		return t.AggregateUsedPaths
	}
	return nil
}

// GetSendToEbgp returns the value of the SendToEbgp struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth. If the receiver or the field SendToEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) GetSendToEbgp() *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp {
	if t != nil && t.SendToEbgp != nil {
		return t.SendToEbgp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AcceptFromEbgp.PopulateDefaults()
	t.AddToReceivedEbgp.PopulateDefaults()
	t.AggregateUsedPaths.PopulateDefaults()
	t.SendToEbgp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp represents the /nokia-conf/configure/service/vprn/bgp/group/link-bandwidth/accept-from-ebgp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AcceptFromEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp represents the /nokia-conf/configure/service/vprn/bgp/group/link-bandwidth/add-to-received-ebgp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths represents the /nokia-conf/configure/service/vprn/bgp/group/link-bandwidth/aggregate-used-paths YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths) IsYANGGoStruct() {
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_AggregateUsedPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp represents the /nokia-conf/configure/service/vprn/bgp/group/link-bandwidth/send-to-ebgp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_LinkBandwidth_SendToEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs represents the /nokia-conf/configure/service/vprn/bgp/group/local-as YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"nokia-conf"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"nokia-conf"`
	Private         *bool   `path:"private" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return true
	}
	return *t.PrependGlobalAs
}

// GetPrivate retrieves the value of the leaf Private from the NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Private is set, it can
// safely use t.GetPrivate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Private == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs) GetPrivate() bool {
	if t == nil || t.Private == nil {
		return false
	}
	return *t.Private
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrependGlobalAs == nil {
		var v bool = true
		t.PrependGlobalAs = &v
	}
	if t.Private == nil {
		var v bool = false
		t.Private = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_LocalAs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor represents the /nokia-conf/configure/service/vprn/bgp/group/monitor YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor struct {
	AdminState         E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	AllStations        *bool                                                                  `path:"all-stations" module:"nokia-conf"`
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteMonitoring    *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring    `path:"route-monitoring" module:"nokia-conf"`
	Station            map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station `path:"station" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) IsYANGGoStruct() {}

// NewStation creates a new entry in the Station list of the
// NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) NewStation(StationName string) (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station)
	}

	key := StationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Station[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Station", key)
	}

	t.Station[key] = &NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station{
		StationName: &StationName,
	}

	return t.Station[key], nil
}

// RenameStation renames an entry in the list Station within
// the NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) RenameStation(oldK, newK string) error {
	if _, ok := t.Station[newK]; ok {
		return fmt.Errorf("key %v already exists in Station", newK)
	}

	e, ok := t.Station[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Station", oldK)
	}
	e.StationName = &newK

	t.Station[newK] = e
	delete(t.Station, oldK)
	return nil
}

// GetOrCreateStation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) GetOrCreateStation(StationName string) *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station {

	key := StationName

	if v, ok := t.Station[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStation(StationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStation got unexpected error: %v", err))
	}
	return v
}

// GetStation retrieves the value with the specified key from
// the Station map field of NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) GetStation(StationName string) *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station {

	if t == nil {
		return nil
	}

	key := StationName

	if lm, ok := t.Station[key]; ok {
		return lm
	}
	return nil
}

// DeleteStation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) DeleteStation(StationName string) {
	key := StationName

	delete(t.Station, key)
}

// AppendStation appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station struct to the
// list Station of NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) AppendStation(v *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station) error {
	if v.StationName == nil {
		return fmt.Errorf("invalid nil key received for StationName")
	}

	key := *v.StationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station)
	}

	if _, ok := t.Station[key]; ok {
		return fmt.Errorf("duplicate key for list Station %v", key)
	}

	t.Station[key] = v
	return nil
}

// GetOrCreateRouteMonitoring retrieves the value of the RouteMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) GetOrCreateRouteMonitoring() *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring {
	if t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	t.RouteMonitoring = &NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring{}
	return t.RouteMonitoring
}

// GetRouteMonitoring returns the value of the RouteMonitoring struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor. If the receiver or the field RouteMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) GetRouteMonitoring() *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring {
	if t != nil && t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllStations retrieves the value of the leaf AllStations from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllStations is set, it can
// safely use t.GetAllStations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllStations == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) GetAllStations() bool {
	if t == nil || t.AllStations == nil {
		return false
	}
	return *t.AllStations
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllStations == nil {
		var v bool = false
		t.AllStations = &v
	}
	t.RouteMonitoring.PopulateDefaults()
	for _, e := range t.Station {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring represents the /nokia-conf/configure/service/vprn/bgp/group/monitor/route-monitoring YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring struct {
	PostPolicy *bool `path:"post-policy" module:"nokia-conf"`
	PrePolicy  *bool `path:"pre-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring) IsYANGGoStruct() {}

// GetPostPolicy retrieves the value of the leaf PostPolicy from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostPolicy is set, it can
// safely use t.GetPostPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring) GetPostPolicy() bool {
	if t == nil || t.PostPolicy == nil {
		return false
	}
	return *t.PostPolicy
}

// GetPrePolicy retrieves the value of the leaf PrePolicy from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrePolicy is set, it can
// safely use t.GetPrePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring) GetPrePolicy() bool {
	if t == nil || t.PrePolicy == nil {
		return false
	}
	return *t.PrePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PostPolicy == nil {
		var v bool = false
		t.PostPolicy = &v
	}
	if t.PrePolicy == nil {
		var v bool = false
		t.PrePolicy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_RouteMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station represents the /nokia-conf/configure/service/vprn/bgp/group/monitor/station YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station struct {
	StationName *string `path:"station-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station) IsYANGGoStruct() {}

// GetStationName retrieves the value of the leaf StationName from the NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StationName is set, it can
// safely use t.GetStationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station) GetStationName() string {
	if t == nil || t.StationName == nil {
		return ""
	}
	return *t.StationName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StationName == nil {
		return nil, fmt.Errorf("nil value for key StationName")
	}

	return map[string]interface{}{
		"station-name": *t.StationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_Monitor_Station) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation represents the /nokia-conf/configure/service/vprn/bgp/group/origin-validation YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_OriginValidation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit represents the /nokia-conf/configure/service/vprn/bgp/group/prefix-limit YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit struct {
	ApplyGroups        []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Family             E_NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit_Family `path:"family" module:"nokia-conf"`
	IdleTimeout        *int32                                                          `path:"idle-timeout" module:"nokia-conf"`
	LogOnly            *bool                                                           `path:"log-only" module:"nokia-conf"`
	Maximum            *uint32                                                         `path:"maximum" module:"nokia-conf"`
	PostImport         *bool                                                           `path:"post-import" module:"nokia-conf"`
	Threshold          *uint32                                                         `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamily retrieves the value of the leaf Family from the NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) GetFamily() E_NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit_Family {
	if t == nil || t.Family == 0 {
		return 0
	}
	return t.Family
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) GetIdleTimeout() int32 {
	if t == nil || t.IdleTimeout == nil {
		return 0
	}
	return *t.IdleTimeout
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 0
	}
	return *t.Maximum
}

// GetPostImport retrieves the value of the leaf PostImport from the NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostImport is set, it can
// safely use t.GetPostImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) GetPostImport() bool {
	if t == nil || t.PostImport == nil {
		return false
	}
	return *t.PostImport
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.PostImport == nil {
		var v bool = false
		t.PostImport = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family": t.Family,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_PrefixLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate represents the /nokia-conf/configure/service/vprn/bgp/group/remove-private YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate struct {
	Limited    *bool `path:"limited" module:"nokia-conf"`
	Replace    *bool `path:"replace" module:"nokia-conf"`
	SkipPeerAs *bool `path:"skip-peer-as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate) IsYANGGoStruct() {}

// GetLimited retrieves the value of the leaf Limited from the NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limited is set, it can
// safely use t.GetLimited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate) GetLimited() bool {
	if t == nil || t.Limited == nil {
		return false
	}
	return *t.Limited
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate) GetReplace() bool {
	if t == nil || t.Replace == nil {
		return false
	}
	return *t.Replace
}

// GetSkipPeerAs retrieves the value of the leaf SkipPeerAs from the NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SkipPeerAs is set, it can
// safely use t.GetSkipPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SkipPeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate) GetSkipPeerAs() bool {
	if t == nil || t.SkipPeerAs == nil {
		return false
	}
	return *t.SkipPeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limited == nil {
		var v bool = false
		t.Limited = &v
	}
	if t.Replace == nil {
		var v bool = false
		t.Replace = &v
	}
	if t.SkipPeerAs == nil {
		var v bool = false
		t.SkipPeerAs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_RemovePrivate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities represents the /nokia-conf/configure/service/vprn/bgp/group/send-communities YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities struct {
	Extended *bool `path:"extended" module:"nokia-conf"`
	Large    *bool `path:"large" module:"nokia-conf"`
	Standard *bool `path:"standard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities) IsYANGGoStruct() {}

// GetExtended retrieves the value of the leaf Extended from the NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetLarge retrieves the value of the leaf Large from the NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities) GetLarge() bool {
	if t == nil || t.Large == nil {
		return false
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return false
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_SendCommunities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault represents the /nokia-conf/configure/service/vprn/bgp/group/send-default YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault struct {
	ExportPolicy *string `path:"export-policy" module:"nokia-conf"`
	Ipv4         *bool   `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool   `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault) IsYANGGoStruct() {}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Group_SendDefault) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_HoldTime represents the /nokia-conf/configure/service/vprn/bgp/hold-time YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_HoldTime struct {
	MinimumHoldTime *int32 `path:"minimum-hold-time" module:"nokia-conf"`
	Seconds         *int32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_HoldTime) IsYANGGoStruct() {}

// GetMinimumHoldTime retrieves the value of the leaf MinimumHoldTime from the NokiaConf_Configure_Service_Vprn_Bgp_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumHoldTime is set, it can
// safely use t.GetMinimumHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_HoldTime) GetMinimumHoldTime() int32 {
	if t == nil || t.MinimumHoldTime == nil {
		return 0
	}
	return *t.MinimumHoldTime
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Bgp_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_HoldTime) GetSeconds() int32 {
	if t == nil || t.Seconds == nil {
		return 90
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinimumHoldTime == nil {
		var v int32 = 0
		t.MinimumHoldTime = &v
	}
	if t.Seconds == nil {
		var v int32 = 90
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_HoldTime.
func (*NokiaConf_Configure_Service_Vprn_Bgp_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Import represents the /nokia-conf/configure/service/vprn/bgp/import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Import struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Import) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Import) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Import) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Bgp_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Import) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Import) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Import) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Import.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Import) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_LocalAs represents the /nokia-conf/configure/service/vprn/bgp/local-as YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"nokia-conf"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"nokia-conf"`
	Private         *bool   `path:"private" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Service_Vprn_Bgp_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the NokiaConf_Configure_Service_Vprn_Bgp_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return true
	}
	return *t.PrependGlobalAs
}

// GetPrivate retrieves the value of the leaf Private from the NokiaConf_Configure_Service_Vprn_Bgp_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Private is set, it can
// safely use t.GetPrivate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Private == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_LocalAs) GetPrivate() bool {
	if t == nil || t.Private == nil {
		return false
	}
	return *t.Private
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrependGlobalAs == nil {
		var v bool = true
		t.PrependGlobalAs = &v
	}
	if t.Private == nil {
		var v bool = false
		t.Private = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_LocalAs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_LocalAs.
func (*NokiaConf_Configure_Service_Vprn_Bgp_LocalAs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Monitor represents the /nokia-conf/configure/service/vprn/bgp/monitor YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Monitor struct {
	AdminState         E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	AllStations        *bool                                                            `path:"all-stations" module:"nokia-conf"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteMonitoring    *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring    `path:"route-monitoring" module:"nokia-conf"`
	Station            map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station `path:"station" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Monitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Monitor) IsYANGGoStruct() {}

// NewStation creates a new entry in the Station list of the
// NokiaConf_Configure_Service_Vprn_Bgp_Monitor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) NewStation(StationName string) (*NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station)
	}

	key := StationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Station[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Station", key)
	}

	t.Station[key] = &NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station{
		StationName: &StationName,
	}

	return t.Station[key], nil
}

// RenameStation renames an entry in the list Station within
// the NokiaConf_Configure_Service_Vprn_Bgp_Monitor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) RenameStation(oldK, newK string) error {
	if _, ok := t.Station[newK]; ok {
		return fmt.Errorf("key %v already exists in Station", newK)
	}

	e, ok := t.Station[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Station", oldK)
	}
	e.StationName = &newK

	t.Station[newK] = e
	delete(t.Station, oldK)
	return nil
}

// GetOrCreateStation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Monitor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) GetOrCreateStation(StationName string) *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station {

	key := StationName

	if v, ok := t.Station[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStation(StationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStation got unexpected error: %v", err))
	}
	return v
}

// GetStation retrieves the value with the specified key from
// the Station map field of NokiaConf_Configure_Service_Vprn_Bgp_Monitor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) GetStation(StationName string) *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station {

	if t == nil {
		return nil
	}

	key := StationName

	if lm, ok := t.Station[key]; ok {
		return lm
	}
	return nil
}

// DeleteStation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Monitor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) DeleteStation(StationName string) {
	key := StationName

	delete(t.Station, key)
}

// AppendStation appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station struct to the
// list Station of NokiaConf_Configure_Service_Vprn_Bgp_Monitor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) AppendStation(v *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station) error {
	if v.StationName == nil {
		return fmt.Errorf("invalid nil key received for StationName")
	}

	key := *v.StationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station)
	}

	if _, ok := t.Station[key]; ok {
		return fmt.Errorf("duplicate key for list Station %v", key)
	}

	t.Station[key] = v
	return nil
}

// GetOrCreateRouteMonitoring retrieves the value of the RouteMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) GetOrCreateRouteMonitoring() *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring {
	if t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	t.RouteMonitoring = &NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring{}
	return t.RouteMonitoring
}

// GetRouteMonitoring returns the value of the RouteMonitoring struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Monitor. If the receiver or the field RouteMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) GetRouteMonitoring() *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring {
	if t != nil && t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Bgp_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllStations retrieves the value of the leaf AllStations from the NokiaConf_Configure_Service_Vprn_Bgp_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllStations is set, it can
// safely use t.GetAllStations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllStations == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) GetAllStations() bool {
	if t == nil || t.AllStations == nil {
		return false
	}
	return *t.AllStations
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Monitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllStations == nil {
		var v bool = false
		t.AllStations = &v
	}
	t.RouteMonitoring.PopulateDefaults()
	for _, e := range t.Station {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Monitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Monitor.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Monitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring represents the /nokia-conf/configure/service/vprn/bgp/monitor/route-monitoring YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring struct {
	PostPolicy *bool `path:"post-policy" module:"nokia-conf"`
	PrePolicy  *bool `path:"pre-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring) IsYANGGoStruct() {}

// GetPostPolicy retrieves the value of the leaf PostPolicy from the NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostPolicy is set, it can
// safely use t.GetPostPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring) GetPostPolicy() bool {
	if t == nil || t.PostPolicy == nil {
		return false
	}
	return *t.PostPolicy
}

// GetPrePolicy retrieves the value of the leaf PrePolicy from the NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrePolicy is set, it can
// safely use t.GetPrePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring) GetPrePolicy() bool {
	if t == nil || t.PrePolicy == nil {
		return false
	}
	return *t.PrePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PostPolicy == nil {
		var v bool = false
		t.PostPolicy = &v
	}
	if t.PrePolicy == nil {
		var v bool = false
		t.PrePolicy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Monitor_RouteMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station represents the /nokia-conf/configure/service/vprn/bgp/monitor/station YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station struct {
	StationName *string `path:"station-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station) IsYANGGoStruct() {}

// GetStationName retrieves the value of the leaf StationName from the NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StationName is set, it can
// safely use t.GetStationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station) GetStationName() string {
	if t == nil || t.StationName == nil {
		return ""
	}
	return *t.StationName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StationName == nil {
		return nil, fmt.Errorf("nil value for key StationName")
	}

	return map[string]interface{}{
		"station-name": *t.StationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Monitor_Station) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Multipath represents the /nokia-conf/configure/service/vprn/bgp/multipath YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Multipath struct {
	Ebgp        *uint32                                                                                                                       `path:"ebgp" module:"nokia-conf"`
	Family      map[E_NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family_FamilyType]*NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family `path:"family" module:"nokia-conf"`
	Ibgp        *uint32                                                                                                                       `path:"ibgp" module:"nokia-conf"`
	MaxPaths    *uint32                                                                                                                       `path:"max-paths" module:"nokia-conf"`
	Restrict    E_NokiaTypesBgp_Restrict                                                                                                      `path:"restrict" module:"nokia-conf"`
	UnequalCost *bool                                                                                                                         `path:"unequal-cost" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Multipath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Multipath) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Service_Vprn_Bgp_Multipath struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) NewFamily(FamilyType E_NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family_FamilyType) (*NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family_FamilyType]*NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Service_Vprn_Bgp_Multipath struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) RenameFamily(oldK, newK E_NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family_FamilyType) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Multipath. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) GetOrCreateFamily(FamilyType E_NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family_FamilyType) *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Service_Vprn_Bgp_Multipath. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) GetFamily(FamilyType E_NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family_FamilyType) *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Multipath. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) DeleteFamily(FamilyType E_NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family_FamilyType) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family struct to the
// list Family of NokiaConf_Configure_Service_Vprn_Bgp_Multipath. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) AppendFamily(v *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family_FamilyType]*NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// GetMaxPaths retrieves the value of the leaf MaxPaths from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPaths is set, it can
// safely use t.GetMaxPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPaths == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) GetMaxPaths() uint32 {
	if t == nil || t.MaxPaths == nil {
		return 1
	}
	return *t.MaxPaths
}

// GetRestrict retrieves the value of the leaf Restrict from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Restrict is set, it can
// safely use t.GetRestrict() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Restrict == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) GetRestrict() E_NokiaTypesBgp_Restrict {
	if t == nil || t.Restrict == 0 {
		return NokiaTypesBgp_Restrict_same_as_path_length
	}
	return t.Restrict
}

// GetUnequalCost retrieves the value of the leaf UnequalCost from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnequalCost is set, it can
// safely use t.GetUnequalCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnequalCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) GetUnequalCost() bool {
	if t == nil || t.UnequalCost == nil {
		return false
	}
	return *t.UnequalCost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Multipath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPaths == nil {
		var v uint32 = 1
		t.MaxPaths = &v
	}
	if t.Restrict == 0 {
		t.Restrict = NokiaTypesBgp_Restrict_same_as_path_length
	}
	if t.UnequalCost == nil {
		var v bool = false
		t.UnequalCost = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Multipath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Multipath.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Multipath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family represents the /nokia-conf/configure/service/vprn/bgp/multipath/family YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Ebgp               *uint32                                                            `path:"ebgp" module:"nokia-conf"`
	FamilyType         E_NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family_FamilyType `path:"family-type" module:"nokia-conf"`
	Ibgp               *uint32                                                            `path:"ibgp" module:"nokia-conf"`
	MaxPaths           *uint32                                                            `path:"max-paths" module:"nokia-conf"`
	Restrict           E_NokiaTypesBgp_Restrict                                           `path:"restrict" module:"nokia-conf"`
	UnequalCost        *bool                                                              `path:"unequal-cost" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) GetFamilyType() E_NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family_FamilyType {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// GetMaxPaths retrieves the value of the leaf MaxPaths from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPaths is set, it can
// safely use t.GetMaxPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPaths == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) GetMaxPaths() uint32 {
	if t == nil || t.MaxPaths == nil {
		return 0
	}
	return *t.MaxPaths
}

// GetRestrict retrieves the value of the leaf Restrict from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Restrict is set, it can
// safely use t.GetRestrict() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Restrict == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) GetRestrict() E_NokiaTypesBgp_Restrict {
	if t == nil || t.Restrict == 0 {
		return NokiaTypesBgp_Restrict_same_as_path_length
	}
	return t.Restrict
}

// GetUnequalCost retrieves the value of the leaf UnequalCost from the NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnequalCost is set, it can
// safely use t.GetUnequalCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnequalCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) GetUnequalCost() bool {
	if t == nil || t.UnequalCost == nil {
		return false
	}
	return *t.UnequalCost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Restrict == 0 {
		t.Restrict = NokiaTypesBgp_Restrict_same_as_path_length
	}
	if t.UnequalCost == nil {
		var v bool = false
		t.UnequalCost = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Multipath_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor represents the /nokia-conf/configure/service/vprn/bgp/neighbor YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor struct {
	AdminState              E_NokiaTypesSros_AdminState                                                                                                       `path:"admin-state" module:"nokia-conf"`
	AdvertiseInactive       *bool                                                                                                                             `path:"advertise-inactive" module:"nokia-conf"`
	AdvertiseIpv6NextHops   *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops                                                              `path:"advertise-ipv6-next-hops" module:"nokia-conf" yangPresence:"true"`
	AggregatorIdZero        *bool                                                                                                                             `path:"aggregator-id-zero" module:"nokia-conf"`
	ApplyGroups             []string                                                                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	AsOverride              *bool                                                                                                                             `path:"as-override" module:"nokia-conf"`
	Asn_4Byte               *bool                                                                                                                             `path:"asn-4-byte" module:"nokia-conf"`
	AuthenticationKey       *string                                                                                                                           `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain  *string                                                                                                                           `path:"authentication-keychain" module:"nokia-conf"`
	BfdLiveness             *bool                                                                                                                             `path:"bfd-liveness" module:"nokia-conf"`
	CapabilityNegotiation   *bool                                                                                                                             `path:"capability-negotiation" module:"nokia-conf"`
	ClientReflect           *bool                                                                                                                             `path:"client-reflect" module:"nokia-conf"`
	Cluster                 *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster                                                                            `path:"cluster" module:"nokia-conf"`
	ConnectRetry            *int32                                                                                                                            `path:"connect-retry" module:"nokia-conf"`
	DampPeerOscillations    *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations                                                               `path:"damp-peer-oscillations" module:"nokia-conf" yangPresence:"true"`
	Damping                 *bool                                                                                                                             `path:"damping" module:"nokia-conf"`
	DefaultLabelPreference  *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference                                                             `path:"default-label-preference" module:"nokia-conf"`
	DefaultPreference       *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference                                                                  `path:"default-preference" module:"nokia-conf"`
	Description             *string                                                                                                                           `path:"description" module:"nokia-conf"`
	EbgpDefaultRejectPolicy *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy                                                            `path:"ebgp-default-reject-policy" module:"nokia-conf" yangPresence:"true"`
	EnforceFirstAs          *bool                                                                                                                             `path:"enforce-first-as" module:"nokia-conf"`
	ErrorHandling           *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling                                                                      `path:"error-handling" module:"nokia-conf"`
	Export                  *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export                                                                             `path:"export" module:"nokia-conf" yangPresence:"true"`
	ExtendedNhEncoding      *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding                                                                 `path:"extended-nh-encoding" module:"nokia-conf" yangPresence:"true"`
	Family                  *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family                                                                             `path:"family" module:"nokia-conf" yangPresence:"true"`
	FastExternalFailover    *bool                                                                                                                             `path:"fast-external-failover" module:"nokia-conf"`
	GracefulRestart         *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart                                                                    `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	Group                   *string                                                                                                                           `path:"group" module:"nokia-conf"`
	HoldTime                *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime                                                                           `path:"hold-time" module:"nokia-conf"`
	Import                  *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import                                                                             `path:"import" module:"nokia-conf" yangPresence:"true"`
	InitialSendDelayZero    *bool                                                                                                                             `path:"initial-send-delay-zero" module:"nokia-conf"`
	IpAddress               *string                                                                                                                           `path:"ip-address" module:"nokia-conf"`
	Keepalive               *int32                                                                                                                            `path:"keepalive" module:"nokia-conf"`
	LabelPreference         *uint32                                                                                                                           `path:"label-preference" module:"nokia-conf"`
	LinkBandwidth           *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth                                                                      `path:"link-bandwidth" module:"nokia-conf"`
	LocalAddress            *string                                                                                                                           `path:"local-address" module:"nokia-conf"`
	LocalAs                 *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs                                                                            `path:"local-as" module:"nokia-conf"`
	LocalPreference         *int64                                                                                                                            `path:"local-preference" module:"nokia-conf"`
	LoopDetect              E_NokiaTypesBgp_LoopDetect                                                                                                        `path:"loop-detect" module:"nokia-conf"`
	LoopDetectThreshold     *uint32                                                                                                                           `path:"loop-detect-threshold" module:"nokia-conf"`
	MedOut                  NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_MedOut_Union                                                                        `path:"med-out" module:"nokia-conf"`
	MinRouteAdvertisement   *int16                                                                                                                            `path:"min-route-advertisement" module:"nokia-conf"`
	Monitor                 *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor                                                                            `path:"monitor" module:"nokia-conf" yangPresence:"true"`
	Multihop                *int32                                                                                                                            `path:"multihop" module:"nokia-conf"`
	MultipathEligible       *bool                                                                                                                             `path:"multipath-eligible" module:"nokia-conf"`
	NextHopSelf             *bool                                                                                                                             `path:"next-hop-self" module:"nokia-conf"`
	OriginValidation        *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation                                                                   `path:"origin-validation" module:"nokia-conf" yangPresence:"true"`
	Passive                 *bool                                                                                                                             `path:"passive" module:"nokia-conf"`
	PathMtuDiscovery        *bool                                                                                                                             `path:"path-mtu-discovery" module:"nokia-conf"`
	PeerAs                  *uint32                                                                                                                           `path:"peer-as" module:"nokia-conf"`
	PeerCreationType        E_NokiaTypesBgp_PeerCreationType                                                                                                  `path:"peer-creation-type" module:"nokia-conf"`
	PeerIpTracking          *bool                                                                                                                             `path:"peer-ip-tracking" module:"nokia-conf"`
	Preference              *uint32                                                                                                                           `path:"preference" module:"nokia-conf"`
	PrefixLimit             map[E_NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit_Family]*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit `path:"prefix-limit" module:"nokia-conf"`
	RemovePrivate           *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate                                                                      `path:"remove-private" module:"nokia-conf" yangPresence:"true"`
	SendCommunities         *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities                                                                    `path:"send-communities" module:"nokia-conf"`
	SendDefault             *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault                                                                        `path:"send-default" module:"nokia-conf" yangPresence:"true"`
	SplitHorizon            *bool                                                                                                                             `path:"split-horizon" module:"nokia-conf"`
	TcpMss                  NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_TcpMss_Union                                                                        `path:"tcp-mss" module:"nokia-conf"`
	ThirdPartyNexthop       *bool                                                                                                                             `path:"third-party-nexthop" module:"nokia-conf"`
	TtlSecurity             *uint32                                                                                                                           `path:"ttl-security" module:"nokia-conf"`
	Type                    E_NokiaTypesBgp_PeerType                                                                                                          `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) IsYANGGoStruct() {}

// NewPrefixLimit creates a new entry in the PrefixLimit list of the
// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) NewPrefixLimit(Family E_NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit_Family) (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLimit == nil {
		t.PrefixLimit = make(map[E_NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit_Family]*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit)
	}

	key := Family

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLimit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLimit", key)
	}

	t.PrefixLimit[key] = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit{
		Family: Family,
	}

	return t.PrefixLimit[key], nil
}

// RenamePrefixLimit renames an entry in the list PrefixLimit within
// the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) RenamePrefixLimit(oldK, newK E_NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit_Family) error {
	if _, ok := t.PrefixLimit[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLimit", newK)
	}

	e, ok := t.PrefixLimit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLimit", oldK)
	}
	e.Family = newK

	t.PrefixLimit[newK] = e
	delete(t.PrefixLimit, oldK)
	return nil
}

// GetOrCreatePrefixLimit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreatePrefixLimit(Family E_NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit_Family) *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit {

	key := Family

	if v, ok := t.PrefixLimit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLimit(Family)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLimit got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLimit retrieves the value with the specified key from
// the PrefixLimit map field of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetPrefixLimit(Family E_NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit_Family) *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit {

	if t == nil {
		return nil
	}

	key := Family

	if lm, ok := t.PrefixLimit[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLimit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) DeletePrefixLimit(Family E_NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit_Family) {
	key := Family

	delete(t.PrefixLimit, key)
}

// AppendPrefixLimit appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit struct to the
// list PrefixLimit of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) AppendPrefixLimit(v *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) error {
	key := v.Family

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLimit == nil {
		t.PrefixLimit = make(map[E_NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit_Family]*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit)
	}

	if _, ok := t.PrefixLimit[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLimit %v", key)
	}

	t.PrefixLimit[key] = v
	return nil
}

// GetOrCreateAdvertiseIpv6NextHops retrieves the value of the AdvertiseIpv6NextHops field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateAdvertiseIpv6NextHops() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops {
	if t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	t.AdvertiseIpv6NextHops = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops{}
	return t.AdvertiseIpv6NextHops
}

// GetOrCreateCluster retrieves the value of the Cluster field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateCluster() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster {
	if t.Cluster != nil {
		return t.Cluster
	}
	t.Cluster = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster{}
	return t.Cluster
}

// GetOrCreateDampPeerOscillations retrieves the value of the DampPeerOscillations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateDampPeerOscillations() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations {
	if t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	t.DampPeerOscillations = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations{}
	return t.DampPeerOscillations
}

// GetOrCreateDefaultLabelPreference retrieves the value of the DefaultLabelPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateDefaultLabelPreference() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference {
	if t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	t.DefaultLabelPreference = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference{}
	return t.DefaultLabelPreference
}

// GetOrCreateDefaultPreference retrieves the value of the DefaultPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateDefaultPreference() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference {
	if t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	t.DefaultPreference = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference{}
	return t.DefaultPreference
}

// GetOrCreateEbgpDefaultRejectPolicy retrieves the value of the EbgpDefaultRejectPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateEbgpDefaultRejectPolicy() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy {
	if t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	t.EbgpDefaultRejectPolicy = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy{}
	return t.EbgpDefaultRejectPolicy
}

// GetOrCreateErrorHandling retrieves the value of the ErrorHandling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateErrorHandling() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling {
	if t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	t.ErrorHandling = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling{}
	return t.ErrorHandling
}

// GetOrCreateExport retrieves the value of the Export field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateExport() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export {
	if t.Export != nil {
		return t.Export
	}
	t.Export = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export{}
	return t.Export
}

// GetOrCreateExtendedNhEncoding retrieves the value of the ExtendedNhEncoding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateExtendedNhEncoding() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding {
	if t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	t.ExtendedNhEncoding = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding{}
	return t.ExtendedNhEncoding
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateFamily() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family{}
	return t.Family
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateGracefulRestart() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateHoldTime() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime{}
	return t.HoldTime
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateImport() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import{}
	return t.Import
}

// GetOrCreateLinkBandwidth retrieves the value of the LinkBandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateLinkBandwidth() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth {
	if t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	t.LinkBandwidth = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth{}
	return t.LinkBandwidth
}

// GetOrCreateLocalAs retrieves the value of the LocalAs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateLocalAs() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs {
	if t.LocalAs != nil {
		return t.LocalAs
	}
	t.LocalAs = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs{}
	return t.LocalAs
}

// GetOrCreateMonitor retrieves the value of the Monitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateMonitor() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor {
	if t.Monitor != nil {
		return t.Monitor
	}
	t.Monitor = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor{}
	return t.Monitor
}

// GetOrCreateOriginValidation retrieves the value of the OriginValidation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateOriginValidation() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation {
	if t.OriginValidation != nil {
		return t.OriginValidation
	}
	t.OriginValidation = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation{}
	return t.OriginValidation
}

// GetOrCreateRemovePrivate retrieves the value of the RemovePrivate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateRemovePrivate() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate {
	if t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	t.RemovePrivate = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate{}
	return t.RemovePrivate
}

// GetOrCreateSendCommunities retrieves the value of the SendCommunities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateSendCommunities() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities {
	if t.SendCommunities != nil {
		return t.SendCommunities
	}
	t.SendCommunities = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities{}
	return t.SendCommunities
}

// GetOrCreateSendDefault retrieves the value of the SendDefault field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOrCreateSendDefault() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault {
	if t.SendDefault != nil {
		return t.SendDefault
	}
	t.SendDefault = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault{}
	return t.SendDefault
}

// GetAdvertiseIpv6NextHops returns the value of the AdvertiseIpv6NextHops struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field AdvertiseIpv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetAdvertiseIpv6NextHops() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops {
	if t != nil && t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	return nil
}

// GetCluster returns the value of the Cluster struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field Cluster is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetCluster() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster {
	if t != nil && t.Cluster != nil {
		return t.Cluster
	}
	return nil
}

// GetDampPeerOscillations returns the value of the DampPeerOscillations struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field DampPeerOscillations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetDampPeerOscillations() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations {
	if t != nil && t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	return nil
}

// GetDefaultLabelPreference returns the value of the DefaultLabelPreference struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field DefaultLabelPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetDefaultLabelPreference() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference {
	if t != nil && t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	return nil
}

// GetDefaultPreference returns the value of the DefaultPreference struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field DefaultPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetDefaultPreference() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference {
	if t != nil && t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	return nil
}

// GetEbgpDefaultRejectPolicy returns the value of the EbgpDefaultRejectPolicy struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field EbgpDefaultRejectPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetEbgpDefaultRejectPolicy() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy {
	if t != nil && t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	return nil
}

// GetErrorHandling returns the value of the ErrorHandling struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field ErrorHandling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetErrorHandling() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling {
	if t != nil && t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	return nil
}

// GetExport returns the value of the Export struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field Export is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetExport() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export {
	if t != nil && t.Export != nil {
		return t.Export
	}
	return nil
}

// GetExtendedNhEncoding returns the value of the ExtendedNhEncoding struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field ExtendedNhEncoding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetExtendedNhEncoding() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding {
	if t != nil && t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	return nil
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetFamily() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetGracefulRestart() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetHoldTime() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetImport() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetLinkBandwidth returns the value of the LinkBandwidth struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field LinkBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetLinkBandwidth() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth {
	if t != nil && t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	return nil
}

// GetLocalAs returns the value of the LocalAs struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field LocalAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetLocalAs() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs {
	if t != nil && t.LocalAs != nil {
		return t.LocalAs
	}
	return nil
}

// GetMonitor returns the value of the Monitor struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field Monitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetMonitor() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor {
	if t != nil && t.Monitor != nil {
		return t.Monitor
	}
	return nil
}

// GetOriginValidation returns the value of the OriginValidation struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field OriginValidation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetOriginValidation() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation {
	if t != nil && t.OriginValidation != nil {
		return t.OriginValidation
	}
	return nil
}

// GetRemovePrivate returns the value of the RemovePrivate struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field RemovePrivate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetRemovePrivate() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate {
	if t != nil && t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	return nil
}

// GetSendCommunities returns the value of the SendCommunities struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field SendCommunities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetSendCommunities() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities {
	if t != nil && t.SendCommunities != nil {
		return t.SendCommunities
	}
	return nil
}

// GetSendDefault returns the value of the SendDefault struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor. If the receiver or the field SendDefault is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetSendDefault() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault {
	if t != nil && t.SendDefault != nil {
		return t.SendDefault
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseInactive retrieves the value of the leaf AdvertiseInactive from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInactive is set, it can
// safely use t.GetAdvertiseInactive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInactive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetAdvertiseInactive() bool {
	if t == nil || t.AdvertiseInactive == nil {
		return false
	}
	return *t.AdvertiseInactive
}

// GetAggregatorIdZero retrieves the value of the leaf AggregatorIdZero from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregatorIdZero is set, it can
// safely use t.GetAggregatorIdZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregatorIdZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetAggregatorIdZero() bool {
	if t == nil || t.AggregatorIdZero == nil {
		return false
	}
	return *t.AggregatorIdZero
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsOverride retrieves the value of the leaf AsOverride from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsOverride is set, it can
// safely use t.GetAsOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetAsOverride() bool {
	if t == nil || t.AsOverride == nil {
		return false
	}
	return *t.AsOverride
}

// GetAsn_4Byte retrieves the value of the leaf Asn_4Byte from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn_4Byte is set, it can
// safely use t.GetAsn_4Byte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn_4Byte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetAsn_4Byte() bool {
	if t == nil || t.Asn_4Byte == nil {
		return false
	}
	return *t.Asn_4Byte
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCapabilityNegotiation retrieves the value of the leaf CapabilityNegotiation from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CapabilityNegotiation is set, it can
// safely use t.GetCapabilityNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CapabilityNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetCapabilityNegotiation() bool {
	if t == nil || t.CapabilityNegotiation == nil {
		return false
	}
	return *t.CapabilityNegotiation
}

// GetClientReflect retrieves the value of the leaf ClientReflect from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientReflect is set, it can
// safely use t.GetClientReflect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientReflect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetClientReflect() bool {
	if t == nil || t.ClientReflect == nil {
		return false
	}
	return *t.ClientReflect
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetConnectRetry() int32 {
	if t == nil || t.ConnectRetry == nil {
		return 0
	}
	return *t.ConnectRetry
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetDamping() bool {
	if t == nil || t.Damping == nil {
		return false
	}
	return *t.Damping
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnforceFirstAs retrieves the value of the leaf EnforceFirstAs from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceFirstAs is set, it can
// safely use t.GetEnforceFirstAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceFirstAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetEnforceFirstAs() bool {
	if t == nil || t.EnforceFirstAs == nil {
		return false
	}
	return *t.EnforceFirstAs
}

// GetFastExternalFailover retrieves the value of the leaf FastExternalFailover from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastExternalFailover is set, it can
// safely use t.GetFastExternalFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastExternalFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetFastExternalFailover() bool {
	if t == nil || t.FastExternalFailover == nil {
		return false
	}
	return *t.FastExternalFailover
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetInitialSendDelayZero retrieves the value of the leaf InitialSendDelayZero from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialSendDelayZero is set, it can
// safely use t.GetInitialSendDelayZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialSendDelayZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetInitialSendDelayZero() bool {
	if t == nil || t.InitialSendDelayZero == nil {
		return false
	}
	return *t.InitialSendDelayZero
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetKeepalive() int32 {
	if t == nil || t.Keepalive == nil {
		return 0
	}
	return *t.Keepalive
}

// GetLabelPreference retrieves the value of the leaf LabelPreference from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelPreference is set, it can
// safely use t.GetLabelPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetLabelPreference() uint32 {
	if t == nil || t.LabelPreference == nil {
		return 0
	}
	return *t.LabelPreference
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetLocalPreference() int64 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetLoopDetect retrieves the value of the leaf LoopDetect from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetect is set, it can
// safely use t.GetLoopDetect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetLoopDetect() E_NokiaTypesBgp_LoopDetect {
	if t == nil || t.LoopDetect == 0 {
		return 0
	}
	return t.LoopDetect
}

// GetLoopDetectThreshold retrieves the value of the leaf LoopDetectThreshold from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetectThreshold is set, it can
// safely use t.GetLoopDetectThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetectThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetLoopDetectThreshold() uint32 {
	if t == nil || t.LoopDetectThreshold == nil {
		return 0
	}
	return *t.LoopDetectThreshold
}

// GetMedOut retrieves the value of the leaf MedOut from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedOut is set, it can
// safely use t.GetMedOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetMedOut() NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_MedOut_Union {
	if t == nil || t.MedOut == nil {
		return nil
	}
	return t.MedOut
}

// GetMinRouteAdvertisement retrieves the value of the leaf MinRouteAdvertisement from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinRouteAdvertisement is set, it can
// safely use t.GetMinRouteAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinRouteAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetMinRouteAdvertisement() int16 {
	if t == nil || t.MinRouteAdvertisement == nil {
		return 0
	}
	return *t.MinRouteAdvertisement
}

// GetMultihop retrieves the value of the leaf Multihop from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multihop is set, it can
// safely use t.GetMultihop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multihop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetMultihop() int32 {
	if t == nil || t.Multihop == nil {
		return 0
	}
	return *t.Multihop
}

// GetMultipathEligible retrieves the value of the leaf MultipathEligible from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultipathEligible is set, it can
// safely use t.GetMultipathEligible() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultipathEligible == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetMultipathEligible() bool {
	if t == nil || t.MultipathEligible == nil {
		return false
	}
	return *t.MultipathEligible
}

// GetNextHopSelf retrieves the value of the leaf NextHopSelf from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelf is set, it can
// safely use t.GetNextHopSelf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetNextHopSelf() bool {
	if t == nil || t.NextHopSelf == nil {
		return false
	}
	return *t.NextHopSelf
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPathMtuDiscovery retrieves the value of the leaf PathMtuDiscovery from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtuDiscovery is set, it can
// safely use t.GetPathMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtuDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetPathMtuDiscovery() bool {
	if t == nil || t.PathMtuDiscovery == nil {
		return false
	}
	return *t.PathMtuDiscovery
}

// GetPeerAs retrieves the value of the leaf PeerAs from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAs is set, it can
// safely use t.GetPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// GetPeerCreationType retrieves the value of the leaf PeerCreationType from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerCreationType is set, it can
// safely use t.GetPeerCreationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerCreationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetPeerCreationType() E_NokiaTypesBgp_PeerCreationType {
	if t == nil || t.PeerCreationType == 0 {
		return NokiaTypesBgp_PeerCreationType_static
	}
	return t.PeerCreationType
}

// GetPeerIpTracking retrieves the value of the leaf PeerIpTracking from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIpTracking is set, it can
// safely use t.GetPeerIpTracking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIpTracking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetPeerIpTracking() bool {
	if t == nil || t.PeerIpTracking == nil {
		return false
	}
	return *t.PeerIpTracking
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetTcpMss() NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_TcpMss_Union {
	if t == nil || t.TcpMss == nil {
		return nil
	}
	return t.TcpMss
}

// GetThirdPartyNexthop retrieves the value of the leaf ThirdPartyNexthop from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThirdPartyNexthop is set, it can
// safely use t.GetThirdPartyNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThirdPartyNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetThirdPartyNexthop() bool {
	if t == nil || t.ThirdPartyNexthop == nil {
		return false
	}
	return *t.ThirdPartyNexthop
}

// GetTtlSecurity retrieves the value of the leaf TtlSecurity from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlSecurity is set, it can
// safely use t.GetTtlSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetTtlSecurity() uint32 {
	if t == nil || t.TtlSecurity == nil {
		return 0
	}
	return *t.TtlSecurity
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) GetType() E_NokiaTypesBgp_PeerType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.PeerCreationType == 0 {
		t.PeerCreationType = NokiaTypesBgp_PeerCreationType_static
	}
	t.AdvertiseIpv6NextHops.PopulateDefaults()
	t.Cluster.PopulateDefaults()
	t.DampPeerOscillations.PopulateDefaults()
	t.DefaultLabelPreference.PopulateDefaults()
	t.DefaultPreference.PopulateDefaults()
	t.EbgpDefaultRejectPolicy.PopulateDefaults()
	t.ErrorHandling.PopulateDefaults()
	t.Export.PopulateDefaults()
	t.ExtendedNhEncoding.PopulateDefaults()
	t.Family.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.Import.PopulateDefaults()
	t.LinkBandwidth.PopulateDefaults()
	t.LocalAs.PopulateDefaults()
	t.Monitor.PopulateDefaults()
	t.OriginValidation.PopulateDefaults()
	t.RemovePrivate.PopulateDefaults()
	t.SendCommunities.PopulateDefaults()
	t.SendDefault.PopulateDefaults()
	for _, e := range t.PrefixLimit {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops represents the /nokia-conf/configure/service/vprn/bgp/neighbor/advertise-ipv6-next-hops YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_AdvertiseIpv6NextHops) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster represents the /nokia-conf/configure/service/vprn/bgp/neighbor/cluster YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster struct {
	ClusterId *string `path:"cluster-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster) IsYANGGoStruct() {}

// GetClusterId retrieves the value of the leaf ClusterId from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster) GetClusterId() string {
	if t == nil || t.ClusterId == nil {
		return ""
	}
	return *t.ClusterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Cluster) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations represents the /nokia-conf/configure/service/vprn/bgp/neighbor/damp-peer-oscillations YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations struct {
	ErrorInterval *uint32                                                                          `path:"error-interval" module:"nokia-conf"`
	IdleHoldTime  *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime `path:"idle-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations) IsYANGGoStruct() {}

// GetOrCreateIdleHoldTime retrieves the value of the IdleHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations) GetOrCreateIdleHoldTime() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime {
	if t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	t.IdleHoldTime = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime{}
	return t.IdleHoldTime
}

// GetIdleHoldTime returns the value of the IdleHoldTime struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations. If the receiver or the field IdleHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations) GetIdleHoldTime() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime {
	if t != nil && t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	return nil
}

// GetErrorInterval retrieves the value of the leaf ErrorInterval from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorInterval is set, it can
// safely use t.GetErrorInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations) GetErrorInterval() uint32 {
	if t == nil || t.ErrorInterval == nil {
		return 30
	}
	return *t.ErrorInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ErrorInterval == nil {
		var v uint32 = 30
		t.ErrorInterval = &v
	}
	t.IdleHoldTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime represents the /nokia-conf/configure/service/vprn/bgp/neighbor/damp-peer-oscillations/idle-hold-time YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) IsYANGGoStruct() {
}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 0
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 60
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 5
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 0
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 60
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 5
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference represents the /nokia-conf/configure/service/vprn/bgp/neighbor/default-label-preference YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultLabelPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference represents the /nokia-conf/configure/service/vprn/bgp/neighbor/default-preference YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_DefaultPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy represents the /nokia-conf/configure/service/vprn/bgp/neighbor/ebgp-default-reject-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy struct {
	Export *bool `path:"export" module:"nokia-conf"`
	Import *bool `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy) GetExport() bool {
	if t == nil || t.Export == nil {
		return true
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy) GetImport() bool {
	if t == nil || t.Import == nil {
		return true
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Export == nil {
		var v bool = true
		t.Export = &v
	}
	if t.Import == nil {
		var v bool = true
		t.Import = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_EbgpDefaultRejectPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling represents the /nokia-conf/configure/service/vprn/bgp/neighbor/error-handling YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling struct {
	UpdateFaultTolerance *bool `path:"update-fault-tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling) IsYANGGoStruct() {}

// GetUpdateFaultTolerance retrieves the value of the leaf UpdateFaultTolerance from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateFaultTolerance is set, it can
// safely use t.GetUpdateFaultTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateFaultTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling) GetUpdateFaultTolerance() bool {
	if t == nil || t.UpdateFaultTolerance == nil {
		return false
	}
	return *t.UpdateFaultTolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ErrorHandling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export represents the /nokia-conf/configure/service/vprn/bgp/neighbor/export YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Export) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding represents the /nokia-conf/configure/service/vprn/bgp/neighbor/extended-nh-encoding YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_ExtendedNhEncoding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family represents the /nokia-conf/configure/service/vprn/bgp/neighbor/family YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family struct {
	FlowIpv4  *bool `path:"flow-ipv4" module:"nokia-conf"`
	FlowIpv6  *bool `path:"flow-ipv6" module:"nokia-conf"`
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	McastIpv4 *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6 *bool `path:"mcast-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) IsYANGGoStruct() {}

// GetFlowIpv4 retrieves the value of the leaf FlowIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv4 is set, it can
// safely use t.GetFlowIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) GetFlowIpv4() bool {
	if t == nil || t.FlowIpv4 == nil {
		return false
	}
	return *t.FlowIpv4
}

// GetFlowIpv6 retrieves the value of the leaf FlowIpv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv6 is set, it can
// safely use t.GetFlowIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) GetFlowIpv6() bool {
	if t == nil || t.FlowIpv6 == nil {
		return false
	}
	return *t.FlowIpv6
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FlowIpv4 == nil {
		var v bool = false
		t.FlowIpv4 = &v
	}
	if t.FlowIpv6 == nil {
		var v bool = false
		t.FlowIpv6 = &v
	}
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart represents the /nokia-conf/configure/service/vprn/bgp/neighbor/graceful-restart YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart struct {
	GrNotification  *bool                                                                    `path:"gr-notification" module:"nokia-conf"`
	LongLived       *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived `path:"long-lived" module:"nokia-conf" yangPresence:"true"`
	RestartTime     *uint32                                                                  `path:"restart-time" module:"nokia-conf"`
	StaleRoutesTime *uint32                                                                  `path:"stale-routes-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart) IsYANGGoStruct() {}

// GetOrCreateLongLived retrieves the value of the LongLived field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart) GetOrCreateLongLived() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived {
	if t.LongLived != nil {
		return t.LongLived
	}
	t.LongLived = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived{}
	return t.LongLived
}

// GetLongLived returns the value of the LongLived struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart. If the receiver or the field LongLived is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart) GetLongLived() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived {
	if t != nil && t.LongLived != nil {
		return t.LongLived
	}
	return nil
}

// GetGrNotification retrieves the value of the leaf GrNotification from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrNotification is set, it can
// safely use t.GetGrNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart) GetGrNotification() bool {
	if t == nil || t.GrNotification == nil {
		return false
	}
	return *t.GrNotification
}

// GetRestartTime retrieves the value of the leaf RestartTime from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTime is set, it can
// safely use t.GetRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart) GetRestartTime() uint32 {
	if t == nil || t.RestartTime == nil {
		return 300
	}
	return *t.RestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart) GetStaleRoutesTime() uint32 {
	if t == nil || t.StaleRoutesTime == nil {
		return 360
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GrNotification == nil {
		var v bool = false
		t.GrNotification = &v
	}
	if t.RestartTime == nil {
		var v uint32 = 300
		t.RestartTime = &v
	}
	if t.StaleRoutesTime == nil {
		var v uint32 = 360
		t.StaleRoutesTime = &v
	}
	t.LongLived.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived represents the /nokia-conf/configure/service/vprn/bgp/neighbor/graceful-restart/long-lived YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived struct {
	AdvertiseStaleToAllNeighbors *bool                                                                                                                            `path:"advertise-stale-to-all-neighbors" module:"nokia-conf"`
	AdvertisedStaleTime          *uint32                                                                                                                          `path:"advertised-stale-time" module:"nokia-conf"`
	Family                       map[E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers]*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family `path:"family" module:"nokia-conf"`
	ForwardingBitsSet            E_NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_ForwardingBitsSet                                      `path:"forwarding-bits-set" module:"nokia-conf"`
	HelperOverrideRestartTime    *uint32                                                                                                                          `path:"helper-override-restart-time" module:"nokia-conf"`
	HelperOverrideStaleTime      *uint32                                                                                                                          `path:"helper-override-stale-time" module:"nokia-conf"`
	WithoutNoExport              *bool                                                                                                                            `path:"without-no-export" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) NewFamily(FamilyType E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers]*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) RenameFamily(oldK, newK E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) GetOrCreateFamily(FamilyType E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) GetFamily(FamilyType E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) DeleteFamily(FamilyType E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family struct to the
// list Family of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) AppendFamily(v *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers]*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetAdvertiseStaleToAllNeighbors retrieves the value of the leaf AdvertiseStaleToAllNeighbors from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseStaleToAllNeighbors is set, it can
// safely use t.GetAdvertiseStaleToAllNeighbors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseStaleToAllNeighbors == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) GetAdvertiseStaleToAllNeighbors() bool {
	if t == nil || t.AdvertiseStaleToAllNeighbors == nil {
		return false
	}
	return *t.AdvertiseStaleToAllNeighbors
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetForwardingBitsSet retrieves the value of the leaf ForwardingBitsSet from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingBitsSet is set, it can
// safely use t.GetForwardingBitsSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingBitsSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) GetForwardingBitsSet() E_NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_ForwardingBitsSet {
	if t == nil || t.ForwardingBitsSet == 0 {
		return NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	return t.ForwardingBitsSet
}

// GetHelperOverrideRestartTime retrieves the value of the leaf HelperOverrideRestartTime from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideRestartTime is set, it can
// safely use t.GetHelperOverrideRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideRestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) GetHelperOverrideRestartTime() uint32 {
	if t == nil || t.HelperOverrideRestartTime == nil {
		return 0
	}
	return *t.HelperOverrideRestartTime
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 0
	}
	return *t.HelperOverrideStaleTime
}

// GetWithoutNoExport retrieves the value of the leaf WithoutNoExport from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WithoutNoExport is set, it can
// safely use t.GetWithoutNoExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WithoutNoExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) GetWithoutNoExport() bool {
	if t == nil || t.WithoutNoExport == nil {
		return false
	}
	return *t.WithoutNoExport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseStaleToAllNeighbors == nil {
		var v bool = false
		t.AdvertiseStaleToAllNeighbors = &v
	}
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.ForwardingBitsSet == 0 {
		t.ForwardingBitsSet = NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	if t.WithoutNoExport == nil {
		var v bool = false
		t.WithoutNoExport = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family represents the /nokia-conf/configure/service/vprn/bgp/neighbor/graceful-restart/long-lived/family YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family struct {
	AdvertisedStaleTime     *uint32                                      `path:"advertised-stale-time" module:"nokia-conf"`
	ApplyGroups             []string                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	FamilyType              E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers `path:"family-type" module:"nokia-conf"`
	HelperOverrideStaleTime *uint32                                      `path:"helper-override-stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) IsYANGGoStruct() {
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetFamilyType() E_NokiaTypesBgp_VprnBgpLlgrFamilyIdentifiers {
	if t == nil || t.FamilyType == 0 {
		return 0
	}
	return t.FamilyType
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 16777216
	}
	return *t.HelperOverrideStaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.HelperOverrideStaleTime == nil {
		var v uint32 = 16777216
		t.HelperOverrideStaleTime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_GracefulRestart_LongLived_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime represents the /nokia-conf/configure/service/vprn/bgp/neighbor/hold-time YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime struct {
	MinimumHoldTime *int32 `path:"minimum-hold-time" module:"nokia-conf"`
	Seconds         *int32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime) IsYANGGoStruct() {}

// GetMinimumHoldTime retrieves the value of the leaf MinimumHoldTime from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumHoldTime is set, it can
// safely use t.GetMinimumHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime) GetMinimumHoldTime() int32 {
	if t == nil || t.MinimumHoldTime == nil {
		return 0
	}
	return *t.MinimumHoldTime
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime) GetSeconds() int32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinimumHoldTime == nil {
		var v int32 = 0
		t.MinimumHoldTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import represents the /nokia-conf/configure/service/vprn/bgp/neighbor/import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Import) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth represents the /nokia-conf/configure/service/vprn/bgp/neighbor/link-bandwidth YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth struct {
	AcceptFromEbgp     *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp     `path:"accept-from-ebgp" module:"nokia-conf" yangPresence:"true"`
	AddToReceivedEbgp  *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp  `path:"add-to-received-ebgp" module:"nokia-conf" yangPresence:"true"`
	AggregateUsedPaths *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths `path:"aggregate-used-paths" module:"nokia-conf" yangPresence:"true"`
	SendToEbgp         *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp         `path:"send-to-ebgp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) IsYANGGoStruct() {}

// GetOrCreateAcceptFromEbgp retrieves the value of the AcceptFromEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) GetOrCreateAcceptFromEbgp() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp {
	if t.AcceptFromEbgp != nil {
		return t.AcceptFromEbgp
	}
	t.AcceptFromEbgp = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp{}
	return t.AcceptFromEbgp
}

// GetOrCreateAddToReceivedEbgp retrieves the value of the AddToReceivedEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) GetOrCreateAddToReceivedEbgp() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp {
	if t.AddToReceivedEbgp != nil {
		return t.AddToReceivedEbgp
	}
	t.AddToReceivedEbgp = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp{}
	return t.AddToReceivedEbgp
}

// GetOrCreateAggregateUsedPaths retrieves the value of the AggregateUsedPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) GetOrCreateAggregateUsedPaths() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths {
	if t.AggregateUsedPaths != nil {
		return t.AggregateUsedPaths
	}
	t.AggregateUsedPaths = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths{}
	return t.AggregateUsedPaths
}

// GetOrCreateSendToEbgp retrieves the value of the SendToEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) GetOrCreateSendToEbgp() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp {
	if t.SendToEbgp != nil {
		return t.SendToEbgp
	}
	t.SendToEbgp = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp{}
	return t.SendToEbgp
}

// GetAcceptFromEbgp returns the value of the AcceptFromEbgp struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth. If the receiver or the field AcceptFromEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) GetAcceptFromEbgp() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp {
	if t != nil && t.AcceptFromEbgp != nil {
		return t.AcceptFromEbgp
	}
	return nil
}

// GetAddToReceivedEbgp returns the value of the AddToReceivedEbgp struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth. If the receiver or the field AddToReceivedEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) GetAddToReceivedEbgp() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp {
	if t != nil && t.AddToReceivedEbgp != nil {
		return t.AddToReceivedEbgp
	}
	return nil
}

// GetAggregateUsedPaths returns the value of the AggregateUsedPaths struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth. If the receiver or the field AggregateUsedPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) GetAggregateUsedPaths() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths {
	if t != nil && t.AggregateUsedPaths != nil {
		return t.AggregateUsedPaths
	}
	return nil
}

// GetSendToEbgp returns the value of the SendToEbgp struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth. If the receiver or the field SendToEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) GetSendToEbgp() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp {
	if t != nil && t.SendToEbgp != nil {
		return t.SendToEbgp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AcceptFromEbgp.PopulateDefaults()
	t.AddToReceivedEbgp.PopulateDefaults()
	t.AggregateUsedPaths.PopulateDefaults()
	t.SendToEbgp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp represents the /nokia-conf/configure/service/vprn/bgp/neighbor/link-bandwidth/accept-from-ebgp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp represents the /nokia-conf/configure/service/vprn/bgp/neighbor/link-bandwidth/add-to-received-ebgp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) IsYANGGoStruct() {
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths represents the /nokia-conf/configure/service/vprn/bgp/neighbor/link-bandwidth/aggregate-used-paths YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) IsYANGGoStruct() {
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp represents the /nokia-conf/configure/service/vprn/bgp/neighbor/link-bandwidth/send-to-ebgp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LinkBandwidth_SendToEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs represents the /nokia-conf/configure/service/vprn/bgp/neighbor/local-as YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"nokia-conf"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"nokia-conf"`
	Private         *bool   `path:"private" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return true
	}
	return *t.PrependGlobalAs
}

// GetPrivate retrieves the value of the leaf Private from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Private is set, it can
// safely use t.GetPrivate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Private == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs) GetPrivate() bool {
	if t == nil || t.Private == nil {
		return false
	}
	return *t.Private
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrependGlobalAs == nil {
		var v bool = true
		t.PrependGlobalAs = &v
	}
	if t.Private == nil {
		var v bool = false
		t.Private = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_LocalAs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor represents the /nokia-conf/configure/service/vprn/bgp/neighbor/monitor YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor struct {
	AdminState         E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	AllStations        *bool                                                                     `path:"all-stations" module:"nokia-conf"`
	ApplyGroups        []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteMonitoring    *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring    `path:"route-monitoring" module:"nokia-conf"`
	Station            map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station `path:"station" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) IsYANGGoStruct() {}

// NewStation creates a new entry in the Station list of the
// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) NewStation(StationName string) (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station)
	}

	key := StationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Station[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Station", key)
	}

	t.Station[key] = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station{
		StationName: &StationName,
	}

	return t.Station[key], nil
}

// RenameStation renames an entry in the list Station within
// the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) RenameStation(oldK, newK string) error {
	if _, ok := t.Station[newK]; ok {
		return fmt.Errorf("key %v already exists in Station", newK)
	}

	e, ok := t.Station[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Station", oldK)
	}
	e.StationName = &newK

	t.Station[newK] = e
	delete(t.Station, oldK)
	return nil
}

// GetOrCreateStation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) GetOrCreateStation(StationName string) *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station {

	key := StationName

	if v, ok := t.Station[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStation(StationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStation got unexpected error: %v", err))
	}
	return v
}

// GetStation retrieves the value with the specified key from
// the Station map field of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) GetStation(StationName string) *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station {

	if t == nil {
		return nil
	}

	key := StationName

	if lm, ok := t.Station[key]; ok {
		return lm
	}
	return nil
}

// DeleteStation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) DeleteStation(StationName string) {
	key := StationName

	delete(t.Station, key)
}

// AppendStation appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station struct to the
// list Station of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) AppendStation(v *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station) error {
	if v.StationName == nil {
		return fmt.Errorf("invalid nil key received for StationName")
	}

	key := *v.StationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station)
	}

	if _, ok := t.Station[key]; ok {
		return fmt.Errorf("duplicate key for list Station %v", key)
	}

	t.Station[key] = v
	return nil
}

// GetOrCreateRouteMonitoring retrieves the value of the RouteMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) GetOrCreateRouteMonitoring() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring {
	if t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	t.RouteMonitoring = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring{}
	return t.RouteMonitoring
}

// GetRouteMonitoring returns the value of the RouteMonitoring struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor. If the receiver or the field RouteMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) GetRouteMonitoring() *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring {
	if t != nil && t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllStations retrieves the value of the leaf AllStations from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllStations is set, it can
// safely use t.GetAllStations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllStations == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) GetAllStations() bool {
	if t == nil || t.AllStations == nil {
		return false
	}
	return *t.AllStations
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllStations == nil {
		var v bool = false
		t.AllStations = &v
	}
	t.RouteMonitoring.PopulateDefaults()
	for _, e := range t.Station {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring represents the /nokia-conf/configure/service/vprn/bgp/neighbor/monitor/route-monitoring YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring struct {
	PostPolicy *bool `path:"post-policy" module:"nokia-conf"`
	PrePolicy  *bool `path:"pre-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring) IsYANGGoStruct() {}

// GetPostPolicy retrieves the value of the leaf PostPolicy from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostPolicy is set, it can
// safely use t.GetPostPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring) GetPostPolicy() bool {
	if t == nil || t.PostPolicy == nil {
		return false
	}
	return *t.PostPolicy
}

// GetPrePolicy retrieves the value of the leaf PrePolicy from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrePolicy is set, it can
// safely use t.GetPrePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring) GetPrePolicy() bool {
	if t == nil || t.PrePolicy == nil {
		return false
	}
	return *t.PrePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PostPolicy == nil {
		var v bool = false
		t.PostPolicy = &v
	}
	if t.PrePolicy == nil {
		var v bool = false
		t.PrePolicy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_RouteMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station represents the /nokia-conf/configure/service/vprn/bgp/neighbor/monitor/station YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station struct {
	StationName *string `path:"station-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station) IsYANGGoStruct() {}

// GetStationName retrieves the value of the leaf StationName from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StationName is set, it can
// safely use t.GetStationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station) GetStationName() string {
	if t == nil || t.StationName == nil {
		return ""
	}
	return *t.StationName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StationName == nil {
		return nil, fmt.Errorf("nil value for key StationName")
	}

	return map[string]interface{}{
		"station-name": *t.StationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_Monitor_Station) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation represents the /nokia-conf/configure/service/vprn/bgp/neighbor/origin-validation YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_OriginValidation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit represents the /nokia-conf/configure/service/vprn/bgp/neighbor/prefix-limit YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Family             E_NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit_Family `path:"family" module:"nokia-conf"`
	IdleTimeout        *int32                                                             `path:"idle-timeout" module:"nokia-conf"`
	LogOnly            *bool                                                              `path:"log-only" module:"nokia-conf"`
	Maximum            *uint32                                                            `path:"maximum" module:"nokia-conf"`
	PostImport         *bool                                                              `path:"post-import" module:"nokia-conf"`
	Threshold          *uint32                                                            `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFamily retrieves the value of the leaf Family from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) GetFamily() E_NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit_Family {
	if t == nil || t.Family == 0 {
		return 0
	}
	return t.Family
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) GetIdleTimeout() int32 {
	if t == nil || t.IdleTimeout == nil {
		return 0
	}
	return *t.IdleTimeout
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 0
	}
	return *t.Maximum
}

// GetPostImport retrieves the value of the leaf PostImport from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostImport is set, it can
// safely use t.GetPostImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) GetPostImport() bool {
	if t == nil || t.PostImport == nil {
		return false
	}
	return *t.PostImport
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.PostImport == nil {
		var v bool = false
		t.PostImport = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family": t.Family,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_PrefixLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate represents the /nokia-conf/configure/service/vprn/bgp/neighbor/remove-private YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate struct {
	Limited    *bool `path:"limited" module:"nokia-conf"`
	Replace    *bool `path:"replace" module:"nokia-conf"`
	SkipPeerAs *bool `path:"skip-peer-as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate) IsYANGGoStruct() {}

// GetLimited retrieves the value of the leaf Limited from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limited is set, it can
// safely use t.GetLimited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate) GetLimited() bool {
	if t == nil || t.Limited == nil {
		return false
	}
	return *t.Limited
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate) GetReplace() bool {
	if t == nil || t.Replace == nil {
		return false
	}
	return *t.Replace
}

// GetSkipPeerAs retrieves the value of the leaf SkipPeerAs from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SkipPeerAs is set, it can
// safely use t.GetSkipPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SkipPeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate) GetSkipPeerAs() bool {
	if t == nil || t.SkipPeerAs == nil {
		return false
	}
	return *t.SkipPeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limited == nil {
		var v bool = false
		t.Limited = &v
	}
	if t.Replace == nil {
		var v bool = false
		t.Replace = &v
	}
	if t.SkipPeerAs == nil {
		var v bool = false
		t.SkipPeerAs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_RemovePrivate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities represents the /nokia-conf/configure/service/vprn/bgp/neighbor/send-communities YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities struct {
	Extended *bool `path:"extended" module:"nokia-conf"`
	Large    *bool `path:"large" module:"nokia-conf"`
	Standard *bool `path:"standard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities) IsYANGGoStruct() {}

// GetExtended retrieves the value of the leaf Extended from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetLarge retrieves the value of the leaf Large from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities) GetLarge() bool {
	if t == nil || t.Large == nil {
		return false
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return false
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendCommunities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault represents the /nokia-conf/configure/service/vprn/bgp/neighbor/send-default YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault struct {
	ExportPolicy *string `path:"export-policy" module:"nokia-conf"`
	Ipv4         *bool   `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool   `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault) IsYANGGoStruct() {}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault.
func (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor_SendDefault) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution represents the /nokia-conf/configure/service/vprn/bgp/next-hop-resolution YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution struct {
	Policy       *string `path:"policy" module:"nokia-conf"`
	UseBgpRoutes *bool   `path:"use-bgp-routes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetUseBgpRoutes retrieves the value of the leaf UseBgpRoutes from the NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseBgpRoutes is set, it can
// safely use t.GetUseBgpRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseBgpRoutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution) GetUseBgpRoutes() bool {
	if t == nil || t.UseBgpRoutes == nil {
		return false
	}
	return *t.UseBgpRoutes
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseBgpRoutes == nil {
		var v bool = false
		t.UseBgpRoutes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution.
func (*NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate represents the /nokia-conf/configure/service/vprn/bgp/remove-private YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate struct {
	Limited    *bool `path:"limited" module:"nokia-conf"`
	Replace    *bool `path:"replace" module:"nokia-conf"`
	SkipPeerAs *bool `path:"skip-peer-as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate) IsYANGGoStruct() {}

// GetLimited retrieves the value of the leaf Limited from the NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limited is set, it can
// safely use t.GetLimited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate) GetLimited() bool {
	if t == nil || t.Limited == nil {
		return false
	}
	return *t.Limited
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate) GetReplace() bool {
	if t == nil || t.Replace == nil {
		return false
	}
	return *t.Replace
}

// GetSkipPeerAs retrieves the value of the leaf SkipPeerAs from the NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SkipPeerAs is set, it can
// safely use t.GetSkipPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SkipPeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate) GetSkipPeerAs() bool {
	if t == nil || t.SkipPeerAs == nil {
		return false
	}
	return *t.SkipPeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limited == nil {
		var v bool = false
		t.Limited = &v
	}
	if t.Replace == nil {
		var v bool = false
		t.Replace = &v
	}
	if t.SkipPeerAs == nil {
		var v bool = false
		t.SkipPeerAs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RibManagement represents the /nokia-conf/configure/service/vprn/bgp/rib-management YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RibManagement struct {
	Ipv4      *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4      `path:"ipv4" module:"nokia-conf"`
	Ipv6      *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6      `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4 `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6 `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RibManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) GetOrCreateIpv6() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLabelIpv4 retrieves the value of the LabelIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) GetOrCreateLabelIpv4() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4 {
	if t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	t.LabelIpv4 = &NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4{}
	return t.LabelIpv4
}

// GetOrCreateLabelIpv6 retrieves the value of the LabelIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) GetOrCreateLabelIpv6() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6 {
	if t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	t.LabelIpv6 = &NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6{}
	return t.LabelIpv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_RibManagement. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) GetIpv4() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_RibManagement. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) GetIpv6() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLabelIpv4 returns the value of the LabelIpv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_RibManagement. If the receiver or the field LabelIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) GetLabelIpv4() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4 {
	if t != nil && t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	return nil
}

// GetLabelIpv6 returns the value of the LabelIpv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_RibManagement. If the receiver or the field LabelIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) GetLabelIpv6() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6 {
	if t != nil && t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LabelIpv4.PopulateDefaults()
	t.LabelIpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RibManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RibManagement.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4 represents the /nokia-conf/configure/service/vprn/bgp/rib-management/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4 struct {
	LeakImport       *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport       `path:"leak-import" module:"nokia-conf"`
	RouteTableImport *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport `path:"route-table-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4) IsYANGGoStruct() {}

// GetOrCreateLeakImport retrieves the value of the LeakImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4) GetOrCreateLeakImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport {
	if t.LeakImport != nil {
		return t.LeakImport
	}
	t.LeakImport = &NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport{}
	return t.LeakImport
}

// GetOrCreateRouteTableImport retrieves the value of the RouteTableImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4) GetOrCreateRouteTableImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport {
	if t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	t.RouteTableImport = &NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport{}
	return t.RouteTableImport
}

// GetLeakImport returns the value of the LeakImport struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4. If the receiver or the field LeakImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4) GetLeakImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport {
	if t != nil && t.LeakImport != nil {
		return t.LeakImport
	}
	return nil
}

// GetRouteTableImport returns the value of the RouteTableImport struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4. If the receiver or the field RouteTableImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4) GetRouteTableImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport {
	if t != nil && t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LeakImport.PopulateDefaults()
	t.RouteTableImport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport represents the /nokia-conf/configure/service/vprn/bgp/rib-management/ipv4/leak-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_LeakImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport represents the /nokia-conf/configure/service/vprn/bgp/rib-management/ipv4/route-table-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PolicyName         *string  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv4_RouteTableImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6 represents the /nokia-conf/configure/service/vprn/bgp/rib-management/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6 struct {
	LeakImport       *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport       `path:"leak-import" module:"nokia-conf"`
	RouteTableImport *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport `path:"route-table-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6) IsYANGGoStruct() {}

// GetOrCreateLeakImport retrieves the value of the LeakImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6) GetOrCreateLeakImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport {
	if t.LeakImport != nil {
		return t.LeakImport
	}
	t.LeakImport = &NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport{}
	return t.LeakImport
}

// GetOrCreateRouteTableImport retrieves the value of the RouteTableImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6) GetOrCreateRouteTableImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport {
	if t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	t.RouteTableImport = &NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport{}
	return t.RouteTableImport
}

// GetLeakImport returns the value of the LeakImport struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6. If the receiver or the field LeakImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6) GetLeakImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport {
	if t != nil && t.LeakImport != nil {
		return t.LeakImport
	}
	return nil
}

// GetRouteTableImport returns the value of the RouteTableImport struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6. If the receiver or the field RouteTableImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6) GetRouteTableImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport {
	if t != nil && t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LeakImport.PopulateDefaults()
	t.RouteTableImport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport represents the /nokia-conf/configure/service/vprn/bgp/rib-management/ipv6/leak-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_LeakImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport represents the /nokia-conf/configure/service/vprn/bgp/rib-management/ipv6/route-table-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PolicyName         *string  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_Ipv6_RouteTableImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4 represents the /nokia-conf/configure/service/vprn/bgp/rib-management/label-ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4 struct {
	LeakImport       *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport       `path:"leak-import" module:"nokia-conf"`
	RouteTableImport *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport `path:"route-table-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4) IsYANGGoStruct() {}

// GetOrCreateLeakImport retrieves the value of the LeakImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4) GetOrCreateLeakImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport {
	if t.LeakImport != nil {
		return t.LeakImport
	}
	t.LeakImport = &NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport{}
	return t.LeakImport
}

// GetOrCreateRouteTableImport retrieves the value of the RouteTableImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4) GetOrCreateRouteTableImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport {
	if t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	t.RouteTableImport = &NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport{}
	return t.RouteTableImport
}

// GetLeakImport returns the value of the LeakImport struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4. If the receiver or the field LeakImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4) GetLeakImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport {
	if t != nil && t.LeakImport != nil {
		return t.LeakImport
	}
	return nil
}

// GetRouteTableImport returns the value of the RouteTableImport struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4. If the receiver or the field RouteTableImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4) GetRouteTableImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport {
	if t != nil && t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LeakImport.PopulateDefaults()
	t.RouteTableImport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport represents the /nokia-conf/configure/service/vprn/bgp/rib-management/label-ipv4/leak-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_LeakImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport represents the /nokia-conf/configure/service/vprn/bgp/rib-management/label-ipv4/route-table-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PolicyName         *string  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv4_RouteTableImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6 represents the /nokia-conf/configure/service/vprn/bgp/rib-management/label-ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6 struct {
	LeakImport *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport `path:"leak-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6) IsYANGGoStruct() {}

// GetOrCreateLeakImport retrieves the value of the LeakImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6) GetOrCreateLeakImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport {
	if t.LeakImport != nil {
		return t.LeakImport
	}
	t.LeakImport = &NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport{}
	return t.LeakImport
}

// GetLeakImport returns the value of the LeakImport struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6. If the receiver or the field LeakImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6) GetLeakImport() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport {
	if t != nil && t.LeakImport != nil {
		return t.LeakImport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LeakImport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport represents the /nokia-conf/configure/service/vprn/bgp/rib-management/label-ipv6/leak-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport.
func (*NokiaConf_Configure_Service_Vprn_Bgp_RibManagement_LabelIpv6_LeakImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities represents the /nokia-conf/configure/service/vprn/bgp/send-communities YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities struct {
	Extended *bool `path:"extended" module:"nokia-conf"`
	Large    *bool `path:"large" module:"nokia-conf"`
	Standard *bool `path:"standard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities) IsYANGGoStruct() {}

// GetExtended retrieves the value of the leaf Extended from the NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return true
	}
	return *t.Extended
}

// GetLarge retrieves the value of the leaf Large from the NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities) GetLarge() bool {
	if t == nil || t.Large == nil {
		return true
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return true
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Extended == nil {
		var v bool = true
		t.Extended = &v
	}
	if t.Large == nil {
		var v bool = true
		t.Large = &v
	}
	if t.Standard == nil {
		var v bool = true
		t.Standard = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities.
func (*NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp_SendDefault represents the /nokia-conf/configure/service/vprn/bgp/send-default YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp_SendDefault struct {
	ExportPolicy *string `path:"export-policy" module:"nokia-conf"`
	Ipv4         *bool   `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool   `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp_SendDefault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp_SendDefault) IsYANGGoStruct() {}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Service_Vprn_Bgp_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendDefault) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Bgp_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendDefault) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Bgp_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendDefault) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp_SendDefault
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendDefault) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendDefault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp_SendDefault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendDefault) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp_SendDefault) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp_SendDefault.
func (*NokiaConf_Configure_Service_Vprn_Bgp_SendDefault) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Confederation represents the /nokia-conf/configure/service/vprn/confederation YANG schema element.
type NokiaConf_Configure_Service_Vprn_Confederation struct {
	ConfedAsNum *uint32                                                            `path:"confed-as-num" module:"nokia-conf"`
	Members     map[uint32]*NokiaConf_Configure_Service_Vprn_Confederation_Members `path:"members" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Confederation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Confederation) IsYANGGoStruct() {}

// NewMembers creates a new entry in the Members list of the
// NokiaConf_Configure_Service_Vprn_Confederation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Confederation) NewMembers(AsNumber uint32) (*NokiaConf_Configure_Service_Vprn_Confederation_Members, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Members == nil {
		t.Members = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Confederation_Members)
	}

	key := AsNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Members[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Members", key)
	}

	t.Members[key] = &NokiaConf_Configure_Service_Vprn_Confederation_Members{
		AsNumber: &AsNumber,
	}

	return t.Members[key], nil
}

// RenameMembers renames an entry in the list Members within
// the NokiaConf_Configure_Service_Vprn_Confederation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Confederation) RenameMembers(oldK, newK uint32) error {
	if _, ok := t.Members[newK]; ok {
		return fmt.Errorf("key %v already exists in Members", newK)
	}

	e, ok := t.Members[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Members", oldK)
	}
	e.AsNumber = &newK

	t.Members[newK] = e
	delete(t.Members, oldK)
	return nil
}

// GetOrCreateMembers retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Confederation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Confederation) GetOrCreateMembers(AsNumber uint32) *NokiaConf_Configure_Service_Vprn_Confederation_Members {

	key := AsNumber

	if v, ok := t.Members[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMembers(AsNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMembers got unexpected error: %v", err))
	}
	return v
}

// GetMembers retrieves the value with the specified key from
// the Members map field of NokiaConf_Configure_Service_Vprn_Confederation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Confederation) GetMembers(AsNumber uint32) *NokiaConf_Configure_Service_Vprn_Confederation_Members {

	if t == nil {
		return nil
	}

	key := AsNumber

	if lm, ok := t.Members[key]; ok {
		return lm
	}
	return nil
}

// DeleteMembers deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Confederation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Confederation) DeleteMembers(AsNumber uint32) {
	key := AsNumber

	delete(t.Members, key)
}

// AppendMembers appends the supplied NokiaConf_Configure_Service_Vprn_Confederation_Members struct to the
// list Members of NokiaConf_Configure_Service_Vprn_Confederation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Confederation_Members already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Confederation) AppendMembers(v *NokiaConf_Configure_Service_Vprn_Confederation_Members) error {
	if v.AsNumber == nil {
		return fmt.Errorf("invalid nil key received for AsNumber")
	}

	key := *v.AsNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Members == nil {
		t.Members = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Confederation_Members)
	}

	if _, ok := t.Members[key]; ok {
		return fmt.Errorf("duplicate key for list Members %v", key)
	}

	t.Members[key] = v
	return nil
}

// GetConfedAsNum retrieves the value of the leaf ConfedAsNum from the NokiaConf_Configure_Service_Vprn_Confederation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConfedAsNum is set, it can
// safely use t.GetConfedAsNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConfedAsNum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Confederation) GetConfedAsNum() uint32 {
	if t == nil || t.ConfedAsNum == nil {
		return 0
	}
	return *t.ConfedAsNum
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Confederation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Confederation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Members {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Confederation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Confederation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Confederation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Confederation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Confederation.
func (*NokiaConf_Configure_Service_Vprn_Confederation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Confederation_Members represents the /nokia-conf/configure/service/vprn/confederation/members YANG schema element.
type NokiaConf_Configure_Service_Vprn_Confederation_Members struct {
	AsNumber *uint32 `path:"as-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Confederation_Members implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Confederation_Members) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Service_Vprn_Confederation_Members
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Confederation_Members) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Confederation_Members
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Confederation_Members) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Confederation_Members struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Confederation_Members) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AsNumber == nil {
		return nil, fmt.Errorf("nil value for key AsNumber")
	}

	return map[string]interface{}{
		"as-number": *t.AsNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Confederation_Members) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Confederation_Members"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Confederation_Members) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Confederation_Members) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Confederation_Members.
func (*NokiaConf_Configure_Service_Vprn_Confederation_Members) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer represents the /nokia-conf/configure/service/vprn/dhcp-server YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer struct {
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Dhcpv4             map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4 `path:"dhcpv4" module:"nokia-conf"`
	Dhcpv6             map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6 `path:"dhcpv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer) IsYANGGoStruct() {}

// NewDhcpv4 creates a new entry in the Dhcpv4 list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) NewDhcpv4(Name string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv4 == nil {
		t.Dhcpv4 = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcpv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcpv4", key)
	}

	t.Dhcpv4[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4{
		Name: &Name,
	}

	return t.Dhcpv4[key], nil
}

// RenameDhcpv4 renames an entry in the list Dhcpv4 within
// the NokiaConf_Configure_Service_Vprn_DhcpServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) RenameDhcpv4(oldK, newK string) error {
	if _, ok := t.Dhcpv4[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcpv4", newK)
	}

	e, ok := t.Dhcpv4[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcpv4", oldK)
	}
	e.Name = &newK

	t.Dhcpv4[newK] = e
	delete(t.Dhcpv4, oldK)
	return nil
}

// GetOrCreateDhcpv4 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) GetOrCreateDhcpv4(Name string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4 {

	key := Name

	if v, ok := t.Dhcpv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcpv4(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcpv4 got unexpected error: %v", err))
	}
	return v
}

// GetDhcpv4 retrieves the value with the specified key from
// the Dhcpv4 map field of NokiaConf_Configure_Service_Vprn_DhcpServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) GetDhcpv4(Name string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4 {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Dhcpv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcpv4 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) DeleteDhcpv4(Name string) {
	key := Name

	delete(t.Dhcpv4, key)
}

// AppendDhcpv4 appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4 struct to the
// list Dhcpv4 of NokiaConf_Configure_Service_Vprn_DhcpServer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) AppendDhcpv4(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv4 == nil {
		t.Dhcpv4 = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4)
	}

	if _, ok := t.Dhcpv4[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcpv4 %v", key)
	}

	t.Dhcpv4[key] = v
	return nil
}

// NewDhcpv6 creates a new entry in the Dhcpv6 list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) NewDhcpv6(Name string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv6 == nil {
		t.Dhcpv6 = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcpv6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcpv6", key)
	}

	t.Dhcpv6[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6{
		Name: &Name,
	}

	return t.Dhcpv6[key], nil
}

// RenameDhcpv6 renames an entry in the list Dhcpv6 within
// the NokiaConf_Configure_Service_Vprn_DhcpServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) RenameDhcpv6(oldK, newK string) error {
	if _, ok := t.Dhcpv6[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcpv6", newK)
	}

	e, ok := t.Dhcpv6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcpv6", oldK)
	}
	e.Name = &newK

	t.Dhcpv6[newK] = e
	delete(t.Dhcpv6, oldK)
	return nil
}

// GetOrCreateDhcpv6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) GetOrCreateDhcpv6(Name string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6 {

	key := Name

	if v, ok := t.Dhcpv6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcpv6(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcpv6 got unexpected error: %v", err))
	}
	return v
}

// GetDhcpv6 retrieves the value with the specified key from
// the Dhcpv6 map field of NokiaConf_Configure_Service_Vprn_DhcpServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) GetDhcpv6(Name string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6 {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Dhcpv6[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcpv6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) DeleteDhcpv6(Name string) {
	key := Name

	delete(t.Dhcpv6, key)
}

// AppendDhcpv6 appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6 struct to the
// list Dhcpv6 of NokiaConf_Configure_Service_Vprn_DhcpServer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) AppendDhcpv6(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv6 == nil {
		t.Dhcpv6 = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6)
	}

	if _, ok := t.Dhcpv6[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcpv6 %v", key)
	}

	t.Dhcpv6[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Dhcpv4 {
		e.PopulateDefaults()
	}
	for _, e := range t.Dhcpv6 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4 represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4 struct {
	AdminState         E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                 `path:"description" module:"nokia-conf"`
	Failover           *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover            `path:"failover" module:"nokia-conf"`
	ForceRenews        *bool                                                                   `path:"force-renews" module:"nokia-conf"`
	LeaseHold          *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold           `path:"lease-hold" module:"nokia-conf"`
	Name               *string                                                                 `path:"name" module:"nokia-conf"`
	Pool               map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool     `path:"pool" module:"nokia-conf"`
	PoolSelection      *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection       `path:"pool-selection" module:"nokia-conf"`
	UserDb             *string                                                                 `path:"user-db" module:"nokia-conf"`
	UserIdentification E_NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_UserIdentification `path:"user-identification" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) NewPool(PoolName string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool)
	}

	key := PoolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool{
		PoolName: &PoolName,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.PoolName = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetOrCreatePool(PoolName string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool {

	key := PoolName

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(PoolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetPool(PoolName string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool {

	if t == nil {
		return nil
	}

	key := PoolName

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) DeletePool(PoolName string) {
	key := PoolName

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool struct to the
// list Pool of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) AppendPool(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) error {
	if v.PoolName == nil {
		return fmt.Errorf("invalid nil key received for PoolName")
	}

	key := *v.PoolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetOrCreateFailover() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover{}
	return t.Failover
}

// GetOrCreateLeaseHold retrieves the value of the LeaseHold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetOrCreateLeaseHold() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold {
	if t.LeaseHold != nil {
		return t.LeaseHold
	}
	t.LeaseHold = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold{}
	return t.LeaseHold
}

// GetOrCreatePoolSelection retrieves the value of the PoolSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetOrCreatePoolSelection() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection {
	if t.PoolSelection != nil {
		return t.PoolSelection
	}
	t.PoolSelection = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection{}
	return t.PoolSelection
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetFailover() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetLeaseHold returns the value of the LeaseHold struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4. If the receiver or the field LeaseHold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetLeaseHold() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold {
	if t != nil && t.LeaseHold != nil {
		return t.LeaseHold
	}
	return nil
}

// GetPoolSelection returns the value of the PoolSelection struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4. If the receiver or the field PoolSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetPoolSelection() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection {
	if t != nil && t.PoolSelection != nil {
		return t.PoolSelection
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetForceRenews retrieves the value of the leaf ForceRenews from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceRenews is set, it can
// safely use t.GetForceRenews() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceRenews == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetForceRenews() bool {
	if t == nil || t.ForceRenews == nil {
		return false
	}
	return *t.ForceRenews
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// GetUserIdentification retrieves the value of the leaf UserIdentification from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserIdentification is set, it can
// safely use t.GetUserIdentification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserIdentification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) GetUserIdentification() E_NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_UserIdentification {
	if t == nil || t.UserIdentification == 0 {
		return 0
	}
	return t.UserIdentification
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ForceRenews == nil {
		var v bool = false
		t.ForceRenews = &v
	}
	t.Failover.PopulateDefaults()
	t.LeaseHold.PopulateDefaults()
	t.PoolSelection.PopulateDefaults()
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/failover YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                        `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                      `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                      `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                      `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) NewPeer(Address string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) GetPeer(Address string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) AppendPeer(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/failover/peer YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/lease-hold YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold struct {
	AdditionalScenarios *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios `path:"additional-scenarios" module:"nokia-conf"`
	Time                *uint32                                                                           `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold) IsYANGGoStruct() {}

// GetOrCreateAdditionalScenarios retrieves the value of the AdditionalScenarios field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold) GetOrCreateAdditionalScenarios() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios {
	if t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	t.AdditionalScenarios = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios{}
	return t.AdditionalScenarios
}

// GetAdditionalScenarios returns the value of the AdditionalScenarios struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold. If the receiver or the field AdditionalScenarios is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold) GetAdditionalScenarios() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios {
	if t != nil && t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	return nil
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdditionalScenarios.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/lease-hold/additional-scenarios YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios struct {
	InternalLeaseIpsec *bool `path:"internal-lease-ipsec" module:"nokia-conf"`
	SolicitedRelease   *bool `path:"solicited-release" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) IsYANGGoStruct() {
}

// GetInternalLeaseIpsec retrieves the value of the leaf InternalLeaseIpsec from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalLeaseIpsec is set, it can
// safely use t.GetInternalLeaseIpsec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalLeaseIpsec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) GetInternalLeaseIpsec() bool {
	if t == nil || t.InternalLeaseIpsec == nil {
		return false
	}
	return *t.InternalLeaseIpsec
}

// GetSolicitedRelease retrieves the value of the leaf SolicitedRelease from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitedRelease is set, it can
// safely use t.GetSolicitedRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitedRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) GetSolicitedRelease() bool {
	if t == nil || t.SolicitedRelease == nil {
		return false
	}
	return *t.SolicitedRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InternalLeaseIpsec == nil {
		var v bool = false
		t.InternalLeaseIpsec = &v
	}
	if t.SolicitedRelease == nil {
		var v bool = false
		t.SolicitedRelease = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool struct {
	ApplyGroups          []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                                                    `path:"description" module:"nokia-conf"`
	Failover             *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover          `path:"failover" module:"nokia-conf"`
	MaxLeaseTime         *uint32                                                                    `path:"max-lease-time" module:"nokia-conf"`
	MinLeaseTime         *uint32                                                                    `path:"min-lease-time" module:"nokia-conf"`
	MinimumFree          *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree       `path:"minimum-free" module:"nokia-conf"`
	NakNonMatchingSubnet *bool                                                                      `path:"nak-non-matching-subnet" module:"nokia-conf"`
	OfferTime            *uint32                                                                    `path:"offer-time" module:"nokia-conf"`
	Options              *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options           `path:"options" module:"nokia-conf"`
	PoolName             *string                                                                    `path:"pool-name" module:"nokia-conf"`
	Subnet               map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet `path:"subnet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) IsYANGGoStruct() {}

// NewSubnet creates a new entry in the Subnet list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) NewSubnet(Ipv4Prefix string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subnet == nil {
		t.Subnet = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet)
	}

	key := Ipv4Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subnet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subnet", key)
	}

	t.Subnet[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet{
		Ipv4Prefix: &Ipv4Prefix,
	}

	return t.Subnet[key], nil
}

// RenameSubnet renames an entry in the list Subnet within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) RenameSubnet(oldK, newK string) error {
	if _, ok := t.Subnet[newK]; ok {
		return fmt.Errorf("key %v already exists in Subnet", newK)
	}

	e, ok := t.Subnet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subnet", oldK)
	}
	e.Ipv4Prefix = &newK

	t.Subnet[newK] = e
	delete(t.Subnet, oldK)
	return nil
}

// GetOrCreateSubnet retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetOrCreateSubnet(Ipv4Prefix string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet {

	key := Ipv4Prefix

	if v, ok := t.Subnet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubnet(Ipv4Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubnet got unexpected error: %v", err))
	}
	return v
}

// GetSubnet retrieves the value with the specified key from
// the Subnet map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetSubnet(Ipv4Prefix string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet {

	if t == nil {
		return nil
	}

	key := Ipv4Prefix

	if lm, ok := t.Subnet[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubnet deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) DeleteSubnet(Ipv4Prefix string) {
	key := Ipv4Prefix

	delete(t.Subnet, key)
}

// AppendSubnet appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet struct to the
// list Subnet of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) AppendSubnet(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) error {
	if v.Ipv4Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Prefix")
	}

	key := *v.Ipv4Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subnet == nil {
		t.Subnet = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet)
	}

	if _, ok := t.Subnet[key]; ok {
		return fmt.Errorf("duplicate key for list Subnet %v", key)
	}

	t.Subnet[key] = v
	return nil
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetOrCreateFailover() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover{}
	return t.Failover
}

// GetOrCreateMinimumFree retrieves the value of the MinimumFree field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetOrCreateMinimumFree() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree {
	if t.MinimumFree != nil {
		return t.MinimumFree
	}
	t.MinimumFree = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree{}
	return t.MinimumFree
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetOrCreateOptions() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options{}
	return t.Options
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetFailover() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetMinimumFree returns the value of the MinimumFree struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool. If the receiver or the field MinimumFree is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetMinimumFree() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree {
	if t != nil && t.MinimumFree != nil {
		return t.MinimumFree
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetOptions() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMaxLeaseTime retrieves the value of the leaf MaxLeaseTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLeaseTime is set, it can
// safely use t.GetMaxLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLeaseTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetMaxLeaseTime() uint32 {
	if t == nil || t.MaxLeaseTime == nil {
		return 864000
	}
	return *t.MaxLeaseTime
}

// GetMinLeaseTime retrieves the value of the leaf MinLeaseTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinLeaseTime is set, it can
// safely use t.GetMinLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinLeaseTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetMinLeaseTime() uint32 {
	if t == nil || t.MinLeaseTime == nil {
		return 600
	}
	return *t.MinLeaseTime
}

// GetNakNonMatchingSubnet retrieves the value of the leaf NakNonMatchingSubnet from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NakNonMatchingSubnet is set, it can
// safely use t.GetNakNonMatchingSubnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NakNonMatchingSubnet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetNakNonMatchingSubnet() bool {
	if t == nil || t.NakNonMatchingSubnet == nil {
		return false
	}
	return *t.NakNonMatchingSubnet
}

// GetOfferTime retrieves the value of the leaf OfferTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OfferTime is set, it can
// safely use t.GetOfferTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OfferTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetOfferTime() uint32 {
	if t == nil || t.OfferTime == nil {
		return 60
	}
	return *t.OfferTime
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxLeaseTime == nil {
		var v uint32 = 864000
		t.MaxLeaseTime = &v
	}
	if t.MinLeaseTime == nil {
		var v uint32 = 600
		t.MinLeaseTime = &v
	}
	if t.NakNonMatchingSubnet == nil {
		var v bool = false
		t.NakNonMatchingSubnet = &v
	}
	if t.OfferTime == nil {
		var v uint32 = 60
		t.OfferTime = &v
	}
	t.Failover.PopulateDefaults()
	t.MinimumFree.PopulateDefaults()
	t.Options.PopulateDefaults()
	for _, e := range t.Subnet {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PoolName == nil {
		return nil, fmt.Errorf("nil value for key PoolName")
	}

	return map[string]interface{}{
		"pool-name": *t.PoolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool-selection YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection struct {
	UseGiAddress      *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress      `path:"use-gi-address" module:"nokia-conf" yangPresence:"true"`
	UsePoolFromClient *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient `path:"use-pool-from-client" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection) IsYANGGoStruct() {}

// GetOrCreateUseGiAddress retrieves the value of the UseGiAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection) GetOrCreateUseGiAddress() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress {
	if t.UseGiAddress != nil {
		return t.UseGiAddress
	}
	t.UseGiAddress = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress{}
	return t.UseGiAddress
}

// GetOrCreateUsePoolFromClient retrieves the value of the UsePoolFromClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection) GetOrCreateUsePoolFromClient() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient {
	if t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	t.UsePoolFromClient = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient{}
	return t.UsePoolFromClient
}

// GetUseGiAddress returns the value of the UseGiAddress struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection. If the receiver or the field UseGiAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection) GetUseGiAddress() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress {
	if t != nil && t.UseGiAddress != nil {
		return t.UseGiAddress
	}
	return nil
}

// GetUsePoolFromClient returns the value of the UsePoolFromClient struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection. If the receiver or the field UsePoolFromClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection) GetUsePoolFromClient() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient {
	if t != nil && t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UseGiAddress.PopulateDefaults()
	t.UsePoolFromClient.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool-selection/use-gi-address YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress struct {
	Scope E_NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress_Scope `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) IsYANGGoStruct() {
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) GetScope() E_NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress_Scope {
	if t == nil || t.Scope == 0 {
		return NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress_Scope_subnet
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress_Scope_subnet
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool-selection/use-pool-from-client YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient struct {
	Delimiter *string `path:"delimiter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) IsYANGGoStruct() {
}

// GetDelimiter retrieves the value of the leaf Delimiter from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delimiter is set, it can
// safely use t.GetDelimiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delimiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) GetDelimiter() string {
	if t == nil || t.Delimiter == nil {
		return ""
	}
	return *t.Delimiter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/failover YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                             `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                           `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                           `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                           `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) NewPeer(Address string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) GetPeer(Address string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) AppendPeer(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/failover/peer YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/minimum-free YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree struct {
	Absolute          *uint32 `path:"absolute" module:"nokia-conf"`
	EventWhenDepleted *bool   `path:"event-when-depleted" module:"nokia-conf"`
	Percent           *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree) IsYANGGoStruct() {}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 1
	}
	return *t.Absolute
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 1
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Absolute == nil {
		var v uint32 = 1
		t.Absolute = &v
	}
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
	if t.Percent == nil {
		var v uint32 = 1
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_MinimumFree) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/options YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options struct {
	Option map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options) NewOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options) RenameOption(oldK, newK NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options) GetOrCreateOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options) GetOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options) DeleteOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option struct to the
// list Option of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options) AppendOption(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/options/option YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option struct {
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	AsciiString        *string                                                                                  `path:"ascii-string" module:"nokia-conf"`
	Duration           *uint32                                                                                  `path:"duration" module:"nokia-conf"`
	Empty              YANGEmpty                                                                                `path:"empty" module:"nokia-conf"`
	HexString          *string                                                                                  `path:"hex-string" module:"nokia-conf"`
	Ipv4Address        []string                                                                                 `path:"ipv4-address" module:"nokia-conf"`
	NetbiosNodeType    E_NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option_NetbiosNodeType `path:"netbios-node-type" module:"nokia-conf"`
	Number             NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union      `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetNetbiosNodeType retrieves the value of the leaf NetbiosNodeType from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetbiosNodeType is set, it can
// safely use t.GetNetbiosNodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetbiosNodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) GetNetbiosNodeType() E_NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option_NetbiosNodeType {
	if t == nil || t.NetbiosNodeType == 0 {
		return 0
	}
	return t.NetbiosNodeType
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) GetNumber() NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/subnet YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet struct {
	AddressRange       map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange         `path:"address-range" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Drain              *bool                                                                                                                                                                    `path:"drain" module:"nokia-conf"`
	ExcludeAddresses   map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses `path:"exclude-addresses" module:"nokia-conf"`
	Ipv4Prefix         *string                                                                                                                                                                  `path:"ipv4-prefix" module:"nokia-conf"`
	MaximumDeclined    *uint32                                                                                                                                                                  `path:"maximum-declined" module:"nokia-conf"`
	MinimumFree        *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree                                                                                              `path:"minimum-free" module:"nokia-conf"`
	Options            *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options                                                                                                  `path:"options" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key represents the key for list AddressRange of element /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/subnet.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key represents the key for list ExcludeAddresses of element /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/subnet.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewAddressRange creates a new entry in the AddressRange list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) NewAddressRange(Start string, End string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressRange == nil {
		t.AddressRange = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange)
	}

	key := NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AddressRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AddressRange", key)
	}

	t.AddressRange[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange{
		Start: &Start,
		End:   &End,
	}

	return t.AddressRange[key], nil
}

// RenameAddressRange renames an entry in the list AddressRange within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) RenameAddressRange(oldK, newK NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key) error {
	if _, ok := t.AddressRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AddressRange", newK)
	}

	e, ok := t.AddressRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AddressRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.AddressRange[newK] = e
	delete(t.AddressRange, oldK)
	return nil
}

// GetOrCreateAddressRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetOrCreateAddressRange(Start string, End string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange {

	key := NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.AddressRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddressRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddressRange got unexpected error: %v", err))
	}
	return v
}

// GetAddressRange retrieves the value with the specified key from
// the AddressRange map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetAddressRange(Start string, End string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.AddressRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddressRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) DeleteAddressRange(Start string, End string) {
	key := NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.AddressRange, key)
}

// AppendAddressRange appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange struct to the
// list AddressRange of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) AppendAddressRange(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressRange == nil {
		t.AddressRange = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange)
	}

	if _, ok := t.AddressRange[key]; ok {
		return fmt.Errorf("duplicate key for list AddressRange %v", key)
	}

	t.AddressRange[key] = v
	return nil
}

// NewExcludeAddresses creates a new entry in the ExcludeAddresses list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) NewExcludeAddresses(Start string, End string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeAddresses == nil {
		t.ExcludeAddresses = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses)
	}

	key := NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExcludeAddresses[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExcludeAddresses", key)
	}

	t.ExcludeAddresses[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses{
		Start: &Start,
		End:   &End,
	}

	return t.ExcludeAddresses[key], nil
}

// RenameExcludeAddresses renames an entry in the list ExcludeAddresses within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) RenameExcludeAddresses(oldK, newK NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key) error {
	if _, ok := t.ExcludeAddresses[newK]; ok {
		return fmt.Errorf("key %v already exists in ExcludeAddresses", newK)
	}

	e, ok := t.ExcludeAddresses[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExcludeAddresses", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.ExcludeAddresses[newK] = e
	delete(t.ExcludeAddresses, oldK)
	return nil
}

// GetOrCreateExcludeAddresses retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetOrCreateExcludeAddresses(Start string, End string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses {

	key := NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.ExcludeAddresses[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExcludeAddresses(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExcludeAddresses got unexpected error: %v", err))
	}
	return v
}

// GetExcludeAddresses retrieves the value with the specified key from
// the ExcludeAddresses map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetExcludeAddresses(Start string, End string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.ExcludeAddresses[key]; ok {
		return lm
	}
	return nil
}

// DeleteExcludeAddresses deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) DeleteExcludeAddresses(Start string, End string) {
	key := NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: Start,
		End:   End,
	}

	delete(t.ExcludeAddresses, key)
}

// AppendExcludeAddresses appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses struct to the
// list ExcludeAddresses of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) AppendExcludeAddresses(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeAddresses == nil {
		t.ExcludeAddresses = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses)
	}

	if _, ok := t.ExcludeAddresses[key]; ok {
		return fmt.Errorf("duplicate key for list ExcludeAddresses %v", key)
	}

	t.ExcludeAddresses[key] = v
	return nil
}

// GetOrCreateMinimumFree retrieves the value of the MinimumFree field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetOrCreateMinimumFree() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree {
	if t.MinimumFree != nil {
		return t.MinimumFree
	}
	t.MinimumFree = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree{}
	return t.MinimumFree
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetOrCreateOptions() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options{}
	return t.Options
}

// GetMinimumFree returns the value of the MinimumFree struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet. If the receiver or the field MinimumFree is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetMinimumFree() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree {
	if t != nil && t.MinimumFree != nil {
		return t.MinimumFree
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetOptions() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDrain retrieves the value of the leaf Drain from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drain is set, it can
// safely use t.GetDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetDrain() bool {
	if t == nil || t.Drain == nil {
		return false
	}
	return *t.Drain
}

// GetIpv4Prefix retrieves the value of the leaf Ipv4Prefix from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Prefix is set, it can
// safely use t.GetIpv4Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetIpv4Prefix() string {
	if t == nil || t.Ipv4Prefix == nil {
		return ""
	}
	return *t.Ipv4Prefix
}

// GetMaximumDeclined retrieves the value of the leaf MaximumDeclined from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumDeclined is set, it can
// safely use t.GetMaximumDeclined() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumDeclined == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) GetMaximumDeclined() uint32 {
	if t == nil || t.MaximumDeclined == nil {
		return 64
	}
	return *t.MaximumDeclined
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drain == nil {
		var v bool = false
		t.Drain = &v
	}
	if t.MaximumDeclined == nil {
		var v uint32 = 64
		t.MaximumDeclined = &v
	}
	t.MinimumFree.PopulateDefaults()
	t.Options.PopulateDefaults()
	for _, e := range t.AddressRange {
		e.PopulateDefaults()
	}
	for _, e := range t.ExcludeAddresses {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Prefix")
	}

	return map[string]interface{}{
		"ipv4-prefix": *t.Ipv4Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/subnet/address-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange struct {
	ApplyGroups         []string                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                             `path:"apply-groups-exclude" module:"nokia-conf"`
	End                 *string                              `path:"end" module:"nokia-conf"`
	FailoverControlType E_NokiaTypesDhcp_FailoverControlType `path:"failover-control-type" module:"nokia-conf"`
	Start               *string                              `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetFailoverControlType retrieves the value of the leaf FailoverControlType from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailoverControlType is set, it can
// safely use t.GetFailoverControlType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailoverControlType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetFailoverControlType() E_NokiaTypesDhcp_FailoverControlType {
	if t == nil || t.FailoverControlType == 0 {
		return NokiaTypesDhcp_FailoverControlType_local
	}
	return t.FailoverControlType
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FailoverControlType == 0 {
		t.FailoverControlType = NokiaTypesDhcp_FailoverControlType_local
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/subnet/exclude-addresses YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses struct {
	End   *string `path:"end" module:"nokia-conf"`
	Start *string `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/subnet/minimum-free YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree struct {
	Absolute          *uint32 `path:"absolute" module:"nokia-conf"`
	EventWhenDepleted *bool   `path:"event-when-depleted" module:"nokia-conf"`
	Percent           *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) IsYANGGoStruct() {}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 1
	}
	return *t.Absolute
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 1
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Absolute == nil {
		var v uint32 = 1
		t.Absolute = &v
	}
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
	if t.Percent == nil {
		var v uint32 = 1
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/subnet/options YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options struct {
	Option map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) NewOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) RenameOption(oldK, newK NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) GetOrCreateOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) GetOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) DeleteOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option struct to the
// list Option of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) AppendOption(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv4/pool/subnet/options/option YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option struct {
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	AsciiString        *string                                                                                         `path:"ascii-string" module:"nokia-conf"`
	Duration           *uint32                                                                                         `path:"duration" module:"nokia-conf"`
	Empty              YANGEmpty                                                                                       `path:"empty" module:"nokia-conf"`
	HexString          *string                                                                                         `path:"hex-string" module:"nokia-conf"`
	Ipv4Address        []string                                                                                        `path:"ipv4-address" module:"nokia-conf"`
	NetbiosNodeType    E_NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_NetbiosNodeType `path:"netbios-node-type" module:"nokia-conf"`
	Number             NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union      `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetNetbiosNodeType retrieves the value of the leaf NetbiosNodeType from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetbiosNodeType is set, it can
// safely use t.GetNetbiosNodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetbiosNodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetNetbiosNodeType() E_NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_NetbiosNodeType {
	if t == nil || t.NetbiosNodeType == 0 {
		return 0
	}
	return t.NetbiosNodeType
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetNumber() NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6 represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6 struct {
	AdminState         E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoProvisioned    *bool                                                                   `path:"auto-provisioned" module:"nokia-conf"`
	Defaults           *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults            `path:"defaults" module:"nokia-conf"`
	Description        *string                                                                 `path:"description" module:"nokia-conf"`
	Failover           *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover            `path:"failover" module:"nokia-conf"`
	IgnoreRapidCommit  *bool                                                                   `path:"ignore-rapid-commit" module:"nokia-conf"`
	InterfaceIdMapping *bool                                                                   `path:"interface-id-mapping" module:"nokia-conf"`
	LeaseHold          *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold           `path:"lease-hold" module:"nokia-conf"`
	LeaseQuery         *bool                                                                   `path:"lease-query" module:"nokia-conf"`
	Name               *string                                                                 `path:"name" module:"nokia-conf"`
	Pool               map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool     `path:"pool" module:"nokia-conf"`
	PoolSelection      *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection       `path:"pool-selection" module:"nokia-conf"`
	ServerId           *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId            `path:"server-id" module:"nokia-conf"`
	UserIdentification E_NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_UserIdentification `path:"user-identification" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) NewPool(PoolName string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool)
	}

	key := PoolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool{
		PoolName: &PoolName,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.PoolName = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetOrCreatePool(PoolName string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool {

	key := PoolName

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(PoolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetPool(PoolName string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool {

	if t == nil {
		return nil
	}

	key := PoolName

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) DeletePool(PoolName string) {
	key := PoolName

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool struct to the
// list Pool of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) AppendPool(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) error {
	if v.PoolName == nil {
		return fmt.Errorf("invalid nil key received for PoolName")
	}

	key := *v.PoolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetOrCreateDefaults retrieves the value of the Defaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetOrCreateDefaults() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults {
	if t.Defaults != nil {
		return t.Defaults
	}
	t.Defaults = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults{}
	return t.Defaults
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetOrCreateFailover() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover{}
	return t.Failover
}

// GetOrCreateLeaseHold retrieves the value of the LeaseHold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetOrCreateLeaseHold() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold {
	if t.LeaseHold != nil {
		return t.LeaseHold
	}
	t.LeaseHold = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold{}
	return t.LeaseHold
}

// GetOrCreatePoolSelection retrieves the value of the PoolSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetOrCreatePoolSelection() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection {
	if t.PoolSelection != nil {
		return t.PoolSelection
	}
	t.PoolSelection = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection{}
	return t.PoolSelection
}

// GetOrCreateServerId retrieves the value of the ServerId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetOrCreateServerId() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId {
	if t.ServerId != nil {
		return t.ServerId
	}
	t.ServerId = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId{}
	return t.ServerId
}

// GetDefaults returns the value of the Defaults struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6. If the receiver or the field Defaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetDefaults() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults {
	if t != nil && t.Defaults != nil {
		return t.Defaults
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetFailover() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetLeaseHold returns the value of the LeaseHold struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6. If the receiver or the field LeaseHold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetLeaseHold() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold {
	if t != nil && t.LeaseHold != nil {
		return t.LeaseHold
	}
	return nil
}

// GetPoolSelection returns the value of the PoolSelection struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6. If the receiver or the field PoolSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetPoolSelection() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection {
	if t != nil && t.PoolSelection != nil {
		return t.PoolSelection
	}
	return nil
}

// GetServerId returns the value of the ServerId struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6. If the receiver or the field ServerId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetServerId() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId {
	if t != nil && t.ServerId != nil {
		return t.ServerId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutoProvisioned retrieves the value of the leaf AutoProvisioned from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoProvisioned is set, it can
// safely use t.GetAutoProvisioned() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoProvisioned == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetAutoProvisioned() bool {
	if t == nil || t.AutoProvisioned == nil {
		return false
	}
	return *t.AutoProvisioned
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIgnoreRapidCommit retrieves the value of the leaf IgnoreRapidCommit from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreRapidCommit is set, it can
// safely use t.GetIgnoreRapidCommit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreRapidCommit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetIgnoreRapidCommit() bool {
	if t == nil || t.IgnoreRapidCommit == nil {
		return false
	}
	return *t.IgnoreRapidCommit
}

// GetInterfaceIdMapping retrieves the value of the leaf InterfaceIdMapping from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceIdMapping is set, it can
// safely use t.GetInterfaceIdMapping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceIdMapping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetInterfaceIdMapping() bool {
	if t == nil || t.InterfaceIdMapping == nil {
		return false
	}
	return *t.InterfaceIdMapping
}

// GetLeaseQuery retrieves the value of the leaf LeaseQuery from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaseQuery is set, it can
// safely use t.GetLeaseQuery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaseQuery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetLeaseQuery() bool {
	if t == nil || t.LeaseQuery == nil {
		return false
	}
	return *t.LeaseQuery
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUserIdentification retrieves the value of the leaf UserIdentification from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserIdentification is set, it can
// safely use t.GetUserIdentification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserIdentification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) GetUserIdentification() E_NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_UserIdentification {
	if t == nil || t.UserIdentification == 0 {
		return 0
	}
	return t.UserIdentification
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AutoProvisioned == nil {
		var v bool = false
		t.AutoProvisioned = &v
	}
	if t.IgnoreRapidCommit == nil {
		var v bool = false
		t.IgnoreRapidCommit = &v
	}
	if t.InterfaceIdMapping == nil {
		var v bool = false
		t.InterfaceIdMapping = &v
	}
	if t.LeaseQuery == nil {
		var v bool = false
		t.LeaseQuery = &v
	}
	t.Defaults.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.LeaseHold.PopulateDefaults()
	t.PoolSelection.PopulateDefaults()
	t.ServerId.PopulateDefaults()
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/defaults YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Options            *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options `path:"options" module:"nokia-conf"`
	PreferredLifetime  *uint32                                                              `path:"preferred-lifetime" module:"nokia-conf"`
	RebindTime         *uint32                                                              `path:"rebind-time" module:"nokia-conf"`
	RenewTime          *uint32                                                              `path:"renew-time" module:"nokia-conf"`
	ValidLifetime      *uint32                                                              `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) IsYANGGoStruct() {}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetOrCreateOptions() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options{}
	return t.Options
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetOptions() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetPreferredLifetime() uint32 {
	if t == nil || t.PreferredLifetime == nil {
		return 3600
	}
	return *t.PreferredLifetime
}

// GetRebindTime retrieves the value of the leaf RebindTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTime is set, it can
// safely use t.GetRebindTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetRebindTime() uint32 {
	if t == nil || t.RebindTime == nil {
		return 2880
	}
	return *t.RebindTime
}

// GetRenewTime retrieves the value of the leaf RenewTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTime is set, it can
// safely use t.GetRenewTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetRenewTime() uint32 {
	if t == nil || t.RenewTime == nil {
		return 1800
	}
	return *t.RenewTime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 86400
	}
	return *t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferredLifetime == nil {
		var v uint32 = 3600
		t.PreferredLifetime = &v
	}
	if t.RebindTime == nil {
		var v uint32 = 2880
		t.RebindTime = &v
	}
	if t.RenewTime == nil {
		var v uint32 = 1800
		t.RenewTime = &v
	}
	if t.ValidLifetime == nil {
		var v uint32 = 86400
		t.ValidLifetime = &v
	}
	t.Options.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/defaults/options YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options struct {
	Option map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) NewOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) RenameOption(oldK, newK NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) GetOrCreateOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) GetOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) DeleteOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option struct to the
// list Option of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) AppendOption(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/defaults/options/option YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option struct {
	ApplyGroups        []string                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	AsciiString        *string                                                                                 `path:"ascii-string" module:"nokia-conf"`
	DomainString       *string                                                                                 `path:"domain-string" module:"nokia-conf"`
	Duration           *uint32                                                                                 `path:"duration" module:"nokia-conf"`
	Empty              YANGEmpty                                                                               `path:"empty" module:"nokia-conf"`
	HexString          *string                                                                                 `path:"hex-string" module:"nokia-conf"`
	Ipv6Address        []string                                                                                `path:"ipv6-address" module:"nokia-conf"`
	Number             NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) GetNumber() NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/failover YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                        `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                      `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                      `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                      `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) NewPeer(Address string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetPeer(Address string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) AppendPeer(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/failover/peer YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/lease-hold YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold struct {
	AdditionalScenarios *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios `path:"additional-scenarios" module:"nokia-conf"`
	Time                *uint32                                                                           `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) IsYANGGoStruct() {}

// GetOrCreateAdditionalScenarios retrieves the value of the AdditionalScenarios field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) GetOrCreateAdditionalScenarios() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios {
	if t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	t.AdditionalScenarios = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios{}
	return t.AdditionalScenarios
}

// GetAdditionalScenarios returns the value of the AdditionalScenarios struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold. If the receiver or the field AdditionalScenarios is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) GetAdditionalScenarios() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios {
	if t != nil && t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	return nil
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdditionalScenarios.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/lease-hold/additional-scenarios YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios struct {
	InternalLeaseIpsec *bool `path:"internal-lease-ipsec" module:"nokia-conf"`
	SolicitedRelease   *bool `path:"solicited-release" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) IsYANGGoStruct() {
}

// GetInternalLeaseIpsec retrieves the value of the leaf InternalLeaseIpsec from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalLeaseIpsec is set, it can
// safely use t.GetInternalLeaseIpsec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalLeaseIpsec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) GetInternalLeaseIpsec() bool {
	if t == nil || t.InternalLeaseIpsec == nil {
		return false
	}
	return *t.InternalLeaseIpsec
}

// GetSolicitedRelease retrieves the value of the leaf SolicitedRelease from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitedRelease is set, it can
// safely use t.GetSolicitedRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitedRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) GetSolicitedRelease() bool {
	if t == nil || t.SolicitedRelease == nil {
		return false
	}
	return *t.SolicitedRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InternalLeaseIpsec == nil {
		var v bool = false
		t.InternalLeaseIpsec = &v
	}
	if t.SolicitedRelease == nil {
		var v bool = false
		t.SolicitedRelease = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool struct {
	ApplyGroups           []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	DelegatedPrefix       *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix                  `path:"delegated-prefix" module:"nokia-conf"`
	Description           *string                                                                                   `path:"description" module:"nokia-conf"`
	ExcludePrefix         map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix         `path:"exclude-prefix" module:"nokia-conf"`
	Failover              *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover                         `path:"failover" module:"nokia-conf"`
	Options               *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options                          `path:"options" module:"nokia-conf"`
	PoolName              *string                                                                                   `path:"pool-name" module:"nokia-conf"`
	Prefix                map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix                `path:"prefix" module:"nokia-conf"`
	PrefixLengthThreshold map[uint32]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold `path:"prefix-length-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) IsYANGGoStruct() {}

// NewExcludePrefix creates a new entry in the ExcludePrefix list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) NewExcludePrefix(Ipv6Prefix string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludePrefix == nil {
		t.ExcludePrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExcludePrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExcludePrefix", key)
	}

	t.ExcludePrefix[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.ExcludePrefix[key], nil
}

// RenameExcludePrefix renames an entry in the list ExcludePrefix within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) RenameExcludePrefix(oldK, newK string) error {
	if _, ok := t.ExcludePrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in ExcludePrefix", newK)
	}

	e, ok := t.ExcludePrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExcludePrefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.ExcludePrefix[newK] = e
	delete(t.ExcludePrefix, oldK)
	return nil
}

// GetOrCreateExcludePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOrCreateExcludePrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix {

	key := Ipv6Prefix

	if v, ok := t.ExcludePrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExcludePrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExcludePrefix got unexpected error: %v", err))
	}
	return v
}

// GetExcludePrefix retrieves the value with the specified key from
// the ExcludePrefix map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetExcludePrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.ExcludePrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteExcludePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) DeleteExcludePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.ExcludePrefix, key)
}

// AppendExcludePrefix appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix struct to the
// list ExcludePrefix of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) AppendExcludePrefix(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludePrefix == nil {
		t.ExcludePrefix = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix)
	}

	if _, ok := t.ExcludePrefix[key]; ok {
		return fmt.Errorf("duplicate key for list ExcludePrefix %v", key)
	}

	t.ExcludePrefix[key] = v
	return nil
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix struct to the
// list Prefix of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) AppendPrefix(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// NewPrefixLengthThreshold creates a new entry in the PrefixLengthThreshold list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) NewPrefixLengthThreshold(PrefixLength uint32) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[uint32]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold)
	}

	key := PrefixLength

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLengthThreshold", key)
	}

	t.PrefixLengthThreshold[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold{
		PrefixLength: &PrefixLength,
	}

	return t.PrefixLengthThreshold[key], nil
}

// RenamePrefixLengthThreshold renames an entry in the list PrefixLengthThreshold within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) RenamePrefixLengthThreshold(oldK, newK uint32) error {
	if _, ok := t.PrefixLengthThreshold[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLengthThreshold", newK)
	}

	e, ok := t.PrefixLengthThreshold[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLengthThreshold", oldK)
	}
	e.PrefixLength = &newK

	t.PrefixLengthThreshold[newK] = e
	delete(t.PrefixLengthThreshold, oldK)
	return nil
}

// GetOrCreatePrefixLengthThreshold retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOrCreatePrefixLengthThreshold(PrefixLength uint32) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold {

	key := PrefixLength

	if v, ok := t.PrefixLengthThreshold[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLengthThreshold(PrefixLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLengthThreshold got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLengthThreshold retrieves the value with the specified key from
// the PrefixLengthThreshold map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetPrefixLengthThreshold(PrefixLength uint32) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold {

	if t == nil {
		return nil
	}

	key := PrefixLength

	if lm, ok := t.PrefixLengthThreshold[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLengthThreshold deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) DeletePrefixLengthThreshold(PrefixLength uint32) {
	key := PrefixLength

	delete(t.PrefixLengthThreshold, key)
}

// AppendPrefixLengthThreshold appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold struct to the
// list PrefixLengthThreshold of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) AppendPrefixLengthThreshold(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) error {
	if v.PrefixLength == nil {
		return fmt.Errorf("invalid nil key received for PrefixLength")
	}

	key := *v.PrefixLength

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[uint32]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold)
	}

	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLengthThreshold %v", key)
	}

	t.PrefixLengthThreshold[key] = v
	return nil
}

// GetOrCreateDelegatedPrefix retrieves the value of the DelegatedPrefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOrCreateDelegatedPrefix() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix {
	if t.DelegatedPrefix != nil {
		return t.DelegatedPrefix
	}
	t.DelegatedPrefix = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix{}
	return t.DelegatedPrefix
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOrCreateFailover() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover{}
	return t.Failover
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOrCreateOptions() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options{}
	return t.Options
}

// GetDelegatedPrefix returns the value of the DelegatedPrefix struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the receiver or the field DelegatedPrefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetDelegatedPrefix() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix {
	if t != nil && t.DelegatedPrefix != nil {
		return t.DelegatedPrefix
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetFailover() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetOptions() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DelegatedPrefix.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.Options.PopulateDefaults()
	for _, e := range t.ExcludePrefix {
		e.PopulateDefaults()
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixLengthThreshold {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PoolName == nil {
		return nil, fmt.Errorf("nil value for key PoolName")
	}

	return map[string]interface{}{
		"pool-name": *t.PoolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool-selection YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection struct {
	UseLinkAddress    *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress    `path:"use-link-address" module:"nokia-conf" yangPresence:"true"`
	UsePoolFromClient *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient `path:"use-pool-from-client" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) IsYANGGoStruct() {}

// GetOrCreateUseLinkAddress retrieves the value of the UseLinkAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) GetOrCreateUseLinkAddress() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress {
	if t.UseLinkAddress != nil {
		return t.UseLinkAddress
	}
	t.UseLinkAddress = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress{}
	return t.UseLinkAddress
}

// GetOrCreateUsePoolFromClient retrieves the value of the UsePoolFromClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) GetOrCreateUsePoolFromClient() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient {
	if t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	t.UsePoolFromClient = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient{}
	return t.UsePoolFromClient
}

// GetUseLinkAddress returns the value of the UseLinkAddress struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection. If the receiver or the field UseLinkAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) GetUseLinkAddress() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress {
	if t != nil && t.UseLinkAddress != nil {
		return t.UseLinkAddress
	}
	return nil
}

// GetUsePoolFromClient returns the value of the UsePoolFromClient struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection. If the receiver or the field UsePoolFromClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) GetUsePoolFromClient() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient {
	if t != nil && t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UseLinkAddress.PopulateDefaults()
	t.UsePoolFromClient.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool-selection/use-link-address YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress struct {
	Scope E_NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) IsYANGGoStruct() {
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) GetScope() E_NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope {
	if t == nil || t.Scope == 0 {
		return NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope_subnet
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope_subnet
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool-selection/use-pool-from-client YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient struct {
	Delimiter *string `path:"delimiter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) IsYANGGoStruct() {
}

// GetDelimiter retrieves the value of the leaf Delimiter from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delimiter is set, it can
// safely use t.GetDelimiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delimiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) GetDelimiter() string {
	if t == nil || t.Delimiter == nil {
		return ""
	}
	return *t.Delimiter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool/delegated-prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix struct {
	Length  *uint32 `path:"length" module:"nokia-conf"`
	Maximum *uint32 `path:"maximum" module:"nokia-conf"`
	Minimum *uint32 `path:"minimum" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) IsYANGGoStruct() {}

// GetLength retrieves the value of the leaf Length from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) GetLength() uint32 {
	if t == nil || t.Length == nil {
		return 64
	}
	return *t.Length
}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 64
	}
	return *t.Maximum
}

// GetMinimum retrieves the value of the leaf Minimum from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minimum is set, it can
// safely use t.GetMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) GetMinimum() uint32 {
	if t == nil || t.Minimum == nil {
		return 48
	}
	return *t.Minimum
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Length == nil {
		var v uint32 = 64
		t.Length = &v
	}
	if t.Maximum == nil {
		var v uint32 = 64
		t.Maximum = &v
	}
	if t.Minimum == nil {
		var v uint32 = 48
		t.Minimum = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool/exclude-prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool/failover YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                             `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                           `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                           `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                           `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) NewPeer(Address string) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetPeer(Address string) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) AppendPeer(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool/failover/peer YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	SyncTag            *string  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool/options YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options struct {
	Option map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) NewOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) RenameOption(oldK, newK NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) GetOrCreateOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) GetOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) DeleteOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option struct to the
// list Option of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) AppendOption(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool/options/option YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option struct {
	ApplyGroups        []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	AsciiString        *string                                                                             `path:"ascii-string" module:"nokia-conf"`
	DomainString       *string                                                                             `path:"domain-string" module:"nokia-conf"`
	Duration           *uint32                                                                             `path:"duration" module:"nokia-conf"`
	Empty              YANGEmpty                                                                           `path:"empty" module:"nokia-conf"`
	HexString          *string                                                                             `path:"hex-string" module:"nokia-conf"`
	Ipv6Address        []string                                                                            `path:"ipv6-address" module:"nokia-conf"`
	Number             NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) GetNumber() NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool/prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix struct {
	ApplyGroups           []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Drain                 *bool                                                                                            `path:"drain" module:"nokia-conf"`
	FailoverControlType   E_NokiaTypesDhcp_FailoverControlType                                                             `path:"failover-control-type" module:"nokia-conf"`
	Ipv6Prefix            *string                                                                                          `path:"ipv6-prefix" module:"nokia-conf"`
	Options               *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options                          `path:"options" module:"nokia-conf"`
	PreferredLifetime     *uint32                                                                                          `path:"preferred-lifetime" module:"nokia-conf"`
	PrefixLengthThreshold map[uint32]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold `path:"prefix-length-threshold" module:"nokia-conf"`
	PrefixType            *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType                       `path:"prefix-type" module:"nokia-conf"`
	RebindTime            *uint32                                                                                          `path:"rebind-time" module:"nokia-conf"`
	RenewTime             *uint32                                                                                          `path:"renew-time" module:"nokia-conf"`
	ValidLifetime         *uint32                                                                                          `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) IsYANGGoStruct() {}

// NewPrefixLengthThreshold creates a new entry in the PrefixLengthThreshold list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) NewPrefixLengthThreshold(PrefixLength uint32) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[uint32]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold)
	}

	key := PrefixLength

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLengthThreshold", key)
	}

	t.PrefixLengthThreshold[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold{
		PrefixLength: &PrefixLength,
	}

	return t.PrefixLengthThreshold[key], nil
}

// RenamePrefixLengthThreshold renames an entry in the list PrefixLengthThreshold within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) RenamePrefixLengthThreshold(oldK, newK uint32) error {
	if _, ok := t.PrefixLengthThreshold[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLengthThreshold", newK)
	}

	e, ok := t.PrefixLengthThreshold[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLengthThreshold", oldK)
	}
	e.PrefixLength = &newK

	t.PrefixLengthThreshold[newK] = e
	delete(t.PrefixLengthThreshold, oldK)
	return nil
}

// GetOrCreatePrefixLengthThreshold retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetOrCreatePrefixLengthThreshold(PrefixLength uint32) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold {

	key := PrefixLength

	if v, ok := t.PrefixLengthThreshold[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLengthThreshold(PrefixLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLengthThreshold got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLengthThreshold retrieves the value with the specified key from
// the PrefixLengthThreshold map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetPrefixLengthThreshold(PrefixLength uint32) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold {

	if t == nil {
		return nil
	}

	key := PrefixLength

	if lm, ok := t.PrefixLengthThreshold[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLengthThreshold deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) DeletePrefixLengthThreshold(PrefixLength uint32) {
	key := PrefixLength

	delete(t.PrefixLengthThreshold, key)
}

// AppendPrefixLengthThreshold appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold struct to the
// list PrefixLengthThreshold of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) AppendPrefixLengthThreshold(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) error {
	if v.PrefixLength == nil {
		return fmt.Errorf("invalid nil key received for PrefixLength")
	}

	key := *v.PrefixLength

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[uint32]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold)
	}

	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLengthThreshold %v", key)
	}

	t.PrefixLengthThreshold[key] = v
	return nil
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetOrCreateOptions() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options{}
	return t.Options
}

// GetOrCreatePrefixType retrieves the value of the PrefixType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetOrCreatePrefixType() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType {
	if t.PrefixType != nil {
		return t.PrefixType
	}
	t.PrefixType = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType{}
	return t.PrefixType
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetOptions() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetPrefixType returns the value of the PrefixType struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix. If the receiver or the field PrefixType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetPrefixType() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType {
	if t != nil && t.PrefixType != nil {
		return t.PrefixType
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDrain retrieves the value of the leaf Drain from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drain is set, it can
// safely use t.GetDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetDrain() bool {
	if t == nil || t.Drain == nil {
		return false
	}
	return *t.Drain
}

// GetFailoverControlType retrieves the value of the leaf FailoverControlType from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailoverControlType is set, it can
// safely use t.GetFailoverControlType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailoverControlType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetFailoverControlType() E_NokiaTypesDhcp_FailoverControlType {
	if t == nil || t.FailoverControlType == 0 {
		return NokiaTypesDhcp_FailoverControlType_local
	}
	return t.FailoverControlType
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetPreferredLifetime() uint32 {
	if t == nil || t.PreferredLifetime == nil {
		return 3600
	}
	return *t.PreferredLifetime
}

// GetRebindTime retrieves the value of the leaf RebindTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTime is set, it can
// safely use t.GetRebindTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetRebindTime() uint32 {
	if t == nil || t.RebindTime == nil {
		return 2880
	}
	return *t.RebindTime
}

// GetRenewTime retrieves the value of the leaf RenewTime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTime is set, it can
// safely use t.GetRenewTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetRenewTime() uint32 {
	if t == nil || t.RenewTime == nil {
		return 1800
	}
	return *t.RenewTime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 86400
	}
	return *t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drain == nil {
		var v bool = false
		t.Drain = &v
	}
	if t.FailoverControlType == 0 {
		t.FailoverControlType = NokiaTypesDhcp_FailoverControlType_local
	}
	if t.PreferredLifetime == nil {
		var v uint32 = 3600
		t.PreferredLifetime = &v
	}
	if t.RebindTime == nil {
		var v uint32 = 2880
		t.RebindTime = &v
	}
	if t.RenewTime == nil {
		var v uint32 = 1800
		t.RenewTime = &v
	}
	if t.ValidLifetime == nil {
		var v uint32 = 86400
		t.ValidLifetime = &v
	}
	t.Options.PopulateDefaults()
	t.PrefixType.PopulateDefaults()
	for _, e := range t.PrefixLengthThreshold {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool/prefix-length-threshold YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	EventWhenDepleted  *bool    `path:"event-when-depleted" module:"nokia-conf"`
	MinimumFreePercent *uint32  `path:"minimum-free-percent" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetMinimumFreePercent retrieves the value of the leaf MinimumFreePercent from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumFreePercent is set, it can
// safely use t.GetMinimumFreePercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumFreePercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetMinimumFreePercent() uint32 {
	if t == nil || t.MinimumFreePercent == nil {
		return 0
	}
	return *t.MinimumFreePercent
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
	if t.MinimumFreePercent == nil {
		var v uint32 = 0
		t.MinimumFreePercent = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrefixLength == nil {
		return nil, fmt.Errorf("nil value for key PrefixLength")
	}

	return map[string]interface{}{
		"prefix-length": *t.PrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool/prefix/options YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options struct {
	Option map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) NewOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) RenameOption(oldK, newK NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) GetOrCreateOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) GetOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) DeleteOption(Number NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option struct to the
// list Option of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) AppendOption(v *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union]*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool/prefix/options/option YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option struct {
	ApplyGroups        []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	AsciiString        *string                                                                                    `path:"ascii-string" module:"nokia-conf"`
	DomainString       *string                                                                                    `path:"domain-string" module:"nokia-conf"`
	Duration           *uint32                                                                                    `path:"duration" module:"nokia-conf"`
	Empty              YANGEmpty                                                                                  `path:"empty" module:"nokia-conf"`
	HexString          *string                                                                                    `path:"hex-string" module:"nokia-conf"`
	Ipv6Address        []string                                                                                   `path:"ipv6-address" module:"nokia-conf"`
	Number             NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetNumber() NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool/prefix/prefix-length-threshold YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold struct {
	Absolute           *uint32  `path:"absolute" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	EventWhenDepleted  *bool    `path:"event-when-depleted" module:"nokia-conf"`
	Percent            *uint32  `path:"percent" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) IsYANGGoStruct() {
}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 0
	}
	return *t.Absolute
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 0
	}
	return *t.Percent
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PrefixLength == nil {
		return nil, fmt.Errorf("nil value for key PrefixLength")
	}

	return map[string]interface{}{
		"prefix-length": *t.PrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/pool/prefix/prefix-type YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType struct {
	Pd      *bool `path:"pd" module:"nokia-conf"`
	WanHost *bool `path:"wan-host" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) IsYANGGoStruct() {}

// GetPd retrieves the value of the leaf Pd from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pd is set, it can
// safely use t.GetPd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) GetPd() bool {
	if t == nil || t.Pd == nil {
		return true
	}
	return *t.Pd
}

// GetWanHost retrieves the value of the leaf WanHost from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanHost is set, it can
// safely use t.GetWanHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) GetWanHost() bool {
	if t == nil || t.WanHost == nil {
		return true
	}
	return *t.WanHost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pd == nil {
		var v bool = true
		t.Pd = &v
	}
	if t.WanHost == nil {
		var v bool = true
		t.WanHost = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/server-id YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId struct {
	ApplyGroups        []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	DuidEnterprise     *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise `path:"duid-enterprise" module:"nokia-conf"`
	DuidLinkLocal      YANGEmpty                                                                   `path:"duid-link-local" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId) IsYANGGoStruct() {}

// GetOrCreateDuidEnterprise retrieves the value of the DuidEnterprise field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId) GetOrCreateDuidEnterprise() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise {
	if t.DuidEnterprise != nil {
		return t.DuidEnterprise
	}
	t.DuidEnterprise = &NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise{}
	return t.DuidEnterprise
}

// GetDuidEnterprise returns the value of the DuidEnterprise struct pointer
// from NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId. If the receiver or the field DuidEnterprise is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId) GetDuidEnterprise() *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise {
	if t != nil && t.DuidEnterprise != nil {
		return t.DuidEnterprise
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDuidLinkLocal retrieves the value of the leaf DuidLinkLocal from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidLinkLocal is set, it can
// safely use t.GetDuidLinkLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidLinkLocal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId) GetDuidLinkLocal() YANGEmpty {
	if t == nil || t.DuidLinkLocal == false {
		return false
	}
	return t.DuidLinkLocal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DuidEnterprise.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise represents the /nokia-conf/configure/service/vprn/dhcp-server/dhcpv6/server-id/duid-enterprise YANG schema element.
type NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise struct {
	AsciiString *string `path:"ascii-string" module:"nokia-conf"`
	HexString   *string `path:"hex-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) IsYANGGoStruct() {}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise.
func (*NokiaConf_Configure_Service_Vprn_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Dns represents the /nokia-conf/configure/service/vprn/dns YANG schema element.
type NokiaConf_Configure_Service_Vprn_Dns struct {
	AdminState         E_NokiaTypesSros_AdminState                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	DefaultDomain      *string                                                      `path:"default-domain" module:"nokia-conf"`
	Ipv4SourceAddress  NokiaConf_Configure_Service_Vprn_Dns_Ipv4SourceAddress_Union `path:"ipv4-source-address" module:"nokia-conf"`
	Ipv6SourceAddress  NokiaConf_Configure_Service_Vprn_Dns_Ipv6SourceAddress_Union `path:"ipv6-source-address" module:"nokia-conf"`
	Server             []string                                                     `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Dns) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Dns) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Dns) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Dns) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultDomain retrieves the value of the leaf DefaultDomain from the NokiaConf_Configure_Service_Vprn_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultDomain is set, it can
// safely use t.GetDefaultDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultDomain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Dns) GetDefaultDomain() string {
	if t == nil || t.DefaultDomain == nil {
		return ""
	}
	return *t.DefaultDomain
}

// GetIpv4SourceAddress retrieves the value of the leaf Ipv4SourceAddress from the NokiaConf_Configure_Service_Vprn_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4SourceAddress is set, it can
// safely use t.GetIpv4SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Dns) GetIpv4SourceAddress() NokiaConf_Configure_Service_Vprn_Dns_Ipv4SourceAddress_Union {
	if t == nil || t.Ipv4SourceAddress == nil {
		return NokiaConf_Configure_Service_Vprn_Dns_Ipv4SourceAddress_Enum_use_interface_ip
	}
	return t.Ipv4SourceAddress
}

// GetIpv6SourceAddress retrieves the value of the leaf Ipv6SourceAddress from the NokiaConf_Configure_Service_Vprn_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6SourceAddress is set, it can
// safely use t.GetIpv6SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Dns) GetIpv6SourceAddress() NokiaConf_Configure_Service_Vprn_Dns_Ipv6SourceAddress_Union {
	if t == nil || t.Ipv6SourceAddress == nil {
		return NokiaConf_Configure_Service_Vprn_Dns_Ipv6SourceAddress_Enum_use_interface_ip
	}
	return t.Ipv6SourceAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Vprn_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Dns) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ipv4SourceAddress == nil {
		t.Ipv4SourceAddress = NokiaConf_Configure_Service_Vprn_Dns_Ipv4SourceAddress_Enum_use_interface_ip
	}
	if t.Ipv6SourceAddress == nil {
		t.Ipv6SourceAddress = NokiaConf_Configure_Service_Vprn_Dns_Ipv6SourceAddress_Enum_use_interface_ip
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Dns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Dns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Dns.
func (*NokiaConf_Configure_Service_Vprn_Dns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_EthCfm represents the /nokia-conf/configure/service/vprn/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Vprn_EthCfm struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_EthCfm) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_EthCfm.
func (*NokiaConf_Configure_Service_Vprn_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Firewall represents the /nokia-conf/configure/service/vprn/firewall YANG schema element.
type NokiaConf_Configure_Service_Vprn_Firewall struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Domain             map[string]*NokiaConf_Configure_Service_Vprn_Firewall_Domain `path:"domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Firewall implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Firewall) IsYANGGoStruct() {}

// NewDomain creates a new entry in the Domain list of the
// NokiaConf_Configure_Service_Vprn_Firewall struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Firewall) NewDomain(Name string) (*NokiaConf_Configure_Service_Vprn_Firewall_Domain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Service_Vprn_Firewall_Domain)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Domain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Domain", key)
	}

	t.Domain[key] = &NokiaConf_Configure_Service_Vprn_Firewall_Domain{
		Name: &Name,
	}

	return t.Domain[key], nil
}

// RenameDomain renames an entry in the list Domain within
// the NokiaConf_Configure_Service_Vprn_Firewall struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall) RenameDomain(oldK, newK string) error {
	if _, ok := t.Domain[newK]; ok {
		return fmt.Errorf("key %v already exists in Domain", newK)
	}

	e, ok := t.Domain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Domain", oldK)
	}
	e.Name = &newK

	t.Domain[newK] = e
	delete(t.Domain, oldK)
	return nil
}

// GetOrCreateDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Firewall. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Firewall) GetOrCreateDomain(Name string) *NokiaConf_Configure_Service_Vprn_Firewall_Domain {

	key := Name

	if v, ok := t.Domain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDomain(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDomain got unexpected error: %v", err))
	}
	return v
}

// GetDomain retrieves the value with the specified key from
// the Domain map field of NokiaConf_Configure_Service_Vprn_Firewall. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Firewall) GetDomain(Name string) *NokiaConf_Configure_Service_Vprn_Firewall_Domain {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Domain[key]; ok {
		return lm
	}
	return nil
}

// DeleteDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Firewall. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Firewall) DeleteDomain(Name string) {
	key := Name

	delete(t.Domain, key)
}

// AppendDomain appends the supplied NokiaConf_Configure_Service_Vprn_Firewall_Domain struct to the
// list Domain of NokiaConf_Configure_Service_Vprn_Firewall. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Firewall_Domain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Firewall) AppendDomain(v *NokiaConf_Configure_Service_Vprn_Firewall_Domain) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Service_Vprn_Firewall_Domain)
	}

	if _, ok := t.Domain[key]; ok {
		return fmt.Errorf("duplicate key for list Domain %v", key)
	}

	t.Domain[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Firewall
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Firewall
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Firewall
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Firewall) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Domain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Firewall) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Firewall"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Firewall) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Firewall) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Firewall.
func (*NokiaConf_Configure_Service_Vprn_Firewall) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Firewall_Domain represents the /nokia-conf/configure/service/vprn/firewall/domain YANG schema element.
type NokiaConf_Configure_Service_Vprn_Firewall_Domain struct {
	AdminState         E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Dhcpv6Server       *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server      `path:"dhcpv6-server" module:"nokia-conf"`
	Name               *string                                                             `path:"name" module:"nokia-conf"`
	NatGroup           *uint32                                                             `path:"nat-group" module:"nokia-conf"`
	Prefix             map[string]*NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix `path:"prefix" module:"nokia-conf"`
	WlanGwGroup        *uint32                                                             `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Firewall_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Firewall_Domain) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Service_Vprn_Firewall_Domain struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Service_Vprn_Firewall_Domain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Firewall_Domain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Service_Vprn_Firewall_Domain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) GetPrefix(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Firewall_Domain. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix struct to the
// list Prefix of NokiaConf_Configure_Service_Vprn_Firewall_Domain. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) AppendPrefix(v *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetOrCreateDhcpv6Server retrieves the value of the Dhcpv6Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) GetOrCreateDhcpv6Server() *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server {
	if t.Dhcpv6Server != nil {
		return t.Dhcpv6Server
	}
	t.Dhcpv6Server = &NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server{}
	return t.Dhcpv6Server
}

// GetDhcpv6Server returns the value of the Dhcpv6Server struct pointer
// from NokiaConf_Configure_Service_Vprn_Firewall_Domain. If the receiver or the field Dhcpv6Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) GetDhcpv6Server() *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server {
	if t != nil && t.Dhcpv6Server != nil {
		return t.Dhcpv6Server
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Service_Vprn_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Service_Vprn_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Firewall_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Dhcpv6Server.PopulateDefaults()
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Firewall_Domain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Firewall_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Firewall_Domain.
func (*NokiaConf_Configure_Service_Vprn_Firewall_Domain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server represents the /nokia-conf/configure/service/vprn/firewall/domain/dhcpv6-server YANG schema element.
type NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server.
func (*NokiaConf_Configure_Service_Vprn_Firewall_Domain_Dhcpv6Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix represents the /nokia-conf/configure/service/vprn/firewall/domain/prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	IpPrefix           *string  `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix.
func (*NokiaConf_Configure_Service_Vprn_Firewall_Domain_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Flowspec represents the /nokia-conf/configure/service/vprn/flowspec YANG schema element.
type NokiaConf_Configure_Service_Vprn_Flowspec struct {
	ApplyGroups        []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	FilterCamType      E_NokiaConf_Configure_Service_Vprn_Flowspec_FilterCamType `path:"filter-cam-type" module:"nokia-conf"`
	IpFilterMaxSize    *uint32                                                   `path:"ip-filter-max-size" module:"nokia-conf"`
	Ipv6FilterMaxSize  *uint32                                                   `path:"ipv6-filter-max-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Flowspec) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Flowspec) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Flowspec) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFilterCamType retrieves the value of the leaf FilterCamType from the NokiaConf_Configure_Service_Vprn_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterCamType is set, it can
// safely use t.GetFilterCamType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterCamType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Flowspec) GetFilterCamType() E_NokiaConf_Configure_Service_Vprn_Flowspec_FilterCamType {
	if t == nil || t.FilterCamType == 0 {
		return NokiaConf_Configure_Service_Vprn_Flowspec_FilterCamType_normal
	}
	return t.FilterCamType
}

// GetIpFilterMaxSize retrieves the value of the leaf IpFilterMaxSize from the NokiaConf_Configure_Service_Vprn_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterMaxSize is set, it can
// safely use t.GetIpFilterMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterMaxSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Flowspec) GetIpFilterMaxSize() uint32 {
	if t == nil || t.IpFilterMaxSize == nil {
		return 512
	}
	return *t.IpFilterMaxSize
}

// GetIpv6FilterMaxSize retrieves the value of the leaf Ipv6FilterMaxSize from the NokiaConf_Configure_Service_Vprn_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6FilterMaxSize is set, it can
// safely use t.GetIpv6FilterMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6FilterMaxSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Flowspec) GetIpv6FilterMaxSize() uint32 {
	if t == nil || t.Ipv6FilterMaxSize == nil {
		return 512
	}
	return *t.Ipv6FilterMaxSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FilterCamType == 0 {
		t.FilterCamType = NokiaConf_Configure_Service_Vprn_Flowspec_FilterCamType_normal
	}
	if t.IpFilterMaxSize == nil {
		var v uint32 = 512
		t.IpFilterMaxSize = &v
	}
	if t.Ipv6FilterMaxSize == nil {
		var v uint32 = 512
		t.Ipv6FilterMaxSize = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Flowspec.
func (*NokiaConf_Configure_Service_Vprn_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_GrtLeaking represents the /nokia-conf/configure/service/vprn/grt-leaking YANG schema element.
type NokiaConf_Configure_Service_Vprn_GrtLeaking struct {
	AllowLocalManagement *bool                                                  `path:"allow-local-management" module:"nokia-conf"`
	ApplyGroups          []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	ExportGrt            *NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt `path:"export-grt" module:"nokia-conf"`
	ExportLimit          *uint32                                                `path:"export-limit" module:"nokia-conf"`
	ExportV6Limit        *uint32                                                `path:"export-v6-limit" module:"nokia-conf"`
	GrtLookup            *bool                                                  `path:"grt-lookup" module:"nokia-conf"`
	ImportGrt            *NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt `path:"import-grt" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_GrtLeaking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_GrtLeaking) IsYANGGoStruct() {}

// GetOrCreateExportGrt retrieves the value of the ExportGrt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) GetOrCreateExportGrt() *NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt {
	if t.ExportGrt != nil {
		return t.ExportGrt
	}
	t.ExportGrt = &NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt{}
	return t.ExportGrt
}

// GetOrCreateImportGrt retrieves the value of the ImportGrt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) GetOrCreateImportGrt() *NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt {
	if t.ImportGrt != nil {
		return t.ImportGrt
	}
	t.ImportGrt = &NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt{}
	return t.ImportGrt
}

// GetExportGrt returns the value of the ExportGrt struct pointer
// from NokiaConf_Configure_Service_Vprn_GrtLeaking. If the receiver or the field ExportGrt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) GetExportGrt() *NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt {
	if t != nil && t.ExportGrt != nil {
		return t.ExportGrt
	}
	return nil
}

// GetImportGrt returns the value of the ImportGrt struct pointer
// from NokiaConf_Configure_Service_Vprn_GrtLeaking. If the receiver or the field ImportGrt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) GetImportGrt() *NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt {
	if t != nil && t.ImportGrt != nil {
		return t.ImportGrt
	}
	return nil
}

// GetAllowLocalManagement retrieves the value of the leaf AllowLocalManagement from the NokiaConf_Configure_Service_Vprn_GrtLeaking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowLocalManagement is set, it can
// safely use t.GetAllowLocalManagement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowLocalManagement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) GetAllowLocalManagement() bool {
	if t == nil || t.AllowLocalManagement == nil {
		return false
	}
	return *t.AllowLocalManagement
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_GrtLeaking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_GrtLeaking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExportLimit retrieves the value of the leaf ExportLimit from the NokiaConf_Configure_Service_Vprn_GrtLeaking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportLimit is set, it can
// safely use t.GetExportLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) GetExportLimit() uint32 {
	if t == nil || t.ExportLimit == nil {
		return 5
	}
	return *t.ExportLimit
}

// GetExportV6Limit retrieves the value of the leaf ExportV6Limit from the NokiaConf_Configure_Service_Vprn_GrtLeaking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportV6Limit is set, it can
// safely use t.GetExportV6Limit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportV6Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) GetExportV6Limit() uint32 {
	if t == nil || t.ExportV6Limit == nil {
		return 5
	}
	return *t.ExportV6Limit
}

// GetGrtLookup retrieves the value of the leaf GrtLookup from the NokiaConf_Configure_Service_Vprn_GrtLeaking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrtLookup is set, it can
// safely use t.GetGrtLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrtLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) GetGrtLookup() bool {
	if t == nil || t.GrtLookup == nil {
		return false
	}
	return *t.GrtLookup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_GrtLeaking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowLocalManagement == nil {
		var v bool = false
		t.AllowLocalManagement = &v
	}
	if t.ExportLimit == nil {
		var v uint32 = 5
		t.ExportLimit = &v
	}
	if t.ExportV6Limit == nil {
		var v uint32 = 5
		t.ExportV6Limit = &v
	}
	if t.GrtLookup == nil {
		var v bool = false
		t.GrtLookup = &v
	}
	t.ExportGrt.PopulateDefaults()
	t.ImportGrt.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_GrtLeaking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_GrtLeaking.
func (*NokiaConf_Configure_Service_Vprn_GrtLeaking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt represents the /nokia-conf/configure/service/vprn/grt-leaking/export-grt YANG schema element.
type NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt struct {
	PolicyName []string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt) GetPolicyName() []string {
	if t == nil || t.PolicyName == nil {
		return nil
	}
	return t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt.
func (*NokiaConf_Configure_Service_Vprn_GrtLeaking_ExportGrt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt represents the /nokia-conf/configure/service/vprn/grt-leaking/import-grt YANG schema element.
type NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt struct {
	PolicyName []string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt) GetPolicyName() []string {
	if t == nil || t.PolicyName == nil {
		return nil
	}
	return t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt.
func (*NokiaConf_Configure_Service_Vprn_GrtLeaking_ImportGrt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gsmp represents the /nokia-conf/configure/service/vprn/gsmp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gsmp struct {
	AdminState         E_NokiaTypesSros_AdminState                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Group              map[string]*NokiaConf_Configure_Service_Vprn_Gsmp_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gsmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gsmp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vprn_Gsmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) NewGroup(Name string) (*NokiaConf_Configure_Service_Vprn_Gsmp_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Gsmp_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vprn_Gsmp_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vprn_Gsmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Name = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Gsmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) GetOrCreateGroup(Name string) *NokiaConf_Configure_Service_Vprn_Gsmp_Group {

	key := Name

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vprn_Gsmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) GetGroup(Name string) *NokiaConf_Configure_Service_Vprn_Gsmp_Group {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Gsmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) DeleteGroup(Name string) {
	key := Name

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vprn_Gsmp_Group struct to the
// list Group of NokiaConf_Configure_Service_Vprn_Gsmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Gsmp_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) AppendGroup(v *NokiaConf_Configure_Service_Vprn_Gsmp_Group) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Gsmp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Gsmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Gsmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Gsmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gsmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gsmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gsmp.
func (*NokiaConf_Configure_Service_Vprn_Gsmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gsmp_Group represents the /nokia-conf/configure/service/vprn/gsmp/group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gsmp_Group struct {
	AdminState         E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	Ancp               *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp                `path:"ancp" module:"nokia-conf"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                          `path:"description" module:"nokia-conf"`
	HoldMultiplier     *uint32                                                          `path:"hold-multiplier" module:"nokia-conf"`
	IdleFilter         *bool                                                            `path:"idle-filter" module:"nokia-conf"`
	Keepalive          *uint32                                                          `path:"keepalive" module:"nokia-conf"`
	Name               *string                                                          `path:"name" module:"nokia-conf"`
	Neighbor           map[string]*NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor `path:"neighbor" module:"nokia-conf"`
	Persistency        *bool                                                            `path:"persistency" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gsmp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gsmp_Group) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Service_Vprn_Gsmp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) NewNeighbor(RemoteAddress string) (*NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor)
	}

	key := RemoteAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor{
		RemoteAddress: &RemoteAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Service_Vprn_Gsmp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.RemoteAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Gsmp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetOrCreateNeighbor(RemoteAddress string) *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor {

	key := RemoteAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(RemoteAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Service_Vprn_Gsmp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetNeighbor(RemoteAddress string) *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor {

	if t == nil {
		return nil
	}

	key := RemoteAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Gsmp_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) DeleteNeighbor(RemoteAddress string) {
	key := RemoteAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Service_Vprn_Gsmp_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) AppendNeighbor(v *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) error {
	if v.RemoteAddress == nil {
		return fmt.Errorf("invalid nil key received for RemoteAddress")
	}

	key := *v.RemoteAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAncp retrieves the value of the Ancp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetOrCreateAncp() *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp {
	if t.Ancp != nil {
		return t.Ancp
	}
	t.Ancp = &NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp{}
	return t.Ancp
}

// GetAncp returns the value of the Ancp struct pointer
// from NokiaConf_Configure_Service_Vprn_Gsmp_Group. If the receiver or the field Ancp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetAncp() *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp {
	if t != nil && t.Ancp != nil {
		return t.Ancp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHoldMultiplier retrieves the value of the leaf HoldMultiplier from the NokiaConf_Configure_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldMultiplier is set, it can
// safely use t.GetHoldMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetHoldMultiplier() uint32 {
	if t == nil || t.HoldMultiplier == nil {
		return 3
	}
	return *t.HoldMultiplier
}

// GetIdleFilter retrieves the value of the leaf IdleFilter from the NokiaConf_Configure_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleFilter is set, it can
// safely use t.GetIdleFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetIdleFilter() bool {
	if t == nil || t.IdleFilter == nil {
		return false
	}
	return *t.IdleFilter
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetKeepalive() uint32 {
	if t == nil || t.Keepalive == nil {
		return 10
	}
	return *t.Keepalive
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPersistency retrieves the value of the leaf Persistency from the NokiaConf_Configure_Service_Vprn_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Persistency is set, it can
// safely use t.GetPersistency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Persistency == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) GetPersistency() bool {
	if t == nil || t.Persistency == nil {
		return false
	}
	return *t.Persistency
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gsmp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HoldMultiplier == nil {
		var v uint32 = 3
		t.HoldMultiplier = &v
	}
	if t.IdleFilter == nil {
		var v bool = false
		t.IdleFilter = &v
	}
	if t.Keepalive == nil {
		var v uint32 = 10
		t.Keepalive = &v
	}
	if t.Persistency == nil {
		var v bool = false
		t.Persistency = &v
	}
	t.Ancp.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Gsmp_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gsmp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gsmp_Group.
func (*NokiaConf_Configure_Service_Vprn_Gsmp_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp represents the /nokia-conf/configure/service/vprn/gsmp/group/ancp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp struct {
	DynamicTopologyDiscovery *bool `path:"dynamic-topology-discovery" module:"nokia-conf"`
	Oam                      *bool `path:"oam" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp) IsYANGGoStruct() {}

// GetDynamicTopologyDiscovery retrieves the value of the leaf DynamicTopologyDiscovery from the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicTopologyDiscovery is set, it can
// safely use t.GetDynamicTopologyDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicTopologyDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp) GetDynamicTopologyDiscovery() bool {
	if t == nil || t.DynamicTopologyDiscovery == nil {
		return true
	}
	return *t.DynamicTopologyDiscovery
}

// GetOam retrieves the value of the leaf Oam from the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oam is set, it can
// safely use t.GetOam() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oam == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp) GetOam() bool {
	if t == nil || t.Oam == nil {
		return false
	}
	return *t.Oam
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DynamicTopologyDiscovery == nil {
		var v bool = true
		t.DynamicTopologyDiscovery = &v
	}
	if t.Oam == nil {
		var v bool = false
		t.Oam = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp.
func (*NokiaConf_Configure_Service_Vprn_Gsmp_Group_Ancp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor represents the /nokia-conf/configure/service/vprn/gsmp/group/neighbor YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor struct {
	AdminState         E_NokiaTypesSros_AdminState                                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                               `path:"description" module:"nokia-conf"`
	LocalAddress       *string                                                               `path:"local-address" module:"nokia-conf"`
	PriorityMarking    *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking `path:"priority-marking" module:"nokia-conf"`
	RemoteAddress      *string                                                               `path:"remote-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) IsYANGGoStruct() {}

// GetOrCreatePriorityMarking retrieves the value of the PriorityMarking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) GetOrCreatePriorityMarking() *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking {
	if t.PriorityMarking != nil {
		return t.PriorityMarking
	}
	t.PriorityMarking = &NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking{}
	return t.PriorityMarking
}

// GetPriorityMarking returns the value of the PriorityMarking struct pointer
// from NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor. If the receiver or the field PriorityMarking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) GetPriorityMarking() *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking {
	if t != nil && t.PriorityMarking != nil {
		return t.PriorityMarking
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAddress is set, it can
// safely use t.GetRemoteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PriorityMarking.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RemoteAddress == nil {
		return nil, fmt.Errorf("nil value for key RemoteAddress")
	}

	return map[string]interface{}{
		"remote-address": *t.RemoteAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor.
func (*NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking represents the /nokia-conf/configure/service/vprn/gsmp/group/neighbor/priority-marking YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
	Prec *int32                   `path:"prec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) IsYANGGoStruct() {}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetPrec retrieves the value of the leaf Prec from the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prec is set, it can
// safely use t.GetPrec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) GetPrec() int32 {
	if t == nil || t.Prec == nil {
		return 0
	}
	return *t.Prec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking.
func (*NokiaConf_Configure_Service_Vprn_Gsmp_Group_Neighbor_PriorityMarking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gtp represents the /nokia-conf/configure/service/vprn/gtp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gtp struct {
	S11             *NokiaConf_Configure_Service_Vprn_Gtp_S11             `path:"s11" module:"nokia-conf"`
	UpfDataEndpoint *NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint `path:"upf-data-endpoint" module:"nokia-conf" yangPresence:"true"`
	Uplink          *NokiaConf_Configure_Service_Vprn_Gtp_Uplink          `path:"uplink" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gtp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gtp) IsYANGGoStruct() {}

// GetOrCreateS11 retrieves the value of the S11 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Gtp) GetOrCreateS11() *NokiaConf_Configure_Service_Vprn_Gtp_S11 {
	if t.S11 != nil {
		return t.S11
	}
	t.S11 = &NokiaConf_Configure_Service_Vprn_Gtp_S11{}
	return t.S11
}

// GetOrCreateUpfDataEndpoint retrieves the value of the UpfDataEndpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Gtp) GetOrCreateUpfDataEndpoint() *NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint {
	if t.UpfDataEndpoint != nil {
		return t.UpfDataEndpoint
	}
	t.UpfDataEndpoint = &NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint{}
	return t.UpfDataEndpoint
}

// GetOrCreateUplink retrieves the value of the Uplink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Gtp) GetOrCreateUplink() *NokiaConf_Configure_Service_Vprn_Gtp_Uplink {
	if t.Uplink != nil {
		return t.Uplink
	}
	t.Uplink = &NokiaConf_Configure_Service_Vprn_Gtp_Uplink{}
	return t.Uplink
}

// GetS11 returns the value of the S11 struct pointer
// from NokiaConf_Configure_Service_Vprn_Gtp. If the receiver or the field S11 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Gtp) GetS11() *NokiaConf_Configure_Service_Vprn_Gtp_S11 {
	if t != nil && t.S11 != nil {
		return t.S11
	}
	return nil
}

// GetUpfDataEndpoint returns the value of the UpfDataEndpoint struct pointer
// from NokiaConf_Configure_Service_Vprn_Gtp. If the receiver or the field UpfDataEndpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Gtp) GetUpfDataEndpoint() *NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint {
	if t != nil && t.UpfDataEndpoint != nil {
		return t.UpfDataEndpoint
	}
	return nil
}

// GetUplink returns the value of the Uplink struct pointer
// from NokiaConf_Configure_Service_Vprn_Gtp. If the receiver or the field Uplink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Gtp) GetUplink() *NokiaConf_Configure_Service_Vprn_Gtp_Uplink {
	if t != nil && t.Uplink != nil {
		return t.Uplink
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gtp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gtp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.S11.PopulateDefaults()
	t.UpfDataEndpoint.PopulateDefaults()
	t.Uplink.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gtp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gtp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gtp.
func (*NokiaConf_Configure_Service_Vprn_Gtp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gtp_S11 represents the /nokia-conf/configure/service/vprn/gtp/s11 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gtp_S11 struct {
	Interface      map[string]*NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface `path:"interface" module:"nokia-conf"`
	PeerProfileMap *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap       `path:"peer-profile-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gtp_S11 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gtp_S11) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vprn_Gtp_S11 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11) NewInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vprn_Gtp_S11 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Gtp_S11. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vprn_Gtp_S11. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11) GetInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Gtp_S11. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vprn_Gtp_S11. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11) AppendInterface(v *NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreatePeerProfileMap retrieves the value of the PeerProfileMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11) GetOrCreatePeerProfileMap() *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap {
	if t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	t.PeerProfileMap = &NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap{}
	return t.PeerProfileMap
}

// GetPeerProfileMap returns the value of the PeerProfileMap struct pointer
// from NokiaConf_Configure_Service_Vprn_Gtp_S11. If the receiver or the field PeerProfileMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11) GetPeerProfileMap() *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap {
	if t != nil && t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gtp_S11
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PeerProfileMap.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gtp_S11"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gtp_S11.
func (*NokiaConf_Configure_Service_Vprn_Gtp_S11) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface represents the /nokia-conf/configure/service/vprn/gtp/s11/interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface struct {
	ApnPolicy          *string  `path:"apn-policy" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	InterfaceName      *string  `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface) IsYANGGoStruct() {}

// GetApnPolicy retrieves the value of the leaf ApnPolicy from the NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApnPolicy is set, it can
// safely use t.GetApnPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApnPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface) GetApnPolicy() string {
	if t == nil || t.ApnPolicy == nil {
		return ""
	}
	return *t.ApnPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface.
func (*NokiaConf_Configure_Service_Vprn_Gtp_S11_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap represents the /nokia-conf/configure/service/vprn/gtp/s11/peer-profile-map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap struct {
	Prefix map[string]*NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap) NewPrefix(PeerPrefix string) (*NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix)
	}

	key := PeerPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix{
		PeerPrefix: &PeerPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.PeerPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap) GetOrCreatePrefix(PeerPrefix string) *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix {

	key := PeerPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(PeerPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap) GetPrefix(PeerPrefix string) *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix {

	if t == nil {
		return nil
	}

	key := PeerPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap) DeletePrefix(PeerPrefix string) {
	key := PeerPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix struct to the
// list Prefix of NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap) AppendPrefix(v *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) error {
	if v.PeerPrefix == nil {
		return fmt.Errorf("invalid nil key received for PeerPrefix")
	}

	key := *v.PeerPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap.
func (*NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix represents the /nokia-conf/configure/service/vprn/gtp/s11/peer-profile-map/prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PeerPrefix         *string  `path:"peer-prefix" module:"nokia-conf"`
	PeerProfile        *string  `path:"peer-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPeerPrefix retrieves the value of the leaf PeerPrefix from the NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPrefix is set, it can
// safely use t.GetPeerPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) GetPeerPrefix() string {
	if t == nil || t.PeerPrefix == nil {
		return ""
	}
	return *t.PeerPrefix
}

// GetPeerProfile retrieves the value of the leaf PeerProfile from the NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerProfile is set, it can
// safely use t.GetPeerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) GetPeerProfile() string {
	if t == nil || t.PeerProfile == nil {
		return ""
	}
	return *t.PeerProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerPrefix == nil {
		return nil, fmt.Errorf("nil value for key PeerPrefix")
	}

	return map[string]interface{}{
		"peer-prefix": *t.PeerPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix.
func (*NokiaConf_Configure_Service_Vprn_Gtp_S11_PeerProfileMap_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint represents the /nokia-conf/configure/service/vprn/gtp/upf-data-endpoint YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Fpe                *uint32  `path:"fpe" module:"nokia-conf"`
	Interface          *string  `path:"interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFpe retrieves the value of the leaf Fpe from the NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fpe is set, it can
// safely use t.GetFpe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fpe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint) GetFpe() uint32 {
	if t == nil || t.Fpe == nil {
		return 0
	}
	return *t.Fpe
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint.
func (*NokiaConf_Configure_Service_Vprn_Gtp_UpfDataEndpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gtp_Uplink represents the /nokia-conf/configure/service/vprn/gtp/uplink YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gtp_Uplink struct {
	Apn                *string                                                     `path:"apn" module:"nokia-conf"`
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	PdnType            E_NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PdnType       `path:"pdn-type" module:"nokia-conf"`
	PeerProfileMap     *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap `path:"peer-profile-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gtp_Uplink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gtp_Uplink) IsYANGGoStruct() {}

// GetOrCreatePeerProfileMap retrieves the value of the PeerProfileMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink) GetOrCreatePeerProfileMap() *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap {
	if t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	t.PeerProfileMap = &NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap{}
	return t.PeerProfileMap
}

// GetPeerProfileMap returns the value of the PeerProfileMap struct pointer
// from NokiaConf_Configure_Service_Vprn_Gtp_Uplink. If the receiver or the field PeerProfileMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink) GetPeerProfileMap() *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap {
	if t != nil && t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	return nil
}

// GetApn retrieves the value of the leaf Apn from the NokiaConf_Configure_Service_Vprn_Gtp_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Apn is set, it can
// safely use t.GetApn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Apn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink) GetApn() string {
	if t == nil || t.Apn == nil {
		return ""
	}
	return *t.Apn
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Gtp_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Gtp_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPdnType retrieves the value of the leaf PdnType from the NokiaConf_Configure_Service_Vprn_Gtp_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PdnType is set, it can
// safely use t.GetPdnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PdnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink) GetPdnType() E_NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PdnType {
	if t == nil || t.PdnType == 0 {
		return NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PdnType_ipv4
	}
	return t.PdnType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gtp_Uplink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PdnType == 0 {
		t.PdnType = NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PdnType_ipv4
	}
	t.PeerProfileMap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gtp_Uplink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gtp_Uplink.
func (*NokiaConf_Configure_Service_Vprn_Gtp_Uplink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap represents the /nokia-conf/configure/service/vprn/gtp/uplink/peer-profile-map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap struct {
	Prefix map[string]*NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap) NewPrefix(PeerPrefix string) (*NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix)
	}

	key := PeerPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix{
		PeerPrefix: &PeerPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.PeerPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap) GetOrCreatePrefix(PeerPrefix string) *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix {

	key := PeerPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(PeerPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap) GetPrefix(PeerPrefix string) *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix {

	if t == nil {
		return nil
	}

	key := PeerPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap) DeletePrefix(PeerPrefix string) {
	key := PeerPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix struct to the
// list Prefix of NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap) AppendPrefix(v *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) error {
	if v.PeerPrefix == nil {
		return fmt.Errorf("invalid nil key received for PeerPrefix")
	}

	key := *v.PeerPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap.
func (*NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix represents the /nokia-conf/configure/service/vprn/gtp/uplink/peer-profile-map/prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PeerPrefix         *string  `path:"peer-prefix" module:"nokia-conf"`
	PeerProfile        *string  `path:"peer-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPeerPrefix retrieves the value of the leaf PeerPrefix from the NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPrefix is set, it can
// safely use t.GetPeerPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) GetPeerPrefix() string {
	if t == nil || t.PeerPrefix == nil {
		return ""
	}
	return *t.PeerPrefix
}

// GetPeerProfile retrieves the value of the leaf PeerProfile from the NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerProfile is set, it can
// safely use t.GetPeerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) GetPeerProfile() string {
	if t == nil || t.PeerProfile == nil {
		return ""
	}
	return *t.PeerProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerPrefix == nil {
		return nil, fmt.Errorf("nil value for key PeerPrefix")
	}

	return map[string]interface{}{
		"peer-prefix": *t.PeerPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix.
func (*NokiaConf_Configure_Service_Vprn_Gtp_Uplink_PeerProfileMap_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp represents the /nokia-conf/configure/service/vprn/igmp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp struct {
	AdminState                E_NokiaTypesSros_AdminState                                                                                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	ForwardingGroupInterface  map[NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Key]*NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface `path:"forwarding-group-interface" module:"nokia-conf"`
	GroupIfQuerySourceAddress *string                                                                                                                                `path:"group-if-query-source-address" module:"nokia-conf"`
	GroupInterface            map[string]*NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface                                                                       `path:"group-interface" module:"nokia-conf"`
	Interface                 map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface                                                                            `path:"interface" module:"nokia-conf"`
	QueryInterval             *uint32                                                                                                                                `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                                                                                `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                                                                                `path:"query-response-interval" module:"nokia-conf"`
	RobustCount               *uint32                                                                                                                                `path:"robust-count" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate                                                                                    `path:"ssm-translate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Key represents the key for list ForwardingGroupInterface of element /nokia-conf/configure/service/vprn/igmp.
type NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Key struct {
	ForwardingService  string `path:"forwarding-service"`
	GroupInterfaceName string `path:"group-interface-name"`
}

// NewForwardingGroupInterface creates a new entry in the ForwardingGroupInterface list of the
// NokiaConf_Configure_Service_Vprn_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) NewForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) (*NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Key]*NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface)
	}

	key := NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingGroupInterface", key)
	}

	t.ForwardingGroupInterface[key] = &NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface{
		ForwardingService:  &ForwardingService,
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.ForwardingGroupInterface[key], nil
}

// RenameForwardingGroupInterface renames an entry in the list ForwardingGroupInterface within
// the NokiaConf_Configure_Service_Vprn_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) RenameForwardingGroupInterface(oldK, newK NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Key) error {
	if _, ok := t.ForwardingGroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingGroupInterface", newK)
	}

	e, ok := t.ForwardingGroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingGroupInterface", oldK)
	}
	e.ForwardingService = &newK.ForwardingService
	e.GroupInterfaceName = &newK.GroupInterfaceName

	t.ForwardingGroupInterface[newK] = e
	delete(t.ForwardingGroupInterface, oldK)
	return nil
}

// GetOrCreateForwardingGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetOrCreateForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface {

	key := NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if v, ok := t.ForwardingGroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingGroupInterface(ForwardingService, GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetForwardingGroupInterface retrieves the value with the specified key from
// the ForwardingGroupInterface map field of NokiaConf_Configure_Service_Vprn_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if lm, ok := t.ForwardingGroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) DeleteForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) {
	key := NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	delete(t.ForwardingGroupInterface, key)
}

// AppendForwardingGroupInterface appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface struct to the
// list ForwardingGroupInterface of NokiaConf_Configure_Service_Vprn_Igmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) AppendForwardingGroupInterface(v *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) error {
	if v.ForwardingService == nil {
		return fmt.Errorf("invalid nil key for ForwardingService")
	}

	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key for GroupInterfaceName")
	}

	key := NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  *v.ForwardingService,
		GroupInterfaceName: *v.GroupInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Key]*NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface)
	}

	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingGroupInterface %v", key)
	}

	t.ForwardingGroupInterface[key] = v
	return nil
}

// NewGroupInterface creates a new entry in the GroupInterface list of the
// NokiaConf_Configure_Service_Vprn_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) NewGroupInterface(GroupInterfaceName string) (*NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface)
	}

	key := GroupInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupInterface", key)
	}

	t.GroupInterface[key] = &NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface{
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.GroupInterface[key], nil
}

// RenameGroupInterface renames an entry in the list GroupInterface within
// the NokiaConf_Configure_Service_Vprn_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) RenameGroupInterface(oldK, newK string) error {
	if _, ok := t.GroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupInterface", newK)
	}

	e, ok := t.GroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupInterface", oldK)
	}
	e.GroupInterfaceName = &newK

	t.GroupInterface[newK] = e
	delete(t.GroupInterface, oldK)
	return nil
}

// GetOrCreateGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetOrCreateGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface {

	key := GroupInterfaceName

	if v, ok := t.GroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupInterface(GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetGroupInterface retrieves the value with the specified key from
// the GroupInterface map field of NokiaConf_Configure_Service_Vprn_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface {

	if t == nil {
		return nil
	}

	key := GroupInterfaceName

	if lm, ok := t.GroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) DeleteGroupInterface(GroupInterfaceName string) {
	key := GroupInterfaceName

	delete(t.GroupInterface, key)
}

// AppendGroupInterface appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface struct to the
// list GroupInterface of NokiaConf_Configure_Service_Vprn_Igmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) AppendGroupInterface(v *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) error {
	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for GroupInterfaceName")
	}

	key := *v.GroupInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface)
	}

	if _, ok := t.GroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list GroupInterface %v", key)
	}

	t.GroupInterface[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vprn_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) NewInterface(IpInterfaceName string) (*NokiaConf_Configure_Service_Vprn_Igmp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface)
	}

	key := IpInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vprn_Igmp_Interface{
		IpInterfaceName: &IpInterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vprn_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.IpInterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetOrCreateInterface(IpInterfaceName string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface {

	key := IpInterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(IpInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vprn_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetInterface(IpInterfaceName string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface {

	if t == nil {
		return nil
	}

	key := IpInterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) DeleteInterface(IpInterfaceName string) {
	key := IpInterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vprn_Igmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) AppendInterface(v *NokiaConf_Configure_Service_Vprn_Igmp_Interface) error {
	if v.IpInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for IpInterfaceName")
	}

	key := *v.IpInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetOrCreateSsmTranslate() *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate{}
	return t.SsmTranslate
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Service_Vprn_Igmp. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetSsmTranslate() *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupIfQuerySourceAddress retrieves the value of the leaf GroupIfQuerySourceAddress from the NokiaConf_Configure_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupIfQuerySourceAddress is set, it can
// safely use t.GetGroupIfQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupIfQuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetGroupIfQuerySourceAddress() string {
	if t == nil || t.GroupIfQuerySourceAddress == nil {
		return ""
	}
	return *t.GroupIfQuerySourceAddress
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Service_Vprn_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.SsmTranslate.PopulateDefaults()
	for _, e := range t.ForwardingGroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp.
func (*NokiaConf_Configure_Service_Vprn_Igmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_IgmpHostTracking represents the /nokia-conf/configure/service/vprn/igmp-host-tracking YANG schema element.
type NokiaConf_Configure_Service_Vprn_IgmpHostTracking struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	ExpiryTime         *uint32                     `path:"expiry-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_IgmpHostTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_IgmpHostTracking) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IgmpHostTracking) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IgmpHostTracking) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IgmpHostTracking) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExpiryTime retrieves the value of the leaf ExpiryTime from the NokiaConf_Configure_Service_Vprn_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpiryTime is set, it can
// safely use t.GetExpiryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpiryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_IgmpHostTracking) GetExpiryTime() uint32 {
	if t == nil || t.ExpiryTime == nil {
		return 260
	}
	return *t.ExpiryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_IgmpHostTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_IgmpHostTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ExpiryTime == nil {
		var v uint32 = 260
		t.ExpiryTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_IgmpHostTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_IgmpHostTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_IgmpHostTracking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_IgmpHostTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_IgmpHostTracking.
func (*NokiaConf_Configure_Service_Vprn_IgmpHostTracking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface represents the /nokia-conf/configure/service/vprn/igmp/forwarding-group-interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	ForwardingService         *string                                                              `path:"forwarding-service" module:"nokia-conf"`
	GroupInterfaceName        *string                                                              `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                              `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                              `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                              `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                              `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                              `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                              `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                              `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                              `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                                `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                                `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                                `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                                         `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetMcac() *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetForwardingService retrieves the value of the leaf ForwardingService from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingService is set, it can
// safely use t.GetForwardingService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetForwardingService() string {
	if t == nil || t.ForwardingService == nil {
		return ""
	}
	return *t.ForwardingService
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ForwardingService == nil {
		return nil, fmt.Errorf("nil value for key ForwardingService")
	}

	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"forwarding-service":   *t.ForwardingService,
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface.
func (*NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac represents the /nokia-conf/configure/service/vprn/igmp/forwarding-group-interface/mcac YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                        `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                        `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac.
func (*NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/service/vprn/igmp/forwarding-group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {
}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Service_Vprn_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface represents the /nokia-conf/configure/service/vprn/igmp/group-interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupInterfaceName        *string                                                    `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                    `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                    `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                    `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                    `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                    `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                    `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                    `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                    `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                      `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                      `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                      `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                               `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetMcac() *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface.
func (*NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac represents the /nokia-conf/configure/service/vprn/igmp/group-interface/mcac YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                              `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                              `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac.
func (*NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/service/vprn/igmp/group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Service_Vprn_Igmp_GroupInterface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface represents the /nokia-conf/configure/service/vprn/igmp/interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface struct {
	AdminState                E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	ImportPolicy              *string                                                       `path:"import-policy" module:"nokia-conf"`
	IpInterfaceName           *string                                                       `path:"ip-interface-name" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                       `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                       `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                       `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac         `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                       `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                       `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                       `path:"query-response-interval" module:"nokia-conf"`
	RedundantMcast            *bool                                                         `path:"redundant-mcast" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                         `path:"router-alert-check" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate `path:"ssm-translate" module:"nokia-conf"`
	Static                    *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static       `path:"static" module:"nokia-conf"`
	SubnetCheck               *bool                                                         `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                                  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetOrCreateMcac() *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac{}
	return t.Mcac
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetOrCreateSsmTranslate() *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate{}
	return t.SsmTranslate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetOrCreateStatic() *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static{}
	return t.Static
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Service_Vprn_Igmp_Interface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetMcac() *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Service_Vprn_Igmp_Interface. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetSsmTranslate() *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Service_Vprn_Igmp_Interface. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetStatic() *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetIpInterfaceName retrieves the value of the leaf IpInterfaceName from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpInterfaceName is set, it can
// safely use t.GetIpInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetIpInterfaceName() string {
	if t == nil || t.IpInterfaceName == nil {
		return ""
	}
	return *t.IpInterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRedundantMcast retrieves the value of the leaf RedundantMcast from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedundantMcast is set, it can
// safely use t.GetRedundantMcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedundantMcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetRedundantMcast() bool {
	if t == nil || t.RedundantMcast == nil {
		return false
	}
	return *t.RedundantMcast
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RedundantMcast == nil {
		var v bool = false
		t.RedundantMcast = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
	t.SsmTranslate.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key IpInterfaceName")
	}

	return map[string]interface{}{
		"ip-interface-name": *t.IpInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac represents the /nokia-conf/configure/service/vprn/igmp/interface/mcac YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth     `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                             `path:"interface-policy" module:"nokia-conf"`
	McConstraints   *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints `path:"mc-constraints" module:"nokia-conf"`
	Policy          *string                                                             `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateMcConstraints retrieves the value of the McConstraints field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac) GetOrCreateMcConstraints() *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints {
	if t.McConstraints != nil {
		return t.McConstraints
	}
	t.McConstraints = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints{}
	return t.McConstraints
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac) GetBandwidth() *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetMcConstraints returns the value of the McConstraints struct pointer
// from NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac. If the receiver or the field McConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac) GetMcConstraints() *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints {
	if t != nil && t.McConstraints != nil {
		return t.McConstraints
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.McConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth represents the /nokia-conf/configure/service/vprn/igmp/interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints represents the /nokia-conf/configure/service/vprn/igmp/interface/mcac/mc-constraints YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints struct {
	Level            map[uint32]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level      `path:"level" module:"nokia-conf"`
	NumberDown       map[uint32]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown `path:"number-down" module:"nokia-conf"`
	UseLagPortWeight *bool                                                                                     `path:"use-lag-port-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) NewLevel(LevelId uint32) (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level{
		LevelId: &LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) RenameLevel(oldK, newK uint32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) GetOrCreateLevel(LevelId uint32) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) GetLevel(LevelId uint32) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) DeleteLevel(LevelId uint32) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level struct to the
// list Level of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) AppendLevel(v *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) error {
	if v.LevelId == nil {
		return fmt.Errorf("invalid nil key received for LevelId")
	}

	key := *v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) NewNumberDown(NumberLagPortDown uint32) (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown)
	}

	key := NumberLagPortDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown{
		NumberLagPortDown: &NumberLagPortDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) RenameNumberDown(oldK, newK uint32) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberLagPortDown = &newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) GetOrCreateNumberDown(NumberLagPortDown uint32) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown {

	key := NumberLagPortDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberLagPortDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) GetNumberDown(NumberLagPortDown uint32) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberLagPortDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) DeleteNumberDown(NumberLagPortDown uint32) {
	key := NumberLagPortDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) AppendNumberDown(v *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) error {
	if v.NumberLagPortDown == nil {
		return fmt.Errorf("invalid nil key received for NumberLagPortDown")
	}

	key := *v.NumberLagPortDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// GetUseLagPortWeight retrieves the value of the leaf UseLagPortWeight from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseLagPortWeight is set, it can
// safely use t.GetUseLagPortWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseLagPortWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) GetUseLagPortWeight() bool {
	if t == nil || t.UseLagPortWeight == nil {
		return false
	}
	return *t.UseLagPortWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseLagPortWeight == nil {
		var v bool = false
		t.UseLagPortWeight = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level represents the /nokia-conf/configure/service/vprn/igmp/interface/mcac/mc-constraints/level YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint32  `path:"bandwidth" module:"nokia-conf"`
	LevelId            *uint32  `path:"level-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) GetLevelId() uint32 {
	if t == nil || t.LevelId == nil {
		return 0
	}
	return *t.LevelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LevelId == nil {
		return nil, fmt.Errorf("nil value for key LevelId")
	}

	return map[string]interface{}{
		"level-id": *t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown represents the /nokia-conf/configure/service/vprn/igmp/interface/mcac/mc-constraints/number-down YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              *uint32  `path:"level" module:"nokia-conf"`
	NumberLagPortDown  *uint32  `path:"number-lag-port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetNumberLagPortDown retrieves the value of the leaf NumberLagPortDown from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLagPortDown is set, it can
// safely use t.GetNumberLagPortDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLagPortDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) GetNumberLagPortDown() uint32 {
	if t == nil || t.NumberLagPortDown == nil {
		return 0
	}
	return *t.NumberLagPortDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NumberLagPortDown == nil {
		return nil, fmt.Errorf("nil value for key NumberLagPortDown")
	}

	return map[string]interface{}{
		"number-lag-port-down": *t.NumberLagPortDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate represents the /nokia-conf/configure/service/vprn/igmp/interface/ssm-translate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/service/vprn/igmp/interface/ssm-translate.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange represents the /nokia-conf/configure/service/vprn/igmp/interface/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange struct {
	ApplyGroups        []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *string                                                                                    `path:"end" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start              *string                                                                                    `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/service/vprn/igmp/interface/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static represents the /nokia-conf/configure/service/vprn/igmp/interface/static YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static struct {
	Group      map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group                                                                     `path:"group" module:"nokia-conf"`
	GroupRange map[NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/service/vprn/igmp/interface/static.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
	Step  string `path:"step"`
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group struct to the
// list Group of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) AppendGroup(v *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) NewGroupRange(Start string, End string, Step string) (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange)
	}

	key := NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange{
		Start: &Start,
		End:   &End,
		Step:  &Step,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) RenameGroupRange(oldK, newK NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End
	e.Step = &newK.Step

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) GetOrCreateGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange {

	key := NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End, Step)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) GetGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) DeleteGroupRange(Start string, End string, Step string) {
	key := NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) AppendGroupRange(v *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	if v.Step == nil {
		return fmt.Errorf("invalid nil key for Step")
	}

	key := NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
		Step:  *v.Step,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group represents the /nokia-conf/configure/service/vprn/igmp/interface/static/group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group struct {
	ApplyGroups        []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupAddress       *string                                                                         `path:"group-address" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                       `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) AppendSource(v *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange represents the /nokia-conf/configure/service/vprn/igmp/interface/static/group-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange struct {
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *string                                                                              `path:"end" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                            `path:"starg" module:"nokia-conf"`
	Start              *string                                                                              `path:"start" module:"nokia-conf"`
	Step               *string                                                                              `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) AppendSource(v *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) GetStep() string {
	if t == nil || t.Step == nil {
		return ""
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	if t.Step == nil {
		return nil, fmt.Errorf("nil value for key Step")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
		"step":  *t.Step,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source represents the /nokia-conf/configure/service/vprn/igmp/interface/static/group-range/source YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source represents the /nokia-conf/configure/service/vprn/igmp/interface/static/group/source YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source.
func (*NokiaConf_Configure_Service_Vprn_Igmp_Interface_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate represents the /nokia-conf/configure/service/vprn/igmp/ssm-translate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/service/vprn/igmp/ssm-translate.
type NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate.
func (*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange represents the /nokia-conf/configure/service/vprn/igmp/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange struct {
	ApplyGroups        []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *string                                                                          `path:"end" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start              *string                                                                          `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/service/vprn/igmp/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Service_Vprn_Igmp_SsmTranslate_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface represents the /nokia-conf/configure/service/vprn/interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface struct {
	AdminState                    E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                   []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude            []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	CflowdParameters              *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters    `path:"cflowd-parameters" module:"nokia-conf"`
	CpuProtection                 *uint32                                                         `path:"cpu-protection" module:"nokia-conf"`
	Description                   *string                                                         `path:"description" module:"nokia-conf"`
	DynamicTunnelRedundantNexthop *string                                                         `path:"dynamic-tunnel-redundant-nexthop" module:"nokia-conf"`
	HoldTime                      *NokiaConf_Configure_Service_Vprn_Interface_HoldTime            `path:"hold-time" module:"nokia-conf"`
	IfAttribute                   *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute         `path:"if-attribute" module:"nokia-conf"`
	Ingress                       *NokiaConf_Configure_Service_Vprn_Interface_Ingress             `path:"ingress" module:"nokia-conf"`
	IngressStats                  *bool                                                           `path:"ingress-stats" module:"nokia-conf"`
	InterfaceName                 *string                                                         `path:"interface-name" module:"nokia-conf"`
	IpMtu                         *uint32                                                         `path:"ip-mtu" module:"nokia-conf"`
	Ipv4                          *NokiaConf_Configure_Service_Vprn_Interface_Ipv4                `path:"ipv4" module:"nokia-conf"`
	Ipv6                          *NokiaConf_Configure_Service_Vprn_Interface_Ipv6                `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
	LoadBalancing                 *NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing       `path:"load-balancing" module:"nokia-conf"`
	Loopback                      *bool                                                           `path:"loopback" module:"nokia-conf"`
	Mac                           *string                                                         `path:"mac" module:"nokia-conf"`
	MacAccounting                 *bool                                                           `path:"mac-accounting" module:"nokia-conf"`
	MonitorOperGroup              *string                                                         `path:"monitor-oper-group" module:"nokia-conf"`
	PingTemplate                  *NokiaConf_Configure_Service_Vprn_Interface_PingTemplate        `path:"ping-template" module:"nokia-conf" yangPresence:"true"`
	PtpHwAssist                   *NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist         `path:"ptp-hw-assist" module:"nokia-conf"`
	RadiusAuthPolicy              *string                                                         `path:"radius-auth-policy" module:"nokia-conf"`
	Sap                           map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap      `path:"sap" module:"nokia-conf"`
	ShcvPolicyIpv4                *string                                                         `path:"shcv-policy-ipv4" module:"nokia-conf"`
	SpokeSdp                      map[string]*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	StaticTunnelRedundantNexthop  *string                                                         `path:"static-tunnel-redundant-nexthop" module:"nokia-conf"`
	TosMarkingState               E_NokiaTypesRouter_TosMarkingState                              `path:"tos-marking-state" module:"nokia-conf"`
	Tunnel                        *bool                                                           `path:"tunnel" module:"nokia-conf"`
	VasIfType                     E_NokiaTypesRouter_VasIfType                                    `path:"vas-if-type" module:"nokia-conf"`
	Vpls                          map[string]*NokiaConf_Configure_Service_Vprn_Interface_Vpls     `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface) IsYANGGoStruct() {}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Service_Vprn_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface) NewSap(SapId string) (*NokiaConf_Configure_Service_Vprn_Interface_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Service_Vprn_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetOrCreateSap(SapId string) *NokiaConf_Configure_Service_Vprn_Interface_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Service_Vprn_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetSap(SapId string) *NokiaConf_Configure_Service_Vprn_Interface_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap struct to the
// list Sap of NokiaConf_Configure_Service_Vprn_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface) AppendSap(v *NokiaConf_Configure_Service_Vprn_Interface_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Vprn_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Vprn_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Vprn_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Vprn_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface) AppendSpokeSdp(v *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// NewVpls creates a new entry in the Vpls list of the
// NokiaConf_Configure_Service_Vprn_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface) NewVpls(VplsName string) (*NokiaConf_Configure_Service_Vprn_Interface_Vpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vpls == nil {
		t.Vpls = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Vpls)
	}

	key := VplsName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vpls", key)
	}

	t.Vpls[key] = &NokiaConf_Configure_Service_Vprn_Interface_Vpls{
		VplsName: &VplsName,
	}

	return t.Vpls[key], nil
}

// RenameVpls renames an entry in the list Vpls within
// the NokiaConf_Configure_Service_Vprn_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) RenameVpls(oldK, newK string) error {
	if _, ok := t.Vpls[newK]; ok {
		return fmt.Errorf("key %v already exists in Vpls", newK)
	}

	e, ok := t.Vpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vpls", oldK)
	}
	e.VplsName = &newK

	t.Vpls[newK] = e
	delete(t.Vpls, oldK)
	return nil
}

// GetOrCreateVpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetOrCreateVpls(VplsName string) *NokiaConf_Configure_Service_Vprn_Interface_Vpls {

	key := VplsName

	if v, ok := t.Vpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVpls(VplsName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVpls got unexpected error: %v", err))
	}
	return v
}

// GetVpls retrieves the value with the specified key from
// the Vpls map field of NokiaConf_Configure_Service_Vprn_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetVpls(VplsName string) *NokiaConf_Configure_Service_Vprn_Interface_Vpls {

	if t == nil {
		return nil
	}

	key := VplsName

	if lm, ok := t.Vpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteVpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface) DeleteVpls(VplsName string) {
	key := VplsName

	delete(t.Vpls, key)
}

// AppendVpls appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Vpls struct to the
// list Vpls of NokiaConf_Configure_Service_Vprn_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Vpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface) AppendVpls(v *NokiaConf_Configure_Service_Vprn_Interface_Vpls) error {
	if v.VplsName == nil {
		return fmt.Errorf("invalid nil key received for VplsName")
	}

	key := *v.VplsName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vpls == nil {
		t.Vpls = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Vpls)
	}

	if _, ok := t.Vpls[key]; ok {
		return fmt.Errorf("duplicate key for list Vpls %v", key)
	}

	t.Vpls[key] = v
	return nil
}

// GetOrCreateCflowdParameters retrieves the value of the CflowdParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetOrCreateCflowdParameters() *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters {
	if t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	t.CflowdParameters = &NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters{}
	return t.CflowdParameters
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetOrCreateHoldTime() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Service_Vprn_Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateIfAttribute retrieves the value of the IfAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetOrCreateIfAttribute() *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute {
	if t.IfAttribute != nil {
		return t.IfAttribute
	}
	t.IfAttribute = &NokiaConf_Configure_Service_Vprn_Interface_IfAttribute{}
	return t.IfAttribute
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetOrCreateIngress() *NokiaConf_Configure_Service_Vprn_Interface_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vprn_Interface_Ingress{}
	return t.Ingress
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetOrCreateIpv6() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetOrCreateLoadBalancing() *NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreatePingTemplate retrieves the value of the PingTemplate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetOrCreatePingTemplate() *NokiaConf_Configure_Service_Vprn_Interface_PingTemplate {
	if t.PingTemplate != nil {
		return t.PingTemplate
	}
	t.PingTemplate = &NokiaConf_Configure_Service_Vprn_Interface_PingTemplate{}
	return t.PingTemplate
}

// GetOrCreatePtpHwAssist retrieves the value of the PtpHwAssist field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetOrCreatePtpHwAssist() *NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist {
	if t.PtpHwAssist != nil {
		return t.PtpHwAssist
	}
	t.PtpHwAssist = &NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist{}
	return t.PtpHwAssist
}

// GetCflowdParameters returns the value of the CflowdParameters struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface. If the receiver or the field CflowdParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetCflowdParameters() *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters {
	if t != nil && t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetHoldTime() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetIfAttribute returns the value of the IfAttribute struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface. If the receiver or the field IfAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetIfAttribute() *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute {
	if t != nil && t.IfAttribute != nil {
		return t.IfAttribute
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetIngress() *NokiaConf_Configure_Service_Vprn_Interface_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetIpv4() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetIpv6() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetLoadBalancing() *NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetPingTemplate returns the value of the PingTemplate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface. If the receiver or the field PingTemplate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetPingTemplate() *NokiaConf_Configure_Service_Vprn_Interface_PingTemplate {
	if t != nil && t.PingTemplate != nil {
		return t.PingTemplate
	}
	return nil
}

// GetPtpHwAssist returns the value of the PtpHwAssist struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface. If the receiver or the field PtpHwAssist is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetPtpHwAssist() *NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist {
	if t != nil && t.PtpHwAssist != nil {
		return t.PtpHwAssist
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCpuProtection retrieves the value of the leaf CpuProtection from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuProtection is set, it can
// safely use t.GetCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetCpuProtection() uint32 {
	if t == nil || t.CpuProtection == nil {
		return 0
	}
	return *t.CpuProtection
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicTunnelRedundantNexthop retrieves the value of the leaf DynamicTunnelRedundantNexthop from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicTunnelRedundantNexthop is set, it can
// safely use t.GetDynamicTunnelRedundantNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicTunnelRedundantNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetDynamicTunnelRedundantNexthop() string {
	if t == nil || t.DynamicTunnelRedundantNexthop == nil {
		return ""
	}
	return *t.DynamicTunnelRedundantNexthop
}

// GetIngressStats retrieves the value of the leaf IngressStats from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStats is set, it can
// safely use t.GetIngressStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetIngressStats() bool {
	if t == nil || t.IngressStats == nil {
		return false
	}
	return *t.IngressStats
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetLoopback() bool {
	if t == nil || t.Loopback == nil {
		return false
	}
	return *t.Loopback
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMacAccounting retrieves the value of the leaf MacAccounting from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAccounting is set, it can
// safely use t.GetMacAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetMacAccounting() bool {
	if t == nil || t.MacAccounting == nil {
		return false
	}
	return *t.MacAccounting
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetRadiusAuthPolicy retrieves the value of the leaf RadiusAuthPolicy from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuthPolicy is set, it can
// safely use t.GetRadiusAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetRadiusAuthPolicy() string {
	if t == nil || t.RadiusAuthPolicy == nil {
		return ""
	}
	return *t.RadiusAuthPolicy
}

// GetShcvPolicyIpv4 retrieves the value of the leaf ShcvPolicyIpv4 from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShcvPolicyIpv4 is set, it can
// safely use t.GetShcvPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShcvPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetShcvPolicyIpv4() string {
	if t == nil || t.ShcvPolicyIpv4 == nil {
		return ""
	}
	return *t.ShcvPolicyIpv4
}

// GetStaticTunnelRedundantNexthop retrieves the value of the leaf StaticTunnelRedundantNexthop from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticTunnelRedundantNexthop is set, it can
// safely use t.GetStaticTunnelRedundantNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticTunnelRedundantNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetStaticTunnelRedundantNexthop() string {
	if t == nil || t.StaticTunnelRedundantNexthop == nil {
		return ""
	}
	return *t.StaticTunnelRedundantNexthop
}

// GetTosMarkingState retrieves the value of the leaf TosMarkingState from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TosMarkingState is set, it can
// safely use t.GetTosMarkingState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TosMarkingState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetTosMarkingState() E_NokiaTypesRouter_TosMarkingState {
	if t == nil || t.TosMarkingState == 0 {
		return NokiaTypesRouter_TosMarkingState_trusted
	}
	return t.TosMarkingState
}

// GetTunnel retrieves the value of the leaf Tunnel from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunnel is set, it can
// safely use t.GetTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetTunnel() bool {
	if t == nil || t.Tunnel == nil {
		return false
	}
	return *t.Tunnel
}

// GetVasIfType retrieves the value of the leaf VasIfType from the NokiaConf_Configure_Service_Vprn_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VasIfType is set, it can
// safely use t.GetVasIfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VasIfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface) GetVasIfType() E_NokiaTypesRouter_VasIfType {
	if t == nil || t.VasIfType == 0 {
		return 0
	}
	return t.VasIfType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.IngressStats == nil {
		var v bool = false
		t.IngressStats = &v
	}
	if t.Loopback == nil {
		var v bool = false
		t.Loopback = &v
	}
	if t.MacAccounting == nil {
		var v bool = false
		t.MacAccounting = &v
	}
	if t.TosMarkingState == 0 {
		t.TosMarkingState = NokiaTypesRouter_TosMarkingState_trusted
	}
	if t.Tunnel == nil {
		var v bool = false
		t.Tunnel = &v
	}
	t.CflowdParameters.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.IfAttribute.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.PingTemplate.PopulateDefaults()
	t.PtpHwAssist.PopulateDefaults()
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Vpls {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface.
func (*NokiaConf_Configure_Service_Vprn_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters represents the /nokia-conf/configure/service/vprn/interface/cflowd-parameters YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters struct {
	Sampling map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling `path:"sampling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters) IsYANGGoStruct() {}

// NewSampling creates a new entry in the Sampling list of the
// NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters) NewSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) (*NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling)
	}

	key := SamplingType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sampling[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sampling", key)
	}

	t.Sampling[key] = &NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling{
		SamplingType: SamplingType,
	}

	return t.Sampling[key], nil
}

// RenameSampling renames an entry in the list Sampling within
// the NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters) RenameSampling(oldK, newK E_NokiaTypesRouter_CflowdSampling) error {
	if _, ok := t.Sampling[newK]; ok {
		return fmt.Errorf("key %v already exists in Sampling", newK)
	}

	e, ok := t.Sampling[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sampling", oldK)
	}
	e.SamplingType = newK

	t.Sampling[newK] = e
	delete(t.Sampling, oldK)
	return nil
}

// GetOrCreateSampling retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters) GetOrCreateSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling {

	key := SamplingType

	if v, ok := t.Sampling[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSampling(SamplingType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSampling got unexpected error: %v", err))
	}
	return v
}

// GetSampling retrieves the value with the specified key from
// the Sampling map field of NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters) GetSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling {

	if t == nil {
		return nil
	}

	key := SamplingType

	if lm, ok := t.Sampling[key]; ok {
		return lm
	}
	return nil
}

// DeleteSampling deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters) DeleteSampling(SamplingType E_NokiaTypesRouter_CflowdSampling) {
	key := SamplingType

	delete(t.Sampling, key)
}

// AppendSampling appends the supplied NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling struct to the
// list Sampling of NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters) AppendSampling(v *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) error {
	key := v.SamplingType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[E_NokiaTypesRouter_CflowdSampling]*NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling)
	}

	if _, ok := t.Sampling[key]; ok {
		return fmt.Errorf("duplicate key for list Sampling %v", key)
	}

	t.Sampling[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Sampling {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters.
func (*NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling represents the /nokia-conf/configure/service/vprn/interface/cflowd-parameters/sampling YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling struct {
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling_Direction         `path:"direction" module:"nokia-conf"`
	SampleProfile      NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling_SampleProfile_Union `path:"sample-profile" module:"nokia-conf"`
	SamplingType       E_NokiaTypesRouter_CflowdSampling                                                        `path:"sampling-type" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling_Type              `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) GetDirection() E_NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling_Direction {
	if t == nil || t.Direction == 0 {
		return NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling_Direction_ingress_only
	}
	return t.Direction
}

// GetSampleProfile retrieves the value of the leaf SampleProfile from the NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleProfile is set, it can
// safely use t.GetSampleProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) GetSampleProfile() NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling_SampleProfile_Union {
	if t == nil || t.SampleProfile == nil {
		return nil
	}
	return t.SampleProfile
}

// GetSamplingType retrieves the value of the leaf SamplingType from the NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SamplingType is set, it can
// safely use t.GetSamplingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SamplingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) GetSamplingType() E_NokiaTypesRouter_CflowdSampling {
	if t == nil || t.SamplingType == 0 {
		return 0
	}
	return t.SamplingType
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) GetType() E_NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Direction == 0 {
		t.Direction = NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling_Direction_ingress_only
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sampling-type": t.SamplingType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling.
func (*NokiaConf_Configure_Service_Vprn_Interface_CflowdParameters_Sampling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_HoldTime represents the /nokia-conf/configure/service/vprn/interface/hold-time YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime) GetOrCreateIpv6() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime) GetIpv4() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_HoldTime. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime) GetIpv6() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_HoldTime.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4 represents the /nokia-conf/configure/service/vprn/interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/service/vprn/interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/service/vprn/interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6 represents the /nokia-conf/configure/service/vprn/interface/hold-time/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6 struct {
	Down *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6) GetOrCreateDown() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6) GetOrCreateUp() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6) GetDown() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6) GetUp() *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down represents the /nokia-conf/configure/service/vprn/interface/hold-time/ipv6/down YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up represents the /nokia-conf/configure/service/vprn/interface/hold-time/ipv6/up YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up.
func (*NokiaConf_Configure_Service_Vprn_Interface_HoldTime_Ipv6_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_IfAttribute represents the /nokia-conf/configure/service/vprn/interface/if-attribute YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_IfAttribute struct {
	AdminGroup []string                                                                     `path:"admin-group" module:"nokia-conf"`
	SrlgGroup  map[string]*NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup `path:"srlg-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_IfAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) IsYANGGoStruct() {}

// NewSrlgGroup creates a new entry in the SrlgGroup list of the
// NokiaConf_Configure_Service_Vprn_Interface_IfAttribute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) NewSrlgGroup(Name string) (*NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrlgGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrlgGroup", key)
	}

	t.SrlgGroup[key] = &NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup{
		Name: &Name,
	}

	return t.SrlgGroup[key], nil
}

// RenameSrlgGroup renames an entry in the list SrlgGroup within
// the NokiaConf_Configure_Service_Vprn_Interface_IfAttribute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) RenameSrlgGroup(oldK, newK string) error {
	if _, ok := t.SrlgGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SrlgGroup", newK)
	}

	e, ok := t.SrlgGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrlgGroup", oldK)
	}
	e.Name = &newK

	t.SrlgGroup[newK] = e
	delete(t.SrlgGroup, oldK)
	return nil
}

// GetOrCreateSrlgGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_IfAttribute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) GetOrCreateSrlgGroup(Name string) *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup {

	key := Name

	if v, ok := t.SrlgGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlgGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlgGroup got unexpected error: %v", err))
	}
	return v
}

// GetSrlgGroup retrieves the value with the specified key from
// the SrlgGroup map field of NokiaConf_Configure_Service_Vprn_Interface_IfAttribute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) GetSrlgGroup(Name string) *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SrlgGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlgGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_IfAttribute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) DeleteSrlgGroup(Name string) {
	key := Name

	delete(t.SrlgGroup, key)
}

// AppendSrlgGroup appends the supplied NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup struct to the
// list SrlgGroup of NokiaConf_Configure_Service_Vprn_Interface_IfAttribute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) AppendSrlgGroup(v *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup)
	}

	if _, ok := t.SrlgGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SrlgGroup %v", key)
	}

	t.SrlgGroup[key] = v
	return nil
}

// GetAdminGroup retrieves the value of the leaf AdminGroup from the NokiaConf_Configure_Service_Vprn_Interface_IfAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminGroup is set, it can
// safely use t.GetAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) GetAdminGroup() []string {
	if t == nil || t.AdminGroup == nil {
		return nil
	}
	return t.AdminGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_IfAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SrlgGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_IfAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_IfAttribute.
func (*NokiaConf_Configure_Service_Vprn_Interface_IfAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup represents the /nokia-conf/configure/service/vprn/interface/if-attribute/srlg-group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup.
func (*NokiaConf_Configure_Service_Vprn_Interface_IfAttribute_SrlgGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ingress represents the /nokia-conf/configure/service/vprn/interface/ingress YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ingress struct {
	DestinationClassLookup *bool   `path:"destination-class-lookup" module:"nokia-conf"`
	PolicyAccounting       *string `path:"policy-accounting" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ingress) IsYANGGoStruct() {}

// GetDestinationClassLookup retrieves the value of the leaf DestinationClassLookup from the NokiaConf_Configure_Service_Vprn_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClassLookup is set, it can
// safely use t.GetDestinationClassLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClassLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ingress) GetDestinationClassLookup() bool {
	if t == nil || t.DestinationClassLookup == nil {
		return false
	}
	return *t.DestinationClassLookup
}

// GetPolicyAccounting retrieves the value of the leaf PolicyAccounting from the NokiaConf_Configure_Service_Vprn_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyAccounting is set, it can
// safely use t.GetPolicyAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ingress) GetPolicyAccounting() string {
	if t == nil || t.PolicyAccounting == nil {
		return ""
	}
	return *t.PolicyAccounting
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DestinationClassLookup == nil {
		var v bool = false
		t.DestinationClassLookup = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ingress.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4 represents the /nokia-conf/configure/service/vprn/interface/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4 struct {
	Addresses               *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses            `path:"addresses" module:"nokia-conf"`
	AllowDirectedBroadcasts *bool                                                                 `path:"allow-directed-broadcasts" module:"nokia-conf"`
	Bfd                     *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd                  `path:"bfd" module:"nokia-conf"`
	Dhcp                    *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp                 `path:"dhcp" module:"nokia-conf"`
	Icmp                    *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp                 `path:"icmp" module:"nokia-conf"`
	IpHelperAddress         *string                                                               `path:"ip-helper-address" module:"nokia-conf"`
	LocalDhcpServer         *string                                                               `path:"local-dhcp-server" module:"nokia-conf"`
	NeighborDiscovery       *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery    `path:"neighbor-discovery" module:"nokia-conf"`
	Primary                 *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary              `path:"primary" module:"nokia-conf" yangPresence:"true"`
	QosRouteLookup          E_NokiaTypesRouter_QosRouteLookup                                     `path:"qos-route-lookup" module:"nokia-conf"`
	Secondary               map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary `path:"secondary" module:"nokia-conf"`
	TcpMss                  *uint32                                                               `path:"tcp-mss" module:"nokia-conf"`
	Unnumbered              *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered           `path:"unnumbered" module:"nokia-conf"`
	UrpfCheck               *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck            `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
	Vrrp                    map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp       `path:"vrrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4) IsYANGGoStruct() {}

// NewSecondary creates a new entry in the Secondary list of the
// NokiaConf_Configure_Service_Vprn_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) NewSecondary(Address string) (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Secondary[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Secondary", key)
	}

	t.Secondary[key] = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary{
		Address: &Address,
	}

	return t.Secondary[key], nil
}

// RenameSecondary renames an entry in the list Secondary within
// the NokiaConf_Configure_Service_Vprn_Interface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) RenameSecondary(oldK, newK string) error {
	if _, ok := t.Secondary[newK]; ok {
		return fmt.Errorf("key %v already exists in Secondary", newK)
	}

	e, ok := t.Secondary[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Secondary", oldK)
	}
	e.Address = &newK

	t.Secondary[newK] = e
	delete(t.Secondary, oldK)
	return nil
}

// GetOrCreateSecondary retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetOrCreateSecondary(Address string) *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary {

	key := Address

	if v, ok := t.Secondary[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSecondary(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSecondary got unexpected error: %v", err))
	}
	return v
}

// GetSecondary retrieves the value with the specified key from
// the Secondary map field of NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetSecondary(Address string) *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Secondary[key]; ok {
		return lm
	}
	return nil
}

// DeleteSecondary deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) DeleteSecondary(Address string) {
	key := Address

	delete(t.Secondary, key)
}

// AppendSecondary appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary struct to the
// list Secondary of NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) AppendSecondary(v *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary)
	}

	if _, ok := t.Secondary[key]; ok {
		return fmt.Errorf("duplicate key for list Secondary %v", key)
	}

	t.Secondary[key] = v
	return nil
}

// NewVrrp creates a new entry in the Vrrp list of the
// NokiaConf_Configure_Service_Vprn_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) NewVrrp(VirtualRouterId int32) (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrrp", key)
	}

	t.Vrrp[key] = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.Vrrp[key], nil
}

// RenameVrrp renames an entry in the list Vrrp within
// the NokiaConf_Configure_Service_Vprn_Interface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) RenameVrrp(oldK, newK int32) error {
	if _, ok := t.Vrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in Vrrp", newK)
	}

	e, ok := t.Vrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vrrp", oldK)
	}
	e.VirtualRouterId = &newK

	t.Vrrp[newK] = e
	delete(t.Vrrp, oldK)
	return nil
}

// GetOrCreateVrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetOrCreateVrrp(VirtualRouterId int32) *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp {

	key := VirtualRouterId

	if v, ok := t.Vrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrp(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrp got unexpected error: %v", err))
	}
	return v
}

// GetVrrp retrieves the value with the specified key from
// the Vrrp map field of NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetVrrp(VirtualRouterId int32) *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.Vrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) DeleteVrrp(VirtualRouterId int32) {
	key := VirtualRouterId

	delete(t.Vrrp, key)
}

// AppendVrrp appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp struct to the
// list Vrrp of NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) AppendVrrp(v *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp)
	}

	if _, ok := t.Vrrp[key]; ok {
		return fmt.Errorf("duplicate key for list Vrrp %v", key)
	}

	t.Vrrp[key] = v
	return nil
}

// GetOrCreateAddresses retrieves the value of the Addresses field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetOrCreateAddresses() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses {
	if t.Addresses != nil {
		return t.Addresses
	}
	t.Addresses = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses{}
	return t.Addresses
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetOrCreateBfd() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd{}
	return t.Bfd
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetOrCreateDhcp() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp{}
	return t.Dhcp
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetOrCreateIcmp() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp{}
	return t.Icmp
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary{}
	return t.Primary
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetOrCreateUnnumbered() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetOrCreateUrpfCheck() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck{}
	return t.UrpfCheck
}

// GetAddresses returns the value of the Addresses struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the receiver or the field Addresses is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetAddresses() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses {
	if t != nil && t.Addresses != nil {
		return t.Addresses
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetBfd() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetDhcp() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetIcmp() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetNeighborDiscovery() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetPrimary() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetUnnumbered() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetUrpfCheck() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetAllowDirectedBroadcasts retrieves the value of the leaf AllowDirectedBroadcasts from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowDirectedBroadcasts is set, it can
// safely use t.GetAllowDirectedBroadcasts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowDirectedBroadcasts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetAllowDirectedBroadcasts() bool {
	if t == nil || t.AllowDirectedBroadcasts == nil {
		return false
	}
	return *t.AllowDirectedBroadcasts
}

// GetIpHelperAddress retrieves the value of the leaf IpHelperAddress from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpHelperAddress is set, it can
// safely use t.GetIpHelperAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpHelperAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetIpHelperAddress() string {
	if t == nil || t.IpHelperAddress == nil {
		return ""
	}
	return *t.IpHelperAddress
}

// GetLocalDhcpServer retrieves the value of the leaf LocalDhcpServer from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDhcpServer is set, it can
// safely use t.GetLocalDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetLocalDhcpServer() string {
	if t == nil || t.LocalDhcpServer == nil {
		return ""
	}
	return *t.LocalDhcpServer
}

// GetQosRouteLookup retrieves the value of the leaf QosRouteLookup from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosRouteLookup is set, it can
// safely use t.GetQosRouteLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosRouteLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetQosRouteLookup() E_NokiaTypesRouter_QosRouteLookup {
	if t == nil || t.QosRouteLookup == 0 {
		return 0
	}
	return t.QosRouteLookup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowDirectedBroadcasts == nil {
		var v bool = false
		t.AllowDirectedBroadcasts = &v
	}
	t.Addresses.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.Primary.PopulateDefaults()
	t.Unnumbered.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
	for _, e := range t.Secondary {
		e.PopulateDefaults()
	}
	for _, e := range t.Vrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses represents the /nokia-conf/configure/service/vprn/interface/ipv4/addresses YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses struct {
	Address map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses) NewAddress(Ipv4Address string) (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address{
		Ipv4Address: &Ipv4Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv4Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses) GetOrCreateAddress(Ipv4Address string) *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address {

	key := Ipv4Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses) GetAddress(Ipv4Address string) *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses) DeleteAddress(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address struct to the
// list Address of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses) AppendAddress(v *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address represents the /nokia-conf/configure/service/vprn/interface/ipv4/addresses/address YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4Address        *string  `path:"ipv4-address" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Addresses_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd represents the /nokia-conf/configure/service/vprn/interface/ipv4/bfd YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                                    `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                    `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                                    `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                                    `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd) GetType() E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp represents the /nokia-conf/configure/service/vprn/interface/ipv4/dhcp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp struct {
	AdminState              E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Description             *string                                                             `path:"description" module:"nokia-conf"`
	GiAddress               *string                                                             `path:"gi-address" module:"nokia-conf"`
	LeasePopulate           *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate `path:"lease-populate" module:"nokia-conf"`
	Option_82               *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82     `path:"option-82" module:"nokia-conf"`
	ProxyServer             *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer   `path:"proxy-server" module:"nokia-conf"`
	PythonPolicy            *string                                                             `path:"python-policy" module:"nokia-conf"`
	RelayPlainBootp         *bool                                                               `path:"relay-plain-bootp" module:"nokia-conf"`
	RelayProxy              *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy    `path:"relay-proxy" module:"nokia-conf" yangPresence:"true"`
	ReleaseIncludeGiAddress *bool                                                               `path:"release-include-gi-address" module:"nokia-conf"`
	Server                  []string                                                            `path:"server" module:"nokia-conf"`
	SrcIpAddr               E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_SrcIpAddr    `path:"src-ip-addr" module:"nokia-conf"`
	Trusted                 *bool                                                               `path:"trusted" module:"nokia-conf"`
	UseArp                  *bool                                                               `path:"use-arp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) IsYANGGoStruct() {}

// GetOrCreateLeasePopulate retrieves the value of the LeasePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetOrCreateLeasePopulate() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate {
	if t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	t.LeasePopulate = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate{}
	return t.LeasePopulate
}

// GetOrCreateOption_82 retrieves the value of the Option_82 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetOrCreateOption_82() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82 {
	if t.Option_82 != nil {
		return t.Option_82
	}
	t.Option_82 = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82{}
	return t.Option_82
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetOrCreateProxyServer() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer{}
	return t.ProxyServer
}

// GetOrCreateRelayProxy retrieves the value of the RelayProxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetOrCreateRelayProxy() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy {
	if t.RelayProxy != nil {
		return t.RelayProxy
	}
	t.RelayProxy = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy{}
	return t.RelayProxy
}

// GetLeasePopulate returns the value of the LeasePopulate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp. If the receiver or the field LeasePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetLeasePopulate() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate {
	if t != nil && t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	return nil
}

// GetOption_82 returns the value of the Option_82 struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp. If the receiver or the field Option_82 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetOption_82() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82 {
	if t != nil && t.Option_82 != nil {
		return t.Option_82
	}
	return nil
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetProxyServer() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetRelayProxy returns the value of the RelayProxy struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp. If the receiver or the field RelayProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetRelayProxy() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy {
	if t != nil && t.RelayProxy != nil {
		return t.RelayProxy
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetRelayPlainBootp retrieves the value of the leaf RelayPlainBootp from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelayPlainBootp is set, it can
// safely use t.GetRelayPlainBootp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelayPlainBootp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetRelayPlainBootp() bool {
	if t == nil || t.RelayPlainBootp == nil {
		return false
	}
	return *t.RelayPlainBootp
}

// GetReleaseIncludeGiAddress retrieves the value of the leaf ReleaseIncludeGiAddress from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseIncludeGiAddress is set, it can
// safely use t.GetReleaseIncludeGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseIncludeGiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetReleaseIncludeGiAddress() bool {
	if t == nil || t.ReleaseIncludeGiAddress == nil {
		return false
	}
	return *t.ReleaseIncludeGiAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSrcIpAddr retrieves the value of the leaf SrcIpAddr from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIpAddr is set, it can
// safely use t.GetSrcIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetSrcIpAddr() E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_SrcIpAddr {
	if t == nil || t.SrcIpAddr == 0 {
		return NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	return t.SrcIpAddr
}

// GetTrusted retrieves the value of the leaf Trusted from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trusted is set, it can
// safely use t.GetTrusted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trusted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetTrusted() bool {
	if t == nil || t.Trusted == nil {
		return false
	}
	return *t.Trusted
}

// GetUseArp retrieves the value of the leaf UseArp from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseArp is set, it can
// safely use t.GetUseArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) GetUseArp() bool {
	if t == nil || t.UseArp == nil {
		return false
	}
	return *t.UseArp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RelayPlainBootp == nil {
		var v bool = false
		t.RelayPlainBootp = &v
	}
	if t.ReleaseIncludeGiAddress == nil {
		var v bool = false
		t.ReleaseIncludeGiAddress = &v
	}
	if t.SrcIpAddr == 0 {
		t.SrcIpAddr = NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	if t.Trusted == nil {
		var v bool = false
		t.Trusted = &v
	}
	if t.UseArp == nil {
		var v bool = false
		t.UseArp = &v
	}
	t.LeasePopulate.PopulateDefaults()
	t.Option_82.PopulateDefaults()
	t.ProxyServer.PopulateDefaults()
	t.RelayProxy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate represents the /nokia-conf/configure/service/vprn/interface/ipv4/dhcp/lease-populate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate struct {
	MaxLeases *uint32 `path:"max-leases" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) IsYANGGoStruct() {}

// GetMaxLeases retrieves the value of the leaf MaxLeases from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLeases is set, it can
// safely use t.GetMaxLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) GetMaxLeases() uint32 {
	if t == nil || t.MaxLeases == nil {
		return 0
	}
	return *t.MaxLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_LeasePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82 represents the /nokia-conf/configure/service/vprn/interface/ipv4/dhcp/option-82 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82 struct {
	Action               E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_Action              `path:"action" module:"nokia-conf"`
	CircuitId            *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId            `path:"circuit-id" module:"nokia-conf"`
	RemoteId             *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId             `path:"remote-id" module:"nokia-conf"`
	VendorSpecificOption *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption `path:"vendor-specific-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) IsYANGGoStruct() {}

// GetOrCreateCircuitId retrieves the value of the CircuitId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetOrCreateCircuitId() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId {
	if t.CircuitId != nil {
		return t.CircuitId
	}
	t.CircuitId = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId{}
	return t.CircuitId
}

// GetOrCreateRemoteId retrieves the value of the RemoteId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetOrCreateRemoteId() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId {
	if t.RemoteId != nil {
		return t.RemoteId
	}
	t.RemoteId = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId{}
	return t.RemoteId
}

// GetOrCreateVendorSpecificOption retrieves the value of the VendorSpecificOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetOrCreateVendorSpecificOption() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	t.VendorSpecificOption = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption{}
	return t.VendorSpecificOption
}

// GetCircuitId returns the value of the CircuitId struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field CircuitId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetCircuitId() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId {
	if t != nil && t.CircuitId != nil {
		return t.CircuitId
	}
	return nil
}

// GetRemoteId returns the value of the RemoteId struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field RemoteId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetRemoteId() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId {
	if t != nil && t.RemoteId != nil {
		return t.RemoteId
	}
	return nil
}

// GetVendorSpecificOption returns the value of the VendorSpecificOption struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field VendorSpecificOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetVendorSpecificOption() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t != nil && t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) GetAction() E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_Action_keep
	}
	return t.Action
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_Action_keep
	}
	t.CircuitId.PopulateDefaults()
	t.RemoteId.PopulateDefaults()
	t.VendorSpecificOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId represents the /nokia-conf/configure/service/vprn/interface/ipv4/dhcp/option-82/circuit-id YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId struct {
	AsciiTuple     YANGEmpty `path:"ascii-tuple" module:"nokia-conf"`
	Ifindex        YANGEmpty `path:"ifindex" module:"nokia-conf"`
	None           YANGEmpty `path:"none" module:"nokia-conf"`
	SapId          YANGEmpty `path:"sap-id" module:"nokia-conf"`
	VlanAsciiTuple YANGEmpty `path:"vlan-ascii-tuple" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) IsYANGGoStruct() {}

// GetAsciiTuple retrieves the value of the leaf AsciiTuple from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiTuple is set, it can
// safely use t.GetAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetAsciiTuple() YANGEmpty {
	if t == nil || t.AsciiTuple == false {
		return false
	}
	return t.AsciiTuple
}

// GetIfindex retrieves the value of the leaf Ifindex from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ifindex is set, it can
// safely use t.GetIfindex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ifindex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetIfindex() YANGEmpty {
	if t == nil || t.Ifindex == false {
		return false
	}
	return t.Ifindex
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetSapId() YANGEmpty {
	if t == nil || t.SapId == false {
		return false
	}
	return t.SapId
}

// GetVlanAsciiTuple retrieves the value of the leaf VlanAsciiTuple from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanAsciiTuple is set, it can
// safely use t.GetVlanAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanAsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetVlanAsciiTuple() YANGEmpty {
	if t == nil || t.VlanAsciiTuple == false {
		return false
	}
	return t.VlanAsciiTuple
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId represents the /nokia-conf/configure/service/vprn/interface/ipv4/dhcp/option-82/remote-id YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId struct {
	AsciiString *string   `path:"ascii-string" module:"nokia-conf"`
	Mac         YANGEmpty `path:"mac" module:"nokia-conf"`
	None        YANGEmpty `path:"none" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) IsYANGGoStruct() {}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetMac() YANGEmpty {
	if t == nil || t.Mac == false {
		return false
	}
	return t.Mac
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption represents the /nokia-conf/configure/service/vprn/interface/ipv4/dhcp/option-82/vendor-specific-option YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption struct {
	ClientMacAddress *bool   `path:"client-mac-address" module:"nokia-conf"`
	PoolName         *bool   `path:"pool-name" module:"nokia-conf"`
	SapId            *bool   `path:"sap-id" module:"nokia-conf"`
	ServiceId        *bool   `path:"service-id" module:"nokia-conf"`
	String           *string `path:"string" module:"nokia-conf"`
	SystemId         *bool   `path:"system-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) IsYANGGoStruct() {
}

// GetClientMacAddress retrieves the value of the leaf ClientMacAddress from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMacAddress is set, it can
// safely use t.GetClientMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetClientMacAddress() bool {
	if t == nil || t.ClientMacAddress == nil {
		return false
	}
	return *t.ClientMacAddress
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetPoolName() bool {
	if t == nil || t.PoolName == nil {
		return false
	}
	return *t.PoolName
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSapId() bool {
	if t == nil || t.SapId == nil {
		return false
	}
	return *t.SapId
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetServiceId() bool {
	if t == nil || t.ServiceId == nil {
		return false
	}
	return *t.ServiceId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSystemId() bool {
	if t == nil || t.SystemId == nil {
		return false
	}
	return *t.SystemId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClientMacAddress == nil {
		var v bool = false
		t.ClientMacAddress = &v
	}
	if t.PoolName == nil {
		var v bool = false
		t.PoolName = &v
	}
	if t.SapId == nil {
		var v bool = false
		t.SapId = &v
	}
	if t.ServiceId == nil {
		var v bool = false
		t.ServiceId = &v
	}
	if t.SystemId == nil {
		var v bool = false
		t.SystemId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer represents the /nokia-conf/configure/service/vprn/interface/ipv4/dhcp/proxy-server YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer struct {
	AdminState     E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	EmulatedServer *string                                                                     `path:"emulated-server" module:"nokia-conf"`
	LeaseTime      *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime `path:"lease-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) IsYANGGoStruct() {}

// GetOrCreateLeaseTime retrieves the value of the LeaseTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) GetOrCreateLeaseTime() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime {
	if t.LeaseTime != nil {
		return t.LeaseTime
	}
	t.LeaseTime = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime{}
	return t.LeaseTime
}

// GetLeaseTime returns the value of the LeaseTime struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer. If the receiver or the field LeaseTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) GetLeaseTime() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime {
	if t != nil && t.LeaseTime != nil {
		return t.LeaseTime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEmulatedServer retrieves the value of the leaf EmulatedServer from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EmulatedServer is set, it can
// safely use t.GetEmulatedServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EmulatedServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) GetEmulatedServer() string {
	if t == nil || t.EmulatedServer == nil {
		return ""
	}
	return *t.EmulatedServer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.LeaseTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime represents the /nokia-conf/configure/service/vprn/interface/ipv4/dhcp/proxy-server/lease-time YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime struct {
	RadiusOverride *bool   `path:"radius-override" module:"nokia-conf"`
	Value          *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) IsYANGGoStruct() {}

// GetRadiusOverride retrieves the value of the leaf RadiusOverride from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusOverride is set, it can
// safely use t.GetRadiusOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) GetRadiusOverride() bool {
	if t == nil || t.RadiusOverride == nil {
		return false
	}
	return *t.RadiusOverride
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RadiusOverride == nil {
		var v bool = false
		t.RadiusOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_ProxyServer_LeaseTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy represents the /nokia-conf/configure/service/vprn/interface/ipv4/dhcp/relay-proxy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy struct {
	ReleaseUpdateSrcIp *bool   `path:"release-update-src-ip" module:"nokia-conf"`
	SiaddrOverride     *string `path:"siaddr-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) IsYANGGoStruct() {}

// GetReleaseUpdateSrcIp retrieves the value of the leaf ReleaseUpdateSrcIp from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseUpdateSrcIp is set, it can
// safely use t.GetReleaseUpdateSrcIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseUpdateSrcIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) GetReleaseUpdateSrcIp() bool {
	if t == nil || t.ReleaseUpdateSrcIp == nil {
		return false
	}
	return *t.ReleaseUpdateSrcIp
}

// GetSiaddrOverride retrieves the value of the leaf SiaddrOverride from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SiaddrOverride is set, it can
// safely use t.GetSiaddrOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SiaddrOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) GetSiaddrOverride() string {
	if t == nil || t.SiaddrOverride == nil {
		return ""
	}
	return *t.SiaddrOverride
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReleaseUpdateSrcIp == nil {
		var v bool = false
		t.ReleaseUpdateSrcIp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Dhcp_RelayProxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp represents the /nokia-conf/configure/service/vprn/interface/ipv4/icmp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp struct {
	MaskReply    *bool                                                              `path:"mask-reply" module:"nokia-conf"`
	ParamProblem *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem `path:"param-problem" module:"nokia-conf"`
	Redirects    *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects    `path:"redirects" module:"nokia-conf"`
	TtlExpired   *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired   `path:"ttl-expired" module:"nokia-conf"`
	Unreachables *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables `path:"unreachables" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) IsYANGGoStruct() {}

// GetOrCreateParamProblem retrieves the value of the ParamProblem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) GetOrCreateParamProblem() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem {
	if t.ParamProblem != nil {
		return t.ParamProblem
	}
	t.ParamProblem = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem{}
	return t.ParamProblem
}

// GetOrCreateRedirects retrieves the value of the Redirects field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) GetOrCreateRedirects() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects {
	if t.Redirects != nil {
		return t.Redirects
	}
	t.Redirects = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects{}
	return t.Redirects
}

// GetOrCreateTtlExpired retrieves the value of the TtlExpired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) GetOrCreateTtlExpired() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired {
	if t.TtlExpired != nil {
		return t.TtlExpired
	}
	t.TtlExpired = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired{}
	return t.TtlExpired
}

// GetOrCreateUnreachables retrieves the value of the Unreachables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) GetOrCreateUnreachables() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables {
	if t.Unreachables != nil {
		return t.Unreachables
	}
	t.Unreachables = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables{}
	return t.Unreachables
}

// GetParamProblem returns the value of the ParamProblem struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp. If the receiver or the field ParamProblem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) GetParamProblem() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem {
	if t != nil && t.ParamProblem != nil {
		return t.ParamProblem
	}
	return nil
}

// GetRedirects returns the value of the Redirects struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp. If the receiver or the field Redirects is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) GetRedirects() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects {
	if t != nil && t.Redirects != nil {
		return t.Redirects
	}
	return nil
}

// GetTtlExpired returns the value of the TtlExpired struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp. If the receiver or the field TtlExpired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) GetTtlExpired() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired {
	if t != nil && t.TtlExpired != nil {
		return t.TtlExpired
	}
	return nil
}

// GetUnreachables returns the value of the Unreachables struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp. If the receiver or the field Unreachables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) GetUnreachables() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables {
	if t != nil && t.Unreachables != nil {
		return t.Unreachables
	}
	return nil
}

// GetMaskReply retrieves the value of the leaf MaskReply from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaskReply is set, it can
// safely use t.GetMaskReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaskReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) GetMaskReply() bool {
	if t == nil || t.MaskReply == nil {
		return true
	}
	return *t.MaskReply
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaskReply == nil {
		var v bool = true
		t.MaskReply = &v
	}
	t.ParamProblem.PopulateDefaults()
	t.Redirects.PopulateDefaults()
	t.TtlExpired.PopulateDefaults()
	t.Unreachables.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem represents the /nokia-conf/configure/service/vprn/interface/ipv4/icmp/param-problem YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint32                     `path:"number" module:"nokia-conf"`
	Seconds    *uint32                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint32 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint32 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_ParamProblem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects represents the /nokia-conf/configure/service/vprn/interface/ipv4/icmp/redirects YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Redirects) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired represents the /nokia-conf/configure/service/vprn/interface/ipv4/icmp/ttl-expired YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_TtlExpired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables represents the /nokia-conf/configure/service/vprn/interface/ipv4/icmp/unreachables YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Icmp_Unreachables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery represents the /nokia-conf/configure/service/vprn/interface/ipv4/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery struct {
	HostRoute                *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute                 `path:"host-route" module:"nokia-conf"`
	LearnUnsolicited         *bool                                                                                        `path:"learn-unsolicited" module:"nokia-conf"`
	Limit                    *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit                     `path:"limit" module:"nokia-conf"`
	LocalProxyArp            *bool                                                                                        `path:"local-proxy-arp" module:"nokia-conf"`
	Populate                 *bool                                                                                        `path:"populate" module:"nokia-conf"`
	PopulateHost             *bool                                                                                        `path:"populate-host" module:"nokia-conf"`
	ProactiveRefresh         *bool                                                                                        `path:"proactive-refresh" module:"nokia-conf"`
	ProxyArpPolicy           []string                                                                                     `path:"proxy-arp-policy" module:"nokia-conf"`
	RemoteProxyArp           *bool                                                                                        `path:"remote-proxy-arp" module:"nokia-conf"`
	RetryTimer               *uint32                                                                                      `path:"retry-timer" module:"nokia-conf"`
	RouteTag                 *uint32                                                                                      `path:"route-tag" module:"nokia-conf"`
	StaticNeighbor           map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor `path:"static-neighbor" module:"nokia-conf"`
	StaticNeighborUnnumbered *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered  `path:"static-neighbor-unnumbered" module:"nokia-conf" yangPresence:"true"`
	Timeout                  *uint32                                                                                      `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) IsYANGGoStruct() {}

// NewStaticNeighbor creates a new entry in the StaticNeighbor list of the
// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) NewStaticNeighbor(Ipv4Address string) (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticNeighbor", key)
	}

	t.StaticNeighbor[key] = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor{
		Ipv4Address: &Ipv4Address,
	}

	return t.StaticNeighbor[key], nil
}

// RenameStaticNeighbor renames an entry in the list StaticNeighbor within
// the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) RenameStaticNeighbor(oldK, newK string) error {
	if _, ok := t.StaticNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticNeighbor", newK)
	}

	e, ok := t.StaticNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticNeighbor", oldK)
	}
	e.Ipv4Address = &newK

	t.StaticNeighbor[newK] = e
	delete(t.StaticNeighbor, oldK)
	return nil
}

// GetOrCreateStaticNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetOrCreateStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor {

	key := Ipv4Address

	if v, ok := t.StaticNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticNeighbor(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetStaticNeighbor retrieves the value with the specified key from
// the StaticNeighbor map field of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.StaticNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) DeleteStaticNeighbor(Ipv4Address string) {
	key := Ipv4Address

	delete(t.StaticNeighbor, key)
}

// AppendStaticNeighbor appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct to the
// list StaticNeighbor of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) AppendStaticNeighbor(v *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	if _, ok := t.StaticNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list StaticNeighbor %v", key)
	}

	t.StaticNeighbor[key] = v
	return nil
}

// GetOrCreateHostRoute retrieves the value of the HostRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetOrCreateHostRoute() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute {
	if t.HostRoute != nil {
		return t.HostRoute
	}
	t.HostRoute = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute{}
	return t.HostRoute
}

// GetOrCreateLimit retrieves the value of the Limit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetOrCreateLimit() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit {
	if t.Limit != nil {
		return t.Limit
	}
	t.Limit = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit{}
	return t.Limit
}

// GetOrCreateStaticNeighborUnnumbered retrieves the value of the StaticNeighborUnnumbered field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetOrCreateStaticNeighborUnnumbered() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered {
	if t.StaticNeighborUnnumbered != nil {
		return t.StaticNeighborUnnumbered
	}
	t.StaticNeighborUnnumbered = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered{}
	return t.StaticNeighborUnnumbered
}

// GetHostRoute returns the value of the HostRoute struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If the receiver or the field HostRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetHostRoute() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute {
	if t != nil && t.HostRoute != nil {
		return t.HostRoute
	}
	return nil
}

// GetLimit returns the value of the Limit struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If the receiver or the field Limit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetLimit() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit {
	if t != nil && t.Limit != nil {
		return t.Limit
	}
	return nil
}

// GetStaticNeighborUnnumbered returns the value of the StaticNeighborUnnumbered struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery. If the receiver or the field StaticNeighborUnnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetStaticNeighborUnnumbered() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered {
	if t != nil && t.StaticNeighborUnnumbered != nil {
		return t.StaticNeighborUnnumbered
	}
	return nil
}

// GetLearnUnsolicited retrieves the value of the leaf LearnUnsolicited from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnUnsolicited is set, it can
// safely use t.GetLearnUnsolicited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnUnsolicited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetLearnUnsolicited() bool {
	if t == nil || t.LearnUnsolicited == nil {
		return false
	}
	return *t.LearnUnsolicited
}

// GetLocalProxyArp retrieves the value of the leaf LocalProxyArp from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalProxyArp is set, it can
// safely use t.GetLocalProxyArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalProxyArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetLocalProxyArp() bool {
	if t == nil || t.LocalProxyArp == nil {
		return false
	}
	return *t.LocalProxyArp
}

// GetPopulate retrieves the value of the leaf Populate from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Populate is set, it can
// safely use t.GetPopulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Populate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetPopulate() bool {
	if t == nil || t.Populate == nil {
		return false
	}
	return *t.Populate
}

// GetPopulateHost retrieves the value of the leaf PopulateHost from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PopulateHost is set, it can
// safely use t.GetPopulateHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PopulateHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetPopulateHost() bool {
	if t == nil || t.PopulateHost == nil {
		return false
	}
	return *t.PopulateHost
}

// GetProactiveRefresh retrieves the value of the leaf ProactiveRefresh from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProactiveRefresh is set, it can
// safely use t.GetProactiveRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProactiveRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetProactiveRefresh() bool {
	if t == nil || t.ProactiveRefresh == nil {
		return false
	}
	return *t.ProactiveRefresh
}

// GetProxyArpPolicy retrieves the value of the leaf ProxyArpPolicy from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyArpPolicy is set, it can
// safely use t.GetProxyArpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyArpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetProxyArpPolicy() []string {
	if t == nil || t.ProxyArpPolicy == nil {
		return nil
	}
	return t.ProxyArpPolicy
}

// GetRemoteProxyArp retrieves the value of the leaf RemoteProxyArp from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteProxyArp is set, it can
// safely use t.GetRemoteProxyArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteProxyArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetRemoteProxyArp() bool {
	if t == nil || t.RemoteProxyArp == nil {
		return false
	}
	return *t.RemoteProxyArp
}

// GetRetryTimer retrieves the value of the leaf RetryTimer from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryTimer is set, it can
// safely use t.GetRetryTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetRetryTimer() uint32 {
	if t == nil || t.RetryTimer == nil {
		return 50
	}
	return *t.RetryTimer
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 14400
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LearnUnsolicited == nil {
		var v bool = false
		t.LearnUnsolicited = &v
	}
	if t.Populate == nil {
		var v bool = false
		t.Populate = &v
	}
	if t.PopulateHost == nil {
		var v bool = false
		t.PopulateHost = &v
	}
	if t.ProactiveRefresh == nil {
		var v bool = false
		t.ProactiveRefresh = &v
	}
	if t.RemoteProxyArp == nil {
		var v bool = false
		t.RemoteProxyArp = &v
	}
	if t.RetryTimer == nil {
		var v uint32 = 50
		t.RetryTimer = &v
	}
	if t.Timeout == nil {
		var v uint32 = 14400
		t.Timeout = &v
	}
	t.HostRoute.PopulateDefaults()
	t.Limit.PopulateDefaults()
	t.StaticNeighborUnnumbered.PopulateDefaults()
	for _, e := range t.StaticNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute represents the /nokia-conf/configure/service/vprn/interface/ipv4/neighbor-discovery/host-route YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute struct {
	Populate map[E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate `path:"populate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) IsYANGGoStruct() {
}

// NewPopulate creates a new entry in the Populate list of the
// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) NewPopulate(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType) (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Populate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Populate", key)
	}

	t.Populate[key] = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate{
		RouteType: RouteType,
	}

	return t.Populate[key], nil
}

// RenamePopulate renames an entry in the list Populate within
// the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) RenamePopulate(oldK, newK E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType) error {
	if _, ok := t.Populate[newK]; ok {
		return fmt.Errorf("key %v already exists in Populate", newK)
	}

	e, ok := t.Populate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Populate", oldK)
	}
	e.RouteType = newK

	t.Populate[newK] = e
	delete(t.Populate, oldK)
	return nil
}

// GetOrCreatePopulate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) GetOrCreatePopulate(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType) *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate {

	key := RouteType

	if v, ok := t.Populate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPopulate(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePopulate got unexpected error: %v", err))
	}
	return v
}

// GetPopulate retrieves the value with the specified key from
// the Populate map field of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) GetPopulate(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType) *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate {

	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Populate[key]; ok {
		return lm
	}
	return nil
}

// DeletePopulate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) DeletePopulate(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType) {
	key := RouteType

	delete(t.Populate, key)
}

// AppendPopulate appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate struct to the
// list Populate of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) AppendPopulate(v *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType]*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate)
	}

	if _, ok := t.Populate[key]; ok {
		return fmt.Errorf("duplicate key for list Populate %v", key)
	}

	t.Populate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Populate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate represents the /nokia-conf/configure/service/vprn/interface/ipv4/neighbor-discovery/host-route/populate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate struct {
	ApplyGroups        []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteTag           *uint32                                                                                          `path:"route-tag" module:"nokia-conf"`
	RouteType          E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType `path:"route-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) GetRouteType() E_NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_HostRoute_Populate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit represents the /nokia-conf/configure/service/vprn/interface/ipv4/neighbor-discovery/limit YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit struct {
	LogOnly    *bool   `path:"log-only" module:"nokia-conf"`
	MaxEntries *int32  `path:"max-entries" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) GetMaxEntries() int32 {
	if t == nil || t.MaxEntries == nil {
		return 0
	}
	return *t.MaxEntries
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_Limit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor represents the /nokia-conf/configure/service/vprn/interface/ipv4/neighbor-discovery/static-neighbor YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4Address        *string  `path:"ipv4-address" module:"nokia-conf"`
	MacAddress         *string  `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered represents the /nokia-conf/configure/service/vprn/interface/ipv4/neighbor-discovery/static-neighbor-unnumbered YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered struct {
	MacAddress *string `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) IsYANGGoStruct() {
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary represents the /nokia-conf/configure/service/vprn/interface/ipv4/primary YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary struct {
	Address            *string                                     `path:"address" module:"nokia-conf"`
	ApplyGroups        []string                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Broadcast          E_NokiaTypesServices_BroadcastAddressFormat `path:"broadcast" module:"nokia-conf"`
	PrefixLength       *uint32                                     `path:"prefix-length" module:"nokia-conf"`
	TrackSrrp          *uint32                                     `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBroadcast retrieves the value of the leaf Broadcast from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Broadcast is set, it can
// safely use t.GetBroadcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Broadcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary) GetBroadcast() E_NokiaTypesServices_BroadcastAddressFormat {
	if t == nil || t.Broadcast == 0 {
		return NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	return t.Broadcast
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Broadcast == 0 {
		t.Broadcast = NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary represents the /nokia-conf/configure/service/vprn/interface/ipv4/secondary YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary struct {
	Address            *string                                     `path:"address" module:"nokia-conf"`
	ApplyGroups        []string                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Broadcast          E_NokiaTypesServices_BroadcastAddressFormat `path:"broadcast" module:"nokia-conf"`
	IgpInhibit         *bool                                       `path:"igp-inhibit" module:"nokia-conf"`
	PrefixLength       *uint32                                     `path:"prefix-length" module:"nokia-conf"`
	TrackSrrp          *uint32                                     `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBroadcast retrieves the value of the leaf Broadcast from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Broadcast is set, it can
// safely use t.GetBroadcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Broadcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) GetBroadcast() E_NokiaTypesServices_BroadcastAddressFormat {
	if t == nil || t.Broadcast == 0 {
		return NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	return t.Broadcast
}

// GetIgpInhibit retrieves the value of the leaf IgpInhibit from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpInhibit is set, it can
// safely use t.GetIgpInhibit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpInhibit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) GetIgpInhibit() bool {
	if t == nil || t.IgpInhibit == nil {
		return false
	}
	return *t.IgpInhibit
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Broadcast == 0 {
		t.Broadcast = NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	if t.IgpInhibit == nil {
		var v bool = false
		t.IgpInhibit = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Secondary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered represents the /nokia-conf/configure/service/vprn/interface/ipv4/unnumbered YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
	IpIntName *string `path:"ip-int-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Unnumbered) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck represents the /nokia-conf/configure/service/vprn/interface/ipv4/urpf-check YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck struct {
	IgnoreDefault *bool                            `path:"ignore-default" module:"nokia-conf"`
	Mode          E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck) IsYANGGoStruct() {}

// GetIgnoreDefault retrieves the value of the leaf IgnoreDefault from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefault is set, it can
// safely use t.GetIgnoreDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck) GetIgnoreDefault() bool {
	if t == nil || t.IgnoreDefault == nil {
		return false
	}
	return *t.IgnoreDefault
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreDefault == nil {
		var v bool = false
		t.IgnoreDefault = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp represents the /nokia-conf/configure/service/vprn/interface/ipv4/vrrp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp struct {
	AdminState         E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey  *string                                                           `path:"authentication-key" module:"nokia-conf"`
	Backup             []string                                                          `path:"backup" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	InitDelay          *uint32                                                           `path:"init-delay" module:"nokia-conf"`
	Mac                *string                                                           `path:"mac" module:"nokia-conf"`
	MasterIntInherit   *bool                                                             `path:"master-int-inherit" module:"nokia-conf"`
	MessageInterval    *uint32                                                           `path:"message-interval" module:"nokia-conf"`
	MonitorOperGroup   *string                                                           `path:"monitor-oper-group" module:"nokia-conf"`
	NtpReply           *bool                                                             `path:"ntp-reply" module:"nokia-conf"`
	OperGroup          *string                                                           `path:"oper-group" module:"nokia-conf"`
	Owner              *bool                                                             `path:"owner" module:"nokia-conf"`
	Passive            *bool                                                             `path:"passive" module:"nokia-conf"`
	PingReply          *bool                                                             `path:"ping-reply" module:"nokia-conf"`
	Policy             *uint32                                                           `path:"policy" module:"nokia-conf"`
	Preempt            *bool                                                             `path:"preempt" module:"nokia-conf"`
	Priority           *uint32                                                           `path:"priority" module:"nokia-conf"`
	SshReply           *bool                                                             `path:"ssh-reply" module:"nokia-conf"`
	StandbyForwarding  *bool                                                             `path:"standby-forwarding" module:"nokia-conf"`
	TelnetReply        *bool                                                             `path:"telnet-reply" module:"nokia-conf"`
	TracerouteReply    *bool                                                             `path:"traceroute-reply" module:"nokia-conf"`
	VirtualRouterId    *int32                                                            `path:"virtual-router-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetBfdLiveness() *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetBackup retrieves the value of the leaf Backup from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetBackup() []string {
	if t == nil || t.Backup == nil {
		return nil
	}
	return t.Backup
}

// GetInitDelay retrieves the value of the leaf InitDelay from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitDelay is set, it can
// safely use t.GetInitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetInitDelay() uint32 {
	if t == nil || t.InitDelay == nil {
		return 0
	}
	return *t.InitDelay
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMasterIntInherit retrieves the value of the leaf MasterIntInherit from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasterIntInherit is set, it can
// safely use t.GetMasterIntInherit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasterIntInherit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetMasterIntInherit() bool {
	if t == nil || t.MasterIntInherit == nil {
		return false
	}
	return *t.MasterIntInherit
}

// GetMessageInterval retrieves the value of the leaf MessageInterval from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageInterval is set, it can
// safely use t.GetMessageInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetMessageInterval() uint32 {
	if t == nil || t.MessageInterval == nil {
		return 10
	}
	return *t.MessageInterval
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetNtpReply retrieves the value of the leaf NtpReply from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtpReply is set, it can
// safely use t.GetNtpReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtpReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetNtpReply() bool {
	if t == nil || t.NtpReply == nil {
		return false
	}
	return *t.NtpReply
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetOwner() bool {
	if t == nil || t.Owner == nil {
		return false
	}
	return *t.Owner
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPingReply retrieves the value of the leaf PingReply from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PingReply is set, it can
// safely use t.GetPingReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PingReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetPingReply() bool {
	if t == nil || t.PingReply == nil {
		return false
	}
	return *t.PingReply
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetPolicy() uint32 {
	if t == nil || t.Policy == nil {
		return 0
	}
	return *t.Policy
}

// GetPreempt retrieves the value of the leaf Preempt from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetSshReply retrieves the value of the leaf SshReply from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshReply is set, it can
// safely use t.GetSshReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetSshReply() bool {
	if t == nil || t.SshReply == nil {
		return false
	}
	return *t.SshReply
}

// GetStandbyForwarding retrieves the value of the leaf StandbyForwarding from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbyForwarding is set, it can
// safely use t.GetStandbyForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbyForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetStandbyForwarding() bool {
	if t == nil || t.StandbyForwarding == nil {
		return false
	}
	return *t.StandbyForwarding
}

// GetTelnetReply retrieves the value of the leaf TelnetReply from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetReply is set, it can
// safely use t.GetTelnetReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetTelnetReply() bool {
	if t == nil || t.TelnetReply == nil {
		return false
	}
	return *t.TelnetReply
}

// GetTracerouteReply retrieves the value of the leaf TracerouteReply from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TracerouteReply is set, it can
// safely use t.GetTracerouteReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TracerouteReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetTracerouteReply() bool {
	if t == nil || t.TracerouteReply == nil {
		return false
	}
	return *t.TracerouteReply
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualRouterId is set, it can
// safely use t.GetVirtualRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualRouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) GetVirtualRouterId() int32 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MessageInterval == nil {
		var v uint32 = 10
		t.MessageInterval = &v
	}
	if t.NtpReply == nil {
		var v bool = false
		t.NtpReply = &v
	}
	if t.Owner == nil {
		var v bool = false
		t.Owner = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.PingReply == nil {
		var v bool = false
		t.PingReply = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.SshReply == nil {
		var v bool = false
		t.SshReply = &v
	}
	if t.StandbyForwarding == nil {
		var v bool = false
		t.StandbyForwarding = &v
	}
	if t.TelnetReply == nil {
		var v bool = false
		t.TelnetReply = &v
	}
	if t.TracerouteReply == nil {
		var v bool = false
		t.TracerouteReply = &v
	}
	t.BfdLiveness.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness represents the /nokia-conf/configure/service/vprn/interface/ipv4/vrrp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DestIp             *string  `path:"dest-ip" module:"nokia-conf"`
	InterfaceName      *string  `path:"interface-name" module:"nokia-conf"`
	ServiceName        *string  `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv4_Vrrp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6 represents the /nokia-conf/configure/service/vprn/interface/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6 struct {
	Address                   map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address `path:"address" module:"nokia-conf"`
	Bfd                       *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd                `path:"bfd" module:"nokia-conf"`
	Dhcp6                     *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6              `path:"dhcp6" module:"nokia-conf"`
	DuplicateAddressDetection *bool                                                               `path:"duplicate-address-detection" module:"nokia-conf"`
	ForwardIpv4Packets        *bool                                                               `path:"forward-ipv4-packets" module:"nokia-conf"`
	Icmp6                     *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6              `path:"icmp6" module:"nokia-conf"`
	LinkLocalAddress          *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress   `path:"link-local-address" module:"nokia-conf"`
	LocalDhcpServer           *string                                                             `path:"local-dhcp-server" module:"nokia-conf"`
	NeighborDiscovery         *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery  `path:"neighbor-discovery" module:"nokia-conf"`
	QosRouteLookup            E_NokiaTypesRouter_QosRouteLookup                                   `path:"qos-route-lookup" module:"nokia-conf"`
	TcpMss                    *uint32                                                             `path:"tcp-mss" module:"nokia-conf"`
	UrpfCheck                 *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck          `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
	Vrrp                      map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp     `path:"vrrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Service_Vprn_Interface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) NewAddress(Ipv6Address string) (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address{
		Ipv6Address: &Ipv6Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Service_Vprn_Interface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv6Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetOrCreateAddress(Ipv6Address string) *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address {

	key := Ipv6Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetAddress(Ipv6Address string) *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) DeleteAddress(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address struct to the
// list Address of NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) AppendAddress(v *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewVrrp creates a new entry in the Vrrp list of the
// NokiaConf_Configure_Service_Vprn_Interface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) NewVrrp(VirtualRouterId int32) (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrrp", key)
	}

	t.Vrrp[key] = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp{
		VirtualRouterId: &VirtualRouterId,
	}

	return t.Vrrp[key], nil
}

// RenameVrrp renames an entry in the list Vrrp within
// the NokiaConf_Configure_Service_Vprn_Interface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) RenameVrrp(oldK, newK int32) error {
	if _, ok := t.Vrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in Vrrp", newK)
	}

	e, ok := t.Vrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vrrp", oldK)
	}
	e.VirtualRouterId = &newK

	t.Vrrp[newK] = e
	delete(t.Vrrp, oldK)
	return nil
}

// GetOrCreateVrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetOrCreateVrrp(VirtualRouterId int32) *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp {

	key := VirtualRouterId

	if v, ok := t.Vrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrp(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrp got unexpected error: %v", err))
	}
	return v
}

// GetVrrp retrieves the value with the specified key from
// the Vrrp map field of NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetVrrp(VirtualRouterId int32) *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.Vrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) DeleteVrrp(VirtualRouterId int32) {
	key := VirtualRouterId

	delete(t.Vrrp, key)
}

// AppendVrrp appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp struct to the
// list Vrrp of NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) AppendVrrp(v *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) error {
	if v.VirtualRouterId == nil {
		return fmt.Errorf("invalid nil key received for VirtualRouterId")
	}

	key := *v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp)
	}

	if _, ok := t.Vrrp[key]; ok {
		return fmt.Errorf("duplicate key for list Vrrp %v", key)
	}

	t.Vrrp[key] = v
	return nil
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetOrCreateBfd() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd{}
	return t.Bfd
}

// GetOrCreateDhcp6 retrieves the value of the Dhcp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetOrCreateDhcp6() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6 {
	if t.Dhcp6 != nil {
		return t.Dhcp6
	}
	t.Dhcp6 = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6{}
	return t.Dhcp6
}

// GetOrCreateIcmp6 retrieves the value of the Icmp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetOrCreateIcmp6() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6 {
	if t.Icmp6 != nil {
		return t.Icmp6
	}
	t.Icmp6 = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6{}
	return t.Icmp6
}

// GetOrCreateLinkLocalAddress retrieves the value of the LinkLocalAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetOrCreateLinkLocalAddress() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress {
	if t.LinkLocalAddress != nil {
		return t.LinkLocalAddress
	}
	t.LinkLocalAddress = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress{}
	return t.LinkLocalAddress
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetOrCreateUrpfCheck() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck{}
	return t.UrpfCheck
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetBfd() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetDhcp6 returns the value of the Dhcp6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If the receiver or the field Dhcp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetDhcp6() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6 {
	if t != nil && t.Dhcp6 != nil {
		return t.Dhcp6
	}
	return nil
}

// GetIcmp6 returns the value of the Icmp6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If the receiver or the field Icmp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetIcmp6() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6 {
	if t != nil && t.Icmp6 != nil {
		return t.Icmp6
	}
	return nil
}

// GetLinkLocalAddress returns the value of the LinkLocalAddress struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If the receiver or the field LinkLocalAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetLinkLocalAddress() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress {
	if t != nil && t.LinkLocalAddress != nil {
		return t.LinkLocalAddress
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetNeighborDiscovery() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetUrpfCheck() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// GetForwardIpv4Packets retrieves the value of the leaf ForwardIpv4Packets from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardIpv4Packets is set, it can
// safely use t.GetForwardIpv4Packets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardIpv4Packets == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetForwardIpv4Packets() bool {
	if t == nil || t.ForwardIpv4Packets == nil {
		return false
	}
	return *t.ForwardIpv4Packets
}

// GetLocalDhcpServer retrieves the value of the leaf LocalDhcpServer from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDhcpServer is set, it can
// safely use t.GetLocalDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetLocalDhcpServer() string {
	if t == nil || t.LocalDhcpServer == nil {
		return ""
	}
	return *t.LocalDhcpServer
}

// GetQosRouteLookup retrieves the value of the leaf QosRouteLookup from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosRouteLookup is set, it can
// safely use t.GetQosRouteLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosRouteLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetQosRouteLookup() E_NokiaTypesRouter_QosRouteLookup {
	if t == nil || t.QosRouteLookup == 0 {
		return 0
	}
	return t.QosRouteLookup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
	if t.ForwardIpv4Packets == nil {
		var v bool = false
		t.ForwardIpv4Packets = &v
	}
	t.Bfd.PopulateDefaults()
	t.Dhcp6.PopulateDefaults()
	t.Icmp6.PopulateDefaults()
	t.LinkLocalAddress.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
	for _, e := range t.Vrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address represents the /nokia-conf/configure/service/vprn/interface/ipv6/address YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address struct {
	ApplyGroups               []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DuplicateAddressDetection *bool    `path:"duplicate-address-detection" module:"nokia-conf"`
	Eui_64                    *bool    `path:"eui-64" module:"nokia-conf"`
	Ipv6Address               *string  `path:"ipv6-address" module:"nokia-conf"`
	PrefixLength              *uint32  `path:"prefix-length" module:"nokia-conf"`
	PrimaryPreference         *uint32  `path:"primary-preference" module:"nokia-conf"`
	TrackSrrp                 *uint32  `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// GetEui_64 retrieves the value of the leaf Eui_64 from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eui_64 is set, it can
// safely use t.GetEui_64() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eui_64 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) GetEui_64() bool {
	if t == nil || t.Eui_64 == nil {
		return false
	}
	return *t.Eui_64
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetPrimaryPreference retrieves the value of the leaf PrimaryPreference from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryPreference is set, it can
// safely use t.GetPrimaryPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) GetPrimaryPreference() uint32 {
	if t == nil || t.PrimaryPreference == nil {
		return 0
	}
	return *t.PrimaryPreference
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
	if t.Eui_64 == nil {
		var v bool = false
		t.Eui_64 = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd represents the /nokia-conf/configure/service/vprn/interface/ipv6/bfd YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                                    `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                    `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                                    `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                                    `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd) GetType() E_NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6 represents the /nokia-conf/configure/service/vprn/interface/ipv6/dhcp6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6 struct {
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Relay              *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay  `path:"relay" module:"nokia-conf"`
	Server             *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6) IsYANGGoStruct() {}

// GetOrCreateRelay retrieves the value of the Relay field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6) GetOrCreateRelay() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay {
	if t.Relay != nil {
		return t.Relay
	}
	t.Relay = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay{}
	return t.Relay
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6) GetOrCreateServer() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server{}
	return t.Server
}

// GetRelay returns the value of the Relay struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6. If the receiver or the field Relay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6) GetRelay() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay {
	if t != nil && t.Relay != nil {
		return t.Relay
	}
	return nil
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6) GetServer() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Relay.PopulateDefaults()
	t.Server.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay represents the /nokia-conf/configure/service/vprn/interface/ipv6/dhcp6/relay YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay struct {
	AdminState         E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                    `path:"description" module:"nokia-conf"`
	LeasePopulate      *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate `path:"lease-populate" module:"nokia-conf"`
	LinkAddress        *string                                                                    `path:"link-address" module:"nokia-conf"`
	NeighborResolution *bool                                                                      `path:"neighbor-resolution" module:"nokia-conf"`
	Option             *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option        `path:"option" module:"nokia-conf"`
	PythonPolicy       *string                                                                    `path:"python-policy" module:"nokia-conf"`
	Server             []string                                                                   `path:"server" module:"nokia-conf"`
	SourceAddress      *string                                                                    `path:"source-address" module:"nokia-conf"`
	UserDb             *string                                                                    `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) IsYANGGoStruct() {}

// GetOrCreateLeasePopulate retrieves the value of the LeasePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetOrCreateLeasePopulate() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate {
	if t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	t.LeasePopulate = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate{}
	return t.LeasePopulate
}

// GetOrCreateOption retrieves the value of the Option field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetOrCreateOption() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option {
	if t.Option != nil {
		return t.Option
	}
	t.Option = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option{}
	return t.Option
}

// GetLeasePopulate returns the value of the LeasePopulate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay. If the receiver or the field LeasePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetLeasePopulate() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate {
	if t != nil && t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	return nil
}

// GetOption returns the value of the Option struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay. If the receiver or the field Option is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetOption() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option {
	if t != nil && t.Option != nil {
		return t.Option
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return ""
	}
	return *t.LinkAddress
}

// GetNeighborResolution retrieves the value of the leaf NeighborResolution from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborResolution is set, it can
// safely use t.GetNeighborResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborResolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetNeighborResolution() bool {
	if t == nil || t.NeighborResolution == nil {
		return false
	}
	return *t.NeighborResolution
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.NeighborResolution == nil {
		var v bool = false
		t.NeighborResolution = &v
	}
	t.LeasePopulate.PopulateDefaults()
	t.Option.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate represents the /nokia-conf/configure/service/vprn/interface/ipv6/dhcp6/relay/lease-populate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate struct {
	MaxNbrOfLeases *int32                                                                                   `path:"max-nbr-of-leases" module:"nokia-conf"`
	RoutePopulate  *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate `path:"route-populate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) IsYANGGoStruct() {}

// GetOrCreateRoutePopulate retrieves the value of the RoutePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) GetOrCreateRoutePopulate() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate {
	if t.RoutePopulate != nil {
		return t.RoutePopulate
	}
	t.RoutePopulate = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate{}
	return t.RoutePopulate
}

// GetRoutePopulate returns the value of the RoutePopulate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate. If the receiver or the field RoutePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) GetRoutePopulate() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate {
	if t != nil && t.RoutePopulate != nil {
		return t.RoutePopulate
	}
	return nil
}

// GetMaxNbrOfLeases retrieves the value of the leaf MaxNbrOfLeases from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxNbrOfLeases is set, it can
// safely use t.GetMaxNbrOfLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxNbrOfLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) GetMaxNbrOfLeases() int32 {
	if t == nil || t.MaxNbrOfLeases == nil {
		return 0
	}
	return *t.MaxNbrOfLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxNbrOfLeases == nil {
		var v int32 = 0
		t.MaxNbrOfLeases = &v
	}
	t.RoutePopulate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate represents the /nokia-conf/configure/service/vprn/interface/ipv6/dhcp6/relay/lease-populate/route-populate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate struct {
	Na *bool                                                                                       `path:"na" module:"nokia-conf"`
	Pd *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd `path:"pd" module:"nokia-conf" yangPresence:"true"`
	Ta *bool                                                                                       `path:"ta" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) IsYANGGoStruct() {
}

// GetOrCreatePd retrieves the value of the Pd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) GetOrCreatePd() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd {
	if t.Pd != nil {
		return t.Pd
	}
	t.Pd = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd{}
	return t.Pd
}

// GetPd returns the value of the Pd struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate. If the receiver or the field Pd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) GetPd() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd {
	if t != nil && t.Pd != nil {
		return t.Pd
	}
	return nil
}

// GetNa retrieves the value of the leaf Na from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Na is set, it can
// safely use t.GetNa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Na == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) GetNa() bool {
	if t == nil || t.Na == nil {
		return false
	}
	return *t.Na
}

// GetTa retrieves the value of the leaf Ta from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ta is set, it can
// safely use t.GetTa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) GetTa() bool {
	if t == nil || t.Ta == nil {
		return false
	}
	return *t.Ta
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Na == nil {
		var v bool = false
		t.Na = &v
	}
	if t.Ta == nil {
		var v bool = false
		t.Ta = &v
	}
	t.Pd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd represents the /nokia-conf/configure/service/vprn/interface/ipv6/dhcp6/relay/lease-populate/route-populate/pd YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd struct {
	Exclude *bool `path:"exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) IsYANGGoStruct() {
}

// GetExclude retrieves the value of the leaf Exclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exclude is set, it can
// safely use t.GetExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) GetExclude() bool {
	if t == nil || t.Exclude == nil {
		return false
	}
	return *t.Exclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exclude == nil {
		var v bool = false
		t.Exclude = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_LeasePopulate_RoutePopulate_Pd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option represents the /nokia-conf/configure/service/vprn/interface/ipv6/dhcp6/relay/option YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option struct {
	ApplyGroups        []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	InterfaceId        *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId `path:"interface-id" module:"nokia-conf"`
	RemoteId           *bool                                                                           `path:"remote-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) IsYANGGoStruct() {}

// GetOrCreateInterfaceId retrieves the value of the InterfaceId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) GetOrCreateInterfaceId() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId {
	if t.InterfaceId != nil {
		return t.InterfaceId
	}
	t.InterfaceId = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId{}
	return t.InterfaceId
}

// GetInterfaceId returns the value of the InterfaceId struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option. If the receiver or the field InterfaceId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) GetInterfaceId() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId {
	if t != nil && t.InterfaceId != nil {
		return t.InterfaceId
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) GetRemoteId() bool {
	if t == nil || t.RemoteId == nil {
		return false
	}
	return *t.RemoteId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemoteId == nil {
		var v bool = false
		t.RemoteId = &v
	}
	t.InterfaceId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId represents the /nokia-conf/configure/service/vprn/interface/ipv6/dhcp6/relay/option/interface-id YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId struct {
	AsciiTuple YANGEmpty `path:"ascii-tuple" module:"nokia-conf"`
	IfIndex    YANGEmpty `path:"if-index" module:"nokia-conf"`
	SapId      YANGEmpty `path:"sap-id" module:"nokia-conf"`
	String     *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) IsYANGGoStruct() {
}

// GetAsciiTuple retrieves the value of the leaf AsciiTuple from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiTuple is set, it can
// safely use t.GetAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) GetAsciiTuple() YANGEmpty {
	if t == nil || t.AsciiTuple == false {
		return false
	}
	return t.AsciiTuple
}

// GetIfIndex retrieves the value of the leaf IfIndex from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IfIndex is set, it can
// safely use t.GetIfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) GetIfIndex() YANGEmpty {
	if t == nil || t.IfIndex == false {
		return false
	}
	return t.IfIndex
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) GetSapId() YANGEmpty {
	if t == nil || t.SapId == false {
		return false
	}
	return t.SapId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Relay_Option_InterfaceId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server represents the /nokia-conf/configure/service/vprn/interface/ipv6/dhcp6/server YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	MaxNbrOfLeases     *int32                                                                         `path:"max-nbr-of-leases" module:"nokia-conf"`
	PrefixDelegation   *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation `path:"prefix-delegation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server) IsYANGGoStruct() {}

// GetOrCreatePrefixDelegation retrieves the value of the PrefixDelegation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server) GetOrCreatePrefixDelegation() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation {
	if t.PrefixDelegation != nil {
		return t.PrefixDelegation
	}
	t.PrefixDelegation = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation{}
	return t.PrefixDelegation
}

// GetPrefixDelegation returns the value of the PrefixDelegation struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server. If the receiver or the field PrefixDelegation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server) GetPrefixDelegation() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation {
	if t != nil && t.PrefixDelegation != nil {
		return t.PrefixDelegation
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaxNbrOfLeases retrieves the value of the leaf MaxNbrOfLeases from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxNbrOfLeases is set, it can
// safely use t.GetMaxNbrOfLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxNbrOfLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server) GetMaxNbrOfLeases() int32 {
	if t == nil || t.MaxNbrOfLeases == nil {
		return 8000
	}
	return *t.MaxNbrOfLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxNbrOfLeases == nil {
		var v int32 = 8000
		t.MaxNbrOfLeases = &v
	}
	t.PrefixDelegation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation represents the /nokia-conf/configure/service/vprn/interface/ipv6/dhcp6/server/prefix-delegation YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation struct {
	AdminState E_NokiaTypesSros_AdminState                                                                      `path:"admin-state" module:"nokia-conf"`
	Prefix     map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) IsYANGGoStruct() {
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix struct to the
// list Prefix of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) AppendPrefix(v *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix represents the /nokia-conf/configure/service/vprn/interface/ipv6/dhcp6/server/prefix-delegation/prefix YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix struct {
	ApplyGroups        []string                                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	ClientId           *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId               `path:"client-id" module:"nokia-conf"`
	Ipv6Prefix         *string                                                                                                      `path:"ipv6-prefix" module:"nokia-conf"`
	PreferredLifetime  NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime      NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) IsYANGGoStruct() {
}

// GetOrCreateClientId retrieves the value of the ClientId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetOrCreateClientId() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId {
	if t.ClientId != nil {
		return t.ClientId
	}
	t.ClientId = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId{}
	return t.ClientId
}

// GetClientId returns the value of the ClientId struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix. If the receiver or the field ClientId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetClientId() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId {
	if t != nil && t.ClientId != nil {
		return t.ClientId
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetPreferredLifetime() NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(604800)
	}
	return t.PreferredLifetime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) GetValidLifetime() NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(2592000)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(604800)
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(2592000)
	}
	t.ClientId.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId represents the /nokia-conf/configure/service/vprn/interface/ipv6/dhcp6/server/prefix-delegation/prefix/client-id YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId struct {
	Duid *string `path:"duid" module:"nokia-conf"`
	Iaid *uint32 `path:"iaid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) IsYANGGoStruct() {
}

// GetDuid retrieves the value of the leaf Duid from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duid is set, it can
// safely use t.GetDuid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) GetDuid() string {
	if t == nil || t.Duid == nil {
		return ""
	}
	return *t.Duid
}

// GetIaid retrieves the value of the leaf Iaid from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Iaid is set, it can
// safely use t.GetIaid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Iaid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) GetIaid() uint32 {
	if t == nil || t.Iaid == nil {
		return 0
	}
	return *t.Iaid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Dhcp6_Server_PrefixDelegation_Prefix_ClientId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6 represents the /nokia-conf/configure/service/vprn/interface/ipv6/icmp6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6 struct {
	PacketTooBig *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig `path:"packet-too-big" module:"nokia-conf"`
	ParamProblem *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem `path:"param-problem" module:"nokia-conf"`
	Redirects    *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects    `path:"redirects" module:"nokia-conf"`
	TimeExceeded *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded `path:"time-exceeded" module:"nokia-conf"`
	Unreachables *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables `path:"unreachables" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) IsYANGGoStruct() {}

// GetOrCreatePacketTooBig retrieves the value of the PacketTooBig field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) GetOrCreatePacketTooBig() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig {
	if t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	t.PacketTooBig = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig{}
	return t.PacketTooBig
}

// GetOrCreateParamProblem retrieves the value of the ParamProblem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) GetOrCreateParamProblem() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem {
	if t.ParamProblem != nil {
		return t.ParamProblem
	}
	t.ParamProblem = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem{}
	return t.ParamProblem
}

// GetOrCreateRedirects retrieves the value of the Redirects field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) GetOrCreateRedirects() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects {
	if t.Redirects != nil {
		return t.Redirects
	}
	t.Redirects = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects{}
	return t.Redirects
}

// GetOrCreateTimeExceeded retrieves the value of the TimeExceeded field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) GetOrCreateTimeExceeded() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded {
	if t.TimeExceeded != nil {
		return t.TimeExceeded
	}
	t.TimeExceeded = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded{}
	return t.TimeExceeded
}

// GetOrCreateUnreachables retrieves the value of the Unreachables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) GetOrCreateUnreachables() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables {
	if t.Unreachables != nil {
		return t.Unreachables
	}
	t.Unreachables = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables{}
	return t.Unreachables
}

// GetPacketTooBig returns the value of the PacketTooBig struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6. If the receiver or the field PacketTooBig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) GetPacketTooBig() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig {
	if t != nil && t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	return nil
}

// GetParamProblem returns the value of the ParamProblem struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6. If the receiver or the field ParamProblem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) GetParamProblem() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem {
	if t != nil && t.ParamProblem != nil {
		return t.ParamProblem
	}
	return nil
}

// GetRedirects returns the value of the Redirects struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6. If the receiver or the field Redirects is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) GetRedirects() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects {
	if t != nil && t.Redirects != nil {
		return t.Redirects
	}
	return nil
}

// GetTimeExceeded returns the value of the TimeExceeded struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6. If the receiver or the field TimeExceeded is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) GetTimeExceeded() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded {
	if t != nil && t.TimeExceeded != nil {
		return t.TimeExceeded
	}
	return nil
}

// GetUnreachables returns the value of the Unreachables struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6. If the receiver or the field Unreachables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) GetUnreachables() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables {
	if t != nil && t.Unreachables != nil {
		return t.Unreachables
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketTooBig.PopulateDefaults()
	t.ParamProblem.PopulateDefaults()
	t.Redirects.PopulateDefaults()
	t.TimeExceeded.PopulateDefaults()
	t.Unreachables.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig represents the /nokia-conf/configure/service/vprn/interface/ipv6/icmp6/packet-too-big YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_PacketTooBig) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem represents the /nokia-conf/configure/service/vprn/interface/ipv6/icmp6/param-problem YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_ParamProblem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects represents the /nokia-conf/configure/service/vprn/interface/ipv6/icmp6/redirects YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Redirects) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded represents the /nokia-conf/configure/service/vprn/interface/ipv6/icmp6/time-exceeded YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_TimeExceeded) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables represents the /nokia-conf/configure/service/vprn/interface/ipv6/icmp6/unreachables YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Icmp6_Unreachables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress represents the /nokia-conf/configure/service/vprn/interface/ipv6/link-local-address YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress struct {
	Address                   *string `path:"address" module:"nokia-conf"`
	DuplicateAddressDetection *bool   `path:"duplicate-address-detection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_LinkLocalAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery represents the /nokia-conf/configure/service/vprn/interface/ipv6/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery struct {
	HostRoute        *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute                 `path:"host-route" module:"nokia-conf"`
	LearnUnsolicited E_NokiaTypesRouter_Ipv6AddressTypeSelection                                                  `path:"learn-unsolicited" module:"nokia-conf"`
	Limit            *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit                     `path:"limit" module:"nokia-conf"`
	LocalProxyNd     *bool                                                                                        `path:"local-proxy-nd" module:"nokia-conf"`
	PopulateHost     *bool                                                                                        `path:"populate-host" module:"nokia-conf"`
	ProactiveRefresh E_NokiaTypesRouter_Ipv6AddressTypeSelection                                                  `path:"proactive-refresh" module:"nokia-conf"`
	ProxyNdPolicy    []string                                                                                     `path:"proxy-nd-policy" module:"nokia-conf"`
	ReachableTime    *uint32                                                                                      `path:"reachable-time" module:"nokia-conf"`
	RouteTag         *uint32                                                                                      `path:"route-tag" module:"nokia-conf"`
	SecureNd         *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd                  `path:"secure-nd" module:"nokia-conf"`
	StaleTime        *uint32                                                                                      `path:"stale-time" module:"nokia-conf"`
	StaticNeighbor   map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor `path:"static-neighbor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) IsYANGGoStruct() {}

// NewStaticNeighbor creates a new entry in the StaticNeighbor list of the
// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) NewStaticNeighbor(Ipv6Address string) (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticNeighbor", key)
	}

	t.StaticNeighbor[key] = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor{
		Ipv6Address: &Ipv6Address,
	}

	return t.StaticNeighbor[key], nil
}

// RenameStaticNeighbor renames an entry in the list StaticNeighbor within
// the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) RenameStaticNeighbor(oldK, newK string) error {
	if _, ok := t.StaticNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticNeighbor", newK)
	}

	e, ok := t.StaticNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticNeighbor", oldK)
	}
	e.Ipv6Address = &newK

	t.StaticNeighbor[newK] = e
	delete(t.StaticNeighbor, oldK)
	return nil
}

// GetOrCreateStaticNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetOrCreateStaticNeighbor(Ipv6Address string) *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor {

	key := Ipv6Address

	if v, ok := t.StaticNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticNeighbor(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetStaticNeighbor retrieves the value with the specified key from
// the StaticNeighbor map field of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetStaticNeighbor(Ipv6Address string) *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.StaticNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) DeleteStaticNeighbor(Ipv6Address string) {
	key := Ipv6Address

	delete(t.StaticNeighbor, key)
}

// AppendStaticNeighbor appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor struct to the
// list StaticNeighbor of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) AppendStaticNeighbor(v *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor)
	}

	if _, ok := t.StaticNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list StaticNeighbor %v", key)
	}

	t.StaticNeighbor[key] = v
	return nil
}

// GetOrCreateHostRoute retrieves the value of the HostRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetOrCreateHostRoute() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute {
	if t.HostRoute != nil {
		return t.HostRoute
	}
	t.HostRoute = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute{}
	return t.HostRoute
}

// GetOrCreateLimit retrieves the value of the Limit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetOrCreateLimit() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit {
	if t.Limit != nil {
		return t.Limit
	}
	t.Limit = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit{}
	return t.Limit
}

// GetOrCreateSecureNd retrieves the value of the SecureNd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetOrCreateSecureNd() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd {
	if t.SecureNd != nil {
		return t.SecureNd
	}
	t.SecureNd = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd{}
	return t.SecureNd
}

// GetHostRoute returns the value of the HostRoute struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If the receiver or the field HostRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetHostRoute() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute {
	if t != nil && t.HostRoute != nil {
		return t.HostRoute
	}
	return nil
}

// GetLimit returns the value of the Limit struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If the receiver or the field Limit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetLimit() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit {
	if t != nil && t.Limit != nil {
		return t.Limit
	}
	return nil
}

// GetSecureNd returns the value of the SecureNd struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery. If the receiver or the field SecureNd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetSecureNd() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd {
	if t != nil && t.SecureNd != nil {
		return t.SecureNd
	}
	return nil
}

// GetLearnUnsolicited retrieves the value of the leaf LearnUnsolicited from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnUnsolicited is set, it can
// safely use t.GetLearnUnsolicited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnUnsolicited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetLearnUnsolicited() E_NokiaTypesRouter_Ipv6AddressTypeSelection {
	if t == nil || t.LearnUnsolicited == 0 {
		return 0
	}
	return t.LearnUnsolicited
}

// GetLocalProxyNd retrieves the value of the leaf LocalProxyNd from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalProxyNd is set, it can
// safely use t.GetLocalProxyNd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalProxyNd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetLocalProxyNd() bool {
	if t == nil || t.LocalProxyNd == nil {
		return false
	}
	return *t.LocalProxyNd
}

// GetPopulateHost retrieves the value of the leaf PopulateHost from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PopulateHost is set, it can
// safely use t.GetPopulateHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PopulateHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetPopulateHost() bool {
	if t == nil || t.PopulateHost == nil {
		return false
	}
	return *t.PopulateHost
}

// GetProactiveRefresh retrieves the value of the leaf ProactiveRefresh from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProactiveRefresh is set, it can
// safely use t.GetProactiveRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProactiveRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetProactiveRefresh() E_NokiaTypesRouter_Ipv6AddressTypeSelection {
	if t == nil || t.ProactiveRefresh == 0 {
		return 0
	}
	return t.ProactiveRefresh
}

// GetProxyNdPolicy retrieves the value of the leaf ProxyNdPolicy from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyNdPolicy is set, it can
// safely use t.GetProxyNdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyNdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetProxyNdPolicy() []string {
	if t == nil || t.ProxyNdPolicy == nil {
		return nil
	}
	return t.ProxyNdPolicy
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 0
	}
	return *t.ReachableTime
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetStaleTime retrieves the value of the leaf StaleTime from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleTime is set, it can
// safely use t.GetStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) GetStaleTime() uint32 {
	if t == nil || t.StaleTime == nil {
		return 0
	}
	return *t.StaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LocalProxyNd == nil {
		var v bool = false
		t.LocalProxyNd = &v
	}
	if t.PopulateHost == nil {
		var v bool = false
		t.PopulateHost = &v
	}
	t.HostRoute.PopulateDefaults()
	t.Limit.PopulateDefaults()
	t.SecureNd.PopulateDefaults()
	for _, e := range t.StaticNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute represents the /nokia-conf/configure/service/vprn/interface/ipv6/neighbor-discovery/host-route YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute struct {
	Populate map[E_NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate `path:"populate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) IsYANGGoStruct() {
}

// NewPopulate creates a new entry in the Populate list of the
// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) NewPopulate(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType) (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[E_NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Populate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Populate", key)
	}

	t.Populate[key] = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate{
		RouteType: RouteType,
	}

	return t.Populate[key], nil
}

// RenamePopulate renames an entry in the list Populate within
// the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) RenamePopulate(oldK, newK E_NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType) error {
	if _, ok := t.Populate[newK]; ok {
		return fmt.Errorf("key %v already exists in Populate", newK)
	}

	e, ok := t.Populate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Populate", oldK)
	}
	e.RouteType = newK

	t.Populate[newK] = e
	delete(t.Populate, oldK)
	return nil
}

// GetOrCreatePopulate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) GetOrCreatePopulate(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType) *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate {

	key := RouteType

	if v, ok := t.Populate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPopulate(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePopulate got unexpected error: %v", err))
	}
	return v
}

// GetPopulate retrieves the value with the specified key from
// the Populate map field of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) GetPopulate(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType) *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate {

	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Populate[key]; ok {
		return lm
	}
	return nil
}

// DeletePopulate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) DeletePopulate(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType) {
	key := RouteType

	delete(t.Populate, key)
}

// AppendPopulate appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate struct to the
// list Populate of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) AppendPopulate(v *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Populate == nil {
		t.Populate = make(map[E_NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType]*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate)
	}

	if _, ok := t.Populate[key]; ok {
		return fmt.Errorf("duplicate key for list Populate %v", key)
	}

	t.Populate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Populate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate represents the /nokia-conf/configure/service/vprn/interface/ipv6/neighbor-discovery/host-route/populate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate struct {
	ApplyGroups        []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteTag           *uint32                                                                                          `path:"route-tag" module:"nokia-conf"`
	RouteType          E_NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType `path:"route-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) GetRouteType() E_NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_HostRoute_Populate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit represents the /nokia-conf/configure/service/vprn/interface/ipv6/neighbor-discovery/limit YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit struct {
	LogOnly    *bool   `path:"log-only" module:"nokia-conf"`
	MaxEntries *int32  `path:"max-entries" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) GetMaxEntries() int32 {
	if t == nil || t.MaxEntries == nil {
		return 0
	}
	return *t.MaxEntries
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_Limit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd represents the /nokia-conf/configure/service/vprn/interface/ipv6/neighbor-discovery/secure-nd YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	AllowUnsecuredMsgs *bool                       `path:"allow-unsecured-msgs" module:"nokia-conf"`
	PublicKeyMinBits   *uint32                     `path:"public-key-min-bits" module:"nokia-conf"`
	SecurityParameter  *uint32                     `path:"security-parameter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowUnsecuredMsgs retrieves the value of the leaf AllowUnsecuredMsgs from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnsecuredMsgs is set, it can
// safely use t.GetAllowUnsecuredMsgs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnsecuredMsgs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) GetAllowUnsecuredMsgs() bool {
	if t == nil || t.AllowUnsecuredMsgs == nil {
		return true
	}
	return *t.AllowUnsecuredMsgs
}

// GetPublicKeyMinBits retrieves the value of the leaf PublicKeyMinBits from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicKeyMinBits is set, it can
// safely use t.GetPublicKeyMinBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicKeyMinBits == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) GetPublicKeyMinBits() uint32 {
	if t == nil || t.PublicKeyMinBits == nil {
		return 1024
	}
	return *t.PublicKeyMinBits
}

// GetSecurityParameter retrieves the value of the leaf SecurityParameter from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityParameter is set, it can
// safely use t.GetSecurityParameter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityParameter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) GetSecurityParameter() uint32 {
	if t == nil || t.SecurityParameter == nil {
		return 1
	}
	return *t.SecurityParameter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllowUnsecuredMsgs == nil {
		var v bool = true
		t.AllowUnsecuredMsgs = &v
	}
	if t.PublicKeyMinBits == nil {
		var v uint32 = 1024
		t.PublicKeyMinBits = &v
	}
	if t.SecurityParameter == nil {
		var v uint32 = 1
		t.SecurityParameter = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_SecureNd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor represents the /nokia-conf/configure/service/vprn/interface/ipv6/neighbor-discovery/static-neighbor YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv6Address        *string  `path:"ipv6-address" module:"nokia-conf"`
	MacAddress         *string  `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck represents the /nokia-conf/configure/service/vprn/interface/ipv6/urpf-check YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck struct {
	IgnoreDefault *bool                            `path:"ignore-default" module:"nokia-conf"`
	Mode          E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck) IsYANGGoStruct() {}

// GetIgnoreDefault retrieves the value of the leaf IgnoreDefault from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefault is set, it can
// safely use t.GetIgnoreDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck) GetIgnoreDefault() bool {
	if t == nil || t.IgnoreDefault == nil {
		return false
	}
	return *t.IgnoreDefault
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreDefault == nil {
		var v bool = false
		t.IgnoreDefault = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp represents the /nokia-conf/configure/service/vprn/interface/ipv6/vrrp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp struct {
	AdminState         E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Backup             []string                                                          `path:"backup" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	InitDelay          *uint32                                                           `path:"init-delay" module:"nokia-conf"`
	Mac                *string                                                           `path:"mac" module:"nokia-conf"`
	MasterIntInherit   *bool                                                             `path:"master-int-inherit" module:"nokia-conf"`
	MessageInterval    *uint32                                                           `path:"message-interval" module:"nokia-conf"`
	MonitorOperGroup   *string                                                           `path:"monitor-oper-group" module:"nokia-conf"`
	NtpReply           *bool                                                             `path:"ntp-reply" module:"nokia-conf"`
	OperGroup          *string                                                           `path:"oper-group" module:"nokia-conf"`
	Owner              *bool                                                             `path:"owner" module:"nokia-conf"`
	Passive            *bool                                                             `path:"passive" module:"nokia-conf"`
	PingReply          *bool                                                             `path:"ping-reply" module:"nokia-conf"`
	Policy             *uint32                                                           `path:"policy" module:"nokia-conf"`
	Preempt            *bool                                                             `path:"preempt" module:"nokia-conf"`
	Priority           *uint32                                                           `path:"priority" module:"nokia-conf"`
	StandbyForwarding  *bool                                                             `path:"standby-forwarding" module:"nokia-conf"`
	TelnetReply        *bool                                                             `path:"telnet-reply" module:"nokia-conf"`
	TracerouteReply    *bool                                                             `path:"traceroute-reply" module:"nokia-conf"`
	VirtualRouterId    *int32                                                            `path:"virtual-router-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetBfdLiveness() *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBackup retrieves the value of the leaf Backup from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetBackup() []string {
	if t == nil || t.Backup == nil {
		return nil
	}
	return t.Backup
}

// GetInitDelay retrieves the value of the leaf InitDelay from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitDelay is set, it can
// safely use t.GetInitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetInitDelay() uint32 {
	if t == nil || t.InitDelay == nil {
		return 0
	}
	return *t.InitDelay
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMasterIntInherit retrieves the value of the leaf MasterIntInherit from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasterIntInherit is set, it can
// safely use t.GetMasterIntInherit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasterIntInherit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetMasterIntInherit() bool {
	if t == nil || t.MasterIntInherit == nil {
		return false
	}
	return *t.MasterIntInherit
}

// GetMessageInterval retrieves the value of the leaf MessageInterval from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageInterval is set, it can
// safely use t.GetMessageInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetMessageInterval() uint32 {
	if t == nil || t.MessageInterval == nil {
		return 100
	}
	return *t.MessageInterval
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetNtpReply retrieves the value of the leaf NtpReply from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtpReply is set, it can
// safely use t.GetNtpReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtpReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetNtpReply() bool {
	if t == nil || t.NtpReply == nil {
		return false
	}
	return *t.NtpReply
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetOwner() bool {
	if t == nil || t.Owner == nil {
		return false
	}
	return *t.Owner
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPingReply retrieves the value of the leaf PingReply from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PingReply is set, it can
// safely use t.GetPingReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PingReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetPingReply() bool {
	if t == nil || t.PingReply == nil {
		return false
	}
	return *t.PingReply
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetPolicy() uint32 {
	if t == nil || t.Policy == nil {
		return 0
	}
	return *t.Policy
}

// GetPreempt retrieves the value of the leaf Preempt from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetStandbyForwarding retrieves the value of the leaf StandbyForwarding from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbyForwarding is set, it can
// safely use t.GetStandbyForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbyForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetStandbyForwarding() bool {
	if t == nil || t.StandbyForwarding == nil {
		return false
	}
	return *t.StandbyForwarding
}

// GetTelnetReply retrieves the value of the leaf TelnetReply from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetReply is set, it can
// safely use t.GetTelnetReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetTelnetReply() bool {
	if t == nil || t.TelnetReply == nil {
		return false
	}
	return *t.TelnetReply
}

// GetTracerouteReply retrieves the value of the leaf TracerouteReply from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TracerouteReply is set, it can
// safely use t.GetTracerouteReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TracerouteReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetTracerouteReply() bool {
	if t == nil || t.TracerouteReply == nil {
		return false
	}
	return *t.TracerouteReply
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualRouterId is set, it can
// safely use t.GetVirtualRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualRouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) GetVirtualRouterId() int32 {
	if t == nil || t.VirtualRouterId == nil {
		return 0
	}
	return *t.VirtualRouterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MessageInterval == nil {
		var v uint32 = 100
		t.MessageInterval = &v
	}
	if t.NtpReply == nil {
		var v bool = false
		t.NtpReply = &v
	}
	if t.Owner == nil {
		var v bool = false
		t.Owner = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.PingReply == nil {
		var v bool = false
		t.PingReply = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.StandbyForwarding == nil {
		var v bool = false
		t.StandbyForwarding = &v
	}
	if t.TelnetReply == nil {
		var v bool = false
		t.TelnetReply = &v
	}
	if t.TracerouteReply == nil {
		var v bool = false
		t.TracerouteReply = &v
	}
	t.BfdLiveness.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VirtualRouterId == nil {
		return nil, fmt.Errorf("nil value for key VirtualRouterId")
	}

	return map[string]interface{}{
		"virtual-router-id": *t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness represents the /nokia-conf/configure/service/vprn/interface/ipv6/vrrp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	DestIp             *string  `path:"dest-ip" module:"nokia-conf"`
	InterfaceName      *string  `path:"interface-name" module:"nokia-conf"`
	ServiceName        *string  `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness.
func (*NokiaConf_Configure_Service_Vprn_Interface_Ipv6_Vrrp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing represents the /nokia-conf/configure/service/vprn/interface/load-balancing YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing struct {
	FlowLabelLoadBalancing *bool                              `path:"flow-label-load-balancing" module:"nokia-conf"`
	IpLoadBalancing        E_NokiaTypesRouter_IpLoadBalancing `path:"ip-load-balancing" module:"nokia-conf"`
	SpiLoadBalancing       *bool                              `path:"spi-load-balancing" module:"nokia-conf"`
	TeidLoadBalancing      *bool                              `path:"teid-load-balancing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing) IsYANGGoStruct() {}

// GetFlowLabelLoadBalancing retrieves the value of the leaf FlowLabelLoadBalancing from the NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowLabelLoadBalancing is set, it can
// safely use t.GetFlowLabelLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowLabelLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing) GetFlowLabelLoadBalancing() bool {
	if t == nil || t.FlowLabelLoadBalancing == nil {
		return false
	}
	return *t.FlowLabelLoadBalancing
}

// GetIpLoadBalancing retrieves the value of the leaf IpLoadBalancing from the NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpLoadBalancing is set, it can
// safely use t.GetIpLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing) GetIpLoadBalancing() E_NokiaTypesRouter_IpLoadBalancing {
	if t == nil || t.IpLoadBalancing == 0 {
		return NokiaTypesRouter_IpLoadBalancing_both
	}
	return t.IpLoadBalancing
}

// GetSpiLoadBalancing retrieves the value of the leaf SpiLoadBalancing from the NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpiLoadBalancing is set, it can
// safely use t.GetSpiLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpiLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing) GetSpiLoadBalancing() bool {
	if t == nil || t.SpiLoadBalancing == nil {
		return false
	}
	return *t.SpiLoadBalancing
}

// GetTeidLoadBalancing retrieves the value of the leaf TeidLoadBalancing from the NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeidLoadBalancing is set, it can
// safely use t.GetTeidLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeidLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing) GetTeidLoadBalancing() bool {
	if t == nil || t.TeidLoadBalancing == nil {
		return false
	}
	return *t.TeidLoadBalancing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FlowLabelLoadBalancing == nil {
		var v bool = false
		t.FlowLabelLoadBalancing = &v
	}
	if t.IpLoadBalancing == 0 {
		t.IpLoadBalancing = NokiaTypesRouter_IpLoadBalancing_both
	}
	if t.SpiLoadBalancing == nil {
		var v bool = false
		t.SpiLoadBalancing = &v
	}
	if t.TeidLoadBalancing == nil {
		var v bool = false
		t.TeidLoadBalancing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing.
func (*NokiaConf_Configure_Service_Vprn_Interface_LoadBalancing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_PingTemplate represents the /nokia-conf/configure/service/vprn/interface/ping-template YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_PingTemplate struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	DestinationAddress *string                     `path:"destination-address" module:"nokia-conf"`
	Name               *string                     `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_PingTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_PingTemplate) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PingTemplate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PingTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PingTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the NokiaConf_Configure_Service_Vprn_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PingTemplate) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Interface_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PingTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_PingTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PingTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PingTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_PingTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PingTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PingTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_PingTemplate.
func (*NokiaConf_Configure_Service_Vprn_Interface_PingTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist represents the /nokia-conf/configure/service/vprn/interface/ptp-hw-assist YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist.
func (*NokiaConf_Configure_Service_Vprn_Interface_PtpHwAssist) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap represents the /nokia-conf/configure/service/vprn/interface/sap YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap struct {
	Aarp               *NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp                    `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AccountingPolicy   *uint32                                                                 `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	AntiSpoof          E_NokiaTypesServices_AntiSpoofOption                                    `path:"anti-spoof" module:"nokia-conf"`
	AppProfile         *string                                                                 `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint64                                                                 `path:"bandwidth" module:"nokia-conf"`
	CallingStationId   *string                                                                 `path:"calling-station-id" module:"nokia-conf"`
	CollectStats       *bool                                                                   `path:"collect-stats" module:"nokia-conf"`
	CpuProtection      *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection           `path:"cpu-protection" module:"nokia-conf"`
	Description        *string                                                                 `path:"description" module:"nokia-conf"`
	DistCpuProtection  *string                                                                 `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress                  `path:"egress" module:"nokia-conf"`
	EthCfm             *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm                  `path:"eth-cfm" module:"nokia-conf"`
	FwdWholesale       *NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale            `path:"fwd-wholesale" module:"nokia-conf"`
	HostAdminState     E_NokiaTypesSros_AdminState                                             `path:"host-admin-state" module:"nokia-conf"`
	HostLockoutPolicy  *string                                                                 `path:"host-lockout-policy" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress                 `path:"ingress" module:"nokia-conf"`
	IpTunnel           map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel     `path:"ip-tunnel" module:"nokia-conf"`
	IpsecGateway       map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway `path:"ipsec-gateway" module:"nokia-conf"`
	IpsecTunnel        map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel  `path:"ipsec-tunnel" module:"nokia-conf"`
	Lag                *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag                     `path:"lag" module:"nokia-conf"`
	MultiServiceSite   *string                                                                 `path:"multi-service-site" module:"nokia-conf"`
	SapId              *string                                                                 `path:"sap-id" module:"nokia-conf"`
	StaticHost         *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost              `path:"static-host" module:"nokia-conf"`
	TransitPolicy      *NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy           `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap) IsYANGGoStruct() {}

// NewIpTunnel creates a new entry in the IpTunnel list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) NewIpTunnel(TunnelName string) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpTunnel == nil {
		t.IpTunnel = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel)
	}

	key := TunnelName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpTunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpTunnel", key)
	}

	t.IpTunnel[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel{
		TunnelName: &TunnelName,
	}

	return t.IpTunnel[key], nil
}

// RenameIpTunnel renames an entry in the list IpTunnel within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) RenameIpTunnel(oldK, newK string) error {
	if _, ok := t.IpTunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in IpTunnel", newK)
	}

	e, ok := t.IpTunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpTunnel", oldK)
	}
	e.TunnelName = &newK

	t.IpTunnel[newK] = e
	delete(t.IpTunnel, oldK)
	return nil
}

// GetOrCreateIpTunnel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetOrCreateIpTunnel(TunnelName string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel {

	key := TunnelName

	if v, ok := t.IpTunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpTunnel(TunnelName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpTunnel got unexpected error: %v", err))
	}
	return v
}

// GetIpTunnel retrieves the value with the specified key from
// the IpTunnel map field of NokiaConf_Configure_Service_Vprn_Interface_Sap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetIpTunnel(TunnelName string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel {

	if t == nil {
		return nil
	}

	key := TunnelName

	if lm, ok := t.IpTunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpTunnel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) DeleteIpTunnel(TunnelName string) {
	key := TunnelName

	delete(t.IpTunnel, key)
}

// AppendIpTunnel appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel struct to the
// list IpTunnel of NokiaConf_Configure_Service_Vprn_Interface_Sap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) AppendIpTunnel(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) error {
	if v.TunnelName == nil {
		return fmt.Errorf("invalid nil key received for TunnelName")
	}

	key := *v.TunnelName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpTunnel == nil {
		t.IpTunnel = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel)
	}

	if _, ok := t.IpTunnel[key]; ok {
		return fmt.Errorf("duplicate key for list IpTunnel %v", key)
	}

	t.IpTunnel[key] = v
	return nil
}

// NewIpsecGateway creates a new entry in the IpsecGateway list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) NewIpsecGateway(Name string) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecGateway == nil {
		t.IpsecGateway = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpsecGateway[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpsecGateway", key)
	}

	t.IpsecGateway[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway{
		Name: &Name,
	}

	return t.IpsecGateway[key], nil
}

// RenameIpsecGateway renames an entry in the list IpsecGateway within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) RenameIpsecGateway(oldK, newK string) error {
	if _, ok := t.IpsecGateway[newK]; ok {
		return fmt.Errorf("key %v already exists in IpsecGateway", newK)
	}

	e, ok := t.IpsecGateway[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpsecGateway", oldK)
	}
	e.Name = &newK

	t.IpsecGateway[newK] = e
	delete(t.IpsecGateway, oldK)
	return nil
}

// GetOrCreateIpsecGateway retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetOrCreateIpsecGateway(Name string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway {

	key := Name

	if v, ok := t.IpsecGateway[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpsecGateway(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpsecGateway got unexpected error: %v", err))
	}
	return v
}

// GetIpsecGateway retrieves the value with the specified key from
// the IpsecGateway map field of NokiaConf_Configure_Service_Vprn_Interface_Sap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetIpsecGateway(Name string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IpsecGateway[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpsecGateway deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) DeleteIpsecGateway(Name string) {
	key := Name

	delete(t.IpsecGateway, key)
}

// AppendIpsecGateway appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway struct to the
// list IpsecGateway of NokiaConf_Configure_Service_Vprn_Interface_Sap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) AppendIpsecGateway(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecGateway == nil {
		t.IpsecGateway = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway)
	}

	if _, ok := t.IpsecGateway[key]; ok {
		return fmt.Errorf("duplicate key for list IpsecGateway %v", key)
	}

	t.IpsecGateway[key] = v
	return nil
}

// NewIpsecTunnel creates a new entry in the IpsecTunnel list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) NewIpsecTunnel(Name string) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecTunnel == nil {
		t.IpsecTunnel = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpsecTunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpsecTunnel", key)
	}

	t.IpsecTunnel[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel{
		Name: &Name,
	}

	return t.IpsecTunnel[key], nil
}

// RenameIpsecTunnel renames an entry in the list IpsecTunnel within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) RenameIpsecTunnel(oldK, newK string) error {
	if _, ok := t.IpsecTunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in IpsecTunnel", newK)
	}

	e, ok := t.IpsecTunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpsecTunnel", oldK)
	}
	e.Name = &newK

	t.IpsecTunnel[newK] = e
	delete(t.IpsecTunnel, oldK)
	return nil
}

// GetOrCreateIpsecTunnel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetOrCreateIpsecTunnel(Name string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel {

	key := Name

	if v, ok := t.IpsecTunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpsecTunnel(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpsecTunnel got unexpected error: %v", err))
	}
	return v
}

// GetIpsecTunnel retrieves the value with the specified key from
// the IpsecTunnel map field of NokiaConf_Configure_Service_Vprn_Interface_Sap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetIpsecTunnel(Name string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IpsecTunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpsecTunnel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) DeleteIpsecTunnel(Name string) {
	key := Name

	delete(t.IpsecTunnel, key)
}

// AppendIpsecTunnel appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel struct to the
// list IpsecTunnel of NokiaConf_Configure_Service_Vprn_Interface_Sap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) AppendIpsecTunnel(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecTunnel == nil {
		t.IpsecTunnel = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel)
	}

	if _, ok := t.IpsecTunnel[key]; ok {
		return fmt.Errorf("duplicate key for list IpsecTunnel %v", key)
	}

	t.IpsecTunnel[key] = v
	return nil
}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetOrCreateAarp() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp{}
	return t.Aarp
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetOrCreateCpuProtection() *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetOrCreateEgress() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFwdWholesale retrieves the value of the FwdWholesale field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetOrCreateFwdWholesale() *NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale {
	if t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	t.FwdWholesale = &NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale{}
	return t.FwdWholesale
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetOrCreateIngress() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetOrCreateLag() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag{}
	return t.Lag
}

// GetOrCreateStaticHost retrieves the value of the StaticHost field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetOrCreateStaticHost() *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost {
	if t.StaticHost != nil {
		return t.StaticHost
	}
	t.StaticHost = &NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost{}
	return t.StaticHost
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetOrCreateTransitPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy{}
	return t.TransitPolicy
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetAarp() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetCpuProtection() *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetEgress() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetEthCfm() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFwdWholesale returns the value of the FwdWholesale struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap. If the receiver or the field FwdWholesale is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetFwdWholesale() *NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale {
	if t != nil && t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetIngress() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetLag() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetStaticHost returns the value of the StaticHost struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap. If the receiver or the field StaticHost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetStaticHost() *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost {
	if t != nil && t.StaticHost != nil {
		return t.StaticHost
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetTransitPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAntiSpoof retrieves the value of the leaf AntiSpoof from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoof is set, it can
// safely use t.GetAntiSpoof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetAntiSpoof() E_NokiaTypesServices_AntiSpoofOption {
	if t == nil || t.AntiSpoof == 0 {
		return 0
	}
	return t.AntiSpoof
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetCallingStationId() string {
	if t == nil || t.CallingStationId == nil {
		return ""
	}
	return *t.CallingStationId
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetHostAdminState retrieves the value of the leaf HostAdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostAdminState is set, it can
// safely use t.GetHostAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostAdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetHostAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.HostAdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.HostAdminState
}

// GetHostLockoutPolicy retrieves the value of the leaf HostLockoutPolicy from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostLockoutPolicy is set, it can
// safely use t.GetHostLockoutPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostLockoutPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetHostLockoutPolicy() string {
	if t == nil || t.HostLockoutPolicy == nil {
		return ""
	}
	return *t.HostLockoutPolicy
}

// GetMultiServiceSite retrieves the value of the leaf MultiServiceSite from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSite is set, it can
// safely use t.GetMultiServiceSite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSite == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetMultiServiceSite() string {
	if t == nil || t.MultiServiceSite == nil {
		return ""
	}
	return *t.MultiServiceSite
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Vprn_Interface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.HostAdminState == 0 {
		t.HostAdminState = NokiaTypesSros_AdminState_enable
	}
	t.Aarp.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.FwdWholesale.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lag.PopulateDefaults()
	t.StaticHost.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
	for _, e := range t.IpTunnel {
		e.PopulateDefaults()
	}
	for _, e := range t.IpsecGateway {
		e.PopulateDefaults()
	}
	for _, e := range t.IpsecTunnel {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp represents the /nokia-conf/configure/service/vprn/interface/sap/aarp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp struct {
	Id   *uint32                                              `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_DualHomingBsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp) GetType() E_NokiaTypesServices_DualHomingBsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection represents the /nokia-conf/configure/service/vprn/interface/sap/cpu-protection YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	IpSrcMonitoring  YANGEmpty                                                                      `path:"ip-src-monitoring" module:"nokia-conf"`
	MacMonitoring    YANGEmpty                                                                      `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                        `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetIpSrcMonitoring retrieves the value of the leaf IpSrcMonitoring from the NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpSrcMonitoring is set, it can
// safely use t.GetIpSrcMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpSrcMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection) GetIpSrcMonitoring() YANGEmpty {
	if t == nil || t.IpSrcMonitoring == false {
		return false
	}
	return t.IpSrcMonitoring
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/service/vprn/interface/sap/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {
}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress represents the /nokia-conf/configure/service/vprn/interface/sap/egress YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress struct {
	AggRate                *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate `path:"agg-rate" module:"nokia-conf"`
	Filter                 *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter  `path:"filter" module:"nokia-conf"`
	Qos                    *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos     `path:"qos" module:"nokia-conf"`
	QueueGroupRedirectList *string                                                        `path:"queue-group-redirect-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos{}
	return t.Qos
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) GetAggRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) GetFilter() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) GetQos() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetQueueGroupRedirectList retrieves the value of the leaf QueueGroupRedirectList from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupRedirectList is set, it can
// safely use t.GetQueueGroupRedirectList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupRedirectList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) GetQueueGroupRedirectList() string {
	if t == nil || t.QueueGroupRedirectList == nil {
		return ""
	}
	return *t.QueueGroupRedirectList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate represents the /nokia-conf/configure/service/vprn/interface/sap/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate struct {
	Cir                       NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate_Cir_Union `path:"cir" module:"nokia-conf"`
	LimitUnusedBandwidth      *bool                                                                   `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool                                                                   `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      *int64                                                                  `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate) GetCir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter represents the /nokia-conf/configure/service/vprn/interface/sap/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos struct {
	EgressRemarkPolicy   *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy   `path:"egress-remark-policy" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	QinqMarkTopOnly      *bool                                                                           `path:"qinq-mark-top-only" module:"nokia-conf"`
	SapEgress            *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress            `path:"sap-egress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
	VlanQosPolicy        *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy        `path:"vlan-qos-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateEgressRemarkPolicy retrieves the value of the EgressRemarkPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) GetOrCreateEgressRemarkPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy {
	if t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	t.EgressRemarkPolicy = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy{}
	return t.EgressRemarkPolicy
}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetOrCreateVlanQosPolicy retrieves the value of the VlanQosPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) GetOrCreateVlanQosPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy {
	if t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	t.VlanQosPolicy = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy{}
	return t.VlanQosPolicy
}

// GetEgressRemarkPolicy returns the value of the EgressRemarkPolicy struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos. If the receiver or the field EgressRemarkPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) GetEgressRemarkPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy {
	if t != nil && t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	return nil
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetVlanQosPolicy returns the value of the VlanQosPolicy struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos. If the receiver or the field VlanQosPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) GetVlanQosPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy {
	if t != nil && t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	return nil
}

// GetQinqMarkTopOnly retrieves the value of the leaf QinqMarkTopOnly from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqMarkTopOnly is set, it can
// safely use t.GetQinqMarkTopOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqMarkTopOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) GetQinqMarkTopOnly() bool {
	if t == nil || t.QinqMarkTopOnly == nil {
		return false
	}
	return *t.QinqMarkTopOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QinqMarkTopOnly == nil {
		var v bool = false
		t.QinqMarkTopOnly = &v
	}
	t.EgressRemarkPolicy.PopulateDefaults()
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapEgress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
	t.VlanQosPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/egress-remark-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_EgressRemarkPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                   `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides struct {
	ApplyGroups        []string                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Root               *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                                                             `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress struct {
	Overrides         *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides         `path:"overrides" module:"nokia-conf"`
	PolicyName        *string                                                                                `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides{}
	return t.Overrides
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) GetOverrides() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) GetPortRedirectGroup() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct {
	HsSecondaryShaper *string                                                                                              `path:"hs-secondary-shaper" module:"nokia-conf"`
	HsWrrGroup        map[uint32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup `path:"hs-wrr-group" module:"nokia-conf"`
	HsmdaQueues       *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues           `path:"hsmda-queues" module:"nokia-conf"`
	Policer           map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer     `path:"policer" module:"nokia-conf"`
	Queue             map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue       `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) IsYANGGoStruct() {
}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) NewHsWrrGroup(GroupId uint32) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup{
		GroupId: &GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) RenameHsWrrGroup(oldK, newK uint32) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = &newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) DeleteHsWrrGroup(GroupId uint32) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) AppendHsWrrGroup(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) AppendPolicer(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) AppendQueue(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateHsmdaQueues retrieves the value of the HsmdaQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsmdaQueues() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	t.HsmdaQueues = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues{}
	return t.HsmdaQueues
}

// GetHsmdaQueues returns the value of the HsmdaQueues struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides. If the receiver or the field HsmdaQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetHsmdaQueues() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t != nil && t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	return nil
}

// GetHsSecondaryShaper retrieves the value of the leaf HsSecondaryShaper from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsSecondaryShaper is set, it can
// safely use t.GetHsSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsSecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) GetHsSecondaryShaper() string {
	if t == nil || t.HsSecondaryShaper == nil {
		return ""
	}
	return *t.HsSecondaryShaper
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HsmdaQueues.PopulateDefaults()
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct {
	ApplyGroups        []string                                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupId            *uint32                                                                                             `path:"group-id" module:"nokia-conf"`
	HsClassWeight      *int32                                                                                              `path:"hs-class-weight" module:"nokia-conf"`
	PercentRate        *float64                                                                                            `path:"percent-rate" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetRate() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/hsmda-queues YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct {
	PacketByteOffset *int32                                                                                                     `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue `path:"queue" module:"nokia-conf"`
	SecondaryShaper  *string                                                                                                    `path:"secondary-shaper" module:"nokia-conf"`
	WrrPolicy        *string                                                                                                    `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) AppendQueue(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetSecondaryShaper retrieves the value of the leaf SecondaryShaper from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaper is set, it can
// safely use t.GetSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetSecondaryShaper() string {
	if t == nil || t.SecondaryShaper == nil {
		return ""
	}
	return *t.SecondaryShaper
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/hsmda-queues/queue YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct {
	ApplyGroups        []string                                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union  `path:"mbs" module:"nokia-conf"`
	QueueId            *int32                                                                                                     `path:"queue-id" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union `path:"rate" module:"nokia-conf"`
	SlopePolicy        *string                                                                                                    `path:"slope-policy" module:"nokia-conf"`
	WrrWeight          *int32                                                                                                     `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetMbs() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetRate() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetWrrWeight() int32 {
	if t == nil || t.WrrWeight == nil {
		return 0
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/policer YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer struct {
	ApplyGroups        []string                                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union    `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union    `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                             `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                             `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate        `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_EgressPolicerStatMode                                                              `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetCbs() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetMbs() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	AvgFrameOverhead   *float64                                                                                               `path:"avg-frame-overhead" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union   `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	HsClassWeight      *int32                                                                                                 `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue        *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue       `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight        *int32                                                                                                 `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                                  `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                                 `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWredQueue() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetParent() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.0
	}
	return *t.AvgFrameOverhead
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetBurstLimit() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return nil
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetCbs() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWrrWeight() int32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMbs() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsWrrWeight == nil {
		var v int32 = 1
		t.HsWrrWeight = &v
	}
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/sap-egress/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                              `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                               `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy represents the /nokia-conf/configure/service/vprn/interface/sap/egress/qos/vlan-qos-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy struct {
	PolicyName   *string `path:"policy-name" module:"nokia-conf"`
	PortRedirect *bool   `path:"port-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPortRedirect retrieves the value of the leaf PortRedirect from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortRedirect is set, it can
// safely use t.GetPortRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) GetPortRedirect() bool {
	if t == nil || t.PortRedirect == nil {
		return false
	}
	return *t.PortRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortRedirect == nil {
		var v bool = false
		t.PortRedirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Egress_Qos_VlanQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm represents the /nokia-conf/configure/service/vprn/interface/sap/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm struct {
	ApplyGroups          []string                                                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectLmmFcStats    *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats                                                     `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats      *bool                                                                                                                        `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                  map[NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep `path:"mep" module:"nokia-conf"`
	SquelchIngressLevels []uint32                                                                                                                     `path:"squelch-ingress-levels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/service/vprn/interface/sap/eth-cfm.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep {

	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) AppendMep(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/service/vprn/interface/sap/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep represents the /nokia-conf/configure/service/vprn/interface/sap/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	Ais                  *bool                                                                        `path:"ais" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                                        `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                       `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                      `path:"ccm-padding-size" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                      `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                      `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                       `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                      `path:"ma-admin-name" module:"nokia-conf"`
	MdAdminName          *string                                                                      `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                                      `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                      `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetAis() bool {
	if t == nil || t.Ais == nil {
		return false
	}
	return *t.Ais
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ais == nil {
		var v bool = false
		t.Ais = &v
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/service/vprn/interface/sap/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {
}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf represents the /nokia-conf/configure/service/vprn/interface/sap/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest represents the /nokia-conf/configure/service/vprn/interface/sap/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                        `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/service/vprn/interface/sap/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                   `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace represents the /nokia-conf/configure/service/vprn/interface/sap/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/service/vprn/interface/sap/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/service/vprn/interface/sap/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {
}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale represents the /nokia-conf/configure/service/vprn/interface/sap/fwd-wholesale YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale struct {
	PppoeService *string `path:"pppoe-service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale) IsYANGGoStruct() {}

// GetPppoeService retrieves the value of the leaf PppoeService from the NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppoeService is set, it can
// safely use t.GetPppoeService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppoeService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale) GetPppoeService() string {
	if t == nil || t.PppoeService == nil {
		return ""
	}
	return *t.PppoeService
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_FwdWholesale) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress represents the /nokia-conf/configure/service/vprn/interface/sap/ingress YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress struct {
	AggregatePolicer       *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer `path:"aggregate-policer" module:"nokia-conf"`
	Filter                 *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter           `path:"filter" module:"nokia-conf"`
	IpFilterPair           *bool                                                                    `path:"ip-filter-pair" module:"nokia-conf"`
	Qos                    *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos              `path:"qos" module:"nokia-conf"`
	QueueGroupRedirectList *string                                                                  `path:"queue-group-redirect-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateAggregatePolicer retrieves the value of the AggregatePolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) GetOrCreateAggregatePolicer() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer {
	if t.AggregatePolicer != nil {
		return t.AggregatePolicer
	}
	t.AggregatePolicer = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer{}
	return t.AggregatePolicer
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos{}
	return t.Qos
}

// GetAggregatePolicer returns the value of the AggregatePolicer struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress. If the receiver or the field AggregatePolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) GetAggregatePolicer() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer {
	if t != nil && t.AggregatePolicer != nil {
		return t.AggregatePolicer
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) GetFilter() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) GetQos() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetIpFilterPair retrieves the value of the leaf IpFilterPair from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterPair is set, it can
// safely use t.GetIpFilterPair() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterPair == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) GetIpFilterPair() bool {
	if t == nil || t.IpFilterPair == nil {
		return false
	}
	return *t.IpFilterPair
}

// GetQueueGroupRedirectList retrieves the value of the leaf QueueGroupRedirectList from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueGroupRedirectList is set, it can
// safely use t.GetQueueGroupRedirectList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueGroupRedirectList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) GetQueueGroupRedirectList() string {
	if t == nil || t.QueueGroupRedirectList == nil {
		return ""
	}
	return *t.QueueGroupRedirectList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpFilterPair == nil {
		var v bool = false
		t.IpFilterPair = &v
	}
	t.AggregatePolicer.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/aggregate-policer YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer struct {
	Burst NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Burst_Union `path:"burst" module:"nokia-conf"`
	Cbs   NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Cbs_Union   `path:"cbs" module:"nokia-conf"`
	Cir   NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Cir_Union   `path:"cir" module:"nokia-conf"`
	Rate  NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Rate_Union  `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) IsYANGGoStruct() {}

// GetBurst retrieves the value of the leaf Burst from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Burst is set, it can
// safely use t.GetBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Burst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) GetBurst() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Burst_Union {
	if t == nil || t.Burst == nil {
		return NokiaTypesQos_AggrPolicerBurst_Enum_default
	}
	return t.Burst
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) GetCbs() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) GetCir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) GetRate() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_AggrPolicerRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Burst == nil {
		t.Burst = NokiaTypesQos_AggrPolicerBurst_Enum_default
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_AggrPolicerRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_AggregatePolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos struct {
	MatchQinqDot1P       E_NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_MatchQinqDot1P      `path:"match-qinq-dot1p" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapIngress           *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress           `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetMatchQinqDot1P retrieves the value of the leaf MatchQinqDot1P from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchQinqDot1P is set, it can
// safely use t.GetMatchQinqDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchQinqDot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) GetMatchQinqDot1P() E_NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_MatchQinqDot1P {
	if t == nil || t.MatchQinqDot1P == 0 {
		return 0
	}
	return t.MatchQinqDot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapIngress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                    `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides struct {
	ApplyGroups        []string                                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Root               *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                                                              `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	Overrides       *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides       `path:"overrides" module:"nokia-conf"`
	PolicyName      *string                                                                                `path:"policy-name" module:"nokia-conf"`
	QueuingType     E_NokiaTypesServices_ServicesSapQueuingType                                            `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) GetFpRedirectGroup() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct {
	IpCriteria   *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria        `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria      `path:"ipv6-criteria" module:"nokia-conf"`
	Policer      map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue        map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) AppendPolicer(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) AppendQueue(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpCriteria() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetIpCriteria() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) GetIpv6Criteria() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/ip-criteria YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/policer YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct {
	ApplyGroups        []string                                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union    `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union    `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                               `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                               `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate        `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_IngressPolicerStatMode                                                               `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetCbs() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetMbs() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                                    `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                                   `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetParent() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetCbs() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMbs() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling *bool `path:"fast-polling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/sap-ingress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                               `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                                `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/vprn/interface/sap/ingress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel represents the /nokia-conf/configure/service/vprn/interface/sap/ip-tunnel YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel struct {
	AdminState                E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	BackupRemoteIpAddress     *string                                                                          `path:"backup-remote-ip-address" module:"nokia-conf"`
	ClearDfBit                *bool                                                                            `path:"clear-df-bit" module:"nokia-conf"`
	DeliveryService           *string                                                                          `path:"delivery-service" module:"nokia-conf"`
	Description               *string                                                                          `path:"description" module:"nokia-conf"`
	DestIp                    map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp       `path:"dest-ip" module:"nokia-conf"`
	Dscp                      E_NokiaTypesQos_DscpName                                                         `path:"dscp" module:"nokia-conf"`
	EncapsulatedIpMtu         *uint32                                                                          `path:"encapsulated-ip-mtu" module:"nokia-conf"`
	GreHeader                 *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader               `path:"gre-header" module:"nokia-conf"`
	IcmpGeneration            *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration          `path:"icmp-generation" module:"nokia-conf"`
	Icmp6Generation           *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation         `path:"icmp6-generation" module:"nokia-conf"`
	IpMtu                     *uint32                                                                          `path:"ip-mtu" module:"nokia-conf"`
	IpsecTransportModeProfile *string                                                                          `path:"ipsec-transport-mode-profile" module:"nokia-conf"`
	LocalIpAddress            *string                                                                          `path:"local-ip-address" module:"nokia-conf"`
	PmtuDiscoveryAging        *uint32                                                                          `path:"pmtu-discovery-aging" module:"nokia-conf"`
	PrivateTcpMssAdjust       *int32                                                                           `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PropagatePmtuV4           *bool                                                                            `path:"propagate-pmtu-v4" module:"nokia-conf"`
	PropagatePmtuV6           *bool                                                                            `path:"propagate-pmtu-v6" module:"nokia-conf"`
	PublicTcpMssAdjust        NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_PublicTcpMssAdjust_Union `path:"public-tcp-mss-adjust" module:"nokia-conf"`
	Reassembly                NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Reassembly_Union         `path:"reassembly" module:"nokia-conf"`
	RemoteIpAddress           *string                                                                          `path:"remote-ip-address" module:"nokia-conf"`
	TunnelName                *string                                                                          `path:"tunnel-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) IsYANGGoStruct() {}

// NewDestIp creates a new entry in the DestIp list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) NewDestIp(DestIpAddress string) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestIp == nil {
		t.DestIp = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp)
	}

	key := DestIpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestIp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestIp", key)
	}

	t.DestIp[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp{
		DestIpAddress: &DestIpAddress,
	}

	return t.DestIp[key], nil
}

// RenameDestIp renames an entry in the list DestIp within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) RenameDestIp(oldK, newK string) error {
	if _, ok := t.DestIp[newK]; ok {
		return fmt.Errorf("key %v already exists in DestIp", newK)
	}

	e, ok := t.DestIp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestIp", oldK)
	}
	e.DestIpAddress = &newK

	t.DestIp[newK] = e
	delete(t.DestIp, oldK)
	return nil
}

// GetOrCreateDestIp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetOrCreateDestIp(DestIpAddress string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp {

	key := DestIpAddress

	if v, ok := t.DestIp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestIp(DestIpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestIp got unexpected error: %v", err))
	}
	return v
}

// GetDestIp retrieves the value with the specified key from
// the DestIp map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetDestIp(DestIpAddress string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp {

	if t == nil {
		return nil
	}

	key := DestIpAddress

	if lm, ok := t.DestIp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestIp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) DeleteDestIp(DestIpAddress string) {
	key := DestIpAddress

	delete(t.DestIp, key)
}

// AppendDestIp appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp struct to the
// list DestIp of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) AppendDestIp(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp) error {
	if v.DestIpAddress == nil {
		return fmt.Errorf("invalid nil key received for DestIpAddress")
	}

	key := *v.DestIpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestIp == nil {
		t.DestIp = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp)
	}

	if _, ok := t.DestIp[key]; ok {
		return fmt.Errorf("duplicate key for list DestIp %v", key)
	}

	t.DestIp[key] = v
	return nil
}

// GetOrCreateGreHeader retrieves the value of the GreHeader field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetOrCreateGreHeader() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader {
	if t.GreHeader != nil {
		return t.GreHeader
	}
	t.GreHeader = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader{}
	return t.GreHeader
}

// GetOrCreateIcmpGeneration retrieves the value of the IcmpGeneration field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetOrCreateIcmpGeneration() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration {
	if t.IcmpGeneration != nil {
		return t.IcmpGeneration
	}
	t.IcmpGeneration = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration{}
	return t.IcmpGeneration
}

// GetOrCreateIcmp6Generation retrieves the value of the Icmp6Generation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetOrCreateIcmp6Generation() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation {
	if t.Icmp6Generation != nil {
		return t.Icmp6Generation
	}
	t.Icmp6Generation = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation{}
	return t.Icmp6Generation
}

// GetGreHeader returns the value of the GreHeader struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel. If the receiver or the field GreHeader is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetGreHeader() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader {
	if t != nil && t.GreHeader != nil {
		return t.GreHeader
	}
	return nil
}

// GetIcmpGeneration returns the value of the IcmpGeneration struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel. If the receiver or the field IcmpGeneration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetIcmpGeneration() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration {
	if t != nil && t.IcmpGeneration != nil {
		return t.IcmpGeneration
	}
	return nil
}

// GetIcmp6Generation returns the value of the Icmp6Generation struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel. If the receiver or the field Icmp6Generation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetIcmp6Generation() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation {
	if t != nil && t.Icmp6Generation != nil {
		return t.Icmp6Generation
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBackupRemoteIpAddress retrieves the value of the leaf BackupRemoteIpAddress from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackupRemoteIpAddress is set, it can
// safely use t.GetBackupRemoteIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackupRemoteIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetBackupRemoteIpAddress() string {
	if t == nil || t.BackupRemoteIpAddress == nil {
		return ""
	}
	return *t.BackupRemoteIpAddress
}

// GetClearDfBit retrieves the value of the leaf ClearDfBit from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearDfBit is set, it can
// safely use t.GetClearDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearDfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetClearDfBit() bool {
	if t == nil || t.ClearDfBit == nil {
		return false
	}
	return *t.ClearDfBit
}

// GetDeliveryService retrieves the value of the leaf DeliveryService from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeliveryService is set, it can
// safely use t.GetDeliveryService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeliveryService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetDeliveryService() string {
	if t == nil || t.DeliveryService == nil {
		return ""
	}
	return *t.DeliveryService
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetEncapsulatedIpMtu retrieves the value of the leaf EncapsulatedIpMtu from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapsulatedIpMtu is set, it can
// safely use t.GetEncapsulatedIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapsulatedIpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetEncapsulatedIpMtu() uint32 {
	if t == nil || t.EncapsulatedIpMtu == nil {
		return 0
	}
	return *t.EncapsulatedIpMtu
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetIpsecTransportModeProfile retrieves the value of the leaf IpsecTransportModeProfile from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpsecTransportModeProfile is set, it can
// safely use t.GetIpsecTransportModeProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpsecTransportModeProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetIpsecTransportModeProfile() string {
	if t == nil || t.IpsecTransportModeProfile == nil {
		return ""
	}
	return *t.IpsecTransportModeProfile
}

// GetLocalIpAddress retrieves the value of the leaf LocalIpAddress from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpAddress is set, it can
// safely use t.GetLocalIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetLocalIpAddress() string {
	if t == nil || t.LocalIpAddress == nil {
		return ""
	}
	return *t.LocalIpAddress
}

// GetPmtuDiscoveryAging retrieves the value of the leaf PmtuDiscoveryAging from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PmtuDiscoveryAging is set, it can
// safely use t.GetPmtuDiscoveryAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PmtuDiscoveryAging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetPmtuDiscoveryAging() uint32 {
	if t == nil || t.PmtuDiscoveryAging == nil {
		return 900
	}
	return *t.PmtuDiscoveryAging
}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetPrivateTcpMssAdjust() int32 {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return 0
	}
	return *t.PrivateTcpMssAdjust
}

// GetPropagatePmtuV4 retrieves the value of the leaf PropagatePmtuV4 from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagatePmtuV4 is set, it can
// safely use t.GetPropagatePmtuV4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagatePmtuV4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetPropagatePmtuV4() bool {
	if t == nil || t.PropagatePmtuV4 == nil {
		return false
	}
	return *t.PropagatePmtuV4
}

// GetPropagatePmtuV6 retrieves the value of the leaf PropagatePmtuV6 from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagatePmtuV6 is set, it can
// safely use t.GetPropagatePmtuV6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagatePmtuV6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetPropagatePmtuV6() bool {
	if t == nil || t.PropagatePmtuV6 == nil {
		return false
	}
	return *t.PropagatePmtuV6
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetPublicTcpMssAdjust() NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_PublicTcpMssAdjust_Union {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return nil
	}
	return t.PublicTcpMssAdjust
}

// GetReassembly retrieves the value of the leaf Reassembly from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reassembly is set, it can
// safely use t.GetReassembly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reassembly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetReassembly() NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Reassembly_Union {
	if t == nil || t.Reassembly == nil {
		return nil
	}
	return t.Reassembly
}

// GetRemoteIpAddress retrieves the value of the leaf RemoteIpAddress from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpAddress is set, it can
// safely use t.GetRemoteIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetRemoteIpAddress() string {
	if t == nil || t.RemoteIpAddress == nil {
		return ""
	}
	return *t.RemoteIpAddress
}

// GetTunnelName retrieves the value of the leaf TunnelName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelName is set, it can
// safely use t.GetTunnelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) GetTunnelName() string {
	if t == nil || t.TunnelName == nil {
		return ""
	}
	return *t.TunnelName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClearDfBit == nil {
		var v bool = false
		t.ClearDfBit = &v
	}
	if t.PmtuDiscoveryAging == nil {
		var v uint32 = 900
		t.PmtuDiscoveryAging = &v
	}
	t.GreHeader.PopulateDefaults()
	t.IcmpGeneration.PopulateDefaults()
	t.Icmp6Generation.PopulateDefaults()
	for _, e := range t.DestIp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelName == nil {
		return nil, fmt.Errorf("nil value for key TunnelName")
	}

	return map[string]interface{}{
		"tunnel-name": *t.TunnelName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp represents the /nokia-conf/configure/service/vprn/interface/sap/ip-tunnel/dest-ip YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp struct {
	DestIpAddress *string `path:"dest-ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp) IsYANGGoStruct() {}

// GetDestIpAddress retrieves the value of the leaf DestIpAddress from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIpAddress is set, it can
// safely use t.GetDestIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp) GetDestIpAddress() string {
	if t == nil || t.DestIpAddress == nil {
		return ""
	}
	return *t.DestIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DestIpAddress == nil {
		return nil, fmt.Errorf("nil value for key DestIpAddress")
	}

	return map[string]interface{}{
		"dest-ip-address": *t.DestIpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_DestIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader represents the /nokia-conf/configure/service/vprn/interface/sap/ip-tunnel/gre-header YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader struct {
	AdminState E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	Key        *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key `path:"key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) IsYANGGoStruct() {}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) GetOrCreateKey() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key{}
	return t.Key
}

// GetKey returns the value of the Key struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) GetKey() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Key.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key represents the /nokia-conf/configure/service/vprn/interface/sap/ip-tunnel/gre-header/key YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Receive    *uint32                     `path:"receive" module:"nokia-conf"`
	Send       *uint32                     `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 0
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) GetSend() uint32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Receive == nil {
		var v uint32 = 0
		t.Receive = &v
	}
	if t.Send == nil {
		var v uint32 = 0
		t.Send = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_GreHeader_Key) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation represents the /nokia-conf/configure/service/vprn/interface/sap/ip-tunnel/icmp6-generation YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation struct {
	PacketTooBig *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig `path:"packet-too-big" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) IsYANGGoStruct() {}

// GetOrCreatePacketTooBig retrieves the value of the PacketTooBig field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) GetOrCreatePacketTooBig() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig {
	if t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	t.PacketTooBig = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig{}
	return t.PacketTooBig
}

// GetPacketTooBig returns the value of the PacketTooBig struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation. If the receiver or the field PacketTooBig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) GetPacketTooBig() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig {
	if t != nil && t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketTooBig.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig represents the /nokia-conf/configure/service/vprn/interface/sap/ip-tunnel/icmp6-generation/packet-too-big YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint32                     `path:"number" module:"nokia-conf"`
	Seconds    *uint32                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Number == nil {
		var v uint32 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint32 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_Icmp6Generation_PacketTooBig) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration represents the /nokia-conf/configure/service/vprn/interface/sap/ip-tunnel/icmp-generation YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration struct {
	FragRequired *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired `path:"frag-required" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) IsYANGGoStruct() {}

// GetOrCreateFragRequired retrieves the value of the FragRequired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) GetOrCreateFragRequired() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired {
	if t.FragRequired != nil {
		return t.FragRequired
	}
	t.FragRequired = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired{}
	return t.FragRequired
}

// GetFragRequired returns the value of the FragRequired struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration. If the receiver or the field FragRequired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) GetFragRequired() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired {
	if t != nil && t.FragRequired != nil {
		return t.FragRequired
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FragRequired.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired represents the /nokia-conf/configure/service/vprn/interface/sap/ip-tunnel/icmp-generation/frag-required YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Interval     *uint32                     `path:"interval" module:"nokia-conf"`
	MessageCount *uint32                     `path:"message-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 10
	}
	return *t.Interval
}

// GetMessageCount retrieves the value of the leaf MessageCount from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageCount is set, it can
// safely use t.GetMessageCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) GetMessageCount() uint32 {
	if t == nil || t.MessageCount == nil {
		return 100
	}
	return *t.MessageCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 10
		t.Interval = &v
	}
	if t.MessageCount == nil {
		var v uint32 = 100
		t.MessageCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpTunnel_IcmpGeneration_FragRequired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway struct {
	AdminState            E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Cert                  *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert                  `path:"cert" module:"nokia-conf"`
	ClientDb              *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb              `path:"client-db" module:"nokia-conf" yangPresence:"true"`
	DefaultSecureService  *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService  `path:"default-secure-service" module:"nokia-conf" yangPresence:"true"`
	DefaultTunnelTemplate *uint32                                                                            `path:"default-tunnel-template" module:"nokia-conf"`
	DhcpAddressAssignment *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment `path:"dhcp-address-assignment" module:"nokia-conf"`
	IkePolicy             *uint32                                                                            `path:"ike-policy" module:"nokia-conf"`
	Local                 *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local                 `path:"local" module:"nokia-conf"`
	MaxHistoryKeyRecords  *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords  `path:"max-history-key-records" module:"nokia-conf"`
	Name                  *string                                                                            `path:"name" module:"nokia-conf"`
	PreSharedKey          *string                                                                            `path:"pre-shared-key" module:"nokia-conf"`
	Radius                *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius                `path:"radius" module:"nokia-conf"`
	TsList                *string                                                                            `path:"ts-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) IsYANGGoStruct() {}

// GetOrCreateCert retrieves the value of the Cert field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateCert() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert {
	if t.Cert != nil {
		return t.Cert
	}
	t.Cert = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert{}
	return t.Cert
}

// GetOrCreateClientDb retrieves the value of the ClientDb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateClientDb() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb {
	if t.ClientDb != nil {
		return t.ClientDb
	}
	t.ClientDb = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb{}
	return t.ClientDb
}

// GetOrCreateDefaultSecureService retrieves the value of the DefaultSecureService field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateDefaultSecureService() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService {
	if t.DefaultSecureService != nil {
		return t.DefaultSecureService
	}
	t.DefaultSecureService = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService{}
	return t.DefaultSecureService
}

// GetOrCreateDhcpAddressAssignment retrieves the value of the DhcpAddressAssignment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateDhcpAddressAssignment() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment {
	if t.DhcpAddressAssignment != nil {
		return t.DhcpAddressAssignment
	}
	t.DhcpAddressAssignment = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment{}
	return t.DhcpAddressAssignment
}

// GetOrCreateLocal retrieves the value of the Local field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateLocal() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local {
	if t.Local != nil {
		return t.Local
	}
	t.Local = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local{}
	return t.Local
}

// GetOrCreateMaxHistoryKeyRecords retrieves the value of the MaxHistoryKeyRecords field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateMaxHistoryKeyRecords() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords {
	if t.MaxHistoryKeyRecords != nil {
		return t.MaxHistoryKeyRecords
	}
	t.MaxHistoryKeyRecords = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords{}
	return t.MaxHistoryKeyRecords
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetOrCreateRadius() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius{}
	return t.Radius
}

// GetCert returns the value of the Cert struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field Cert is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetCert() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert {
	if t != nil && t.Cert != nil {
		return t.Cert
	}
	return nil
}

// GetClientDb returns the value of the ClientDb struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field ClientDb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetClientDb() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb {
	if t != nil && t.ClientDb != nil {
		return t.ClientDb
	}
	return nil
}

// GetDefaultSecureService returns the value of the DefaultSecureService struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field DefaultSecureService is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetDefaultSecureService() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService {
	if t != nil && t.DefaultSecureService != nil {
		return t.DefaultSecureService
	}
	return nil
}

// GetDhcpAddressAssignment returns the value of the DhcpAddressAssignment struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field DhcpAddressAssignment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetDhcpAddressAssignment() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment {
	if t != nil && t.DhcpAddressAssignment != nil {
		return t.DhcpAddressAssignment
	}
	return nil
}

// GetLocal returns the value of the Local struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field Local is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetLocal() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local {
	if t != nil && t.Local != nil {
		return t.Local
	}
	return nil
}

// GetMaxHistoryKeyRecords returns the value of the MaxHistoryKeyRecords struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field MaxHistoryKeyRecords is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetMaxHistoryKeyRecords() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords {
	if t != nil && t.MaxHistoryKeyRecords != nil {
		return t.MaxHistoryKeyRecords
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetRadius() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDefaultTunnelTemplate retrieves the value of the leaf DefaultTunnelTemplate from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultTunnelTemplate is set, it can
// safely use t.GetDefaultTunnelTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultTunnelTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetDefaultTunnelTemplate() uint32 {
	if t == nil || t.DefaultTunnelTemplate == nil {
		return 0
	}
	return *t.DefaultTunnelTemplate
}

// GetIkePolicy retrieves the value of the leaf IkePolicy from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IkePolicy is set, it can
// safely use t.GetIkePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IkePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetIkePolicy() uint32 {
	if t == nil || t.IkePolicy == nil {
		return 0
	}
	return *t.IkePolicy
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPreSharedKey retrieves the value of the leaf PreSharedKey from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreSharedKey is set, it can
// safely use t.GetPreSharedKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreSharedKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetPreSharedKey() string {
	if t == nil || t.PreSharedKey == nil {
		return ""
	}
	return *t.PreSharedKey
}

// GetTsList retrieves the value of the leaf TsList from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TsList is set, it can
// safely use t.GetTsList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TsList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) GetTsList() string {
	if t == nil || t.TsList == nil {
		return ""
	}
	return *t.TsList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Cert.PopulateDefaults()
	t.ClientDb.PopulateDefaults()
	t.DefaultSecureService.PopulateDefaults()
	t.DhcpAddressAssignment.PopulateDefaults()
	t.Local.PopulateDefaults()
	t.MaxHistoryKeyRecords.PopulateDefaults()
	t.Radius.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/cert YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert struct {
	CertProfile        *string                                                                        `path:"cert-profile" module:"nokia-conf"`
	StatusVerify       *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify `path:"status-verify" module:"nokia-conf"`
	TrustAnchorProfile *string                                                                        `path:"trust-anchor-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert) IsYANGGoStruct() {}

// GetOrCreateStatusVerify retrieves the value of the StatusVerify field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert) GetOrCreateStatusVerify() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify {
	if t.StatusVerify != nil {
		return t.StatusVerify
	}
	t.StatusVerify = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify{}
	return t.StatusVerify
}

// GetStatusVerify returns the value of the StatusVerify struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert. If the receiver or the field StatusVerify is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert) GetStatusVerify() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify {
	if t != nil && t.StatusVerify != nil {
		return t.StatusVerify
	}
	return nil
}

// GetCertProfile retrieves the value of the leaf CertProfile from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfile is set, it can
// safely use t.GetCertProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert) GetCertProfile() string {
	if t == nil || t.CertProfile == nil {
		return ""
	}
	return *t.CertProfile
}

// GetTrustAnchorProfile retrieves the value of the leaf TrustAnchorProfile from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrustAnchorProfile is set, it can
// safely use t.GetTrustAnchorProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrustAnchorProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert) GetTrustAnchorProfile() string {
	if t == nil || t.TrustAnchorProfile == nil {
		return ""
	}
	return *t.TrustAnchorProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.StatusVerify.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/cert/status-verify YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify struct {
	DefaultResult E_NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify_DefaultResult `path:"default-result" module:"nokia-conf"`
	Primary       E_NokiaTypesIpsec_CertRevocationStatus                                                        `path:"primary" module:"nokia-conf"`
	Secondary     E_NokiaTypesIpsec_CertRevocationStatusWithNone                                                `path:"secondary" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) IsYANGGoStruct() {
}

// GetDefaultResult retrieves the value of the leaf DefaultResult from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultResult is set, it can
// safely use t.GetDefaultResult() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultResult == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) GetDefaultResult() E_NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify_DefaultResult {
	if t == nil || t.DefaultResult == 0 {
		return NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify_DefaultResult_revoked
	}
	return t.DefaultResult
}

// GetPrimary retrieves the value of the leaf Primary from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Primary is set, it can
// safely use t.GetPrimary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Primary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) GetPrimary() E_NokiaTypesIpsec_CertRevocationStatus {
	if t == nil || t.Primary == 0 {
		return NokiaTypesIpsec_CertRevocationStatus_crl
	}
	return t.Primary
}

// GetSecondary retrieves the value of the leaf Secondary from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secondary is set, it can
// safely use t.GetSecondary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secondary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) GetSecondary() E_NokiaTypesIpsec_CertRevocationStatusWithNone {
	if t == nil || t.Secondary == 0 {
		return NokiaTypesIpsec_CertRevocationStatusWithNone_none
	}
	return t.Secondary
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultResult == 0 {
		t.DefaultResult = NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify_DefaultResult_revoked
	}
	if t.Primary == 0 {
		t.Primary = NokiaTypesIpsec_CertRevocationStatus_crl
	}
	if t.Secondary == 0 {
		t.Secondary = NokiaTypesIpsec_CertRevocationStatusWithNone_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Cert_StatusVerify) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/client-db YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb struct {
	Fallback *bool   `path:"fallback" module:"nokia-conf"`
	Name     *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) IsYANGGoStruct() {}

// GetFallback retrieves the value of the leaf Fallback from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fallback is set, it can
// safely use t.GetFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) GetFallback() bool {
	if t == nil || t.Fallback == nil {
		return true
	}
	return *t.Fallback
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fallback == nil {
		var v bool = true
		t.Fallback = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_ClientDb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/default-secure-service YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService struct {
	Interface   *string `path:"interface" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DefaultSecureService) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/dhcp-address-assignment YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment struct {
	Dhcpv4 *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 `path:"dhcpv4" module:"nokia-conf" yangPresence:"true"`
	Dhcpv6 *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 `path:"dhcpv6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) IsYANGGoStruct() {
}

// GetOrCreateDhcpv4 retrieves the value of the Dhcpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) GetOrCreateDhcpv4() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 {
	if t.Dhcpv4 != nil {
		return t.Dhcpv4
	}
	t.Dhcpv4 = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4{}
	return t.Dhcpv4
}

// GetOrCreateDhcpv6 retrieves the value of the Dhcpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) GetOrCreateDhcpv6() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 {
	if t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	t.Dhcpv6 = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6{}
	return t.Dhcpv6
}

// GetDhcpv4 returns the value of the Dhcpv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment. If the receiver or the field Dhcpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) GetDhcpv4() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 {
	if t != nil && t.Dhcpv4 != nil {
		return t.Dhcpv4
	}
	return nil
}

// GetDhcpv6 returns the value of the Dhcpv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment. If the receiver or the field Dhcpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) GetDhcpv6() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 {
	if t != nil && t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dhcpv4.PopulateDefaults()
	t.Dhcpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/dhcp-address-assignment/dhcpv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	GiAddress          *string                                                                                          `path:"gi-address" module:"nokia-conf"`
	SendRelease        *bool                                                                                            `path:"send-release" module:"nokia-conf"`
	Server             *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) IsYANGGoStruct() {
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetOrCreateServer() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server{}
	return t.Server
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetServer() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetSendRelease retrieves the value of the leaf SendRelease from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendRelease is set, it can
// safely use t.GetSendRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) GetSendRelease() bool {
	if t == nil || t.SendRelease == nil {
		return true
	}
	return *t.SendRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SendRelease == nil {
		var v bool = true
		t.SendRelease = &v
	}
	t.Server.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/dhcp-address-assignment/dhcpv4/server YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server struct {
	Address        []string `path:"address" module:"nokia-conf"`
	RouterInstance *string  `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) GetAddress() []string {
	if t == nil || t.Address == nil {
		return nil
	}
	return t.Address
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv4_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/dhcp-address-assignment/dhcpv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	LinkAddress        *string                                                                                          `path:"link-address" module:"nokia-conf"`
	SendRelease        *bool                                                                                            `path:"send-release" module:"nokia-conf"`
	Server             *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) IsYANGGoStruct() {
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetOrCreateServer() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server{}
	return t.Server
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetServer() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLinkAddress retrieves the value of the leaf LinkAddress from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkAddress is set, it can
// safely use t.GetLinkAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetLinkAddress() string {
	if t == nil || t.LinkAddress == nil {
		return ""
	}
	return *t.LinkAddress
}

// GetSendRelease retrieves the value of the leaf SendRelease from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendRelease is set, it can
// safely use t.GetSendRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) GetSendRelease() bool {
	if t == nil || t.SendRelease == nil {
		return true
	}
	return *t.SendRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SendRelease == nil {
		var v bool = true
		t.SendRelease = &v
	}
	t.Server.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/dhcp-address-assignment/dhcpv6/server YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server struct {
	Address        []string `path:"address" module:"nokia-conf"`
	RouterInstance *string  `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) GetAddress() []string {
	if t == nil || t.Address == nil {
		return nil
	}
	return t.Address
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_DhcpAddressAssignment_Dhcpv6_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/local YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local struct {
	AddressAssignment *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment `path:"address-assignment" module:"nokia-conf" yangPresence:"true"`
	GatewayAddress    *string                                                                              `path:"gateway-address" module:"nokia-conf"`
	Id                *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id                `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local) IsYANGGoStruct() {}

// GetOrCreateAddressAssignment retrieves the value of the AddressAssignment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local) GetOrCreateAddressAssignment() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment {
	if t.AddressAssignment != nil {
		return t.AddressAssignment
	}
	t.AddressAssignment = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment{}
	return t.AddressAssignment
}

// GetOrCreateId retrieves the value of the Id field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local) GetOrCreateId() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id {
	if t.Id != nil {
		return t.Id
	}
	t.Id = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id{}
	return t.Id
}

// GetAddressAssignment returns the value of the AddressAssignment struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local. If the receiver or the field AddressAssignment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local) GetAddressAssignment() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment {
	if t != nil && t.AddressAssignment != nil {
		return t.AddressAssignment
	}
	return nil
}

// GetId returns the value of the Id struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local. If the receiver or the field Id is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local) GetId() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id {
	if t != nil && t.Id != nil {
		return t.Id
	}
	return nil
}

// GetGatewayAddress retrieves the value of the leaf GatewayAddress from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GatewayAddress is set, it can
// safely use t.GetGatewayAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GatewayAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local) GetGatewayAddress() string {
	if t == nil || t.GatewayAddress == nil {
		return ""
	}
	return *t.GatewayAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AddressAssignment.PopulateDefaults()
	t.Id.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/local/address-assignment YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment struct {
	AdminState         E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 `path:"ipv4" module:"nokia-conf" yangPresence:"true"`
	Ipv6               *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) IsYANGGoStruct() {
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetOrCreateIpv6() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetIpv4() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetIpv6() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/local/address-assignment/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 struct {
	DhcpServer     *string `path:"dhcp-server" module:"nokia-conf"`
	Pool           *string `path:"pool" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
	SecondaryPool  *string `path:"secondary-pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) IsYANGGoStruct() {
}

// GetDhcpServer retrieves the value of the leaf DhcpServer from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpServer is set, it can
// safely use t.GetDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) GetDhcpServer() string {
	if t == nil || t.DhcpServer == nil {
		return ""
	}
	return *t.DhcpServer
}

// GetPool retrieves the value of the leaf Pool from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pool is set, it can
// safely use t.GetPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) GetPool() string {
	if t == nil || t.Pool == nil {
		return ""
	}
	return *t.Pool
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSecondaryPool retrieves the value of the leaf SecondaryPool from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryPool is set, it can
// safely use t.GetSecondaryPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryPool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) GetSecondaryPool() string {
	if t == nil || t.SecondaryPool == nil {
		return ""
	}
	return *t.SecondaryPool
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/local/address-assignment/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 struct {
	DhcpServer     *string `path:"dhcp-server" module:"nokia-conf"`
	Pool           *string `path:"pool" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) IsYANGGoStruct() {
}

// GetDhcpServer retrieves the value of the leaf DhcpServer from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpServer is set, it can
// safely use t.GetDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) GetDhcpServer() string {
	if t == nil || t.DhcpServer == nil {
		return ""
	}
	return *t.DhcpServer
}

// GetPool retrieves the value of the leaf Pool from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pool is set, it can
// safely use t.GetPool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) GetPool() string {
	if t == nil || t.Pool == nil {
		return ""
	}
	return *t.Pool
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_AddressAssignment_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/local/id YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id struct {
	Auto YANGEmpty `path:"auto" module:"nokia-conf"`
	Fqdn *string   `path:"fqdn" module:"nokia-conf"`
	Ipv4 *string   `path:"ipv4" module:"nokia-conf"`
	Ipv6 *string   `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) IsYANGGoStruct() {}

// GetAuto retrieves the value of the leaf Auto from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Auto is set, it can
// safely use t.GetAuto() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Auto == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) GetAuto() YANGEmpty {
	if t == nil || t.Auto == false {
		return false
	}
	return t.Auto
}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Local_Id) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/max-history-key-records YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords struct {
	Esp *uint32 `path:"esp" module:"nokia-conf"`
	Ike *uint32 `path:"ike" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) IsYANGGoStruct() {
}

// GetEsp retrieves the value of the leaf Esp from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esp is set, it can
// safely use t.GetEsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) GetEsp() uint32 {
	if t == nil || t.Esp == nil {
		return 0
	}
	return *t.Esp
}

// GetIke retrieves the value of the leaf Ike from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ike is set, it can
// safely use t.GetIke() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ike == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) GetIke() uint32 {
	if t == nil || t.Ike == nil {
		return 0
	}
	return *t.Ike
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_MaxHistoryKeyRecords) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-gateway/radius YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius struct {
	AccountingPolicy     *string `path:"accounting-policy" module:"nokia-conf"`
	AuthenticationPolicy *string `path:"authentication-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius) GetAccountingPolicy() string {
	if t == nil || t.AccountingPolicy == nil {
		return ""
	}
	return *t.AccountingPolicy
}

// GetAuthenticationPolicy retrieves the value of the leaf AuthenticationPolicy from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicy is set, it can
// safely use t.GetAuthenticationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius) GetAuthenticationPolicy() string {
	if t == nil || t.AuthenticationPolicy == nil {
		return ""
	}
	return *t.AuthenticationPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecGateway_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel struct {
	AdminState                        E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                       []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude                []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Bfd                               *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd                     `path:"bfd" module:"nokia-conf"`
	ClearDfBit                        *bool                                                                               `path:"clear-df-bit" module:"nokia-conf"`
	CopyTrafficClassUponDecapsulation *bool                                                                               `path:"copy-traffic-class-upon-decapsulation" module:"nokia-conf"`
	Description                       *string                                                                             `path:"description" module:"nokia-conf"`
	DestIp                            map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp       `path:"dest-ip" module:"nokia-conf"`
	EncapsulatedIpMtu                 *uint32                                                                             `path:"encapsulated-ip-mtu" module:"nokia-conf"`
	IcmpGeneration                    *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration          `path:"icmp-generation" module:"nokia-conf"`
	Icmp6Generation                   *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation         `path:"icmp6-generation" module:"nokia-conf"`
	IpMtu                             *uint32                                                                             `path:"ip-mtu" module:"nokia-conf"`
	KeyExchange                       *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange             `path:"key-exchange" module:"nokia-conf"`
	MaxHistoryKeyRecords              *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords    `path:"max-history-key-records" module:"nokia-conf"`
	Name                              *string                                                                             `path:"name" module:"nokia-conf"`
	PmtuDiscoveryAging                *uint32                                                                             `path:"pmtu-discovery-aging" module:"nokia-conf"`
	PrivateTcpMssAdjust               *int32                                                                              `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PropagatePmtuV4                   *bool                                                                               `path:"propagate-pmtu-v4" module:"nokia-conf"`
	PropagatePmtuV6                   *bool                                                                               `path:"propagate-pmtu-v6" module:"nokia-conf"`
	PublicTcpMssAdjust                NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_PublicTcpMssAdjust_Union `path:"public-tcp-mss-adjust" module:"nokia-conf"`
	ReplayWindow                      *uint32                                                                             `path:"replay-window" module:"nokia-conf"`
	SecurityPolicy                    *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy          `path:"security-policy" module:"nokia-conf"`
	TunnelEndpoint                    *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint          `path:"tunnel-endpoint" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) IsYANGGoStruct() {}

// NewDestIp creates a new entry in the DestIp list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) NewDestIp(Address string) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestIp == nil {
		t.DestIp = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestIp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestIp", key)
	}

	t.DestIp[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp{
		Address: &Address,
	}

	return t.DestIp[key], nil
}

// RenameDestIp renames an entry in the list DestIp within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) RenameDestIp(oldK, newK string) error {
	if _, ok := t.DestIp[newK]; ok {
		return fmt.Errorf("key %v already exists in DestIp", newK)
	}

	e, ok := t.DestIp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestIp", oldK)
	}
	e.Address = &newK

	t.DestIp[newK] = e
	delete(t.DestIp, oldK)
	return nil
}

// GetOrCreateDestIp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateDestIp(Address string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp {

	key := Address

	if v, ok := t.DestIp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestIp(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestIp got unexpected error: %v", err))
	}
	return v
}

// GetDestIp retrieves the value with the specified key from
// the DestIp map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetDestIp(Address string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.DestIp[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestIp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) DeleteDestIp(Address string) {
	key := Address

	delete(t.DestIp, key)
}

// AppendDestIp appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp struct to the
// list DestIp of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) AppendDestIp(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestIp == nil {
		t.DestIp = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp)
	}

	if _, ok := t.DestIp[key]; ok {
		return fmt.Errorf("duplicate key for list DestIp %v", key)
	}

	t.DestIp[key] = v
	return nil
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateBfd() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd{}
	return t.Bfd
}

// GetOrCreateIcmpGeneration retrieves the value of the IcmpGeneration field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateIcmpGeneration() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration {
	if t.IcmpGeneration != nil {
		return t.IcmpGeneration
	}
	t.IcmpGeneration = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration{}
	return t.IcmpGeneration
}

// GetOrCreateIcmp6Generation retrieves the value of the Icmp6Generation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateIcmp6Generation() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation {
	if t.Icmp6Generation != nil {
		return t.Icmp6Generation
	}
	t.Icmp6Generation = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation{}
	return t.Icmp6Generation
}

// GetOrCreateKeyExchange retrieves the value of the KeyExchange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateKeyExchange() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange {
	if t.KeyExchange != nil {
		return t.KeyExchange
	}
	t.KeyExchange = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange{}
	return t.KeyExchange
}

// GetOrCreateMaxHistoryKeyRecords retrieves the value of the MaxHistoryKeyRecords field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateMaxHistoryKeyRecords() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords {
	if t.MaxHistoryKeyRecords != nil {
		return t.MaxHistoryKeyRecords
	}
	t.MaxHistoryKeyRecords = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords{}
	return t.MaxHistoryKeyRecords
}

// GetOrCreateSecurityPolicy retrieves the value of the SecurityPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateSecurityPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy {
	if t.SecurityPolicy != nil {
		return t.SecurityPolicy
	}
	t.SecurityPolicy = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy{}
	return t.SecurityPolicy
}

// GetOrCreateTunnelEndpoint retrieves the value of the TunnelEndpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetOrCreateTunnelEndpoint() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint {
	if t.TunnelEndpoint != nil {
		return t.TunnelEndpoint
	}
	t.TunnelEndpoint = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint{}
	return t.TunnelEndpoint
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetBfd() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetIcmpGeneration returns the value of the IcmpGeneration struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field IcmpGeneration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetIcmpGeneration() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration {
	if t != nil && t.IcmpGeneration != nil {
		return t.IcmpGeneration
	}
	return nil
}

// GetIcmp6Generation returns the value of the Icmp6Generation struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field Icmp6Generation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetIcmp6Generation() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation {
	if t != nil && t.Icmp6Generation != nil {
		return t.Icmp6Generation
	}
	return nil
}

// GetKeyExchange returns the value of the KeyExchange struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field KeyExchange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetKeyExchange() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange {
	if t != nil && t.KeyExchange != nil {
		return t.KeyExchange
	}
	return nil
}

// GetMaxHistoryKeyRecords returns the value of the MaxHistoryKeyRecords struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field MaxHistoryKeyRecords is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetMaxHistoryKeyRecords() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords {
	if t != nil && t.MaxHistoryKeyRecords != nil {
		return t.MaxHistoryKeyRecords
	}
	return nil
}

// GetSecurityPolicy returns the value of the SecurityPolicy struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field SecurityPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetSecurityPolicy() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy {
	if t != nil && t.SecurityPolicy != nil {
		return t.SecurityPolicy
	}
	return nil
}

// GetTunnelEndpoint returns the value of the TunnelEndpoint struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel. If the receiver or the field TunnelEndpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetTunnelEndpoint() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint {
	if t != nil && t.TunnelEndpoint != nil {
		return t.TunnelEndpoint
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearDfBit retrieves the value of the leaf ClearDfBit from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearDfBit is set, it can
// safely use t.GetClearDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearDfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetClearDfBit() bool {
	if t == nil || t.ClearDfBit == nil {
		return false
	}
	return *t.ClearDfBit
}

// GetCopyTrafficClassUponDecapsulation retrieves the value of the leaf CopyTrafficClassUponDecapsulation from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CopyTrafficClassUponDecapsulation is set, it can
// safely use t.GetCopyTrafficClassUponDecapsulation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CopyTrafficClassUponDecapsulation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetCopyTrafficClassUponDecapsulation() bool {
	if t == nil || t.CopyTrafficClassUponDecapsulation == nil {
		return false
	}
	return *t.CopyTrafficClassUponDecapsulation
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEncapsulatedIpMtu retrieves the value of the leaf EncapsulatedIpMtu from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapsulatedIpMtu is set, it can
// safely use t.GetEncapsulatedIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapsulatedIpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetEncapsulatedIpMtu() uint32 {
	if t == nil || t.EncapsulatedIpMtu == nil {
		return 0
	}
	return *t.EncapsulatedIpMtu
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPmtuDiscoveryAging retrieves the value of the leaf PmtuDiscoveryAging from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PmtuDiscoveryAging is set, it can
// safely use t.GetPmtuDiscoveryAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PmtuDiscoveryAging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetPmtuDiscoveryAging() uint32 {
	if t == nil || t.PmtuDiscoveryAging == nil {
		return 900
	}
	return *t.PmtuDiscoveryAging
}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetPrivateTcpMssAdjust() int32 {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return 0
	}
	return *t.PrivateTcpMssAdjust
}

// GetPropagatePmtuV4 retrieves the value of the leaf PropagatePmtuV4 from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagatePmtuV4 is set, it can
// safely use t.GetPropagatePmtuV4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagatePmtuV4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetPropagatePmtuV4() bool {
	if t == nil || t.PropagatePmtuV4 == nil {
		return true
	}
	return *t.PropagatePmtuV4
}

// GetPropagatePmtuV6 retrieves the value of the leaf PropagatePmtuV6 from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagatePmtuV6 is set, it can
// safely use t.GetPropagatePmtuV6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagatePmtuV6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetPropagatePmtuV6() bool {
	if t == nil || t.PropagatePmtuV6 == nil {
		return true
	}
	return *t.PropagatePmtuV6
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetPublicTcpMssAdjust() NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_PublicTcpMssAdjust_Union {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return nil
	}
	return t.PublicTcpMssAdjust
}

// GetReplayWindow retrieves the value of the leaf ReplayWindow from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplayWindow is set, it can
// safely use t.GetReplayWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplayWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) GetReplayWindow() uint32 {
	if t == nil || t.ReplayWindow == nil {
		return 0
	}
	return *t.ReplayWindow
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClearDfBit == nil {
		var v bool = false
		t.ClearDfBit = &v
	}
	if t.CopyTrafficClassUponDecapsulation == nil {
		var v bool = false
		t.CopyTrafficClassUponDecapsulation = &v
	}
	if t.PmtuDiscoveryAging == nil {
		var v uint32 = 900
		t.PmtuDiscoveryAging = &v
	}
	if t.PropagatePmtuV4 == nil {
		var v bool = true
		t.PropagatePmtuV4 = &v
	}
	if t.PropagatePmtuV6 == nil {
		var v bool = true
		t.PropagatePmtuV6 = &v
	}
	t.Bfd.PopulateDefaults()
	t.IcmpGeneration.PopulateDefaults()
	t.Icmp6Generation.PopulateDefaults()
	t.KeyExchange.PopulateDefaults()
	t.MaxHistoryKeyRecords.PopulateDefaults()
	t.SecurityPolicy.PopulateDefaults()
	t.TunnelEndpoint.PopulateDefaults()
	for _, e := range t.DestIp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/bfd YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd struct {
	BfdDesignate *bool                                                                       `path:"bfd-designate" module:"nokia-conf"`
	BfdLiveness  *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) GetBfdLiveness() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdDesignate retrieves the value of the leaf BfdDesignate from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdDesignate is set, it can
// safely use t.GetBfdDesignate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdDesignate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) GetBfdDesignate() bool {
	if t == nil || t.BfdDesignate == nil {
		return false
	}
	return *t.BfdDesignate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdDesignate == nil {
		var v bool = false
		t.BfdDesignate = &v
	}
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness struct {
	DestIp      *string `path:"dest-ip" module:"nokia-conf"`
	Interface   *string `path:"interface" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) IsYANGGoStruct() {}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/dest-ip YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_DestIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/icmp6-generation YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation struct {
	PacketTooBig *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig `path:"packet-too-big" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) IsYANGGoStruct() {}

// GetOrCreatePacketTooBig retrieves the value of the PacketTooBig field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) GetOrCreatePacketTooBig() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig {
	if t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	t.PacketTooBig = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig{}
	return t.PacketTooBig
}

// GetPacketTooBig returns the value of the PacketTooBig struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation. If the receiver or the field PacketTooBig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) GetPacketTooBig() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig {
	if t != nil && t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketTooBig.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/icmp6-generation/packet-too-big YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Interval     *uint32                     `path:"interval" module:"nokia-conf"`
	MessageCount *uint32                     `path:"message-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 10
	}
	return *t.Interval
}

// GetMessageCount retrieves the value of the leaf MessageCount from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageCount is set, it can
// safely use t.GetMessageCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) GetMessageCount() uint32 {
	if t == nil || t.MessageCount == nil {
		return 100
	}
	return *t.MessageCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Interval == nil {
		var v uint32 = 10
		t.Interval = &v
	}
	if t.MessageCount == nil {
		var v uint32 = 100
		t.MessageCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_Icmp6Generation_PacketTooBig) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/icmp-generation YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration struct {
	FragRequired *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired `path:"frag-required" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) IsYANGGoStruct() {}

// GetOrCreateFragRequired retrieves the value of the FragRequired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) GetOrCreateFragRequired() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired {
	if t.FragRequired != nil {
		return t.FragRequired
	}
	t.FragRequired = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired{}
	return t.FragRequired
}

// GetFragRequired returns the value of the FragRequired struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration. If the receiver or the field FragRequired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) GetFragRequired() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired {
	if t != nil && t.FragRequired != nil {
		return t.FragRequired
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FragRequired.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/icmp-generation/frag-required YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Interval     *uint32                     `path:"interval" module:"nokia-conf"`
	MessageCount *uint32                     `path:"message-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 10
	}
	return *t.Interval
}

// GetMessageCount retrieves the value of the leaf MessageCount from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageCount is set, it can
// safely use t.GetMessageCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) GetMessageCount() uint32 {
	if t == nil || t.MessageCount == nil {
		return 100
	}
	return *t.MessageCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Interval == nil {
		var v uint32 = 10
		t.Interval = &v
	}
	if t.MessageCount == nil {
		var v uint32 = 100
		t.MessageCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_IcmpGeneration_FragRequired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/key-exchange YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange struct {
	Dynamic *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic `path:"dynamic" module:"nokia-conf" yangPresence:"true"`
	Manual  *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual  `path:"manual" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) IsYANGGoStruct() {}

// GetOrCreateDynamic retrieves the value of the Dynamic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) GetOrCreateDynamic() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic {
	if t.Dynamic != nil {
		return t.Dynamic
	}
	t.Dynamic = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic{}
	return t.Dynamic
}

// GetOrCreateManual retrieves the value of the Manual field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) GetOrCreateManual() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual {
	if t.Manual != nil {
		return t.Manual
	}
	t.Manual = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual{}
	return t.Manual
}

// GetDynamic returns the value of the Dynamic struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange. If the receiver or the field Dynamic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) GetDynamic() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic {
	if t != nil && t.Dynamic != nil {
		return t.Dynamic
	}
	return nil
}

// GetManual returns the value of the Manual struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange. If the receiver or the field Manual is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) GetManual() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual {
	if t != nil && t.Manual != nil {
		return t.Manual
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dynamic.PopulateDefaults()
	t.Manual.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/key-exchange/dynamic YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic struct {
	AutoEstablish  *bool                                                                                `path:"auto-establish" module:"nokia-conf"`
	Cert           *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert `path:"cert" module:"nokia-conf"`
	Id             *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id   `path:"id" module:"nokia-conf"`
	IkePolicy      *uint32                                                                              `path:"ike-policy" module:"nokia-conf"`
	IpsecTransform []uint32                                                                             `path:"ipsec-transform" module:"nokia-conf"`
	PreSharedKey   *string                                                                              `path:"pre-shared-key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) IsYANGGoStruct() {
}

// GetOrCreateCert retrieves the value of the Cert field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetOrCreateCert() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert {
	if t.Cert != nil {
		return t.Cert
	}
	t.Cert = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert{}
	return t.Cert
}

// GetOrCreateId retrieves the value of the Id field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetOrCreateId() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id {
	if t.Id != nil {
		return t.Id
	}
	t.Id = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id{}
	return t.Id
}

// GetCert returns the value of the Cert struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic. If the receiver or the field Cert is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetCert() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert {
	if t != nil && t.Cert != nil {
		return t.Cert
	}
	return nil
}

// GetId returns the value of the Id struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic. If the receiver or the field Id is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetId() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id {
	if t != nil && t.Id != nil {
		return t.Id
	}
	return nil
}

// GetAutoEstablish retrieves the value of the leaf AutoEstablish from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEstablish is set, it can
// safely use t.GetAutoEstablish() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEstablish == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetAutoEstablish() bool {
	if t == nil || t.AutoEstablish == nil {
		return false
	}
	return *t.AutoEstablish
}

// GetIkePolicy retrieves the value of the leaf IkePolicy from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IkePolicy is set, it can
// safely use t.GetIkePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IkePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetIkePolicy() uint32 {
	if t == nil || t.IkePolicy == nil {
		return 0
	}
	return *t.IkePolicy
}

// GetIpsecTransform retrieves the value of the leaf IpsecTransform from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpsecTransform is set, it can
// safely use t.GetIpsecTransform() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpsecTransform == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetIpsecTransform() []uint32 {
	if t == nil || t.IpsecTransform == nil {
		return nil
	}
	return t.IpsecTransform
}

// GetPreSharedKey retrieves the value of the leaf PreSharedKey from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreSharedKey is set, it can
// safely use t.GetPreSharedKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreSharedKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) GetPreSharedKey() string {
	if t == nil || t.PreSharedKey == nil {
		return ""
	}
	return *t.PreSharedKey
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoEstablish == nil {
		var v bool = false
		t.AutoEstablish = &v
	}
	t.Cert.PopulateDefaults()
	t.Id.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/key-exchange/dynamic/cert YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert struct {
	CertProfile        *string                                                                                           `path:"cert-profile" module:"nokia-conf"`
	StatusVerify       *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify `path:"status-verify" module:"nokia-conf"`
	TrustAnchorProfile *string                                                                                           `path:"trust-anchor-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) IsYANGGoStruct() {
}

// GetOrCreateStatusVerify retrieves the value of the StatusVerify field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) GetOrCreateStatusVerify() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify {
	if t.StatusVerify != nil {
		return t.StatusVerify
	}
	t.StatusVerify = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify{}
	return t.StatusVerify
}

// GetStatusVerify returns the value of the StatusVerify struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert. If the receiver or the field StatusVerify is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) GetStatusVerify() *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify {
	if t != nil && t.StatusVerify != nil {
		return t.StatusVerify
	}
	return nil
}

// GetCertProfile retrieves the value of the leaf CertProfile from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfile is set, it can
// safely use t.GetCertProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) GetCertProfile() string {
	if t == nil || t.CertProfile == nil {
		return ""
	}
	return *t.CertProfile
}

// GetTrustAnchorProfile retrieves the value of the leaf TrustAnchorProfile from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrustAnchorProfile is set, it can
// safely use t.GetTrustAnchorProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrustAnchorProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) GetTrustAnchorProfile() string {
	if t == nil || t.TrustAnchorProfile == nil {
		return ""
	}
	return *t.TrustAnchorProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.StatusVerify.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/key-exchange/dynamic/cert/status-verify YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify struct {
	DefaultResult E_NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify_DefaultResult `path:"default-result" module:"nokia-conf"`
	Primary       E_NokiaTypesIpsec_CertRevocationStatus                                                                           `path:"primary" module:"nokia-conf"`
	Secondary     E_NokiaTypesIpsec_CertRevocationStatusWithNone                                                                   `path:"secondary" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) IsYANGGoStruct() {
}

// GetDefaultResult retrieves the value of the leaf DefaultResult from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultResult is set, it can
// safely use t.GetDefaultResult() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultResult == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) GetDefaultResult() E_NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify_DefaultResult {
	if t == nil || t.DefaultResult == 0 {
		return NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify_DefaultResult_revoked
	}
	return t.DefaultResult
}

// GetPrimary retrieves the value of the leaf Primary from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Primary is set, it can
// safely use t.GetPrimary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Primary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) GetPrimary() E_NokiaTypesIpsec_CertRevocationStatus {
	if t == nil || t.Primary == 0 {
		return NokiaTypesIpsec_CertRevocationStatus_crl
	}
	return t.Primary
}

// GetSecondary retrieves the value of the leaf Secondary from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secondary is set, it can
// safely use t.GetSecondary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secondary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) GetSecondary() E_NokiaTypesIpsec_CertRevocationStatusWithNone {
	if t == nil || t.Secondary == 0 {
		return NokiaTypesIpsec_CertRevocationStatusWithNone_none
	}
	return t.Secondary
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultResult == 0 {
		t.DefaultResult = NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify_DefaultResult_revoked
	}
	if t.Primary == 0 {
		t.Primary = NokiaTypesIpsec_CertRevocationStatus_crl
	}
	if t.Secondary == 0 {
		t.Secondary = NokiaTypesIpsec_CertRevocationStatusWithNone_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Cert_StatusVerify) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/key-exchange/dynamic/id YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id struct {
	Fqdn *string `path:"fqdn" module:"nokia-conf"`
	Ipv4 *string `path:"ipv4" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) IsYANGGoStruct() {
}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Dynamic_Id) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/key-exchange/manual YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual struct {
	Keys map[NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys `path:"keys" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) IsYANGGoStruct() {
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key represents the key for list Keys of element /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/key-exchange/manual.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key struct {
	SecurityAssociation uint32                                                                                         `path:"security-association"`
	Direction           E_NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction `path:"direction"`
}

// NewKeys creates a new entry in the Keys list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) NewKeys(SecurityAssociation uint32, Direction E_NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keys == nil {
		t.Keys = make(map[NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys)
	}

	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key{
		SecurityAssociation: SecurityAssociation,
		Direction:           Direction,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Keys[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Keys", key)
	}

	t.Keys[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys{
		SecurityAssociation: &SecurityAssociation,
		Direction:           Direction,
	}

	return t.Keys[key], nil
}

// RenameKeys renames an entry in the list Keys within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) RenameKeys(oldK, newK NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key) error {
	if _, ok := t.Keys[newK]; ok {
		return fmt.Errorf("key %v already exists in Keys", newK)
	}

	e, ok := t.Keys[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Keys", oldK)
	}
	e.SecurityAssociation = &newK.SecurityAssociation
	e.Direction = newK.Direction

	t.Keys[newK] = e
	delete(t.Keys, oldK)
	return nil
}

// GetOrCreateKeys retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) GetOrCreateKeys(SecurityAssociation uint32, Direction E_NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction) *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys {

	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key{
		SecurityAssociation: SecurityAssociation,
		Direction:           Direction,
	}

	if v, ok := t.Keys[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKeys(SecurityAssociation, Direction)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKeys got unexpected error: %v", err))
	}
	return v
}

// GetKeys retrieves the value with the specified key from
// the Keys map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) GetKeys(SecurityAssociation uint32, Direction E_NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction) *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key{
		SecurityAssociation: SecurityAssociation,
		Direction:           Direction,
	}

	if lm, ok := t.Keys[key]; ok {
		return lm
	}
	return nil
}

// DeleteKeys deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) DeleteKeys(SecurityAssociation uint32, Direction E_NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction) {
	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key{
		SecurityAssociation: SecurityAssociation,
		Direction:           Direction,
	}

	delete(t.Keys, key)
}

// AppendKeys appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys struct to the
// list Keys of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) AppendKeys(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) error {
	if v.SecurityAssociation == nil {
		return fmt.Errorf("invalid nil key for SecurityAssociation")
	}

	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key{
		SecurityAssociation: *v.SecurityAssociation,
		Direction:           v.Direction,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keys == nil {
		t.Keys = make(map[NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Key]*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys)
	}

	if _, ok := t.Keys[key]; ok {
		return fmt.Errorf("duplicate key for list Keys %v", key)
	}

	t.Keys[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Keys {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/key-exchange/manual/keys YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys struct {
	ApplyGroups         []string                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	AuthenticationKey   *string                                                                                        `path:"authentication-key" module:"nokia-conf"`
	Direction           E_NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction `path:"direction" module:"nokia-conf"`
	EncryptionKey       *string                                                                                        `path:"encryption-key" module:"nokia-conf"`
	IpsecTransform      *uint32                                                                                        `path:"ipsec-transform" module:"nokia-conf"`
	SecurityAssociation *uint32                                                                                        `path:"security-association" module:"nokia-conf"`
	Spi                 *uint32                                                                                        `path:"spi" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetDirection() E_NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys_Direction {
	if t == nil || t.Direction == 0 {
		return 0
	}
	return t.Direction
}

// GetEncryptionKey retrieves the value of the leaf EncryptionKey from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncryptionKey is set, it can
// safely use t.GetEncryptionKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncryptionKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetEncryptionKey() string {
	if t == nil || t.EncryptionKey == nil {
		return ""
	}
	return *t.EncryptionKey
}

// GetIpsecTransform retrieves the value of the leaf IpsecTransform from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpsecTransform is set, it can
// safely use t.GetIpsecTransform() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpsecTransform == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetIpsecTransform() uint32 {
	if t == nil || t.IpsecTransform == nil {
		return 0
	}
	return *t.IpsecTransform
}

// GetSecurityAssociation retrieves the value of the leaf SecurityAssociation from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityAssociation is set, it can
// safely use t.GetSecurityAssociation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityAssociation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetSecurityAssociation() uint32 {
	if t == nil || t.SecurityAssociation == nil {
		return 0
	}
	return *t.SecurityAssociation
}

// GetSpi retrieves the value of the leaf Spi from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Spi is set, it can
// safely use t.GetSpi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Spi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) GetSpi() uint32 {
	if t == nil || t.Spi == nil {
		return 0
	}
	return *t.Spi
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) ΛListKeyMap() (map[string]interface{}, error) {

	if t.SecurityAssociation == nil {
		return nil, fmt.Errorf("nil value for key SecurityAssociation")
	}

	return map[string]interface{}{
		"direction":            t.Direction,
		"security-association": *t.SecurityAssociation,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_KeyExchange_Manual_Keys) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/max-history-key-records YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords struct {
	Esp *uint32 `path:"esp" module:"nokia-conf"`
	Ike *uint32 `path:"ike" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) IsYANGGoStruct() {
}

// GetEsp retrieves the value of the leaf Esp from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esp is set, it can
// safely use t.GetEsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) GetEsp() uint32 {
	if t == nil || t.Esp == nil {
		return 0
	}
	return *t.Esp
}

// GetIke retrieves the value of the leaf Ike from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ike is set, it can
// safely use t.GetIke() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ike == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) GetIke() uint32 {
	if t == nil || t.Ike == nil {
		return 0
	}
	return *t.Ike
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_MaxHistoryKeyRecords) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/security-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy struct {
	Id          *uint32 `path:"id" module:"nokia-conf"`
	StrictMatch *bool   `path:"strict-match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetStrictMatch retrieves the value of the leaf StrictMatch from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictMatch is set, it can
// safely use t.GetStrictMatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictMatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) GetStrictMatch() bool {
	if t == nil || t.StrictMatch == nil {
		return false
	}
	return *t.StrictMatch
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.StrictMatch == nil {
		var v bool = false
		t.StrictMatch = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_SecurityPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint represents the /nokia-conf/configure/service/vprn/interface/sap/ipsec-tunnel/tunnel-endpoint YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint struct {
	DeliveryService     *string `path:"delivery-service" module:"nokia-conf"`
	LocalGatewayAddress *string `path:"local-gateway-address" module:"nokia-conf"`
	RemoteIpAddress     *string `path:"remote-ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) IsYANGGoStruct() {}

// GetDeliveryService retrieves the value of the leaf DeliveryService from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeliveryService is set, it can
// safely use t.GetDeliveryService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeliveryService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) GetDeliveryService() string {
	if t == nil || t.DeliveryService == nil {
		return ""
	}
	return *t.DeliveryService
}

// GetLocalGatewayAddress retrieves the value of the leaf LocalGatewayAddress from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalGatewayAddress is set, it can
// safely use t.GetLocalGatewayAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalGatewayAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) GetLocalGatewayAddress() string {
	if t == nil || t.LocalGatewayAddress == nil {
		return ""
	}
	return *t.LocalGatewayAddress
}

// GetRemoteIpAddress retrieves the value of the leaf RemoteIpAddress from the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpAddress is set, it can
// safely use t.GetRemoteIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) GetRemoteIpAddress() string {
	if t == nil || t.RemoteIpAddress == nil {
		return ""
	}
	return *t.RemoteIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_IpsecTunnel_TunnelEndpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag represents the /nokia-conf/configure/service/vprn/interface/sap/lag YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag struct {
	LinkMapProfile *int32                                                          `path:"link-map-profile" module:"nokia-conf"`
	PerLinkHash    *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash `path:"per-link-hash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag) IsYANGGoStruct() {}

// GetOrCreatePerLinkHash retrieves the value of the PerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag) GetOrCreatePerLinkHash() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash {
	if t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	t.PerLinkHash = &NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash{}
	return t.PerLinkHash
}

// GetPerLinkHash returns the value of the PerLinkHash struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag. If the receiver or the field PerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag) GetPerLinkHash() *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash {
	if t != nil && t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	return nil
}

// GetLinkMapProfile retrieves the value of the leaf LinkMapProfile from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMapProfile is set, it can
// safely use t.GetLinkMapProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMapProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag) GetLinkMapProfile() int32 {
	if t == nil || t.LinkMapProfile == nil {
		return 0
	}
	return *t.LinkMapProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerLinkHash.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash represents the /nokia-conf/configure/service/vprn/interface/sap/lag/per-link-hash YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash struct {
	Class  *int32 `path:"class" module:"nokia-conf"`
	Weight *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash) IsYANGGoStruct() {}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash) GetClass() int32 {
	if t == nil || t.Class == nil {
		return 1
	}
	return *t.Class
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Class == nil {
		var v int32 = 1
		t.Class = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_Lag_PerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost represents the /nokia-conf/configure/service/vprn/interface/sap/static-host YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost struct {
	Ipv4 map[NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key represents the key for list Ipv4 of element /nokia-conf/configure/service/vprn/interface/sap/static-host.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key struct {
	Ip  string `path:"ip"`
	Mac string `path:"mac"`
}

// NewIpv4 creates a new entry in the Ipv4 list of the
// NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost) NewIpv4(Ip string, Mac string) (*NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4)
	}

	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4", key)
	}

	t.Ipv4[key] = &NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4{
		Ip:  &Ip,
		Mac: &Mac,
	}

	return t.Ipv4[key], nil
}

// RenameIpv4 renames an entry in the list Ipv4 within
// the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost) RenameIpv4(oldK, newK NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key) error {
	if _, ok := t.Ipv4[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4", newK)
	}

	e, ok := t.Ipv4[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4", oldK)
	}
	e.Ip = &newK.Ip
	e.Mac = &newK.Mac

	t.Ipv4[newK] = e
	delete(t.Ipv4, oldK)
	return nil
}

// GetOrCreateIpv4 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost) GetOrCreateIpv4(Ip string, Mac string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4 {

	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	if v, ok := t.Ipv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4(Ip, Mac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4 got unexpected error: %v", err))
	}
	return v
}

// GetIpv4 retrieves the value with the specified key from
// the Ipv4 map field of NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost) GetIpv4(Ip string, Mac string) *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4 {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	if lm, ok := t.Ipv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost) DeleteIpv4(Ip string, Mac string) {
	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	delete(t.Ipv4, key)
}

// AppendIpv4 appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4 struct to the
// list Ipv4 of NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost) AppendIpv4(v *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key for Ip")
	}

	if v.Mac == nil {
		return fmt.Errorf("invalid nil key for Mac")
	}

	key := NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key{
		Ip:  *v.Ip,
		Mac: *v.Mac,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4)
	}

	if _, ok := t.Ipv4[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4 %v", key)
	}

	t.Ipv4[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4 represents the /nokia-conf/configure/service/vprn/interface/sap/static-host/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	AncpString         *string                                                                      `path:"ancp-string" module:"nokia-conf"`
	AppProfile         *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile   `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	IntDestId          *string                                                                      `path:"int-dest-id" module:"nokia-conf"`
	Ip                 *string                                                                      `path:"ip" module:"nokia-conf"`
	Mac                *string                                                                      `path:"mac" module:"nokia-conf"`
	SlaProfile         *string                                                                      `path:"sla-profile" module:"nokia-conf"`
	SubProfile         *string                                                                      `path:"sub-profile" module:"nokia-conf"`
	SubscriberId       *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) IsYANGGoStruct() {}

// GetOrCreateAppProfile retrieves the value of the AppProfile field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetOrCreateAppProfile() *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile {
	if t.AppProfile != nil {
		return t.AppProfile
	}
	t.AppProfile = &NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile{}
	return t.AppProfile
}

// GetOrCreateSubscriberId retrieves the value of the SubscriberId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetOrCreateSubscriberId() *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId {
	if t.SubscriberId != nil {
		return t.SubscriberId
	}
	t.SubscriberId = &NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId{}
	return t.SubscriberId
}

// GetAppProfile returns the value of the AppProfile struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4. If the receiver or the field AppProfile is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetAppProfile() *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile {
	if t != nil && t.AppProfile != nil {
		return t.AppProfile
	}
	return nil
}

// GetSubscriberId returns the value of the SubscriberId struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4. If the receiver or the field SubscriberId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetSubscriberId() *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId {
	if t != nil && t.SubscriberId != nil {
		return t.SubscriberId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAncpString retrieves the value of the leaf AncpString from the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpString is set, it can
// safely use t.GetAncpString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetAncpString() string {
	if t == nil || t.AncpString == nil {
		return ""
	}
	return *t.AncpString
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIntDestId retrieves the value of the leaf IntDestId from the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntDestId is set, it can
// safely use t.GetIntDestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntDestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetIntDestId() string {
	if t == nil || t.IntDestId == nil {
		return ""
	}
	return *t.IntDestId
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.AppProfile.PopulateDefaults()
	t.SubscriberId.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"ip":  *t.Ip,
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile represents the /nokia-conf/configure/service/vprn/interface/sap/static-host/ipv4/app-profile YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile struct {
	Profile *string `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) IsYANGGoStruct() {}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) GetProfile() string {
	if t == nil || t.Profile == nil {
		return ""
	}
	return *t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_AppProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId represents the /nokia-conf/configure/service/vprn/interface/sap/static-host/ipv4/subscriber-id YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId struct {
	String   *string   `path:"string" module:"nokia-conf"`
	UseSapId YANGEmpty `path:"use-sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) IsYANGGoStruct() {
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetUseSapId retrieves the value of the leaf UseSapId from the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseSapId is set, it can
// safely use t.GetUseSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseSapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) GetUseSapId() YANGEmpty {
	if t == nil || t.UseSapId == false {
		return false
	}
	return t.UseSapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_StaticHost_Ipv4_SubscriberId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy represents the /nokia-conf/configure/service/vprn/interface/sap/transit-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy struct {
	Ip     *uint32 `path:"ip" module:"nokia-conf"`
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy) GetIp() uint32 {
	if t == nil || t.Ip == nil {
		return 0
	}
	return *t.Ip
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy.
func (*NokiaConf_Configure_Service_Vprn_Interface_Sap_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp struct {
	Aarp               *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp          `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AccountingPolicy   *uint32                                                            `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	AppProfile         *string                                                            `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Bfd                *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd           `path:"bfd" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness   `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate        *string                                                            `path:"bfd-template" module:"nokia-conf"`
	CollectStats       *bool                                                              `path:"collect-stats" module:"nokia-conf"`
	ControlWord        *bool                                                              `path:"control-word" module:"nokia-conf"`
	CpuProtection      *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection `path:"cpu-protection" module:"nokia-conf"`
	Description        *string                                                            `path:"description" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress        `path:"egress" module:"nokia-conf"`
	EntropyLabel       YANGEmpty                                                          `path:"entropy-label" module:"nokia-conf"`
	EthCfm             *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm        `path:"eth-cfm" module:"nokia-conf"`
	HashLabel          *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel     `path:"hash-label" module:"nokia-conf" yangPresence:"true"`
	Ingress            *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress       `path:"ingress" module:"nokia-conf"`
	SdpBindId          *string                                                            `path:"sdp-bind-id" module:"nokia-conf"`
	TransitPolicy      *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
	VcType             E_NokiaTypesServices_IesSdpBindVcType                              `path:"vc-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetOrCreateAarp() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp{}
	return t.Aarp
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetOrCreateBfd() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd{}
	return t.Bfd
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetOrCreateCpuProtection() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm{}
	return t.EthCfm
}

// GetOrCreateHashLabel retrieves the value of the HashLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetOrCreateHashLabel() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel {
	if t.HashLabel != nil {
		return t.HashLabel
	}
	t.HashLabel = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel{}
	return t.HashLabel
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetOrCreateTransitPolicy() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy{}
	return t.TransitPolicy
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetAarp() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetBfd() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetBfdLiveness() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetCpuProtection() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetEgress() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetEthCfm() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetHashLabel returns the value of the HashLabel struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp. If the receiver or the field HashLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetHashLabel() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel {
	if t != nil && t.HashLabel != nil {
		return t.HashLabel
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetIngress() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetTransitPolicy() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetEntropyLabel() YANGEmpty {
	if t == nil || t.EntropyLabel == false {
		return false
	}
	return t.EntropyLabel
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) GetVcType() E_NokiaTypesServices_IesSdpBindVcType {
	if t == nil || t.VcType == 0 {
		return NokiaTypesServices_IesSdpBindVcType_ether
	}
	return t.VcType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.VcType == 0 {
		t.VcType = NokiaTypesServices_IesSdpBindVcType_ether
	}
	t.Aarp.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.HashLabel.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/aarp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp struct {
	Id   *uint32                                              `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_DualHomingBsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp) GetType() E_NokiaTypesServices_DualHomingBsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/bfd YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd struct {
	BfdLiveness    *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate    *string                                                              `path:"bfd-template" module:"nokia-conf"`
	FailureAction  E_NokiaTypesServices_SbindBfdFailAction                              `path:"failure-action" module:"nokia-conf"`
	WaitForUpTimer *uint32                                                              `path:"wait-for-up-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd) GetBfdLiveness() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetFailureAction retrieves the value of the leaf FailureAction from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureAction is set, it can
// safely use t.GetFailureAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd) GetFailureAction() E_NokiaTypesServices_SbindBfdFailAction {
	if t == nil || t.FailureAction == 0 {
		return NokiaTypesServices_SbindBfdFailAction_none
	}
	return t.FailureAction
}

// GetWaitForUpTimer retrieves the value of the leaf WaitForUpTimer from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForUpTimer is set, it can
// safely use t.GetWaitForUpTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForUpTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd) GetWaitForUpTimer() uint32 {
	if t == nil || t.WaitForUpTimer == nil {
		return 0
	}
	return *t.WaitForUpTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FailureAction == 0 {
		t.FailureAction = NokiaTypesServices_SbindBfdFailAction_none
	}
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/cpu-protection YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	IpSrcMonitoring  YANGEmpty                                                                           `path:"ip-src-monitoring" module:"nokia-conf"`
	MacMonitoring    YANGEmpty                                                                           `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                             `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetIpSrcMonitoring retrieves the value of the leaf IpSrcMonitoring from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpSrcMonitoring is set, it can
// safely use t.GetIpSrcMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpSrcMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection) GetIpSrcMonitoring() YANGEmpty {
	if t == nil || t.IpSrcMonitoring == false {
		return false
	}
	return t.IpSrcMonitoring
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {
}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress struct {
	Filter  *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                            `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress) GetQos() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos struct {
	Network *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos) GetNetwork() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/egress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network struct {
	PolicyName        *string                                                                                   `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm struct {
	ApplyGroups          []string                                                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectLmmFcStats    *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats                                                          `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats      *bool                                                                                                                                  `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                  map[NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep `path:"mep" module:"nokia-conf"`
	SquelchIngressLevels []uint32                                                                                                                               `path:"squelch-ingress-levels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/service/vprn/interface/spoke-sdp/eth-cfm.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep {

	key := NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) AppendMep(v *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	Ais                  *bool                                                                             `path:"ais" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                                             `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                            `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                           `path:"ccm-padding-size" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                           `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                           `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                            `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                           `path:"ma-admin-name" module:"nokia-conf"`
	MdAdminName          *string                                                                           `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                                           `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                           `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetAis() bool {
	if t == nil || t.Ais == nil {
		return false
	}
	return *t.Ais
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ais == nil {
		var v bool = false
		t.Ais = &v
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {
}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                             `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                        `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {
}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/hash-label YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel struct {
	SignalCapability YANGEmpty `path:"signal-capability" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel) IsYANGGoStruct() {}

// GetSignalCapability retrieves the value of the leaf SignalCapability from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalCapability is set, it can
// safely use t.GetSignalCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel) GetSignalCapability() YANGEmpty {
	if t == nil || t.SignalCapability == false {
		return false
	}
	return t.SignalCapability
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_HashLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                             `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress) GetQos() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos struct {
	Network *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                                  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy represents the /nokia-conf/configure/service/vprn/interface/spoke-sdp/transit-policy YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy struct {
	Ip     *uint32 `path:"ip" module:"nokia-conf"`
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy) GetIp() uint32 {
	if t == nil || t.Ip == nil {
		return 0
	}
	return *t.Ip
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy.
func (*NokiaConf_Configure_Service_Vprn_Interface_SpokeSdp_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Vpls represents the /nokia-conf/configure/service/vprn/interface/vpls YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Vpls struct {
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress     `path:"egress" module:"nokia-conf"`
	Evpn               *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn       `path:"evpn" module:"nokia-conf"`
	EvpnTunnel         *NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel `path:"evpn-tunnel" module:"nokia-conf" yangPresence:"true"`
	Ingress            *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress    `path:"ingress" module:"nokia-conf"`
	VplsName           *string                                                     `path:"vpls-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Vpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) GetOrCreateEgress() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress{}
	return t.Egress
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) GetOrCreateEvpn() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn{}
	return t.Evpn
}

// GetOrCreateEvpnTunnel retrieves the value of the EvpnTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) GetOrCreateEvpnTunnel() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel {
	if t.EvpnTunnel != nil {
		return t.EvpnTunnel
	}
	t.EvpnTunnel = &NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel{}
	return t.EvpnTunnel
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) GetOrCreateIngress() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Vpls. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) GetEgress() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Vpls. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) GetEvpn() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetEvpnTunnel returns the value of the EvpnTunnel struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Vpls. If the receiver or the field EvpnTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) GetEvpnTunnel() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel {
	if t != nil && t.EvpnTunnel != nil {
		return t.EvpnTunnel
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Vpls. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) GetIngress() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetVplsName retrieves the value of the leaf VplsName from the NokiaConf_Configure_Service_Vprn_Interface_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VplsName is set, it can
// safely use t.GetVplsName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VplsName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) GetVplsName() string {
	if t == nil || t.VplsName == nil {
		return ""
	}
	return *t.VplsName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Vpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.EvpnTunnel.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Vpls struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VplsName == nil {
		return nil, fmt.Errorf("nil value for key VplsName")
	}

	return map[string]interface{}{
		"vpls-name": *t.VplsName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Vpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Vpls.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress represents the /nokia-conf/configure/service/vprn/interface/vpls/egress YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress struct {
	ReclassifyUsingQos   *string                                                                      `path:"reclassify-using-qos" module:"nokia-conf"`
	RoutedOverrideFilter *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter `path:"routed-override-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress) IsYANGGoStruct() {}

// GetOrCreateRoutedOverrideFilter retrieves the value of the RoutedOverrideFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress) GetOrCreateRoutedOverrideFilter() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter {
	if t.RoutedOverrideFilter != nil {
		return t.RoutedOverrideFilter
	}
	t.RoutedOverrideFilter = &NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter{}
	return t.RoutedOverrideFilter
}

// GetRoutedOverrideFilter returns the value of the RoutedOverrideFilter struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress. If the receiver or the field RoutedOverrideFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress) GetRoutedOverrideFilter() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter {
	if t != nil && t.RoutedOverrideFilter != nil {
		return t.RoutedOverrideFilter
	}
	return nil
}

// GetReclassifyUsingQos retrieves the value of the leaf ReclassifyUsingQos from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReclassifyUsingQos is set, it can
// safely use t.GetReclassifyUsingQos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReclassifyUsingQos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress) GetReclassifyUsingQos() string {
	if t == nil || t.ReclassifyUsingQos == nil {
		return ""
	}
	return *t.ReclassifyUsingQos
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RoutedOverrideFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter represents the /nokia-conf/configure/service/vprn/interface/vpls/egress/routed-override-filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Egress_RoutedOverrideFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn represents the /nokia-conf/configure/service/vprn/interface/vpls/evpn YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn struct {
	Arp *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp `path:"arp" module:"nokia-conf"`
	Nd  *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd  `path:"nd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn) IsYANGGoStruct() {}

// GetOrCreateArp retrieves the value of the Arp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn) GetOrCreateArp() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp {
	if t.Arp != nil {
		return t.Arp
	}
	t.Arp = &NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp{}
	return t.Arp
}

// GetOrCreateNd retrieves the value of the Nd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn) GetOrCreateNd() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd {
	if t.Nd != nil {
		return t.Nd
	}
	t.Nd = &NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd{}
	return t.Nd
}

// GetArp returns the value of the Arp struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn. If the receiver or the field Arp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn) GetArp() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp {
	if t != nil && t.Arp != nil {
		return t.Arp
	}
	return nil
}

// GetNd returns the value of the Nd struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn. If the receiver or the field Nd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn) GetNd() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd {
	if t != nil && t.Nd != nil {
		return t.Nd
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Arp.PopulateDefaults()
	t.Nd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel represents the /nokia-conf/configure/service/vprn/interface/vpls/evpn-tunnel YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel struct {
	Ipv6GatewayAddress           E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel_Ipv6GatewayAddress `path:"ipv6-gateway-address" module:"nokia-conf"`
	SupplementaryBroadcastDomain *bool                                                                           `path:"supplementary-broadcast-domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel) IsYANGGoStruct() {}

// GetIpv6GatewayAddress retrieves the value of the leaf Ipv6GatewayAddress from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6GatewayAddress is set, it can
// safely use t.GetIpv6GatewayAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6GatewayAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel) GetIpv6GatewayAddress() E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel_Ipv6GatewayAddress {
	if t == nil || t.Ipv6GatewayAddress == 0 {
		return NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel_Ipv6GatewayAddress_ip
	}
	return t.Ipv6GatewayAddress
}

// GetSupplementaryBroadcastDomain retrieves the value of the leaf SupplementaryBroadcastDomain from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SupplementaryBroadcastDomain is set, it can
// safely use t.GetSupplementaryBroadcastDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SupplementaryBroadcastDomain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel) GetSupplementaryBroadcastDomain() bool {
	if t == nil || t.SupplementaryBroadcastDomain == nil {
		return false
	}
	return *t.SupplementaryBroadcastDomain
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv6GatewayAddress == 0 {
		t.Ipv6GatewayAddress = NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel_Ipv6GatewayAddress_ip
	}
	if t.SupplementaryBroadcastDomain == nil {
		var v bool = false
		t.SupplementaryBroadcastDomain = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_EvpnTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp represents the /nokia-conf/configure/service/vprn/interface/vpls/evpn/arp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp struct {
	Advertise              map[E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType]*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise `path:"advertise" module:"nokia-conf"`
	FloodGarpAndUnknownReq *bool                                                                                                                                                  `path:"flood-garp-and-unknown-req" module:"nokia-conf"`
	LearnDynamic           *bool                                                                                                                                                  `path:"learn-dynamic" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) IsYANGGoStruct() {}

// NewAdvertise creates a new entry in the Advertise list of the
// NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) NewAdvertise(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType) (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType]*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Advertise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Advertise", key)
	}

	t.Advertise[key] = &NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise{
		RouteType: RouteType,
	}

	return t.Advertise[key], nil
}

// RenameAdvertise renames an entry in the list Advertise within
// the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) RenameAdvertise(oldK, newK E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType) error {
	if _, ok := t.Advertise[newK]; ok {
		return fmt.Errorf("key %v already exists in Advertise", newK)
	}

	e, ok := t.Advertise[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Advertise", oldK)
	}
	e.RouteType = newK

	t.Advertise[newK] = e
	delete(t.Advertise, oldK)
	return nil
}

// GetOrCreateAdvertise retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) GetOrCreateAdvertise(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType) *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise {

	key := RouteType

	if v, ok := t.Advertise[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdvertise(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdvertise got unexpected error: %v", err))
	}
	return v
}

// GetAdvertise retrieves the value with the specified key from
// the Advertise map field of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) GetAdvertise(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType) *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise {

	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Advertise[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdvertise deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) DeleteAdvertise(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType) {
	key := RouteType

	delete(t.Advertise, key)
}

// AppendAdvertise appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise struct to the
// list Advertise of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) AppendAdvertise(v *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType]*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise)
	}

	if _, ok := t.Advertise[key]; ok {
		return fmt.Errorf("duplicate key for list Advertise %v", key)
	}

	t.Advertise[key] = v
	return nil
}

// GetFloodGarpAndUnknownReq retrieves the value of the leaf FloodGarpAndUnknownReq from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FloodGarpAndUnknownReq is set, it can
// safely use t.GetFloodGarpAndUnknownReq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FloodGarpAndUnknownReq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) GetFloodGarpAndUnknownReq() bool {
	if t == nil || t.FloodGarpAndUnknownReq == nil {
		return true
	}
	return *t.FloodGarpAndUnknownReq
}

// GetLearnDynamic retrieves the value of the leaf LearnDynamic from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnDynamic is set, it can
// safely use t.GetLearnDynamic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnDynamic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) GetLearnDynamic() bool {
	if t == nil || t.LearnDynamic == nil {
		return true
	}
	return *t.LearnDynamic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FloodGarpAndUnknownReq == nil {
		var v bool = true
		t.FloodGarpAndUnknownReq = &v
	}
	if t.LearnDynamic == nil {
		var v bool = true
		t.LearnDynamic = &v
	}
	for _, e := range t.Advertise {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise represents the /nokia-conf/configure/service/vprn/interface/vpls/evpn/arp/advertise YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise struct {
	ApplyGroups        []string                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteTag           *uint32                                                                        `path:"route-tag" module:"nokia-conf"`
	RouteType          E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType `path:"route-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) GetRouteType() E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Arp_Advertise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd represents the /nokia-conf/configure/service/vprn/interface/vpls/evpn/nd YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd struct {
	Advertise    map[E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType]*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise `path:"advertise" module:"nokia-conf"`
	LearnDynamic *bool                                                                                                                                                `path:"learn-dynamic" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) IsYANGGoStruct() {}

// NewAdvertise creates a new entry in the Advertise list of the
// NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) NewAdvertise(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType) (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType]*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise)
	}

	key := RouteType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Advertise[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Advertise", key)
	}

	t.Advertise[key] = &NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise{
		RouteType: RouteType,
	}

	return t.Advertise[key], nil
}

// RenameAdvertise renames an entry in the list Advertise within
// the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) RenameAdvertise(oldK, newK E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType) error {
	if _, ok := t.Advertise[newK]; ok {
		return fmt.Errorf("key %v already exists in Advertise", newK)
	}

	e, ok := t.Advertise[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Advertise", oldK)
	}
	e.RouteType = newK

	t.Advertise[newK] = e
	delete(t.Advertise, oldK)
	return nil
}

// GetOrCreateAdvertise retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) GetOrCreateAdvertise(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType) *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise {

	key := RouteType

	if v, ok := t.Advertise[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdvertise(RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdvertise got unexpected error: %v", err))
	}
	return v
}

// GetAdvertise retrieves the value with the specified key from
// the Advertise map field of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) GetAdvertise(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType) *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise {

	if t == nil {
		return nil
	}

	key := RouteType

	if lm, ok := t.Advertise[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdvertise deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) DeleteAdvertise(RouteType E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType) {
	key := RouteType

	delete(t.Advertise, key)
}

// AppendAdvertise appends the supplied NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise struct to the
// list Advertise of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) AppendAdvertise(v *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) error {
	key := v.RouteType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Advertise == nil {
		t.Advertise = make(map[E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType]*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise)
	}

	if _, ok := t.Advertise[key]; ok {
		return fmt.Errorf("duplicate key for list Advertise %v", key)
	}

	t.Advertise[key] = v
	return nil
}

// GetLearnDynamic retrieves the value of the leaf LearnDynamic from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnDynamic is set, it can
// safely use t.GetLearnDynamic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnDynamic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) GetLearnDynamic() bool {
	if t == nil || t.LearnDynamic == nil {
		return true
	}
	return *t.LearnDynamic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LearnDynamic == nil {
		var v bool = true
		t.LearnDynamic = &v
	}
	for _, e := range t.Advertise {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise represents the /nokia-conf/configure/service/vprn/interface/vpls/evpn/nd/advertise YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise struct {
	ApplyGroups        []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	RouteTag           *uint32                                                                       `path:"route-tag" module:"nokia-conf"`
	RouteType          E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType `path:"route-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) GetRouteType() E_NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Evpn_Nd_Advertise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress represents the /nokia-conf/configure/service/vprn/interface/vpls/ingress YANG schema element.
type NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress struct {
	RoutedOverrideFilter *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter `path:"routed-override-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress) IsYANGGoStruct() {}

// GetOrCreateRoutedOverrideFilter retrieves the value of the RoutedOverrideFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress) GetOrCreateRoutedOverrideFilter() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter {
	if t.RoutedOverrideFilter != nil {
		return t.RoutedOverrideFilter
	}
	t.RoutedOverrideFilter = &NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter{}
	return t.RoutedOverrideFilter
}

// GetRoutedOverrideFilter returns the value of the RoutedOverrideFilter struct pointer
// from NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress. If the receiver or the field RoutedOverrideFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress) GetRoutedOverrideFilter() *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress_RoutedOverrideFilter {
	if t != nil && t.RoutedOverrideFilter != nil {
		return t.RoutedOverrideFilter
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RoutedOverrideFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress.
func (*NokiaConf_Configure_Service_Vprn_Interface_Vpls_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}
